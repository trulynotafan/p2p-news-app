const b4a = require('b4a')
const BlindPairing = require('blind-pairing')
const extend = require('@geut/sodium-javascript-plus/extend')
const sodium = extend(require('sodium-universal'))

let current_member = null
let current_candidate = null

// Create invite for sharing drive access
async function create_invite(drive_key, autobase_key) {
  console.log('Creating invite code...')
  const invite = BlindPairing.createInvite(drive_key)
  const invite_code = b4a.toString(invite.invite, 'base64')
  console.log('Invite code created successfully')
  return { invite_code, invite, autobase_key }
}

// Setup member to handle join requests
async function setup_member(drive, blog_autobase, swarm, invite) {
  const blind_pairing = new BlindPairing(swarm)
  await blind_pairing.ready()
  
  current_member = blind_pairing.addMember({
    discoveryKey: drive.base.discoveryKey,
    onadd: async (request) => {
      try {
        console.log('Pairing request received')
        await request.open(invite.publicKey)
        console.log('Pairing request opened')
        
        const user_data = request.userData
        
        const metadata_writer_key = user_data.slice(0, 32)
        const drive_writer_key = user_data.slice(32, 64)
        
        const metadata_writer_hex = b4a.toString(metadata_writer_key, 'hex')
        await blog_autobase.append({ addWriter: metadata_writer_hex })
        await blog_autobase.update()
        
        const drive_writer_hex = b4a.toString(drive_writer_key, 'hex')
        await drive.add_writer(drive_writer_hex)

        console.log('Added as writer in the autobase and autodrive')
        
        request.confirm({ 
          key: drive.base.key,
          encryptionKey: blog_autobase.key
        })
        
        console.log('Device paired successfully')
        
      } catch (error) {
        console.error('Pairing error:', error.message)
      }
    }
  })
  
  await current_member.ready()
  current_member.announce()
  return current_member
}

// Join existing drive using invite
async function join_with_invite(invite_code, swarm, store) {
  const blind_pairing = new BlindPairing(swarm)
  await blind_pairing.ready()
  
  const invite_buffer = b4a.from(invite_code, 'base64')
  
  const metadata_store = store.namespace('blog-metadata')
  const drive_store = store.namespace('blog-files')
  
  const { getLocalCore } = require('../../autodrive')
  
  const metadata_core = getLocalCore(metadata_store)
  const drive_core = getLocalCore(drive_store)
  
  await Promise.all([metadata_core.ready(), drive_core.ready()])
  
  const metadata_writer_key = metadata_core.key
  const drive_writer_key = drive_core.key
  
  await Promise.all([metadata_core.close(), drive_core.close()])
  
  const user_data = b4a.concat([metadata_writer_key, drive_writer_key])
  
  console.log('Joining pairing network...')
  
  return new Promise((resolve, reject) => {
    current_candidate = blind_pairing.addCandidate({
      invite: invite_buffer,
      userData: user_data,
      onadd: async (result) => {
        try {
          console.log('Successfully joined network')
          resolve({
            drive_key: result.key,
            autobase_key: result.encryptionKey,
            metadata_store,
            drive_store
          })
        } catch (error) {
          console.error('Join error:', error.message)
          reject(error)
        }
      }
    })
    
    current_candidate.ready().catch(reject)
  })
}


module.exports = {
  create_invite,
  setup_member,
  join_with_invite
}
