(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports = 'AGFzbQEAAAABYgxgAAF/YAJ/fwF/YAAAYAJ/fwBgCH9/f35/fn9/AGACf34AYAl/f39/fn9+f38Bf2AJf39/fn9+f39/AX9gA39/fgF/YAZ/f35/f38Bf2AIf39+f39+f38Bf2AEf35/fwF/ApMCCQNlbnYiY3J5cHRvX29uZXRpbWVhdXRoX3BvbHkxMzA1X3VwZGF0ZQAIA2Vudg5zb2RpdW1fbWVtemVybwADA2VudiJjcnlwdG9fc3RyZWFtX2NoYWNoYTIwX2lldGZfeG9yX2ljAAkDZW52G2NyeXB0b19zdHJlYW1fY2hhY2hhMjBfaWV0ZgALA2VudiFjcnlwdG9fb25ldGltZWF1dGhfcG9seTEzMDVfZmluYWwAAQNlbnYgY3J5cHRvX29uZXRpbWVhdXRoX3BvbHkxMzA1X2luaXQAAQNlbnYQY3J5cHRvX3ZlcmlmeV8xNgABA2Vudg1zb2RpdW1fbWlzdXNlAAIDZW52Bm1lbW9yeQIAgAIDDAsFAgAAAAAGCgcEAwYJAX8BQbCYgAILB5YCByljcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZW5jcnlwdAAQKWNyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0AA4qY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWJ5dGVzAA0rY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX25wdWJieXRlcwAMK2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9uc2VjYnl0ZXMACyhjcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfYWJ5dGVzAAoGX3N0YXJ0AAkK3gcLCQAgACABNwAACwMAAQsEAEEQCwQAQQALBABBDAsEAEEgC0IAQX8hAiAEQhBaBEAgACADIARCcHwgAyAEp2pBcGogBSAGIAcgCBAPIQILIAEEQCABQgAgBEJwfCACGzcDAAsgAguIAgEBfyMAQeACayIIJAAgCEEgakLAACAGIAcQAxogCEHgAGogCEEgahAFGiAIQSBqQcAAEAEgCEHgAGogBCAFEAAaIAhB4ABqQaCUwAFCACAFfUIPgxAAGiAIQeAAaiABIAIQABogCEHgAGpBoJTAAUIAIAJ9Qg+DEAAaIAhBGGogBRAIIAhB4ABqIAhBGGpCCBAAGiAIQRhqIAIQCCAIQeAAaiAIQRhqQggQABogCEHgAGogCBAEGiAIQeAAakGAAhABIAggAxAGIQMgCEEQEAECQCAARQ0AIAMEQCAAIAKnEBJBfyEDDAELIAAgASACIAZBASAHEAIaQQAhAwsgCEHgAmokACADCzkAIANC8P///w9UBEAgACAAIAOnaiACIAMgBCAFIAcgCBARIAEEQCABIANCEHw3AwALQQAPCxAHAAvaAQEBfyMAQdACayIIJAAgCEEQakLAACAGIAcQAxogCEHQAGogCEEQahAFGiAIQRBqQcAAEAEgCEHQAGogBCAFEAAaIAhB0ABqQaCUwAFCACAFfUIPgxAAGiAAIAIgAyAGQQEgBxACGiAIQdAAaiAAIAMQABogCEHQAGpBoJTAAUIAIAN9Qg+DEAAaIAhBCGogBRAIIAhB0ABqIAhBCGpCCBAAGiAIQQhqIAMQCCAIQdAAaiAIQQhqQggQABogCEHQAGogARAEGiAIQdAAakGAAhABIAhB0AJqJAAL1gIBAX8CQCABRQ0AIAAgAWoiAkF/akEAOgAAIABBADoAACABQQNJDQAgAkF+akEAOgAAIABBADoAASACQX1qQQA6AAAgAEEAOgACIAFBB0kNACACQXxqQQA6AAAgAEEAOgADIAFBCUkNACAAQQAgAGtBA3EiAmoiAEEANgIAIAAgASACa0F8cSICaiIBQXxqQQA2AgAgAkEJSQ0AIABBADYCCCAAQQA2AgQgAUF4akEANgIAIAFBdGpBADYCACACQRlJDQAgAEEANgIYIABBADYCFCAAQQA2AhAgAEEANgIMIAFBcGpBADYCACABQWxqQQA2AgAgAUFoakEANgIAIAFBZGpBADYCACACIABBBHFBGHIiAmsiAUEgSQ0AIAAgAmohAANAIABCADcDGCAAQgA3AxAgAEIANwMIIABCADcDACAAQSBqIQAgAUFgaiIBQR9LDQALCwsLDAEAQbCYwAELA9AMQA=='
},{}],2:[function(require,module,exports){
module.exports = 'AGFzbQEAAAABag1gAAF/YAJ/fwF/YAAAYAJ/fwBgCH9/f35/fn9/AGAIf39+f39+f38Bf2ACf34AYAR/f39/AX9gCX9/f39+f35/fwF/YAl/f39+f35/f38Bf2ADf39+AX9gBn9/fn9/fwF/YAR/fn9/AX8CtwIKA2VudiJjcnlwdG9fb25ldGltZWF1dGhfcG9seTEzMDVfdXBkYXRlAAoDZW52DnNvZGl1bV9tZW16ZXJvAAMDZW52IWNyeXB0b19vbmV0aW1lYXV0aF9wb2x5MTMwNV9maW5hbAABA2VudiZjcnlwdG9fc3RyZWFtX2NoYWNoYTIwX2lldGZfZXh0X3hvcl9pYwALA2VudiBjcnlwdG9fb25ldGltZWF1dGhfcG9seTEzMDVfaW5pdAABA2Vudh9jcnlwdG9fc3RyZWFtX2NoYWNoYTIwX2lldGZfZXh0AAwDZW52FWNyeXB0b19jb3JlX2hjaGFjaGEyMAAHA2VudhBjcnlwdG9fdmVyaWZ5XzE2AAEDZW52DXNvZGl1bV9taXN1c2UAAgNlbnYGbWVtb3J5AgCAAgMODQYCAAAIBQUJBAMAAAQGCQF/AUHAnMACCwecAgcqY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0ABAqY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0AA0rY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9rZXlieXRlcwAMLGNyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfbnB1YmJ5dGVzAAssY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9uc2VjYnl0ZXMAFCljcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2FieXRlcwATBl9zdGFydAAKCogJDQkAIAAgATcAAAsDAAELBABBGAsEAEEgC0IAQX8hAiAEQhBaBEAgACADIARCcHwgAyAEp2pBcGogBSAGIAcgCBAPIQILIAEEQCABQgAgBEJwfCACGzcDAAsgAguIAgEBfyMAQeACayIIJAAgCEEgakLAACAGIAcQBRogCEHgAGogCEEgahAEGiAIQSBqQcAAEAEgCEHgAGogBCAFEAAaIAhB4ABqQbCYgAJCACAFfUIPgxAAGiAIQeAAaiABIAIQABogCEHgAGpBsJiAAkIAIAJ9Qg+DEAAaIAhBGGogBRAJIAhB4ABqIAhBGGpCCBAAGiAIQRhqIAIQCSAIQeAAaiAIQRhqQggQABogCEHgAGogCBACGiAIQeAAakGAAhABIAggAxAHIQMgCEEQEAECQCAARQ0AIAMEQCAAIAKnEBJBfyEDDAELIAAgASACIAZBASAHEAMaQQAhAwsgCEHgAmokACADC1QBAX8jAEEwayIIJAAgCEEANgIEIAhBEGogBiAHQQAQBhogCCAGKQAQNwIIIAAgASACIAMgBCAFIAhBBGogCEEQahAOIAhBEGpBIBABIAhBMGokAAs5ACADQvD///8PVARAIAAgACADp2ogAiADIAQgBSAHIAgQFSABBEAgASADQhB8NwMAC0EADwsQCAAL2gEBAX8jAEHQAmsiCCQAIAhBEGpCwAAgBiAHEAUaIAhB0ABqIAhBEGoQBBogCEEQakHAABABIAhB0ABqIAQgBRAAGiAIQdAAakGwmIACQgAgBX1CD4MQABogACACIAMgBkEBIAcQAxogCEHQAGogACADEAAaIAhB0ABqQbCYgAJCACADfUIPgxAAGiAIQQhqIAUQCSAIQdAAaiAIQQhqQggQABogCEEIaiADEAkgCEHQAGogCEEIakIIEAAaIAhB0ABqIAEQAhogCEHQAGpBgAIQASAIQdACaiQAC9YCAQF/AkAgAUUNACAAIAFqIgJBf2pBADoAACAAQQA6AAAgAUEDSQ0AIAJBfmpBADoAACAAQQA6AAEgAkF9akEAOgAAIABBADoAAiABQQdJDQAgAkF8akEAOgAAIABBADoAAyABQQlJDQAgAEEAIABrQQNxIgJqIgBBADYCACAAIAEgAmtBfHEiAmoiAUF8akEANgIAIAJBCUkNACAAQQA2AgggAEEANgIEIAFBeGpBADYCACABQXRqQQA2AgAgAkEZSQ0AIABBADYCGCAAQQA2AhQgAEEANgIQIABBADYCDCABQXBqQQA2AgAgAUFsakEANgIAIAFBaGpBADYCACABQWRqQQA2AgAgAiAAQQRxQRhyIgJrIgFBIEkNACAAIAJqIQADQCAAQgA3AxggAEIANwMQIABCADcDCCAAQgA3AwAgAEEgaiEAIAFBYGoiAUEfSw0ACwsLBABBEAsEAEEAC1QBAX8jAEEwayIIJAAgCEEANgIEIAhBEGogBiAHQQAQBhogCCAGKQAQNwIIIAAgASACIAMgBCAFIAhBBGogCEEQahARIAhBEGpBIBABIAhBMGokAAsLDAEAQcCcgAILA+AOUA=='
},{}],3:[function(require,module,exports){
module.exports = 'AGFzbQEAAAABVwxgAX8AYAl/f39/f39/f38Bf2ACf38AYAN/f38AYAF/AX9gAn9/AX9gCX9/f39+f35/fwF/YAl/f39+f35/f38Bf2AAAGAEf39/fwBgAAF/YAN/f38BfwLxAQYDZW52BWFib3J0AAkIc29kaXVtLWMpY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2VuY3J5cHQABwhzb2RpdW0tYyljcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZGVjcnlwdAAGCHNvZGl1bS1jKmNyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfZW5jcnlwdAAHCHNvZGl1bS1jKmNyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfZGVjcnlwdAAGA2VudgZtZW1vcnkCAFEDFRQCAgMKBAUCAwsFAAQAAQEBAQgAAAYTA38BQQALfwFBAAt/AEHQncACCwf3AQoGbWVtb3J5AgAHX19hbGxvYwAOCF9fcmV0YWluABAJX19yZWxlYXNlABEJX19jb2xsZWN0ABYLX19ydHRpX2Jhc2UDAiljcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZW5jcnlwdAASKWNyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0ABMqY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0ABQqY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0ABUKvBIUqQIBBH8gASgCACIDQQFxRQRAQQBBwJzAAkGVAkENEAAACyADQXxxIgJBEE8EfyACQfD///8DSQVBAAtFBEBBAEHAnMACQZcCQQ0QAAALIAJBgAJJBH8gAkEEdiECQQAFIAJBHyACZ2siA0EEa3ZBEHMhAiADQQdrCyIDQRdJBH8gAkEQSQVBAAtFBEBBAEHAnMACQaQCQQ0QAAALIAEoAhQhBCABKAIQIgUEQCAFIAQ2AhQLIAQEQCAEIAU2AhALIAEgACACIANBBHRqQQJ0aigCYEYEQCAAIAIgA0EEdGpBAnRqIAQ2AmAgBEUEQCAAIANBAnRqIAAgA0ECdGooAgRBASACdEF/c3EiATYCBCABRQRAIAAgACgCAEEBIAN0QX9zcTYCAAsLCwuPBAEGfyABRQRAQQBBwJzAAkHNAUENEAAACyABKAIAIgNBAXFFBEBBAEHAnMACQc8BQQ0QAAALIAFBEGogASgCAEF8cWoiBCgCACIFQQFxBEAgA0F8cUEQaiAFQXxxaiICQfD///8DSQRAIAAgBBAFIAEgAiADQQNxciIDNgIAIAFBEGogASgCAEF8cWoiBCgCACEFCwsgA0ECcQRAIAFBBGsoAgAiAigCACIGQQFxRQRAQQBBwJzAAkHkAUEPEAAACyAGQXxxQRBqIANBfHFqIgdB8P///wNJBEACfyAAIAIQBSACIAcgBkEDcXIiAzYCACACCyEBCwsgBCAFQQJyNgIAIANBfHEiAkEQTwR/IAJB8P///wNJBUEAC0UEQEEAQcCcwAJB8wFBDRAAAAsgAiABQRBqaiAERwRAQQBBwJzAAkH0AUENEAAACyAEQQRrIAE2AgAgAkGAAkkEfyACQQR2IQRBAAUgAkEfIAJnayICQQRrdkEQcyEEIAJBB2sLIgNBF0kEfyAEQRBJBUEAC0UEQEEAQcCcwAJBhAJBDRAAAAsgACAEIANBBHRqQQJ0aigCYCECIAFBADYCECABIAI2AhQgAgRAIAIgATYCEAsgACAEIANBBHRqQQJ0aiABNgJgIAAgACgCAEEBIAN0cjYCACAAIANBAnRqIAAgA0ECdGooAgRBASAEdHI2AgQL1AEBAn8gAkEPcUVBACABQQ9xRUEAIAEgAk0bG0UEQEEAQcCcwAJBggNBBBAAAAsgACgCoAwiAwRAIAEgA0EQakkEQEEAQcCcwAJBjANBDxAAAAsgAyABQRBrRgRAIAMoAgAhBCABQRBrIQELBSABIABBpAxqSQRAQQBBwJzAAkGYA0EEEAAACwsgAiABayICQTBJBEAPCyABIARBAnEgAkEga0EBcnI2AgAgAUEANgIQIAFBADYCFCABIAJqQRBrIgJBAjYCACAAIAI2AqAMIAAgARAGC6sBAQN/IwAiAEUEQEHRAD8AIgBKBH9B0QAgAGtAAEEASAVBAAsEQAALQfCdwAIiAEEANgIAQZCqwAJBADYCAANAIAFBF0kEQCABQQJ0QfCdwAJqQQA2AgRBACECA0AgAkEQSQRAIAFBBHQgAmpBAnRB8J3AAmpBADYCYCACQQFqIQIMAQsLIAFBAWohAQwBCwtB8J3AAkGgqsACPwBBEHQQB0HwncACJAALIAALMgAgAEHw////A08EQEHwnMACQcCcwAJByQNBHRAAAAsgAEEPakFwcSIAQRAgAEEQSxsL4wEBAX8gAUGAAkkEfyABQQR2IQFBAAUgAUH4////AUkEQCABQQFBGyABZ2t0akEBayEBCyABQR8gAWdrIgJBBGt2QRBzIQEgAkEHawsiAkEXSQR/IAFBEEkFQQALRQRAQQBBwJzAAkHSAkENEAAACyAAIAJBAnRqKAIEQX8gAXRxIgEEfyAAIAFoIAJBBHRqQQJ0aigCYAUgACgCAEF/IAJBAWp0cSIBBH8gACABaCIBQQJ0aigCBCICRQRAQQBBwJzAAkHfAkEREAAACyAAIAJoIAFBBHRqQQJ0aigCYAVBAAsLC2wBAX8/ACICQRAgACgCoAwgAkEQdEEQa0d0IAFBAUEbIAFna3RBAWtqIAEgAUH4////AUkbakH//wNqQYCAfHFBEHYiASACIAFKG0AAQQBIBEAgAUAAQQBIBEAACwsgACACQRB0PwBBEHQQBwuKAQECfyABKAIAIQMgAkEPcQRAQQBBwJzAAkHtAkENEAAACyADQXxxIAJrIgRBIE8EQCABIAIgA0ECcXI2AgAgAiABQRBqaiIBIARBEGtBAXI2AgAgACABEAYFIAEgA0F+cTYCACABQRBqIAEoAgBBfHFqIAFBEGogASgCAEF8cWooAgBBfXE2AgALC58BAQJ/IwEEQEEAQcCcwAJB6gNBDRAAAAsgACABEAkiBBAKIgNFBEBBASQBQQAkASAAIAQQCiIDRQRAIAAgBBALIAAgBBAKIgNFBEBBAEHAnMACQfYDQRMQAAALCwsgAygCAEF8cSAESQRAQQBBwJzAAkH+A0ENEAAACyADQQA2AgQgAyACNgIIIAMgATYCDCAAIAMQBSAAIAMgBBAMIAMLDQAQCCAAIAEQDUEQagtVAQF/IAAoAgQiAUGAgICAf3EgAUEBakGAgICAf3FHBEBBAEGwncACQe0AQQIQAAALIAAgAUEBajYCBCAAKAIAQQFxBEBBAEGwncACQfAAQQ0QAAALCxYAIABB7J3AAksEQCAAQRBrEA8LIAALFAAgAEHsncACSwRAIABBEGsQFwsLGAAgACABIAIgA60gBCAFrSAGIAcgCBABCxgAIAAgASACIAMgBK0gBSAGrSAHIAgQAgsYACAAIAEgAiADrSAEIAWtIAYgByAIEAMLGAAgACABIAIgAyAErSAFIAatIAcgCBAECwMAAQuXAQECfyAAKAIEIgJB/////wBxIQEgACgCAEEBcQRAQQBBsJ3AAkH6AEENEAAACyABQQFGBEAgAEEQahAYIAJBgICAgHhxBEBBAEGwncACQf4AQREQAAALIAAgACgCAEEBcjYCACMAIAAQBgUgAUEATQRAQQBBsJ3AAkGIAUEPEAAACyAAIAFBAWsgAkGAgICAf3FyNgIECws4AAJAAkACQCAAQQhrKAIADgMAAAECCw8LIAAoAgAiAARAIABB7J3AAk8EQCAAQRBrEBcLCw8LAAsLxwEEAEGwnMACCy0eAAAAAQAAAAEAAAAeAAAAfgBsAGkAYgAvAHIAdAAvAHQAbABzAGYALgB0AHMAQeCcwAILNygAAAABAAAAAQAAACgAAABhAGwAbABvAGMAYQB0AGkAbwBuACAAdABvAG8AIABsAGEAcgBnAGUAQaCdwAILLR4AAAABAAAAAQAAAB4AAAB+AGwAaQBiAC8AcgB0AC8AcAB1AHIAZQAuAHQAcwBB0J3AAgsVAwAAABAAAAAAAAAAEAAAAAAAAAAQ'
},{}],4:[function(require,module,exports){
module.exports = 'AGFzbQEAAAABIwRgA39/fwF/YAZ/f39/f38Bf2AGf39/fn9/AX9gA39/fgF/AkYCCXNvZGl1bS1qcxJjcnlwdG9fZ2VuZXJpY2hhc2gAAQlzb2RpdW0tanMZY3J5cHRvX2dlbmVyaWNoYXNoX3VwZGF0ZQAAAwMCAgMFAwEAAAc7AwZtZW1vcnkCABJjcnlwdG9fZ2VuZXJpY2hhc2gAAhljcnlwdG9fZ2VuZXJpY2hhc2hfdXBkYXRlAAMKHwIRACAAIAEgAiADpyAEIAUQAAsLACAAIAEgAqcQAQs='
},{}],5:[function(require,module,exports){
module.exports = 'AGFzbQEAAAABFwRgAABgAn9/AGACf38Bf2AEf39/fwF/AhABA2VudgZtZW1vcnkCAIACAwUEAgEAAwciAhVjcnlwdG9fY29yZV9oY2hhY2hhMjAAAwZfc3RhcnQAAgrsBQQHACAAIAF3CwkAIAAgATYAAAsDAAEL0wUBEX8CfyADRQRAQbLaiMsHIQRB7siBmQMhCkHl8MGLBiELQfTKgdkGDAELIAMoAAAhCyADKAAEIQogAygACCEEIAMoAAwLIQUgAigAACEDIAIoAAQhByACKAAIIQYgAigADCEIIAIoABAhDCACKAAUIQ0gAigAGCEPIAIoABwhESABKAAAIQIgASgABCEOIAEoAAghCSABKAAMIQEDQCADIAwgAiADIAtqIgtzQRAQACIQaiIMc0EMEAAhAiACIAwgECACIAtqIgtzQQgQACIQaiIMc0EHEAAhAyAHIA4gByAKaiIKc0EQEAAiDiANaiINc0EMEAAhAiACIA4gAiAKaiIKc0EIEAAiDiANaiINc0EHEAAhAiAGIAkgBCAGaiIHc0EQEAAiCSAPaiIPc0EMEAAhBCAEIAkgBCAHaiISc0EIEAAiCSAPaiIHc0EHEAAhBCAIIAEgBSAIaiIFc0EQEAAiBiARaiIPc0EMEAAhASABIAYgASAFaiITc0EIEAAiBiAPaiIIc0EHEAAhBSACIAcgBiACIAtqIgFzQRAQACIGaiIHc0EMEAAhAiACIAcgBiABIAJqIgtzQQgQACIBaiIPc0EHEAAhByAEIAggECAEIApqIgJzQRAQACIGaiIIc0EMEAAhBCAEIAggBiACIARqIgpzQQgQACICaiIRc0EHEAAhBiAFIA4gBSASaiIEc0EQEAAiCCAMaiIMc0EMEAAhBSAFIAwgCCAEIAVqIgRzQQgQACIOaiIMc0EHEAAhCCADIAkgAyATaiIFc0EQEAAiCSANaiINc0EMEAAhAyADIAkgAyAFaiIFc0EIEAAiCSANaiINc0EHEAAhAyAUQQFqIhRBCkcNAAsgACALEAEgAEEEaiAKEAEgAEEIaiAEEAEgAEEMaiAFEAEgAEEQaiACEAEgAEEUaiAOEAEgAEEYaiAJEAEgAEEcaiABEAFBAAsLDAEAQZCQwAALA7AIIA=='
},{}],6:[function(require,module,exports){
module.exports = 'AGFzbQEAAAABPAlgA39/fwF/YAAAYAJ/fwBgAn9/AX9gBX9/f39/AX9gAAF/YAR/f39/AX9gBn9/f35/fwF/YAN/f34BfwL6AQoDZW52DnNvZGl1bV9tZW16ZXJvAAIDZW52GWNyeXB0b19nZW5lcmljaGFzaF91cGRhdGUACANlbnYNc29kaXVtX21pc3VzZQABA2VudhhjcnlwdG9fZ2VuZXJpY2hhc2hfZmluYWwAAANlbnYXY3J5cHRvX2dlbmVyaWNoYXNoX2luaXQABgNlbnYRY3J5cHRvX3NjYWxhcm11bHQAAANlbnYWY3J5cHRvX3NjYWxhcm11bHRfYmFzZQADA2Vudg9yYW5kb21ieXRlc19idWYAAgNlbnYSY3J5cHRvX2dlbmVyaWNoYXNoAAcDZW52Bm1lbW9yeQIAgAIDBwYFAQQEAwAGCQF/AUHAoIADCwffAQkWY3J5cHRvX2t4X3NlZWRfa2V5cGFpcgAOEWNyeXB0b19reF9rZXlwYWlyAA0dY3J5cHRvX2t4X2NsaWVudF9zZXNzaW9uX2tleXMADB1jcnlwdG9fa3hfc2VydmVyX3Nlc3Npb25fa2V5cwALGGNyeXB0b19reF9wdWJsaWNrZXlieXRlcwAJGGNyeXB0b19reF9zZWNyZXRrZXlieXRlcwAJE2NyeXB0b19reF9zZWVkYnl0ZXMACRljcnlwdG9fa3hfc2Vzc2lvbmtleWJ5dGVzAAkGX3N0YXJ0AAoKkQQGBABBIAsDAAEL7gEBA38jACIFIQcgBUGABGtBQHEiBSQAIAAgASAAGyIGBEBBfyEAIAVB4ABqIAMgBBAFRQRAIAEgBiABGyEBQQAhACAFQYABakEAQQBBwAAQBBogBUGAAWogBUHgAGpCIBABGiAFQeAAakEgEAAgBUGAAWogBEIgEAEaIAVBgAFqIAJCIBABGiAFQYABaiAFQSBqQcAAEAMaIAVBgAFqQYADEAADQCAAIAFqIAVBIGogAGoiAi0AADoAACAAIAZqIAItACA6AAAgAEEBaiIAQSBHDQALIAVBIGpBwAAQAEEAIQALIAckACAADwsQAgAL7gEBA38jACIFIQcgBUGABGtBQHEiBSQAIAAgASAAGyIGBEBBfyEAIAVB4ABqIAMgBBAFRQRAIAEgBiABGyEBQQAhACAFQYABakEAQQBBwAAQBBogBUGAAWogBUHgAGpCIBABGiAFQeAAakEgEAAgBUGAAWogAkIgEAEaIAVBgAFqIARCIBABGiAFQYABaiAFQSBqQcAAEAMaIAVBgAFqQYADEAADQCAAIAZqIAVBIGogAGoiAi0AADoAACAAIAFqIAItACA6AAAgAEEBaiIAQSBHDQALIAVBIGpBwAAQAEEAIQALIAckACAADwsQAgALDgAgAUEgEAcgACABEAYLFwAgAUEgIAJCIEEAQQAQCBogACABEAYLCwwBAEHAoMACCwPgEGA='
},{}],7:[function(require,module,exports){
module.exports = 'AGFzbQEAAAABJAZgAn9/AX9gAn9/AGADf39+AX9gA39/fgBgBH9/fn8Bf2AAAAI8AwNlbnYOc29kaXVtX21lbXplcm8AAQNlbnYQY3J5cHRvX3ZlcmlmeV8xNgAAA2VudgZtZW1vcnkCAIACAxAPAQMFAQMBBAAEAAIBAAIABAUBcAEHBwYJAX8BQZCMwAALB3YEIGNyeXB0b19vbmV0aW1lYXV0aF9wb2x5MTMwNV9pbml0ABAiY3J5cHRvX29uZXRpbWVhdXRoX3BvbHkxMzA1X3VwZGF0ZQAMIWNyeXB0b19vbmV0aW1lYXV0aF9wb2x5MTMwNV9maW5hbAALBl9zdGFydAAECQwBAEEBCwYICgkPDgQKiw8PCQAgACABNgAAC6YEAgp/Dn4gACgCJCEEIAAoAiAhBSAAKAIcIQYgACgCGCEHIAAoAhQhAyACQhBaBEAgAC0AUEVBGHQhCCAAKAIEIglBBWytIRkgACgCCCIKQQVsrSEXIAAoAgwiC0EFbK0hFSAAKAIQIgxBBWytIRMgDK0hGiALrSEYIAqtIRYgCa0hFCAANQIAIRIDQCABKAADQQJ2Qf///x9xIAdqrSINIBh+IAEoAABB////H3EgA2qtIg4gGn58IAEoAAZBBHZB////H3EgBmqtIg8gFn58IAEoAAlBBnYgBWqtIhAgFH58IAEoAAxBCHYgCHIgBGqtIhEgEn58IA0gFn4gDiAYfnwgDyAUfnwgECASfnwgESATfnwgDSAUfiAOIBZ+fCAPIBJ+fCAQIBN+fCARIBV+fCANIBJ+IA4gFH58IA8gE358IBAgFX58IBEgF358IA0gE34gDiASfnwgDyAVfnwgECAXfnwgESAZfnwiDUIaiEL/////D4N8Ig5CGohC/////w+DfCIPQhqIQv////8Pg3wiEEIaiEL/////D4N8IhFCGoinQQVsIA2nQf///x9xaiIDQRp2IA6nQf///x9xaiEHIA+nQf///x9xIQYgEKdB////H3EhBSARp0H///8fcSEEIANB////H3EhAyABQRBqIQEgAkJwfCICQg9WDQALCyAAIAM2AhQgACAENgIkIAAgBTYCICAAIAY2AhwgACAHNgIYCwMAAQuoAwIMfwR+IAApAzgiDlBFBEAgACAOpyIDaiICQUBrQQE6AAAgDkIBfEIPWARAIAJBwQBqQQ8gA2sQDQsgAEEBOgBQIAAgAEFAa0IQEAMLIAA1AjQhDiAANQIwIQ8gADUCLCEQIAEgADUCKCAAKAIkIAAoAiAgACgCHCAAKAIYIgNBGnZqIgJBGnZqIgRBGnZqIghBgICAYHIgBEH///8fcSIJIAJB////H3EiBSAAKAIUIAhBGnZBBWxqIgJB////H3EiBkEFaiIHQRp2IANB////H3EgAkEadmoiCmoiC0EadmoiDEEadmoiDUEadmoiBEEfdSIDIAZxIAcgBEEfdkF/aiIGQf///x9xIgJxciADIApxIAIgC3FyIgdBGnRyrXwiEacQAiABQQRqIBAgAyAFcSACIAxxciIFQRR0IAdBBnZyrXwgEUIgiHwiEKcQAiABQQhqIA8gAyAJcSACIA1xciICQQ50IAVBDHZyrXwgEEIgiHwiD6cQAiABQQxqIA4gBCAGcSADIAhxckEIdCACQRJ2cq18IA9CIIh8pxACIABB2AAQAAvzAQEDfgJAIAApAzgiBFBFBEAgAkIQIAR9IgMgAyACVhsiBVBFBEBCACEDA0AgACADIAR8p2pBQGsgASADp2otAAA6AAAgACkDOCEEIANCAXwiAyAFUg0ACwsgACAEIAV8IgM3AzggA0IQVA0BIAAgAEFAa0IQEAMgAEIANwM4IAIgBX0hAiABIAWnaiEBCyACQhBaBEAgACABIAJCcIMiAxADIAJCD4MhAiABIAOnaiEBCyACUA0AQgAhAwNAIAAgACkDOCADfKdqQUBrIAEgA6dqLQAAOgAAIANCAXwiAyACUg0ACyAAIAApAzggAnw3AzgLC7IBAQF/IAAgASgAAEH///8fcTYCACAAIAEoAANBAnZBg/7/H3E2AgQgACABKAAGQQR2Qf+B/x9xNgIIIAAgASgACUEGdkH//8AfcTYCDCABKAAMIQIgAEIANwIUIABCADcCHCAAQQA2AiQgACACQQh2Qf//P3E2AhAgACABKAAQNgIoIAAgASgAFDYCLCAAIAEoABg2AjAgASgAHCEBIABBADoAUCAAQgA3AzggACABNgI0Cy0BAn8jACIFQYABa0FAcSIEJAAgBCADEAcgBCABIAIQBiAEIAAQBSAFJABBAAsKACAAIAEQB0EACyUBAX8jAEEQayIEJAAgBCABIAIgAxAIGiAAIAQQASAEQRBqJAALDwAgACABQZAIKAIAEQAACxEAIAAgASACQYwIKAIAEQIAC9YCAQF/AkAgAUUNACAAIAFqIgJBf2pBADoAACAAQQA6AAAgAUEDSQ0AIAJBfmpBADoAACAAQQA6AAEgAkF9akEAOgAAIABBADoAAiABQQdJDQAgAkF8akEAOgAAIABBADoAAyABQQlJDQAgAEEAIABrQQNxIgJqIgBBADYCACAAIAEgAmtBfHEiAmoiAUF8akEANgIAIAJBCUkNACAAQQA2AgggAEEANgIEIAFBeGpBADYCACABQXRqQQA2AgAgAkEZSQ0AIABBADYCGCAAQQA2AhQgAEEANgIQIABBADYCDCABQXBqQQA2AgAgAUFsakEANgIAIAFBaGpBADYCACABQWRqQQA2AgAgAiAAQQRxQRhyIgJrIgFBIEkNACAAIAJqIQADQCAAQgA3AxggAEIANwMQIABCADcDCCAAQgA3AwAgAEEgaiEAIAFBYGoiAUEfSw0ACwsLCgAgACABEAVBAAsMACAAIAEgAhAGQQALDwAgACABQYgIKAIAEQAACwshAgBBgAgLEQEAAAACAAAAAwAAAAQAAAAFAEGQDAsDsAYQ'
},{}],8:[function(require,module,exports){
module.exports = 'AGFzbQEAAAABOAhgBH9+f38Bf2AGf39+f39/AX9gAn9/AGAAAGADf39/AGACf38Bf2AEf39/fgBgBn9/fn9+fwF/AjkDA2Vudg5zb2RpdW1fbWVtemVybwACA2Vudg1zb2RpdW1fbWlzdXNlAAMDZW52Bm1lbW9yeQIAgAIDERAFAgYCBQMEAQQAAAABAAEHBAUBcAEGBgYJAX8BQaCUwAELB5gBBR9jcnlwdG9fc3RyZWFtX2NoYWNoYTIwX2lldGZfZXh0AAsmY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9pZXRmX2V4dF94b3JfaWMACRtjcnlwdG9fc3RyZWFtX2NoYWNoYTIwX2lldGYADyJjcnlwdG9fc3RyZWFtX2NoYWNoYTIwX2lldGZfeG9yX2ljAA4GX3N0YXJ0AAcJCwEAQQELBQ0MERAHCoISEAcAIAAgAXcLCQAgACABNgAAC9QJATF/IwBBQGoiHCQAIANQRQRAIAAoAjwhHSAAKAI4IR4gACgCNCESIAAoAjAhEyAAKAIsIR8gACgCKCEgIAAoAiQhISAAKAIgISIgACgCHCEjIAAoAhghJCAAKAIUISUgACgCECEmIAAoAgwhJyAAKAIIISggACgCBCEpIAAoAgAhKgNAAkAgA0I/VgRAIAIhBAwBC0EAIQYgHEHAABAGIQQDQCAEIAZqIAEgBmotAAA6AAAgAyAGQQFqIgatVg0ACyAEIQEgAiErC0EUIRcgKiENICkhFCAoIRAgJyEOICYhBiAlIQggJCECICMhDyAiIQwgISEJICAhFSAdIREgHiEKIBIhByATIQUgHyELA0AgBiAMIAYgDWoiDSAFc0EQEAIiFmoiBXNBDBACIQwgDCAWIAwgDWoiDXNBCBACIhogBWoiG3NBBxACIRggCSAIIBRqIgwgB3NBEBACIgdqIgUgCHNBDBACIQkgCSAHIAkgDGoiFHNBCBACIgwgBWoiFnNBBxACIQggAiAVIAogAiAQaiIVc0EQEAIiB2oiBXNBDBACIQIgAiAHIAIgFWoiCXNBCBACIgYgBWoiCnNBBxACIRkgCyAOIA9qIgUgEXNBEBACIgJqIgsgD3NBDBACIREgESALIAIgBSARaiIOc0EIEAIiAmoiB3NBBxACIRAgCCACIAggDWoiBXNBEBACIgsgCmoiAnNBDBACIQogCiALIAUgCmoiDXNBCBACIhEgAmoiFXNBBxACIQggGSAaIBQgGWoiBXNBEBACIgsgB2oiAnNBDBACIQcgByALIAUgB2oiFHNBCBACIgUgAmoiC3NBBxACIQIgECAMIAkgEGoiCXNBEBACIgcgG2oiCnNBDBACIQ8gDyAKIAcgCSAPaiIQc0EIEAIiB2oiDHNBBxACIQ8gGCAGIA4gGGoiDnNBEBACIgogFmoiCXNBDBACIQYgBiAJIAogBiAOaiIOc0EIEAIiCmoiCXNBBxACIQYgF0F+aiIXDQALIAEoAAQhLCABKAAIIS0gASgADCEuIAEoABAhLyABKAAUITAgASgAGCExIAEoABwhMiABKAAgITMgASgAJCE0IAEoACghFyABKAAsIRggASgAMCEZIAEoADQhGiABKAA4IRsgASgAPCEWIAQgASgAACANICpqcxADIARBBGogLCAUIClqcxADIARBCGogLSAQIChqcxADIARBDGogLiAOICdqcxADIARBEGogLyAGICZqcxADIARBFGogMCAIICVqcxADIARBGGogMSACICRqcxADIARBHGogMiAPICNqcxADIARBIGogMyAMICJqcxADIARBJGogNCAJICFqcxADIARBKGogFyAVICBqcxADIARBLGogGCALIB9qcxADIARBMGogGSAFIBNqcxADIARBNGogGiAHIBJqcxADIARBOGogGyAKIB5qcxADIARBPGogFiARIB1qcxADIBIgE0EBaiILIBNJaiESIANCwABYBEACQCADQj9WDQAgA6ciAUUNAEEAIQgDQCAIICtqIAQgCGotAAA6AAAgCEEBaiIIIAFHDQALCyAAIBI2AjQgACALNgIwBSABQUBrIQEgBEFAayECIANCQHwhAyALIRMMAQsLCyAcQUBrJAALcQAgAELl8MGL5o2ZkDM3AgAgAEKy2ojLx66ZkOsANwIIIAAgASgAADYCECAAIAEoAAQ2AhQgACABKAAINgIYIAAgASgADDYCHCAAIAEoABA2AiAgACABKAAUNgIkIAAgASgAGDYCKCAAIAEoABw2AiwL2AIBAn8CQCABRQ0AIAAgAWoiAkF/akEAOgAAIABBADoAACABQQNJDQAgAkF+akEAOgAAIABBADoAASACQX1qQQA6AAAgAEEAOgACIAFBB0kNACACQXxqQQA6AAAgAEEAOgADIAFBCUkNACAAQQAgAGtBA3EiA2oiAkEANgIAIAIgASADa0F8cSIDaiIBQXxqQQA2AgAgA0EJSQ0AIAJBADYCCCACQQA2AgQgAUF4akEANgIAIAFBdGpBADYCACADQRlJDQAgAkEANgIYIAJBADYCFCACQQA2AhAgAkEANgIMIAFBcGpBADYCACABQWxqQQA2AgAgAUFoakEANgIAIAFBZGpBADYCACADIAJBBHFBGHIiA2siAUEgSQ0AIAIgA2ohAgNAIAJCADcDGCACQgA3AxAgAkIANwMIIAJCADcDACACQSBqIQIgAUFgaiIBQR9LDQALCyAACwMAAQs9ACAAAn8gAgRAIAAgAigAADYCMCACKAAEDAELIABBADYCMEEACzYCNCAAIAEoAAA2AjggACABKAAENgI8CygAIAJCgICAgBBaBEAQAQALIAAgASACIAMgBCAFQZyQgAEoAgARAQALMgAgACACBH8gAigAAAVBAAs2AjAgACABKAAANgI0IAAgASgABDYCOCAAIAEoAAg2AjwLJAAgAUKAgICAEFoEQBABAAsgACABIAIgA0GUkIABKAIAEQAAC0MBAX8jAEFAaiIEJAAgAVBFBEAgBCADEAUgBCACQQAQCiAEIAAgAacQBiIAIAAgARAEIARBwAAQAAsgBEFAayQAQQALQwEBfyMAQUBqIgQkACABUEUEQCAEIAMQBSAEIAJBABAIIAQgACABpxAGIgAgACABEAQgBEHAABAACyAEQUBrJABBAAspAEKAgICAECACQj98QgaIfSAErVQEQBABAAsgACABIAIgAyAEIAUQCQsbACABQoCAgIAQWgRAEAEACyAAIAEgAiADEAsLVgEBfyMAQdAAayIGJAAgAlBFBEAgBkEMaiAEEAMgBkEQaiAFEAUgBkEQaiADIAZBDGoQCiAGQRBqIAEgACACEAQgBkEQakHAABAACyAGQdAAaiQAQQALZAEBfyMAQdAAayIGJAAgAlBFBEAgBkEIaiAEpxADIAZBDGogBEIgiKcQAyAGQRBqIAUQBSAGQRBqIAMgBkEIahAIIAZBEGogASAAIAIQBCAGQRBqQcAAEAALIAZB0ABqJABBAAsLIQIAQZCQgAELDQEAAAACAAAAAwAAAAQAQaCUgAELA8AKMA=='
},{}],9:[function(require,module,exports){
const Heap = require('./lib/heap')
const loadSodiumWasm = require('./lib/load-sodium-wasm')

module.exports = (sodiumJS) => {
  const heap = new Heap()

  const sodiumWasm = loadSodiumWasm(sodiumJS, heap)

  sodiumJS.crypto_aead_chacha20poly1305_ietf_encrypt = function (out, m, ad, nsec, nonce, key) {
    const cipherLength = m.length + sodiumJS.crypto_aead_chacha20poly1305_ietf_ABYTES
    const _out = heap.alloc(cipherLength)

    sodiumWasm.crypto_aead_chacha20poly1305_ietf_encrypt(
      _out,
      null,
      heap.set(m),
      m.length,
      ad ? heap.set(ad) : null,
      ad ? ad.length : null,
      nsec ? heap.set(nsec) : null,
      heap.set(nonce),
      heap.set(key)
    )

    heap.copy(out, _out, cipherLength)
    heap.release()
    return cipherLength
  }

  sodiumJS.crypto_aead_chacha20poly1305_ietf_decrypt = function (out, nsec, c, ad, nonce, key) {
    const messageLength = c.length - sodiumJS.crypto_aead_chacha20poly1305_ietf_ABYTES
    const _out = heap.alloc(messageLength)

    sodiumWasm.crypto_aead_chacha20poly1305_ietf_decrypt(
      _out,
      null,
      nsec ? heap.set(nsec) : null,
      heap.set(c),
      c.length,
      ad ? heap.set(ad) : null,
      ad ? ad.length : null,
      heap.set(nonce),
      heap.set(key)
    )

    heap.copy(out, _out, messageLength)
    heap.release()
    return messageLength
  }

  sodiumJS.crypto_aead_xchacha20poly1305_ietf_encrypt = function (out, m, ad, nsec, nonce, key) {
    const cipherLength = m.length + sodiumJS.crypto_aead_xchacha20poly1305_ietf_ABYTES
    const _out = heap.alloc(cipherLength)

    sodiumWasm.crypto_aead_xchacha20poly1305_ietf_encrypt(
      _out,
      null,
      heap.set(m),
      m.length,
      ad ? heap.set(ad) : null,
      ad ? ad.length : null,
      nsec ? heap.set(nsec) : null,
      heap.set(nonce),
      heap.set(key)
    )

    heap.copy(out, _out, cipherLength)
    heap.release()
    return cipherLength
  }

  sodiumJS.crypto_aead_xchacha20poly1305_ietf_decrypt = function (out, nsec, c, ad, nonce, key) {
    const messageLength = c.length - sodiumJS.crypto_aead_xchacha20poly1305_ietf_ABYTES
    const _out = heap.alloc(messageLength)

    sodiumWasm.crypto_aead_xchacha20poly1305_ietf_decrypt(
      _out,
      null,
      nsec ? heap.set(nsec) : null,
      heap.set(c),
      c.length,
      ad ? heap.set(ad) : null,
      ad ? ad.length : null,
      heap.set(nonce),
      heap.set(key)
    )

    heap.copy(out, _out, messageLength)
    heap.release()
    return messageLength
  }

  sodiumJS.crypto_kx_keypair = function (pk, sk) {
    const _pk = heap.alloc(pk.length)
    const _sk = heap.alloc(pk.length)

    sodiumWasm.crypto_kx_keypair(
      _pk,
      _sk
    )

    heap.copy(pk, _pk, pk.length)
    heap.copy(sk, _sk, sk.length)
    heap.release()
  }

  sodiumJS.crypto_kx_seed_keypair = function (pk, sk, seed) {
    const _pk = heap.alloc(pk.length)
    const _sk = heap.alloc(pk.length)

    sodiumWasm.crypto_kx_seed_keypair(
      _pk,
      _sk,
      heap.set(seed)
    )

    heap.copy(pk, _pk, pk.length)
    heap.copy(sk, _sk, sk.length)
    heap.release()
  }

  sodiumJS.crypto_kx_client_session_keys = function (clientRx, clientTx, clientPk, clientSk, serverPk) {
    const _clientRx = heap.alloc(clientRx.length)
    const _clientTx = heap.alloc(clientTx.length)

    sodiumWasm.crypto_kx_client_session_keys(
      _clientRx,
      _clientTx,
      heap.set(clientPk),
      heap.set(clientSk),
      heap.set(serverPk)
    )

    heap.copy(clientRx, _clientRx, clientRx.length)
    heap.copy(clientTx, _clientTx, clientTx.length)
    heap.release()
  }

  sodiumJS.crypto_kx_server_session_keys = function (serverRx, serverTx, serverPk, serverSk, clientPk) {
    const _serverRx = heap.alloc(serverRx.length)
    const _serverTx = heap.alloc(serverTx.length)

    sodiumWasm.crypto_kx_server_session_keys(
      _serverRx,
      _serverTx,
      heap.set(serverPk),
      heap.set(serverSk),
      heap.set(clientPk)
    )

    heap.copy(serverRx, _serverRx, serverRx.length)
    heap.copy(serverTx, _serverTx, serverTx.length)
    heap.release()
  }

  return sodiumJS
}

},{"./lib/heap":11,"./lib/load-sodium-wasm":12}],10:[function(require,module,exports){
(function (process,Buffer){(function (){
const loadSync = require('./load-sync')

module.exports = (sodiumJS, heap) => {
  const blakeStates = new Map()

  const bindingJS = loadSync(Buffer.from(require('../build/binding-js'), 'base64'), {
    'sodium-js': {
      crypto_generichash (out, outlen, inn, innlen, key, keylen) {
        let keyBuffer
        if (keylen !== 0) {
          keyBuffer = heap.slice(key, keylen)
        }
        sodiumJS.crypto_generichash(
          heap.slice(out, outlen),
          heap.slice(inn, innlen),
          keyBuffer
        )
        return 0
      },
      crypto_generichash_update (state, key, keylen) {
        blakeStates.get(state).update(heap.slice(key, keylen))
        return 0
      }
    }
  })

  return {
    env: {
      memory: heap.memory,
      crypto_verify_16 (x, y) {
        const n = 16
        const buf = heap.buffer
        let i; let d = 0
        for (i = 0; i < n; i++) d |= buf[x + i] ^ buf[y + i]
        return (1 & ((d - 1) >>> 8)) - 1
      },
      sodium_misuse () {
        console.error('sodium_misuse')
      },
      sodium_memzero (address, length) {
        const buffer = heap.slice(address, length)
        for (let i = 0; i < buffer.length; i++) {
          buffer[i] = 0
        }
      },
      randombytes_buf (address, length) {
        const buffer = heap.slice(address, length)
        sodiumJS.randombytes_buf(buffer)
      },
      crypto_scalarmult (q, n, p) {
        return sodiumJS.crypto_scalarmult(
          heap.slice(q, sodiumJS.crypto_scalarmult_BYTES),
          heap.slice(n, sodiumJS.crypto_scalarmult_SCALARBYTES),
          heap.slice(p, sodiumJS.crypto_scalarmult_BYTES)
        )
      },
      crypto_scalarmult_base (q, n) {
        return sodiumJS.crypto_scalarmult_base(
          heap.slice(q, sodiumJS.crypto_scalarmult_BYTES),
          heap.slice(n, sodiumJS.crypto_scalarmult_SCALARBYTES)
        )
      },
      crypto_generichash_init (state, key, keylen, outlen) {
        let keyBuffer
        if (keylen !== 0) {
          keyBuffer = heap.slice(key, keylen)
        }
        blakeStates.set(state, sodiumJS.crypto_generichash_instance(keyBuffer, outlen))
        return 0
      },
      crypto_generichash_final (state, out, outlen) {
        blakeStates.get(state).final(heap.slice(out, outlen))
        blakeStates.delete(state)
        return 0
      },

      // BINDING-JS for i64 types
      // the @assemblyscript/loader override the original methods (we don't want to use those here)
      crypto_generichash: bindingJS.crypto_generichash,
      crypto_generichash_update: bindingJS.crypto_generichash_update
    },
    wasi_snapshot_preview1: {
      proc_exit (code) {
        process.exit(code)
      }
    }
  }
}

}).call(this)}).call(this,require('_process'),require("buffer").Buffer)
},{"../build/binding-js":4,"./load-sync":13,"_process":437,"buffer":164}],11:[function(require,module,exports){
(function (Buffer){(function (){
const INITIAL_INITIAL_MEMORY = 16777216
const WASM_PAGE_SIZE = 65536
const TOTAL_MEMORY = INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE

module.exports = class Heap {
  constructor () {
    this.memory = new WebAssembly.Memory({
      initial: TOTAL_MEMORY
    })
    this._toRelease = []
    this._buffer = Buffer.from(this.memory.buffer)
  }

  get buffer () {
    if (this._buffer.length === 0) {
      this._buffer = Buffer.from(this.memory.buffer)
    }
    return this._buffer
  }

  setRuntime (runtime) {
    this._runtime = runtime
  }

  alloc (length) {
    const address = this._runtime.__retain(this._runtime.__alloc(length))
    this._toRelease.push(address)
    return address
  }

  set (bytes) {
    const address = this.alloc(bytes.length)
    this.buffer.set(bytes, address)
    return address
  }

  slice (start, end) {
    return this.buffer.slice(start, start + end)
  }

  release () {
    const toRelease = this._toRelease
    const len = toRelease.length
    for (let i = 0; i < len; i++) {
      this._runtime.__release(toRelease[i])
    }
    this._toRelease = []
  }

  copy (to, address, len) {
    for (let i = 0; i < len; i++) {
      to[i] = this.buffer[address + i]
    }
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":164}],12:[function(require,module,exports){
(function (Buffer){(function (){
const modules = require('../sodium-modules')
const createImport = require('./create-import')
const loadSync = require('./load-sync')

const binaries = {
  core_hchacha20: Buffer.from(require('../build/core_hchacha20'), 'base64'),
  stream_chacha20: Buffer.from(require('../build/stream_chacha20'), 'base64'),
  onetimeauth_poly1305: Buffer.from(require('../build/onetimeauth_poly1305'), 'base64'),
  aead_chacha20poly1305: Buffer.from(require('../build/aead_chacha20poly1305'), 'base64'),
  aead_xchacha20poly1305: Buffer.from(require('../build/aead_xchacha20poly1305'), 'base64'),
  crypto_kx: Buffer.from(require('../build/crypto_kx'), 'base64')
}

function loadSodiumWasm (sodiumJS, heap) {
  const sodium = {
    _original: {}
  }

  const importObj = createImport(sodiumJS, heap)
  const { env } = importObj

  modules.forEach(({ name, functions = [], constants = {} }) => {
    try {
      const binary = binaries[name]
      // const binary = require('fs').readFileSync(`${__dirname}/../build/${name}.wasm`)
      const wasmModule = loadSync(binary, importObj)

      functions.forEach(fn => {
        sodium[fn] = wasmModule[fn]
        env[fn] = wasmModule[fn]
        sodium._original[fn] = wasmModule[fn]
      })

      Object.keys(constants).forEach(constant => {
        sodium[constants[constant]] = wasmModule[constant]()
        sodiumJS[constants[constant]] = wasmModule[constant]()
        env[constant] = wasmModule[constant]
      })
    } catch (err) {
      throw new Error(`Error loading: ${name} - ${err.message}`)
    }
  })

  sodiumJS.sodium_memzero = (buffer) => {
    if (!(buffer instanceof Uint8Array)) {
      throw new Error('Only Uint8Array instances accepted')
    }
    for (let i = 0; i < buffer.length; i++) {
      buffer[i] = 0
    }
  }

  sodiumJS.sodium_memcmp = (b1, b2) => {
    if (!(b1 instanceof Uint8Array && b2 instanceof Uint8Array)) {
      throw new Error('Only Uint8Array instances can be compared')
    }
    if (b1.length !== b2.length) {
      throw new Error(
        'Only instances of identical length can be compared'
      )
    }
    for (var d = 0 | 0, i = 0 | 0, j = b1.length; i < j; i++) {
      d |= b1[i] ^ b2[i]
    }
    return d === 0
  }

  sodiumJS.sodium_is_zero = (buffer) => {
    if (!(buffer instanceof Uint8Array)) {
      throw new TypeError('Only Uint8Array instances can be checked')
    }
    var d = 0 | 0
    for (var i = 0 | 0, j = buffer.length; i < j; i++) {
      d |= buffer[i]
    }
    return d === 0
  }

  sodiumJS.sodium_increment = (buffer) => {
    if (!(buffer instanceof Uint8Array)) {
      throw new TypeError('Only Uint8Array instances can be incremented')
    }
    var c = 1 << 8
    for (var i = 0 | 0, j = buffer.length; i < j; i++) {
      c >>= 8
      c += buffer[i]
      buffer[i] = c & 0xff
    }
  }

  sodiumJS.sodium_free = () => {} // noop
  sodiumJS.crypto_stream_xor_STATEBYTES = 136

  // some functions in C expect unsigned long long types (u64 in wasm)
  // because js cannot understand that type we provide bindings to cast u64 into u32
  const bindingC = loadSync(Buffer.from(require('../build/binding-c'), 'base64'), {
    env: {
      memory: heap.memory,
      abort: (msg, file, line, colm) => {
        throw new Error(`bindingC abort line=${line} colm=${colm}`)
      }
    },
    'sodium-c': sodium._original
  })

  heap.setRuntime(bindingC)

  sodium.crypto_aead_chacha20poly1305_ietf_encrypt = bindingC.crypto_aead_chacha20poly1305_ietf_encrypt
  sodium.crypto_aead_chacha20poly1305_ietf_decrypt = bindingC.crypto_aead_chacha20poly1305_ietf_decrypt
  sodium.crypto_aead_xchacha20poly1305_ietf_encrypt = bindingC.crypto_aead_xchacha20poly1305_ietf_encrypt
  sodium.crypto_aead_xchacha20poly1305_ietf_decrypt = bindingC.crypto_aead_xchacha20poly1305_ietf_decrypt

  return sodium
}

module.exports = loadSodiumWasm

}).call(this)}).call(this,require("buffer").Buffer)
},{"../build/aead_chacha20poly1305":1,"../build/aead_xchacha20poly1305":2,"../build/binding-c":3,"../build/core_hchacha20":5,"../build/crypto_kx":6,"../build/onetimeauth_poly1305":7,"../build/stream_chacha20":8,"../sodium-modules":14,"./create-import":10,"./load-sync":13,"buffer":164}],13:[function(require,module,exports){
module.exports = function loadSync (binary, importObj) {
  const instance = new WebAssembly.Instance(new WebAssembly.Module(binary), importObj)
  return instance.exports
}

},{}],14:[function(require,module,exports){
module.exports=[
  {
    "lib": [
      "crypto_onetimeauth/poly1305/libsodium_la-onetimeauth_poly1305.o",
      "crypto_onetimeauth/poly1305/donna/libsodium_la-poly1305_donna.o"
    ],
    "name": "onetimeauth_poly1305",
    "functions": [
      "crypto_onetimeauth_poly1305_final",
      "crypto_onetimeauth_poly1305_init",
      "crypto_onetimeauth_poly1305_update"
    ]
  },
  {
    "lib": [
      "crypto_core/hchacha20/libsodium_la-core_hchacha20.o"
    ],
    "name": "core_hchacha20",
    "functions": [
      "crypto_core_hchacha20"
    ]
  },
  {
    "lib": [
      "crypto_stream/chacha20/libsodium_la-stream_chacha20.o",
      "crypto_stream/chacha20/ref/libsodium_la-chacha20_ref.o"
    ],
    "name": "stream_chacha20",
    "functions": [
      "crypto_stream_chacha20_ietf",
      "crypto_stream_chacha20_ietf_ext",
      "crypto_stream_chacha20_ietf_ext_xor_ic",
      "crypto_stream_chacha20_ietf_xor_ic"
    ]
  },
  {
    "lib": [
      "crypto_aead/chacha20poly1305/sodium/libsodium_la-aead_chacha20poly1305.o"
    ],
    "name": "aead_chacha20poly1305",
    "functions": [
      "crypto_aead_chacha20poly1305_ietf_decrypt",
      "crypto_aead_chacha20poly1305_ietf_encrypt"
    ],
    "constants": {
      "crypto_aead_chacha20poly1305_ietf_keybytes": "crypto_aead_chacha20poly1305_ietf_KEYBYTES",
      "crypto_aead_chacha20poly1305_ietf_npubbytes": "crypto_aead_chacha20poly1305_ietf_NPUBBYTES",
      "crypto_aead_chacha20poly1305_ietf_nsecbytes": "crypto_aead_chacha20poly1305_ietf_NSECBYTES",
      "crypto_aead_chacha20poly1305_ietf_abytes": "crypto_aead_chacha20poly1305_ietf_ABYTES"
    }
  },
  {
    "lib": [
      "crypto_aead/xchacha20poly1305/sodium/libsodium_la-aead_xchacha20poly1305.o"
    ],
    "name": "aead_xchacha20poly1305",
    "functions": [
      "crypto_aead_xchacha20poly1305_ietf_decrypt",
      "crypto_aead_xchacha20poly1305_ietf_encrypt"
    ],
    "constants": {
      "crypto_aead_xchacha20poly1305_ietf_keybytes": "crypto_aead_xchacha20poly1305_ietf_KEYBYTES",
      "crypto_aead_xchacha20poly1305_ietf_npubbytes": "crypto_aead_xchacha20poly1305_ietf_NPUBBYTES",
      "crypto_aead_xchacha20poly1305_ietf_nsecbytes": "crypto_aead_xchacha20poly1305_ietf_NSECBYTES",
      "crypto_aead_xchacha20poly1305_ietf_abytes": "crypto_aead_xchacha20poly1305_ietf_ABYTES"
    }
  },
  {
    "lib": [
      "crypto_kx/libsodium_la-crypto_kx.o"
    ],
    "name": "crypto_kx",
    "functions": [
      "crypto_kx_keypair",
      "crypto_kx_seed_keypair",
      "crypto_kx_client_session_keys",
      "crypto_kx_server_session_keys"
    ],
    "constants": {
      "crypto_kx_sessionkeybytes": "crypto_kx_SESSIONKEYBYTES",
      "crypto_kx_publickeybytes": "crypto_kx_PUBLICKEYBYTES",
      "crypto_kx_secretkeybytes": "crypto_kx_SECRETKEYBYTES",
      "crypto_kx_seedbytes": "crypto_kx_SEEDBYTES"
   }
  }
]

},{}],15:[function(require,module,exports){
const { Protocol } = require('./lib/protocol')
const { Node } = require('./lib/node')
const { NodeProxy } = require('./lib/node-proxy')

module.exports = Node

module.exports.relay = function relay (dht, stream) {
  const protocol = new Protocol(stream)

  return new Promise((resolve) => {
    const onHandshake = (message) => {
      const node = new NodeProxy(dht, protocol, {
        publicKey: message.publicKey,
        secretKey: message.secretKey
      })

      resolve(node)
    }

    protocol
      .once('handshake', onHandshake)
      .heartbeat()
  })
}

},{"./lib/node":25,"./lib/node-proxy":24,"./lib/protocol":26}],16:[function(require,module,exports){
const { fixed32, fixed64, uint32, buffer: nullableBuffer, array } = require('compact-encoding')
const { ipv4Address } = require('compact-encoding-net')
const { alloc } = require('b4a')

const buffer = {
  ...nullableBuffer,
  decode (state) {
    const b = nullableBuffer.decode(state)
    return b === null ? alloc(0) : b
  }
}

const publicKey = fixed32

const secretKey = fixed64

const topic = fixed32

const peerId = nullableBuffer

const id = uint32

const batch = array(buffer)

const token = fixed32

const node = {
  preencode (state, m) {
    peerId.preencode(state, m.id)
    ipv4Address.preencode(state, m)
  },
  encode (state, m) {
    peerId.encode(state, m.id)
    ipv4Address.encode(state, m)
  },
  decode (state) {
    return {
      id: peerId.decode(state),
      ...ipv4Address.decode(state)
    }
  }
}

const relayAddresses = array(ipv4Address)

const peer = {
  preencode (state, m) {
    publicKey.preencode(state, m.publicKey)
    relayAddresses.preencode(state, m.relayAddresses)
  },
  encode (state, m) {
    publicKey.encode(state, m.publicKey)
    relayAddresses.encode(state, m.relayAddresses)
  },
  decode (state) {
    return {
      publicKey: publicKey.decode(state),
      relayAddresses: relayAddresses.decode(state)
    }
  }
}

const peers = array(peer)

const announcers = {
  preencode (state, m) {
    token.preencode(state, m.token)
    node.preencode(state, m.from)
    node.preencode(state, m.to)
    peers.preencode(state, m.peers)
  },
  encode (state, m) {
    token.encode(state, m.token)
    node.encode(state, m.from)
    node.encode(state, m.to)
    peers.encode(state, m.peers)
  },
  decode (state) {
    return {
      token: token.decode(state),
      from: node.decode(state),
      to: node.decode(state),
      peers: peers.decode(state)
    }
  }
}

module.exports = {
  buffer,
  publicKey,
  secretKey,
  topic,
  peerId,
  id,
  batch,
  token,
  node,
  relayAddresses,
  peer,
  peers,
  announcers
}

},{"b4a":102,"compact-encoding":178,"compact-encoding-net":176}],17:[function(require,module,exports){
const sodium = require('sodium-universal')
const buffer = require('b4a')

function keyPair (seed) {
  const publicKey = buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES)
  const secretKey = buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES)

  if (seed) sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed)
  else sodium.crypto_sign_keypair(publicKey, secretKey)

  return { publicKey, secretKey }
}

function hash (data) {
  const b = buffer.allocUnsafe(32)
  sodium.crypto_generichash(b, data)
  return b
}

module.exports = {
  keyPair,
  hash
}

},{"b4a":102,"sodium-universal":53}],18:[function(require,module,exports){
const { noisePayload } = require('hyperdht/lib/messages')
const { encode } = require('compact-encoding')

const { nextId } = require('./id')

class FirewallProxy {
  constructor (node, protocol, serverAlias) {
    this._node = node
    this._protocol = protocol
    this._serverAlias = serverAlias

    this._deny = deny.bind(this)

    this._requests = new Map()

    this._onDeny = onDeny.bind(this)
    this._onAccept = onAccept.bind(this)
  }
}

module.exports = {
  FirewallProxy
}

function deny (remotePublicKey, remoteHandshakePayload) {
  const id = nextId()

  this._protocol.incoming.send({
    id,
    serverAlias: this._serverAlias,
    remotePublicKey,
    payload: encode(noisePayload, remoteHandshakePayload)
  })

  return new Promise((resolve) => {
    this._requests.set(id, onResolve.bind(this, resolve, id))
  })
}

function onResolve (resolve, id, deny) {
  this._requests.delete(id)

  resolve(deny)
}

function onDeny (message) {
  const resolve = this._requests.get(message.id)

  if (resolve) resolve(true)
}

function onAccept (message) {
  const resolve = this._requests.get(message.id)

  if (resolve) resolve(false)
}

},{"./id":22,"compact-encoding":178,"hyperdht/lib/messages":359}],19:[function(require,module,exports){
const { noisePayload } = require('hyperdht/lib/messages')
const { decode } = require('compact-encoding')
const safetyCatch = require('safety-catch')

class Firewall {
  constructor (node, protocol, deny) {
    this._node = node
    this._protocol = protocol
    this._deny = deny

    this._onIncoming = onIncoming.bind(this)
  }
}

module.exports = {
  Firewall
}

async function onIncoming (message) {
  const remoteHandshakePayload = decode(noisePayload, message.payload)

  let deny = true
  try {
    deny = await this._deny(message.remotePublicKey, remoteHandshakePayload)
  } catch (err) {
    safetyCatch(err)
  }

  if (deny) this._protocol.deny.send({ id: message.id })
  else this._protocol.accept.send({ id: message.id })
}

},{"compact-encoding":178,"hyperdht/lib/messages":359,"safety-catch":486}],20:[function(require,module,exports){
const { noisePayload } = require('hyperdht/lib/messages')
const { encode, decode } = require('compact-encoding')

class HandshakeProxy {
  constructor (node, protocol, id, remoteStreamAlias, serverAlias, isInitiator, keyPair, remotePublicKey) {
    this._node = node
    this._protocol = protocol
    this._id = id
    this._remoteStreamAlias = remoteStreamAlias
    this._serverAlias = serverAlias
    this._isInitiator = isInitiator
    this._keyPair = keyPair
    this._remotePublicKey = remotePublicKey

    this._remoteId = null
    this._holepunchSecret = null

    this._onNoiseReply = null
  }

  send (payload) {
    this._protocol.noiseSend.send({
      isInitiator: this._isInitiator,
      id: this._id,
      remoteStreamAlias: this._remoteStreamAlias,
      payload: encode(noisePayload, payload)
    })

    return new Promise((resolve, reject) => {
      this._onNoiseReply = onNoiseSendReply.bind(this, resolve, reject)
    })
  }

  recv (payload) {
    this._protocol.noiseReceive.send({
      isInitiator: this._isInitiator,
      id: this._id,
      serverAlias: this._serverAlias,
      payload
    })

    return new Promise((resolve, reject) => {
      this._onNoiseReply = onNoiseReceiveReply.bind(this, resolve, reject)
    })
  }

  final () {
    return {
      id: this._id,
      isInitiator: this._isInitiator,
      publicKey: this._keyPair.publicKey,
      remoteId: this._remoteId,
      remotePublicKey: this._remotePublicKey,
      holepunchSecret: this._holepunchSecret
    }
  }
}

module.exports = {
  HandshakeProxy
}

function onNoiseSendReply (resolve, reject, message) {
  this._onNoiseReply = null

  if (message.remotePublicKey) {
    this._remotePublicKey = message.remotePublicKey
  }

  if (message.complete) {
    this._remoteId = message.remoteId
    this._holepunchSecret = message.holepunchSecret
  }

  resolve(message.payload)
}

function onNoiseReceiveReply (resolve, reject, message) {
  this._onNoiseReply = null

  if (message.remotePublicKey) {
    this._remotePublicKey = message.remotePublicKey
  }

  if (message.complete) {
    this._remoteId = message.remoteId
    this._holepunchSecret = message.holepunchSecret
  }

  if (message.payload.length === 0) {
    this._node._handshakes.delete(this._id)

    reject(new Error('Handshake denied'))
  } else {
    resolve({ id: message.id, ...decode(noisePayload, message.payload) })
  }
}

},{"compact-encoding":178,"hyperdht/lib/messages":359}],21:[function(require,module,exports){
const buffer = require('b4a')
const NoiseHandshake = require('noise-handshake')
const SecretStream = require('@hyperswarm/secret-stream')
const { NS } = require('hyperdht/lib/constants')
const curve = require('noise-curve-ed')
const sodium = require('sodium-universal')
const { decode } = require('compact-encoding')
const { noisePayload } = require('hyperdht/lib/messages')
const safetyCatch = require('safety-catch')

const NOISE_PROLOUGE = NS.PEER_HANDSHAKE

class Handshake {
  constructor (node, protocol, firewall, id, isInitiator, keyPair, remotePublicKey) {
    this._node = node
    this._protocol = protocol
    this._firewall = firewall
    this._id = id

    this.isInitiator = isInitiator
    this.keyPair = keyPair
    this.remotePublicKey = remotePublicKey
    this.remoteId = null
    this.holepunchSecret = null
    this.complete = false

    this._handshake = new NoiseHandshake('IK', isInitiator, keyPair, { curve })
    this._handshake.initialise(NOISE_PROLOUGE, remotePublicKey)

    this._onComplete = onComplete.bind(this)
    this._onNoise = onNoise.bind(this)
    this._onNoiseSend = onNoiseSend.bind(this)
    this._onNoiseReceive = onNoiseReceive.bind(this)
  }

  get hash () {
    return this._handshake.hash
  }

  get tx () {
    return this._handshake.tx
  }

  get rx () {
    return this._handshake.rx
  }
}

module.exports = {
  Handshake
}

function onComplete () {
  this.complete = true

  const hash = this._handshake.hash

  this.remoteId = SecretStream.id(hash, true)
  this.holepunchSecret = buffer.allocUnsafe(32)

  sodium.crypto_generichash(this.holepunchSecret, NS.PEER_HOLEPUNCH, hash)
}

function onNoise (payload) {
  if (this._handshake.complete) {
    this._onComplete()
  } else {
    this.remotePublicKey = this._handshake.rs

    if (this._firewall) {
      const remoteHandshakePayload = decode(noisePayload, payload)

      let deny = true
      try {
        deny = this._firewall._deny(this.remotePublicKey, remoteHandshakePayload)
      } catch (err) {
        safetyCatch(err)
      }

      if (deny) {
        this._node._handshakes.delete(this._id)

        return this._protocol.noiseReply.send({
          id: this._id,
          payload: null,
          remotePublicKey: this.remotePublicKey
        })
      }
    }
  }

  this._protocol.noiseReply.send({
    id: this._id,
    payload,
    isInitiator: this.isInitiator,
    complete: this.complete,
    remoteId: this.remoteId,
    holepunchSecret: this.holepunchSecret,
    remotePublicKey: this.remotePublicKey
  })
}

function onNoiseSend (message) {
  this._onNoise(this._handshake.send(message.payload))
}

function onNoiseReceive (message) {
  this._onNoise(this._handshake.recv(message.payload))
}

},{"@hyperswarm/secret-stream":60,"b4a":102,"compact-encoding":178,"hyperdht/lib/constants":357,"hyperdht/lib/messages":359,"noise-curve-ed":392,"noise-handshake":421,"safety-catch":486,"sodium-universal":53}],22:[function(require,module,exports){
function idFactory (start, step = 1, limit = 2 ** 32) {
  let id = start

  return function nextId () {
    const nextId = id
    id += step
    if (id >= limit) id = start
    return nextId
  }
}

module.exports = {
  nextId: idFactory(1)
}

},{}],23:[function(require,module,exports){
const { fixed32, fixed64, none, string } = require('compact-encoding')
const { ipv4Address } = require('compact-encoding-net')

const { buffer, publicKey, secretKey, id, batch, topic, peerId, token, relayAddresses } = require('./codecs')

const handshake = {
  preencode (state, m) {
    state.end++ // Flags
    publicKey.preencode(state, m.publicKey)
    if (m.custodial) secretKey.preencode(state, m.secretKey)
  },
  encode (state, m) {
    const s = state.start++
    let flags = 0

    publicKey.encode(state, m.publicKey)

    if (m.custodial) {
      flags |= 1
      secretKey.encode(state, m.secretKey)
    }

    state.buffer[s] = flags
  },
  decode (state) {
    const flags = state.buffer[state.start++]

    const custodial = (flags & 1) !== 0

    return {
      custodial,
      publicKey: publicKey.decode(state),
      secretKey: custodial ? secretKey.decode(state) : null
    }
  }
}

const ping = none

const pong = none

const connect = {
  preencode (state, m) {
    state.end++ // Flags
    id.preencode(state, m.alias)
    publicKey.preencode(state, m.publicKey)
    if (m.custodial) secretKey.preencode(state, m.secretKey)
    publicKey.preencode(state, m.remotePublicKey)
  },
  encode (state, m) {
    const s = state.start++
    let flags = 0

    id.encode(state, m.alias)
    publicKey.encode(state, m.publicKey)

    if (m.custodial) {
      flags |= 1
      secretKey.encode(state, m.secretKey)
    }

    state.buffer[s] = flags
    publicKey.encode(state, m.remotePublicKey)
  },
  decode (state) {
    const flags = state.buffer[state.start++]

    const custodial = (flags & 1) !== 0

    return {
      custodial,
      alias: id.decode(state),
      publicKey: publicKey.decode(state),
      secretKey: custodial ? secretKey.decode(state) : null,
      remotePublicKey: publicKey.decode(state)
    }
  }
}

const connection = {
  preencode (state, m) {
    state.end++ // Flags
    id.preencode(state, m.alias)
    id.preencode(state, m.serverAlias)
    publicKey.preencode(state, m.remotePublicKey)
    if (m.custodial) fixed64.preencode(state, m.handshakeHash)
    else id.preencode(state, m.handshakeId)
  },
  encode (state, m) {
    const s = state.start++
    let flags = 0

    id.encode(state, m.alias)
    id.encode(state, m.serverAlias)
    publicKey.encode(state, m.remotePublicKey)

    if (m.custodial) {
      flags |= 1
      fixed64.encode(state, m.handshakeHash)
    } else {
      id.encode(state, m.handshakeId)
    }

    state.buffer[s] = flags
  },
  decode (state) {
    const flags = state.buffer[state.start++]

    const custodial = (flags & 1) !== 0

    return {
      custodial,
      alias: id.decode(state),
      serverAlias: id.decode(state),
      remotePublicKey: publicKey.decode(state),
      handshakeHash: custodial ? fixed64.decode(state) : null,
      handshakeId: custodial ? null : id.decode(state)
    }
  }
}

const connected = {
  preencode (state, m) {
    id.preencode(state, m.alias)
    id.preencode(state, m.remoteAlias)
  },
  encode (state, m) {
    id.encode(state, m.alias)
    id.encode(state, m.remoteAlias)
  },
  decode (state) {
    return {
      alias: id.decode(state),
      remoteAlias: id.decode(state)
    }
  }
}

const incoming = {
  preencode (state, m) {
    id.preencode(state, m.id)
    id.preencode(state, m.serverAlias)
    publicKey.preencode(state, m.remotePublicKey)
    buffer.preencode(state, m.payload)
  },
  encode (state, m) {
    id.encode(state, m.id)
    id.encode(state, m.serverAlias)
    publicKey.encode(state, m.remotePublicKey)
    buffer.encode(state, m.payload)
  },
  decode (state) {
    return {
      id: id.decode(state),
      serverAlias: id.decode(state),
      remotePublicKey: publicKey.decode(state),
      payload: buffer.decode(state)
    }
  }
}

const deny = {
  preencode (state, m) {
    id.preencode(state, m.id)
  },
  encode (state, m) {
    id.encode(state, m.id)
  },
  decode (state) {
    return {
      id: id.decode(state)
    }
  }
}

const accept = deny

const destroy = {
  preencode (state, m) {
    state.end++ // Flags
    if (m.paired) id.preencode(state, isValidUint32(m.alias) ? m.alias : 0)
    else id.preencode(state, isValidUint32(m.remoteAlias) ? m.remoteAlias : 0)
    if (m.error) string.preencode(state, m.error)
  },
  encode (state, m) {
    const s = state.start++
    let flags = 0

    if (m.paired) {
      flags |= 1
      id.encode(state, isValidUint32(m.alias) ? m.alias : 0)
    } else {
      id.encode(state, isValidUint32(m.remoteAlias) ? m.remoteAlias : 0)
    }

    if (m.error) {
      flags |= 2
      string.encode(state, m.error)
    }

    state.buffer[s] = flags
  },
  decode (state) {
    const flags = state.buffer[state.start++]

    const paired = (flags & 1) !== 0

    return {
      paired,
      alias: paired ? id.decode(state) : null,
      remoteAlias: paired ? null : id.decode(state),
      error: (flags & 2) === 0 ? null : string.decode(state)
    }
  }
}

// Helper for uint32 validation
function isValidUint32(n) {
  return typeof n === 'number' && n >= 0 && Number.isFinite(n) && n <= 0xFFFFFFFF;
}

const listen = {
  preencode (state, m) {
    state.end++ // Flags
    id.preencode(state, m.server)
    publicKey.preencode(state, m.publicKey)
    if (m.custodial) secretKey.preencode(state, m.secretKey)
  },
  encode (state, m) {
    const s = state.start++
    let flags = 0

    id.encode(state, m.alias)
    publicKey.encode(state, m.publicKey)

    if (m.custodial) {
      flags |= 1
      secretKey.encode(state, m.secretKey)
    }

    state.buffer[s] = flags
  },
  decode (state) {
    const flags = state.buffer[state.start++]

    const custodial = (flags & 1) !== 0

    return {
      custodial,
      alias: id.decode(state),
      publicKey: publicKey.decode(state),
      secretKey: custodial ? secretKey.decode(state) : null
    }
  }
}

const listening = {
  preencode (state, m) {
    id.preencode(state, m.alias)
    id.preencode(state, m.remoteAlias)
    ipv4Address.preencode(state, m)
  },
  encode (state, m) {
    id.encode(state, m.alias)
    id.encode(state, m.remoteAlias)
    ipv4Address.encode(state, m)
  },
  decode (state) {
    return {
      alias: id.decode(state),
      remoteAlias: id.decode(state),
      ...ipv4Address.decode(state)
    }
  }
}

const close = {
  preencode (state, m) {
    id.preencode(state, m.alias)
  },
  encode (state, m) {
    id.encode(state, m.alias)
  },
  decode (state) {
    return {
      alias: id.decode(state)
    }
  }
}

const closed = close

const open = {
  preencode (state, m) {
    state.end++ // Flags
    id.preencode(state, m.alias)
    id.preencode(state, m.remoteAlias)
    if (m.custodial) fixed64.preencode(state, m.handshakeHash)
    else id.preencode(state, m.handshakeId)
  },
  encode (state, m) {
    const s = state.start++
    let flags = 0

    id.encode(state, m.alias)
    id.encode(state, m.remoteAlias)

    if (m.custodial) {
      flags |= 1
      fixed64.encode(state, m.handshakeHash)
    } else {
      id.encode(state, m.handshakeId)
    }

    state.buffer[s] = flags
  },
  decode (state) {
    const flags = state.buffer[state.start++]

    const custodial = (flags & 1) !== 0

    return {
      custodial,
      alias: id.decode(state),
      remoteAlias: id.decode(state),
      handshakeHash: custodial ? fixed64.decode(state) : null,
      handshakeId: custodial ? null : id.decode(state)
    }
  }
}

const end = {
  preencode (state, m) {
    id.preencode(state, m.alias)
  },
  encode (state, m) {
    id.encode(state, m.alias)
  },
  decode (state) {
    return {
      alias: id.decode(state)
    }
  }
}

const data = {
  preencode (state, m) {
    id.preencode(state, m.alias)
    batch.preencode(state, m.data)
  },
  encode (state, m) {
    id.encode(state, m.alias)
    batch.encode(state, m.data)
  },
  decode (state) {
    return {
      alias: id.decode(state),
      data: batch.decode(state)
    }
  }
}

const result = {
  preencode (state, m) {
    id.preencode(state, m.id)
    buffer.preencode(state, m.data)
  },
  encode (state, m) {
    id.encode(state, m.id)
    buffer.encode(state, m.data)
  },
  decode (state) {
    return {
      id: id.decode(state),
      data: buffer.decode(state)
    }
  }
}

const finished = {
  preencode (state, m) {
    id.preencode(state, m.id)
  },
  encode (state, m) {
    id.encode(state, m.id)
  },
  decode (state) {
    return {
      id: id.decode(state)
    }
  }
}

const lookup = {
  preencode (state, m) {
    id.preencode(state, m.id)
    topic.preencode(state, m.topic)
  },
  encode (state, m) {
    id.encode(state, m.id)
    topic.encode(state, m.topic)
  },
  decode (state) {
    return {
      id: id.decode(state),
      topic: topic.decode(state)
    }
  }
}

const announce = {
  preencode (state, m) {
    state.end++ // Flags
    id.preencode(state, m.id)
    topic.preencode(state, m.topic)
    publicKey.preencode(state, m.publicKey)
    if (m.custodial) secretKey.preencode(state, m.secretKey)
  },
  encode (state, m) {
    const s = state.start++
    let flags = 0

    id.encode(state, m.id)
    topic.encode(state, m.topic)
    publicKey.encode(state, m.publicKey)

    if (m.custodial) {
      flags |= 1
      secretKey.encode(state, m.secretKey)
    }

    state.buffer[s] = flags
  },
  decode (state) {
    const flags = state.buffer[state.start++]

    const custodial = (flags & 1) !== 0

    return {
      custodial,
      id: id.decode(state),
      topic: topic.decode(state),
      publicKey: publicKey.decode(state),
      secretKey: custodial ? secretKey.decode(state) : null
    }
  }
}

const unannounce = announce

const signAnnounce = {
  preencode (state, m) {
    id.preencode(state, m.id)
    id.preencode(state, m.signee)
    token.preencode(state, m.token)
    peerId.preencode(state, m.peerId)
    relayAddresses.preencode(state, m.relayAddresses)
  },
  encode (state, m) {
    id.encode(state, m.id)
    id.encode(state, m.signee)
    token.encode(state, m.token)
    peerId.encode(state, m.peerId)
    relayAddresses.encode(state, m.relayAddresses)
  },
  decode (state) {
    return {
      id: id.decode(state),
      signee: id.decode(state),
      token: token.decode(state),
      peerId: peerId.decode(state),
      relayAddresses: relayAddresses.decode(state)
    }
  }
}

const signUnannounce = signAnnounce

const signature = {
  preencode (state, m) {
    id.preencode(state, m.id)
    buffer.preencode(state, m.signature)
  },
  encode (state, m) {
    id.encode(state, m.id)
    buffer.encode(state, m.signature)
  },
  decode (state) {
    return {
      id: id.decode(state),
      signature: buffer.decode(state)
    }
  }
}

const noiseSend = {
  preencode (state, m) {
    state.end++ // Flags
    id.preencode(state, m.id)
    if (m.isInitiator) id.preencode(state, m.remoteStreamAlias)
    buffer.preencode(state, m.payload)
  },
  encode (state, m) {
    const s = state.start++
    let flags = 0

    id.encode(state, m.id)

    if (m.isInitiator) {
      flags |= 1
      id.encode(state, m.remoteStreamAlias)
    }

    buffer.encode(state, m.payload)

    state.buffer[s] = flags
  },
  decode (state) {
    const flags = state.buffer[state.start++]

    const isInitiator = (flags & 1) !== 0

    return {
      isInitiator,
      id: id.decode(state),
      remoteStreamAlias: isInitiator ? id.decode(state) : null,
      payload: buffer.decode(state)
    }
  }
}

const noiseReceive = {
  preencode (state, m) {
    state.end++ // Flags
    id.preencode(state, m.id)
    if (!m.isInitiator) id.preencode(state, m.serverAlias)
    buffer.preencode(state, m.payload)
  },
  encode (state, m) {
    const s = state.start++
    let flags = 0

    id.encode(state, m.id)

    if (m.isInitiator) {
      flags |= 1
    } else {
      id.encode(state, m.serverAlias)
    }

    buffer.encode(state, m.payload)

    state.buffer[s] = flags
  },
  decode (state) {
    const flags = state.buffer[state.start++]

    const isInitiator = (flags & 1) !== 0

    return {
      isInitiator,
      id: id.decode(state),
      serverAlias: isInitiator ? null : id.decode(state),
      payload: buffer.decode(state)
    }
  }
}

const noiseReply = {
  preencode (state, m) {
    state.end++ // Flags
    id.preencode(state, m.id)
    buffer.preencode(state, m.payload)

    if (!m.isInitiator && !m.complete) publicKey.preencode(state, m.remotePublicKey)

    if (m.complete) {
      fixed32.preencode(state, m.remoteId)
      fixed32.preencode(state, m.holepunchSecret)
    }
  },
  encode (state, m) {
    const s = state.start++
    let flags = 0

    id.encode(state, m.id)
    buffer.encode(state, m.payload)

    if (m.isInitiator) flags |= 1

    if (!m.isInitiator && !m.complete) {
      publicKey.encode(state, m.remotePublicKey)
    }

    if (m.complete) {
      flags |= 2
      fixed32.encode(state, m.remoteId)
      fixed32.encode(state, m.holepunchSecret)
    }

    state.buffer[s] = flags
  },
  decode (state) {
    const flags = state.buffer[state.start++]

    const isInitiator = (flags & 1) !== 0
    const complete = (flags & 2) !== 0

    return {
      isInitiator,
      complete,
      id: id.decode(state),
      payload: buffer.decode(state),
      remotePublicKey: isInitiator || complete ? null : publicKey.decode(state),
      remoteId: complete ? fixed32.decode(state) : null,
      holepunchSecret: complete ? fixed32.decode(state) : null
    }
  }
}

module.exports = {
  handshake,
  ping,
  pong,
  connect,
  connection,
  connected,
  incoming,
  deny,
  accept,
  destroy,
  listen,
  listening,
  close,
  closed,
  open,
  end,
  data,
  result,
  finished,
  lookup,
  announce,
  unannounce,
  signAnnounce,
  signUnannounce,
  signature,
  noiseSend,
  noiseReceive,
  noiseReply
}

},{"./codecs":16,"compact-encoding":178,"compact-encoding-net":176}],24:[function(require,module,exports){
const { encode } = require('compact-encoding')

const { HandshakeProxy } = require('./handshake-proxy')
const { ServerProxy } = require('./server-proxy')
const { SigneeProxy } = require('./signee-proxy')
const { StreamProxy } = require('./stream-proxy')

const { announcers } = require('./codecs')
const { nextId } = require('./id')

class NodeProxy {
  constructor (dht, protocol, defaultKeyPair) {
    this._dht = dht
    this._protocol = protocol
    this._defaultKeyPair = defaultKeyPair

    this._servers = new Map()
    this._queries = new Map()
    this._connecting = new Map()
    this._connections = new Map()
    this._handshakes = new Map()
    this._signatures = new Map()

    this._onStreamClose = onStreamClose.bind(this)

    this._protocol._stream
      .once('close', this._onStreamClose)

    this._onConnect = onConnect.bind(this)
    this._onConnected = onConnected.bind(this)
    this._onDeny = onDeny.bind(this)
    this._onAccept = onAccept.bind(this)
    this._onListen = onListen.bind(this)
    this._onDestroy = onDestroy.bind(this)
    this._onEnd = onEnd.bind(this)
    this._onData = onData.bind(this)
    this._onQuery = onQuery.bind(this)
    this._onLookup = onLookup.bind(this)
    this._onAnnounce = onAnnounce.bind(this)
    this._onUnannounce = onUnannounce.bind(this)
    this._onClose = onClose.bind(this)
    this._onSignature = onSignature.bind(this)
    this._onNoiseReply = onNoiseReply.bind(this)

    this._protocol
      .on('connect', this._onConnect)
      .on('connected', this._onConnected)
      .on('deny', this._onDeny)
      .on('accept', this._onAccept)
      .on('listen', this._onListen)
      .on('destroy', this._onDestroy)
      .on('end', this._onEnd)
      .on('data', this._onData)
      .on('lookup', this._onLookup)
      .on('announce', this._onAnnounce)
      .on('unannounce', this._onUnannounce)
      .on('close', this._onClose)
      .on('signature', this._onSignature)
      .on('noiseReply', this._onNoiseReply)
  }
}

module.exports = {
  NodeProxy
}

function onStreamClose () {
  this._protocol
    .off('connect', this._onConnect)
    .off('connected', this._onConnected)
    .off('deny', this._onDeny)
    .off('accept', this._onAccept)
    .off('listen', this._onListen)
    .off('destroy', this._onDestroy)
    .off('end', this._onEnd)
    .off('data', this._onData)
    .off('lookup', this._onLookup)
    .off('announce', this._onAnnounce)
    .off('unannounce', this._onUnannounce)
    .off('close', this._onClose)
    .off('signature', this._onSignature)
    .off('noiseReply', this._onNoiseReply)

  for (const connection of this._connections.values()) {
    connection.destroy()
  }
}

function onConnect (message) {
  const remoteAlias = message.alias
  const alias = nextId()

  const custodial = message.secretKey !== null

  const stream = this._dht.connect(message.remotePublicKey, {
    keyPair: {
      publicKey: message.publicKey,
      secretKey: message.secretKey
    },
    createHandshake: custodial
      ? null
      : createHandshake.bind(this, remoteAlias),
    createSecretStream: custodial
      ? null
      : createSecretStream.bind(this, alias, remoteAlias)
  })

  this._connections.set(remoteAlias, stream)

  let paired = false

  const onError = (err) => {
    this._protocol.destroy.send({
      paired,
      alias,
      remoteAlias,
      error: err.message
    })
  }

  const onClose = () => {
    stream
      .off('error', onError)
      .off('open', onOpen)
      .off('end', onEnd)
      .off('data', onData)

    this._connections.delete(remoteAlias)
  }

  const onOpen = () => {
    paired = true

    this._protocol.open.send({
      custodial,
      alias,
      remoteAlias,
      handshakeHash: stream.handshakeHash,
      handshakeId: stream.handshakeId
    })
  }

  const onEnd = () => {
    this._protocol.end.send({ alias })
  }

  const onData = (data) => {
    this._protocol.data.send({ alias, data: [data] })
  }

  stream
    .once('error', onError)
    .once('close', onClose)
    .once('open', onOpen)
    .once('end', onEnd)
    .on('data', onData)
}

function onConnected (message) {
  const stream = this._connecting.get(message.remoteAlias)

  if (stream) {
    this._connecting.delete(message.remoteAlias)
    this._connections.set(message.alias, stream)

    const onClose = () => {
      this._connections.delete(message.alias)
    }

    stream
      .once('close', onClose)
  }
}

function onDeny (message) {
  for (const server of this._servers.values()) {
    const request = server._firewall._requests.get(message.id)

    if (request) return server._firewall._onDeny(message)
  }
}

function onAccept (message) {
  for (const server of this._servers.values()) {
    const request = server._firewall._requests.get(message.id)

    if (request) return server._firewall._onAccept(message)
  }
}

function onListen (message) {
  const remoteAlias = message.alias
  const alias = nextId()

  const server = new ServerProxy(this, this._protocol, alias, remoteAlias, message)

  this._servers.set(remoteAlias, server)
}

function onDestroy (message) {
  const stream = this._connections.get(message.alias)

  if (stream) {
    stream.destroy(message.error && new Error(message.error))
  }
}

function onEnd (message) {
  const stream = this._connections.get(message.alias)

  if (stream) stream.end()
}

function onData (message) {
  const stream = this._connections.get(message.alias)

  if (stream) {
    for (const chunk of message.data) stream.write(chunk)
  }
}

function onQuery (message, query, encoding) {
  this._queries.set(message.id, query)

  const onError = () => {
    // Todo
  }

  const onClose = () => {
    query
      .off('error', onError)
      .off('data', onData)

    this._queries.delete(message.id)
    this._protocol.finished.send(message)
  }

  const onData = (data) => {
    this._protocol.result.send({
      id: message.id,
      data: encode(encoding, data)
    })
  }

  query
    .once('error', onError)
    .once('close', onClose)
    .on('data', onData)
}

function onLookup (message) {
  this._onQuery(
    message,
    this._dht.lookup(message.topic),
    announcers
  )
}

function onAnnounce (message) {
  const custodial = message.secretKey !== null

  const signee = new SigneeProxy(
    this,
    this._protocol,
    message.topic,
    message.id
  )

  this._onQuery(
    message,
    this._dht.announce(message.topic, {
      publicKey: message.publicKey,
      secretKey: message.secretKey
    }, [], {
      signAnnounce: custodial ? null : signee._signAnnounce,
      signUnannounce: custodial ? null : signee._signUnannounce
    }),
    announcers
  )
}

function onUnannounce (message) {
  const custodial = message.secretKey !== null

  const signee = new SigneeProxy(
    this,
    this._protocol,
    message.topic,
    message.id
  )

  this._onQuery(
    message,
    this._dht.lookupAndUnannounce(message.topic, {
      publicKey: message.publicKey,
      secretKey: message.secretKey
    }, {
      signAnnounce: custodial ? null : signee._signAnnounce,
      signUnannounce: custodial ? null : signee._signUnannounce
    }),
    announcers
  )
}

function onClose (message) {
  const server = this._servers.get(message.alias)

  if (server) server._onClose(message)
}

function onSignature (message) {
  const signature = this._signatures.get(message.id)

  if (signature) signature.resolve(message.signature)
}

function onNoiseReply (message) {
  const handshake = this._handshakes.get(message.id)

  if (handshake) handshake._onNoiseReply(message)
}

function createHandshake (remoteStreamAlias, keyPair, remotePublicKey) {
  const isInitiator = !!remotePublicKey

  const id = nextId()

  const handshake = new HandshakeProxy(
    this,
    this._protocol,
    id,
    remoteStreamAlias,
    null,
    isInitiator,
    keyPair,
    remotePublicKey
  )

  this._handshakes.set(id, handshake)

  return handshake
}

function createSecretStream (alias, remoteAlias, isInitiator, rawStream, options) {
  return new StreamProxy(
    this._protocol,
    alias,
    remoteAlias,
    isInitiator,
    rawStream,
    options
  )
}

},{"./codecs":16,"./handshake-proxy":20,"./id":22,"./server-proxy":28,"./signee-proxy":30,"./stream-proxy":32,"compact-encoding":178}],25:[function(require,module,exports){
const EventEmitter = require('events')
const SecretStream = require('@hyperswarm/secret-stream')

const { Handshake } = require('./handshake')
const { Protocol } = require('./protocol')
const { Query } = require('./query')
const { Server } = require('./server')
const { Signee } = require('./signee')
const { Stream } = require('./stream')

const { announcers } = require('./codecs')
const { keyPair } = require('./crypto')
const { nextId } = require('./id')

class Node extends EventEmitter {
  constructor (stream, options = {}) {
    super()

    this._protocol = new Protocol(stream)
    this._custodial = options.custodial !== false

    this.defaultKeyPair = options.keyPair || keyPair()

    this._opening = new Map()
    this._servers = new Map()
    this._queries = new Map()
    this._connecting = new Map()
    this._connections = new Map()
    this._handshakes = new Map()
    this._signees = new Map()
    this._destroyed = false

    this._onStreamClose = onStreamClose.bind(this)

    this._protocol._stream
      .once('close', this._onStreamClose)

    this._onListening = onListening.bind(this)
    this._onClosed = onClosed.bind(this)
    this._onConnection = onConnection.bind(this)
    this._onIncoming = onIncoming.bind(this)
    this._onDestroy = onDestroy.bind(this)
    this._onOpen = onOpen.bind(this)
    this._onEnd = onEnd.bind(this)
    this._onData = onData.bind(this)
    this._onResult = onResult.bind(this)
    this._onFinished = onFinished.bind(this)
    this._onSignAnnounce = onSignAnnounce.bind(this)
    this._onSignUnannounce = onSignUnannounce.bind(this)
    this._onNoiseSend = onNoiseSend.bind(this)
    this._onNoiseReceive = onNoiseReceive.bind(this)

    this._protocol
      .on('listening', this._onListening)
      .on('closed', this._onClosed)
      .on('connection', this._onConnection)
      .on('incoming', this._onIncoming)
      .on('destroy', this._onDestroy)
      .on('open', this._onOpen)
      .on('end', this._onEnd)
      .on('data', this._onData)
      .on('result', this._onResult)
      .on('finished', this._onFinished)
      .on('signAnnounce', this._onSignAnnounce)
      .on('signUnannounce', this._onSignUnannounce)
      .on('noiseSend', this._onNoiseSend)
      .on('noiseReceive', this._onNoiseReceive)
      .alive()
      .handshake.send({
        custodial: this._custodial,
        publicKey: this.defaultKeyPair.publicKey,
        secretKey: this.defaultKeyPair.secretKey
      })

    this.ready = async function ready () {
      await this._protocol.ready()
    }
  }

  get destroyed () {
    return this._destroyed !== null
  }

  connect (remotePublicKey, options = {}) {
    const { keyPair = this.defaultKeyPair } = options

    const alias = nextId()

    const stream = new Stream(
      this,
      this._protocol,
      alias,
      null,
      true,
      keyPair,
      remotePublicKey
    )

    this._connecting.set(alias, stream)

    const onClose = () => {
      stream
        .off('open', onOpen)

      this._connecting.delete(stream._alias)
      this._connections.delete(stream._remoteAlias)
    }

    const onOpen = () => {
      this._connecting.delete(stream._alias)
      this._connections.set(stream._remoteAlias, stream)
    }

    stream
      .once('close', onClose)
      .once('open', onOpen)

    this._protocol.connect.send({
      custodial: this._custodial,
      alias,
      publicKey: keyPair.publicKey,
      secretKey: keyPair.secretKey,
      remotePublicKey
    })

    if (this._custodial) return stream

    const encryptedStream = new SecretStream(true, null, {
      publicKey: keyPair.publicKey,
      remotePublicKey,
      autoStart: false
    })

    encryptedStream
      .once('close', onClose)

    stream.noiseStream = encryptedStream

    return encryptedStream
  }

  createServer (options = {}, listener) {
    if (typeof options === 'function') {
      listener = options
      options = {}
    }

    options = { ...options, custodial: this._custodial }

    const alias = nextId()

    const server = new Server(this, this._protocol, alias, options)

    this._opening.set(alias, server)

    const onClose = () => {
      server
        .off('listening', onListening)

      this._opening.delete(server._alias)
      this._servers.delete(server._remoteAlias)
      this._signees.delete(server._alias)
    }

    const onListening = () => {
      this._opening.delete(server._alias)
      this._servers.set(server._remoteAlias, server)
    }

    server
      .once('close', onClose)
      .once('listening', onListening)

    if (listener) server.on('connection', listener)

    return server
  }

  lookup (topic) {
    const query = new Query(this._protocol, topic, announcers)

    this._queries.set(query.id, query)

    const onClose = () => {
      this._queries.delete(query.id)
    }

    query
      .once('close', onClose)

    this._protocol.lookup.send({ id: query.id, topic })

    return query
  }

  announce (topic, keyPair) {
    const query = new Query(this._protocol, topic, announcers)

    this._queries.set(query.id, query)
    this._signees.set(query.id, new Signee(this._protocol, topic, keyPair))

    const onClose = () => {
      this._queries.delete(query.id)
      this._signees.delete(query.id)
    }

    query
      .once('close', onClose)

    this._protocol.announce.send({
      custodial: this._custodial,
      id: query.id,
      topic,
      publicKey: keyPair.publicKey,
      secretKey: keyPair.secretKey
    })

    return query
  }

  unannounce (topic, keyPair) {
    const query = new Query(this._protocol, topic, announcers)

    this._queries.set(query.id, query)
    this._signees.set(query.id, new Signee(this._protocol, topic, keyPair))

    const onClose = () => {
      this._queries.delete(query.id)
      this._signees.delete(query.id)
    }

    query
      .once('close', onClose)

    this._protocol.unannounce.send({
      custodial: this._custodial,
      id: query.id,
      topic,
      publicKey: keyPair.publicKey,
      secretKey: keyPair.secretKey
    })

    return query.resume().finished()
  }

  async destroy (options = {}) {
    if (options.force !== true) {
      const closing = []

      for (const server of this._servers.values()) {
        closing.push(server.close())
      }

      await Promise.allSettled(closing)
    }

    if (this._destroyed) return

    this._destroyed = true
    this._protocol._stream.destroy()
  }

  static keyPair (seed) {
    return keyPair(seed)
  }
}

module.exports = {
  Node
}

function onStreamClose () {
  this._protocol
    .off('listening', this._onListening)
    .off('closed', this._onClosed)
    .off('connection', this._onConnection)
    .off('incoming', this._onIncoming)
    .off('destroy', this._onDestroy)
    .off('open', this._onOpen)
    .off('end', this._onEnd)
    .off('data', this._onData)
    .off('result', this._onResult)
    .off('finished', this._onFinished)
    .off('signAnnounce', this._onSignAnnounce)
    .off('signUnannounce', this._onSignUnannounce)
    .off('noiseSend', this._onNoiseSend)
    .off('noiseReceive', this._onNoiseReceive)
}

function onConnection (message) {
  const server = this._servers.get(message.serverAlias)

  if (server) server._onConnection(message)
}

function onIncoming (message) {
  const server = this._servers.get(message.serverAlias)

  if (server) server._firewall._onIncoming(message)
}

function onDestroy (message) {
  let stream

  if (message.paired) {
    stream = this._connections.get(message.alias)
  } else {
    stream = this._connecting.get(message.remoteAlias)
  }

  if (stream) stream._onDestroy(message)
}

function onListening (message) {
  const server = this._opening.get(message.remoteAlias)

  if (server) server._onListening(message)
}

function onClosed (message) {
  const server = this._servers.get(message.alias)

  if (server) server._onClosed(message)
}

function onOpen (message) {
  const stream = this._connecting.get(message.remoteAlias)

  if (stream) stream._onOpen(message)
}

function onEnd (message) {
  const stream = this._connections.get(message.alias)

  if (stream) stream.push(null)
}

function onData (message) {
  const stream = this._connections.get(message.alias)

  if (stream) {
    if (stream._timeout !== null) {
      stream._timeout.refresh()
    }

    for (const chunk of message.data) {
      if (stream._keepAlive === null || chunk.length > 0) {
        stream.push(chunk)
      }
    }
  }
}

function onResult (message) {
  const query = this._queries.get(message.id)

  if (query) query._onResult(message)
}

function onFinished (message) {
  const query = this._queries.get(message.id)

  if (query) query._onFinished(message)
}

function onSignAnnounce (message) {
  const signee = this._signees.get(message.signee)

  if (signee) signee._onSignAnnounce(message)
}

function onSignUnannounce (message) {
  const signee = this._signees.get(message.signee)

  if (signee) signee._onSignUnannounce(message)
}

function onNoiseSend (message) {
  if (message.isInitiator) {
    const stream = this._connecting.get(message.remoteStreamAlias)

    if (stream) {
      const handshake = new Handshake(
        this,
        this._protocol,
        null,
        message.id,
        true,
        stream._keyPair,
        stream.remotePublicKey
      )

      this._handshakes.set(message.id, handshake)

      handshake._onNoiseSend(message)
    }
  } else {
    const handshake = this._handshakes.get(message.id)

    if (handshake) {
      handshake._onNoiseSend(message)
    }
  }
}

function onNoiseReceive (message) {
  if (message.isInitiator) {
    const handshake = this._handshakes.get(message.id)

    if (handshake) {
      handshake._onNoiseReceive(message)
    }
  } else {
    const server = this._servers.get(message.serverAlias)

    if (server) {
      const handshake = new Handshake(
        this,
        this._protocol,
        server._firewall,
        message.id,
        message.isInitiator,
        server._keyPair,
        null
      )

      this._handshakes.set(message.id, handshake)

      handshake._onNoiseReceive(message)
    }
  }
}

},{"./codecs":16,"./crypto":17,"./handshake":21,"./id":22,"./protocol":26,"./query":27,"./server":29,"./signee":31,"./stream":33,"@hyperswarm/secret-stream":60,"events":258}],26:[function(require,module,exports){
const EventEmitter = require('events')
const Protomux = require('protomux')

const m = require('./messages')

const heartbeatFrequency = 15 * 1e3

class Protocol extends EventEmitter {
  constructor (stream) {
    super()

    const muxer = Protomux.from(stream)

    this._stream = muxer.stream
    this._stream.setMaxListeners(0)

    this._heartbeat = null
    this._failsafe = null

    this._onStreamClose = onStreamClose.bind(this)

    this._stream
      .once('close', this._onStreamClose)

    const opening = new Promise((resolve, reject) => {
      const onOpen = () => {
        this._stream.off('error', onError)
        resolve()
      }

      const onError = (error) => {
        this._stream.off('open', onOpen)
        reject(error)
      }

      this._stream
        .once('open', onOpen)
        .once('error', onError)
    })

    this.ready = async function ready () {
      await opening
    }

    const channel = muxer.createChannel({ protocol: '@hyperswarm/dht-relay' })

    this.handshake = channel.addMessage({
      encoding: m.handshake,
      onmessage: this.emit.bind(this, 'handshake')
    })

    this.ping = channel.addMessage({
      encoding: m.ping,
      onmessage: () => {
        this.pong.send()
        this.alive()
      }
    })

    this.pong = channel.addMessage({
      encoding: m.pong,
      onmessage: () => {
        this.alive()
      }
    })

    this.connect = channel.addMessage({
      encoding: m.connect,
      onmessage: this.emit.bind(this, 'connect')
    })

    this.connection = channel.addMessage({
      encoding: m.connection,
      onmessage: this.emit.bind(this, 'connection')
    })

    this.connected = channel.addMessage({
      encoding: m.connected,
      onmessage: this.emit.bind(this, 'connected')
    })

    this.incoming = channel.addMessage({
      encoding: m.incoming,
      onmessage: this.emit.bind(this, 'incoming')
    })

    this.deny = channel.addMessage({
      encoding: m.deny,
      onmessage: this.emit.bind(this, 'deny')
    })

    this.accept = channel.addMessage({
      encoding: m.accept,
      onmessage: this.emit.bind(this, 'accept')
    })

    this.destroy = channel.addMessage({
      encoding: m.destroy,
      onmessage: this.emit.bind(this, 'destroy')
    })

    this.listen = channel.addMessage({
      encoding: m.listen,
      onmessage: this.emit.bind(this, 'listen')
    })

    this.listening = channel.addMessage({
      encoding: m.listening,
      onmessage: this.emit.bind(this, 'listening')
    })

    this.close = channel.addMessage({
      encoding: m.close,
      onmessage: this.emit.bind(this, 'close')
    })

    this.closed = channel.addMessage({
      encoding: m.closed,
      onmessage: this.emit.bind(this, 'closed')
    })

    this.open = channel.addMessage({
      encoding: m.open,
      onmessage: this.emit.bind(this, 'open')
    })

    this.end = channel.addMessage({
      encoding: m.end,
      onmessage: this.emit.bind(this, 'end')
    })

    this.data = channel.addMessage({
      encoding: m.data,
      onmessage: this.emit.bind(this, 'data')
    })

    this.result = channel.addMessage({
      encoding: m.result,
      onmessage: this.emit.bind(this, 'result')
    })

    this.finished = channel.addMessage({
      encoding: m.finished,
      onmessage: this.emit.bind(this, 'finished')
    })

    this.lookup = channel.addMessage({
      encoding: m.lookup,
      onmessage: this.emit.bind(this, 'lookup')
    })

    this.announce = channel.addMessage({
      encoding: m.announce,
      onmessage: this.emit.bind(this, 'announce')
    })

    this.unannounce = channel.addMessage({
      encoding: m.unannounce,
      onmessage: this.emit.bind(this, 'unannounce')
    })

    this.signAnnounce = channel.addMessage({
      encoding: m.signAnnounce,
      onmessage: this.emit.bind(this, 'signAnnounce')
    })

    this.signUnannounce = channel.addMessage({
      encoding: m.signUnannounce,
      onmessage: this.emit.bind(this, 'signUnannounce')
    })

    this.signature = channel.addMessage({
      encoding: m.signature,
      onmessage: this.emit.bind(this, 'signature')
    })

    this.noiseSend = channel.addMessage({
      encoding: m.noiseSend,
      onmessage: this.emit.bind(this, 'noiseSend')
    })

    this.noiseReceive = channel.addMessage({
      encoding: m.noiseReceive,
      onmessage: this.emit.bind(this, 'noiseReceive')
    })

    this.noiseReply = channel.addMessage({
      encoding: m.noiseReply,
      onmessage: this.emit.bind(this, 'noiseReply')
    })

    channel.open()
  }

  heartbeat () {
    if (!this._heartbeat) {
      this._heartbeat = setInterval(() => this.ping.send(), heartbeatFrequency)
    }
    return this
  }

  alive () {
    if (this._failsafe) clearTimeout(this._failsafe)
    this._failsafe = setTimeout(() => this._stream.destroy(), heartbeatFrequency * 3)
    return this
  }
}

module.exports = {
  Protocol
}

function onStreamClose () {
  clearInterval(this._heartbeat)

  if (this._failsafe) clearTimeout(this._failsafe)
}

},{"./messages":23,"events":258,"protomux":439}],27:[function(require,module,exports){
const { Readable } = require('streamx')

const { nextId } = require('./id')

class Query extends Readable {
  constructor (protocol, target, encoding) {
    super({ map: map(encoding) })

    this._protocol = protocol

    this.target = target
    this.id = nextId()

    this._onStreamClose = onStreamClose.bind(this)

    this._protocol._stream
      .once('close', this._onStreamClose)

    this._onResult = onResult.bind(this)
    this._onFinished = onFinished.bind(this)

    const closing = new Promise((resolve, reject) => {
      const onClose = () => {
        this.off('error', onError)
        resolve()
      }

      const onError = (event) => {
        this.off('close', onClose)
        reject(event)
      }

      this
        .once('close', onClose)
        .once('error', onError)
    })

    this.finished = async function finished () {
      await closing
    }
  }
}

module.exports = {
  Query
}

function map (encoding) {
  return function mapQuery (buffer) {
    return encoding.decode({ start: 0, end: buffer.byteLength, buffer })
  }
}

function onStreamClose () {
  this.destroy()
}

function onResult (message) {
  this.push(message.data)
}

function onFinished () {
  this.push(null)
}

},{"./id":22,"streamx":578}],28:[function(require,module,exports){
const { FirewallProxy } = require('./firewall-proxy')
const { HandshakeProxy } = require('./handshake-proxy')
const { SigneeProxy } = require('./signee-proxy')
const { StreamProxy } = require('./stream-proxy')

const crypto = require('./crypto')
const { nextId } = require('./id')

class ServerProxy {
  constructor (node, protocol, alias, remoteAlias, keyPair) {
    this._node = node
    this._protocol = protocol
    this._alias = alias
    this._remoteAlias = remoteAlias
    this._keyPair = keyPair
    this._custodial = keyPair.secretKey !== null

    this._firewall = new FirewallProxy(node, protocol, alias)
    this._signee = new SigneeProxy(
      node,
      protocol,
      crypto.hash(keyPair.publicKey),
      remoteAlias
    )

    this._server = node._dht.createServer({
      firewall: this._custodial ? this._firewall._deny : null,
      createHandshake: this._custodial ? null : createHandshake.bind(this),
      createSecretStream: this._custodial ? null : createSecretStream.bind(this)
    })

    this._onStreamClose = onStreamClose.bind(this)

    this._protocol._stream
      .once('close', this._onStreamClose)

    this._onServerClose = onServerClose.bind(this)
    this._onServerListening = onServerListening.bind(this)
    this._onServerConnection = onServerConnection.bind(this)

    this._server
      .once('close', this._onServerClose)
      .once('listening', this._onServerListening)
      .on('connection', this._onServerConnection)
      .listen({
        publicKey: keyPair.publicKey,
        secretKey: keyPair.secretKey
      }, {
        signAnnounce: this._custodial ? null : this._signee._signAnnounce,
        signUnannounce: this._custodial ? null : this._signee._signUnannounce
      })

    this._onClose = onClose.bind(this)
  }
}

module.exports = {
  ServerProxy
}

function onStreamClose () {
  this._server.close()
}

function onServerClose () {
  this._protocol.closed.send({ alias: this._alias })

  this._server
    .off('listening', this._onServerListening)
    .off('connection', this._onServerConnection)

  this._node._servers.delete(this._remoteAlias)
}

function onServerListening () {
  const address = this._server.address()

  this._protocol.listening.send({
    alias: this._alias,
    remoteAlias: this._remoteAlias,
    host: address.host,
    port: address.port
  })
}

function onServerConnection (stream) {
  const alias = nextId()

  this._node._connecting.set(alias, stream)

  const onError = (err) => {
    this._protocol.destroy.send({ alias, error: err.message })
  }

  const onClose = () => {
    stream
      .off('error', onError)
      .off('end', onEnd)
      .off('data', onData)

    this._node._connecting.delete(alias, stream)
  }

  const onEnd = () => {
    this._protocol.end.send({ alias })
  }

  const onData = (data) => {
    this._protocol.data.send({ alias, data: [data] })
  }

  stream
    .once('error', onError)
    .once('close', onClose)
    .once('end', onEnd)
    .on('data', onData)

  this._protocol.connection.send({
    custodial: this._custodial,
    alias,
    serverAlias: this._alias,
    remotePublicKey: stream.remotePublicKey,
    handshakeHash: stream.handshakeHash,
    handshakeId: stream.handshakeId
  })
}

function onClose () {
  this._server.close()
}

function createHandshake (keyPair, remotePublicKey) {
  const isInitiator = !!remotePublicKey

  const id = nextId()

  const handshake = new HandshakeProxy(
    this._node,
    this._protocol,
    id,
    null,
    this._alias,
    isInitiator,
    keyPair,
    remotePublicKey
  )

  this._node._handshakes.set(id, handshake)

  return handshake
}

function createSecretStream (isInitiator, rawStream, options) {
  return new StreamProxy(
    this._protocol,
    null,
    null,
    isInitiator,
    rawStream,
    options
  )
}

},{"./crypto":17,"./firewall-proxy":18,"./handshake-proxy":20,"./id":22,"./signee-proxy":30,"./stream-proxy":32}],29:[function(require,module,exports){
const EventEmitter = require('events')
const SecretStream = require('@hyperswarm/secret-stream')

const { Firewall } = require('./firewall')
const { Signee } = require('./signee')
const { Stream } = require('./stream')

const crypto = require('./crypto')
const { nextId } = require('./id')

class Server extends EventEmitter {
  constructor (node, protocol, alias, options = {}) {
    super()

    this._node = node
    this._protocol = protocol
    this._alias = alias
    this._custodial = options.custodial !== false

    this._firewall = new Firewall(node, protocol, options.firewall || allowAll)

    this._remoteAlias = null
    this._keyPair = null
    this._address = null
    this._listening = null
    this._closing = null
    this._closed = false

    this._onStreamClose = onStreamClose.bind(this)

    this._protocol._stream
      .once('close', this._onStreamClose)

    this._onClosed = onClosed.bind(this)
    this._onListening = onListening.bind(this)
    this._onConnection = onConnection.bind(this)

    this.ready = async function ready () {
      await this._protocol.ready()
    }
  }

  get closed () {
    return this._closing !== null
  }

  get publicKey () {
    return this._keyPair && this._keyPair.publicKey
  }

  listen (keyPair = this._node.defaultKeyPair) {
    if (this._listening) return this._listening

    this._keyPair = keyPair

    this._node._signees.set(
      this._alias,
      new Signee(this._protocol, crypto.hash(keyPair.publicKey), keyPair)
    )

    this._protocol.listen.send({
      custodial: this._custodial,
      alias: this._alias,
      publicKey: keyPair.publicKey,
      secretKey: keyPair.secretKey
    })

    this._listening = new Promise((resolve) => {
      this.once('listening', () => resolve())
    })

    return this._listening
  }

  address () {
    return this._address
  }

  async close () {
    if (this._closing) return this._closing

    if (this._listening) await this._listening
    else {
      this._closing = Promise.resolve()
      return this._closing
    }

    this._protocol.close.send({ alias: this._alias })

    this._closing = new Promise((resolve) => {
      this.once('close', () => resolve())
    })

    return this._closing
  }
}

module.exports = {
  Server
}

function onStreamClose () {
  if (!this._closed) this._onClosed()
}

function onClosed () {
  this._closed = true
  this._closing = Promise.resolve()

  this.emit('close')
}

function onListening (message) {
  this._remoteAlias = message.alias

  this._address = {
    publicKey: this.publicKey,
    host: message.host,
    port: message.port
  }

  this.emit('listening')
}

function onConnection (message) {
  const remoteAlias = message.alias
  const alias = nextId()

  const stream = new Stream(
    this._node,
    this._protocol,
    alias,
    remoteAlias,
    false,
    {
      publicKey: this.publicKey
    },
    message.remotePublicKey,
    message.handshakeHash
  )

  this._node._connections.set(remoteAlias, stream)

  const onClose = () => {
    this._node._connections.delete(remoteAlias)
  }

  stream
    .once('close', onClose)

  this._protocol.connected.send({ alias, remoteAlias })

  if (!this._custodial) {
    const handshake = this._node._handshakes.get(message.handshakeId)

    this._node._handshakes.delete(message.handshakeId)

    const encryptedStream = new SecretStream(false, stream, {
      publicKey: stream.publicKey,
      remotePublicKey: stream.remotePublicKey,
      handshake: {
        publicKey: stream.publicKey,
        remotePublicKey: stream.remotePublicKey,
        hash: handshake.hash,
        tx: handshake.tx,
        rx: handshake.rx
      }
    })

    stream.noiseStream = encryptedStream
  }

  this.emit('connection', stream.noiseStream)
}

function allowAll () {
  return false
}

},{"./crypto":17,"./firewall":19,"./id":22,"./signee":31,"./stream":33,"@hyperswarm/secret-stream":60,"events":258}],30:[function(require,module,exports){
const { nextId } = require('./id')

class SigneeProxy {
  constructor (node, protocol, target, signee) {
    this._node = node
    this._protocol = protocol
    this._target = target
    this._signee = signee

    this._signAnnounce = signAnnounce.bind(this)
    this._signUnannounce = signUnannounce.bind(this)
  }
}

module.exports = {
  SigneeProxy
}

function signAnnounce (target, token, peerId, { peer: relayAddresses }) {
  const id = nextId()

  this._protocol.signAnnounce.send({
    id,
    signee: this._signee,
    token,
    peerId,
    relayAddresses
  })

  return new Promise((resolve) => {
    this._node._signatures.set(id, { resolve })
  })
}

function signUnannounce (target, token, peerId, { peer: relayAddresses }) {
  const id = nextId()

  this._protocol.signUnannounce.send({
    id,
    signee: this._signee,
    token,
    peerId,
    relayAddresses
  })

  return new Promise((resolve) => {
    this._node._signatures.set(id, { resolve })
  })
}

},{"./id":22}],31:[function(require,module,exports){
const buffer = require('b4a')
const sodium = require('sodium-universal')
const { NS } = require('hyperdht/lib/constants')
const { encode } = require('compact-encoding')

const { peer } = require('./codecs')

class Signee {
  constructor (protocol, target, keyPair) {
    this._protocol = protocol
    this._target = target
    this._keyPair = keyPair

    this._onSignAnnounce = onSignAnnounce.bind(this)
    this._onSignUnannounce = onSignUnannounce.bind(this)
  }
}

module.exports = {
  Signee
}

function onSignAnnounce (message) {
  const data = signable(
    this._keyPair.publicKey,
    this._target,
    message.token,
    message.peerId,
    message.relayAddresses,
    NS.ANNOUNCE
  )

  const signature = buffer.allocUnsafe(64)

  sodium.crypto_sign_detached(signature, data, this._keyPair.secretKey)

  this._protocol.signature.send({
    id: message.id,
    signature
  })
}

function onSignUnannounce (message) {
  const data = signable(
    this._keyPair.publicKey,
    this._target,
    message.token,
    message.peerId,
    message.relayAddresses,
    NS.UNANNOUNCE
  )

  const signature = buffer.allocUnsafe(64)

  sodium.crypto_sign_detached(signature, data, this._keyPair.secretKey)

  this._protocol.signature.send({
    id: message.id,
    signature
  })
}

function signable (publicKey, target, token, id, relayAddresses, ns) {
  const signable = buffer.allocUnsafe(32 + 32)
  const hash = signable.subarray(32)

  signable.set(ns)

  sodium.crypto_generichash_batch(hash, [
    target,
    id,
    token,
    encode(peer, { publicKey, relayAddresses })
  ])

  return signable
}

},{"./codecs":16,"b4a":102,"compact-encoding":178,"hyperdht/lib/constants":357,"sodium-universal":53}],32:[function(require,module,exports){
const { Duplex } = require('streamx')

class StreamProxy extends Duplex {
  constructor (protocol, alias, remoteAlias, isInitiator, rawStream, options = {}) {
    super()

    this._protocol = protocol
    this._alias = alias
    this._remoteAlias = remoteAlias

    this._opening = null
    this._draining = null
    this._ended = 2

    this.noiseStream = this
    this.isInitiator = isInitiator
    this.publicKey = options.publicKey
    this.remotePublicKey = options.remotePublicKey
    this.handshakeId = null
    this.rawStream = null

    if (options.autoStart !== false) this.start(rawStream, options)

    this.resume().pause()
  }

  start (rawStream, options) {
    this.rawStream = rawStream

    if (options.handshake) {
      this.publicKey = options.handshake.publicKey
      this.remotePublicKey = options.handshake.remotePublicKey
      this.handshakeId = options.handshake.id
    }

    const onError = (err) => {
      this.destroy(err)
    }

    const onClose = () => {
      this.rawStream
        .off('error', onError)
        .off('end', onEnd)
        .off('data', onData)
        .off('drain', onDrain)

      if (this._ended !== 0) this.destroy()
    }

    const onEnd = () => {
      this._ended--
      this.push(null)
    }

    const onData = (data) => {
      this.push(data)
    }

    const onDrain = () => {
      this._continueWrite()
    }

    this.rawStream
      .once('error', onError)
      .once('close', onClose)
      .once('end', onEnd)
      .on('data', onData)
      .on('drain', onDrain)

    if (options.data) this.push(options.data)
    if (options.ended) this.push(null)

    this._continueOpen()
  }

  _open (cb) {
    if (this.rawStream) cb(null)
    else this._opening = cb
  }

  _continueOpen (err) {
    const cb = this._opening

    if (cb) {
      this._opening = null

      if (err) cb(err)
      else this._open(cb)
    } else {
      if (err) this.destroy(err)
    }
  }

  _read (cb) {
    this.rawStream.resume()
    cb(null)
  }

  _write (data, cb) {
    if (this.rawStream.write(data, cb)) cb(null)
    else this._draining = cb
  }

  _continueWrite (err) {
    const cb = this._draining

    if (cb) {
      this._draining = null
      cb(err)
    }
  }

  _final (cb) {
    this._ended--
    this.rawStream.end()
    cb(null)
  }

  _predestroy () {
    const err = new Error('Stream was destroyed')

    this._continueOpen(err)
    this._continueWrite(err)

    if (this.rawStream) {
      this.rawStream.destroy(
        this._readableState.error || this._writableState.error
      )
    }
  }
}

module.exports = {
  StreamProxy
}

},{"streamx":578}],33:[function(require,module,exports){
const { Duplex } = require('streamx')
const buffer = require('b4a')
const Timeout = require('timeout-refresh')

class Stream extends Duplex {
  constructor (node, protocol, alias, remoteAlias, isInitiator, keyPair, remotePublicKey, handshakeHash) {
    super({ mapWritable: toBuffer })

    this._node = node
    this._protocol = protocol
    this._alias = alias
    this._remoteAlias = remoteAlias
    this._keyPair = keyPair

    this._opening = null
    this._openedDone = null
    this._timeout = null
    this._timeoutMs = 0
    this._keepAlive = null
    this._keepAliveMs = 0

    this.opened = new Promise((resolve) => { this._openedDone = resolve })

    this.noiseStream = this
    this.rawStream = this
    this.isInitiator = isInitiator
    this.remotePublicKey = remotePublicKey || null
    this.handshakeHash = handshakeHash || null

    this._onStreamClose = onStreamClose.bind(this)

    this._protocol._stream
      .once('close', this._onStreamClose)

    this._onOpen = onOpen.bind(this)
    this._onDestroy = onDestroy.bind(this)

    this.resume().pause()
  }

  get publicKey () {
    return this._keyPair.publicKey
  }

  alloc (len) {
    return buffer.allocUnsafe(len)
  }

  setTimeout (ms) {
    if (!ms) ms = 0

    this._clearTimeout()
    this._timeoutMs = ms

    if (!ms) return

    this._timeout = Timeout.once(ms, this._destroyTimeout, this)
    this._timeout.unref()
  }

  setKeepAlive (ms) {
    if (!ms) ms = 0

    this._keepAliveMs = ms

    if (!ms) return

    this._keepAlive = Timeout.on(ms, this._sendKeepAlive, this)
    this._keepAlive.unref()
  }

  _open (cb) {
    if (this._remoteAlias === null) this._opening = cb
    else {
      this._resolveOpened(true)
      cb(null)
    }
  }

  _continueOpen (err) {
    const cb = this._opening

    if (cb) {
      this._opening = null

      if (err) cb(err)
      else this._open(cb)
    } else {
      if (err) this.destroy(err)
    }
  }

  _resolveOpened (opened) {
    const cb = this._openedDone

    if (cb) {
      this._openedDone = null

      cb(opened)

      if (opened) this.emit('connect')
    }
  }

  _writev (data, cb) {
    if (this._keepAlive !== null) this._keepAlive.refresh()

    this._protocol.data.send({ alias: this._alias, data })
    cb(null)
  }

  _final (cb) {
    this._clearKeepAlive()

    this._protocol.end.send({ alias: this._alias })
    cb(null)
  }

  _predestroy () {
    const paired = this._remoteAlias !== null

    if (paired) {
      this._protocol.destroy.send({ paired, alias: this._alias })
    }

    const err = new Error('Stream was destroyed')

    this._continueOpen(err)
  }

  _destroy (cb) {
    this._clearKeepAlive()
    this._clearTimeout()
    this._resolveOpened(false)
    cb(null)
  }

  _destroyTimeout () {
    this.destroy(new Error('Stream timed out'))
  }

  _clearTimeout () {
    if (this._timeout === null) return

    this._timeout.destroy()
    this._timeout = null
    this._timeoutMs = 0
  }

  _clearKeepAlive () {
    if (this._keepAlive === null) return

    this._keepAlive.destroy()
    this._keepAlive = null
    this._keepAliveMs = 0
  }

  _sendKeepAlive () {
    this.write(this.alloc(0))
  }
}

module.exports = {
  Stream
}

function onStreamClose () {
  this.destroy()
}

function onOpen (message) {
  this._remoteAlias = message.alias

  if (message.handshakeHash) {
    this.handshakeHash = message.handshakeHash
  } else {
    const handshake = this._node._handshakes.get(message.handshakeId)

    this._node._handshakes.delete(message.handshakeId)

    this.handshakeHash = handshake.hash

    this.noiseStream.start(this, {
      publicKey: this.publicKey,
      remotePublicKey: this.remotePublicKey,
      handshake: {
        publicKey: this.publicKey,
        remotePublicKey: this.remotePublicKey,
        hash: handshake.hash,
        tx: handshake.tx,
        rx: handshake.rx
      }
    })
  }

  this._continueOpen()
}

function onDestroy (message) {
  this.noiseStream.destroy(message.error && new Error(message.error))
}

function toBuffer (data) {
  return typeof data === 'string' ? buffer.from(data) : data
}

},{"b4a":102,"streamx":578,"timeout-refresh":583}],34:[function(require,module,exports){
const { Duplex } = require('streamx')
const buffer = require('b4a')

class Stream extends Duplex {
  constructor (isInitiator, socket) {
    super()

    this._socket = socket
    this._socket.binaryType = 'arraybuffer'

    this._opening = null

    this._onError = onError.bind(this)
    this._onClose = onClose.bind(this)
    this._onOpen = onOpen.bind(this)
    this._onMessage = onMessage.bind(this)

    this._socket.addEventListener('error', this._onError)
    this._socket.addEventListener('close', this._onClose)
    this._socket.addEventListener('open', this._onOpen)
    this._socket.addEventListener('message', this._onMessage)
  }

  _open (cb) {
    if (this._socket.readyState > 1) cb(new Error('Socket is closed'))
    else if (this._socket.readyState < 1) this._opening = cb
    else cb(null)
  }

  _continueOpen (err) {
    if (err) this.destroy(err)

    const cb = this._opening

    if (cb) {
      this._opening = null
      this._open(cb)
    }
  }

  _write (data, cb) {
    this._socket.send(data)
    cb(null)
  }

  _predestroy () {
    this._continueOpen(new Error('Socket was destroyed'))
  }

  _destroy (cb) {
    this._socket.close()
    cb(null)
  }
}

module.exports = Stream

function onError (err) {
  this.destroy(err)
}

function onClose () {
  this._socket.removeEventListener('error', this._onError)
  this._socket.removeEventListener('close', this._onClose)
  this._socket.removeEventListener('open', this._onOpen)
  this._socket.removeEventListener('message', this._onMessage)

  this.destroy()
}

function onOpen () {
  this._continueOpen()
}

function onMessage (event) {
  this.push(buffer.from(event.data))
}

},{"b4a":102,"streamx":578}],35:[function(require,module,exports){
/* eslint-disable camelcase */
const { crypto_stream_chacha20_ietf, crypto_stream_chacha20_ietf_xor_ic } = require('./crypto_stream_chacha20')
const { crypto_verify_16 } = require('./crypto_verify')
const Poly1305 = require('./internal/poly1305')
const assert = require('nanoassert')

const crypto_aead_chacha20poly1305_ietf_KEYBYTES = 32
const crypto_aead_chacha20poly1305_ietf_NSECBYTES = 0
const crypto_aead_chacha20poly1305_ietf_NPUBBYTES = 12
const crypto_aead_chacha20poly1305_ietf_ABYTES = 16
const crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER

const _pad0 = new Uint8Array(16)

function crypto_aead_chacha20poly1305_ietf_encrypt (c, m, ad, nsec, npub, k) {
  if (ad === null) return crypto_aead_chacha20poly1305_ietf_encrypt(c, m, new Uint8Array(0), nsec, npub, k)

  assert(c.byteLength === m.byteLength + crypto_aead_chacha20poly1305_ietf_ABYTES,
    "ciphertext should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' longer than message")
  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,
    "npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long")
  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,
    "k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long")
  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')

  const ret = crypto_aead_chacha20poly1305_ietf_encrypt_detached(c.subarray(0, m.byteLength),
    c.subarray(m.byteLength), m, ad, nsec, npub, k)

  return m.byteLength + ret
}

function crypto_aead_chacha20poly1305_ietf_encrypt_detached (c, mac, m, ad, nsec, npub, k) {
  if (ad === null) return crypto_aead_chacha20poly1305_ietf_encrypt_detached(c, mac, m, new Uint8Array(0), nsec, npub, k)

  assert(c.byteLength === m.byteLength, 'ciphertext should be same length than message')
  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,
    "npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long")
  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,
    "k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long")
  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')
  assert(mac.byteLength <= crypto_aead_chacha20poly1305_ietf_ABYTES,
    "mac should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' long")

  const block0 = new Uint8Array(64)
  var slen = new Uint8Array(8)

  crypto_stream_chacha20_ietf(block0, npub, k)
  const poly = new Poly1305(block0)
  block0.fill(0)

  poly.update(ad, 0, ad.byteLength)
  poly.update(_pad0, 0, (0x10 - ad.byteLength) & 0xf)

  crypto_stream_chacha20_ietf_xor_ic(c, m, npub, 1, k)

  poly.update(c, 0, m.byteLength)
  poly.update(_pad0, 0, (0x10 - m.byteLength) & 0xf)

  write64LE(slen, 0, ad.byteLength)
  poly.update(slen, 0, slen.byteLength)

  write64LE(slen, 0, m.byteLength)
  poly.update(slen, 0, slen.byteLength)

  poly.finish(mac, 0)
  slen.fill(0)

  return crypto_aead_chacha20poly1305_ietf_ABYTES
}

function crypto_aead_chacha20poly1305_ietf_decrypt (m, nsec, c, ad, npub, k) {
  if (ad === null) return crypto_aead_chacha20poly1305_ietf_decrypt(m, nsec, c, new Uint8Array(0), npub, k)

  assert(m.byteLength === c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES,
    "message should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' shorter than ciphertext")
  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,
    "npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long")
  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,
    "k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long")
  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')

  if (c.byteLength < crypto_aead_chacha20poly1305_ietf_ABYTES) throw new Error('could not verify data')

  crypto_aead_chacha20poly1305_ietf_decrypt_detached(
    m, nsec,
    c.subarray(0, c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES),
    c.subarray(c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES),
    ad, npub, k)

  return c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES
}

function crypto_aead_chacha20poly1305_ietf_decrypt_detached (m, nsec, c, mac, ad, npub, k) {
  if (ad === null) return crypto_aead_chacha20poly1305_ietf_decrypt_detached(m, nsec, c, mac, new Uint8Array(0), npub, k)

  assert(c.byteLength === m.byteLength, 'message should be same length than ciphertext')
  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,
    "npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long")
  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,
    "k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long")
  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')
  assert(mac.byteLength <= crypto_aead_chacha20poly1305_ietf_ABYTES,
    "mac should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' long")

  const block0 = new Uint8Array(64)
  const slen = new Uint8Array(8)
  const computed_mac = new Uint8Array(crypto_aead_chacha20poly1305_ietf_ABYTES)

  crypto_stream_chacha20_ietf(block0, npub, k)
  const poly = new Poly1305(block0)
  block0.fill(0)

  poly.update(ad, 0, ad.byteLength)
  poly.update(_pad0, 0, (0x10 - ad.byteLength) & 0xf)

  const mlen = c.byteLength
  poly.update(c, 0, mlen)
  poly.update(_pad0, 0, (0x10 - mlen) & 0xf)

  write64LE(slen, 0, ad.byteLength)
  poly.update(slen, 0, slen.byteLength)

  write64LE(slen, 0, mlen)
  poly.update(slen, 0, slen.byteLength)

  poly.finish(computed_mac, 0)

  assert(computed_mac.byteLength === 16)
  const ret = crypto_verify_16(computed_mac, 0, mac, 0)

  computed_mac.fill(0)
  slen.fill(0)

  if (!ret) {
    m.fill(0)
    throw new Error('could not verify data')
  }

  crypto_stream_chacha20_ietf_xor_ic(m, c, npub, 1, k)
}

function write64LE (buf, offset, int) {
  buf.fill(0, 0, 8)

  const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)
  view.setUint32(offset, int & 0xffffffff, true)
  view.setUint32(offset + 4, (int / 2 ** 32) & 0xffffffff, true)
}

module.exports = {
  crypto_aead_chacha20poly1305_ietf_encrypt,
  crypto_aead_chacha20poly1305_ietf_encrypt_detached,
  crypto_aead_chacha20poly1305_ietf_decrypt,
  crypto_aead_chacha20poly1305_ietf_decrypt_detached,
  crypto_aead_chacha20poly1305_ietf_ABYTES,
  crypto_aead_chacha20poly1305_ietf_KEYBYTES,
  crypto_aead_chacha20poly1305_ietf_NPUBBYTES,
  crypto_aead_chacha20poly1305_ietf_NSECBYTES,
  crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX
}

},{"./crypto_stream_chacha20":50,"./crypto_verify":51,"./internal/poly1305":56,"nanoassert":390}],36:[function(require,module,exports){
/* eslint-disable camelcase */
const { crypto_verify_32 } = require('./crypto_verify')
const Sha512 = require('sha512-universal')
const assert = require('nanoassert')

const crypto_auth_BYTES = 32
const crypto_auth_KEYBYTES = 32

function crypto_auth (out, input, k) {
  assert(out.byteLength === crypto_auth_BYTES, "out should be 'crypto_auth_BYTES' in length")
  assert(k.byteLength === crypto_auth_KEYBYTES, "key should be 'crypto_auth_KEYBYTES' in length")

  const out0 = new Uint8Array(64)
  const hmac = Sha512.HMAC(k)
  hmac.update(input)
  hmac.digest(out0)

  out.set(out0.subarray(0, 32))
}

function crypto_auth_verify (h, input, k) {
  assert(h.byteLength === crypto_auth_BYTES, "h should be 'crypto_auth_BYTES' in length")
  assert(k.byteLength === crypto_auth_KEYBYTES, "key should be 'crypto_auth_KEYBYTES' in length")

  const correct = Sha512.HMAC(k).update(input).digest()

  return crypto_verify_32(h, 0, correct, 0)
}

module.exports = {
  crypto_auth_BYTES,
  crypto_auth_KEYBYTES,
  crypto_auth,
  crypto_auth_verify
}

},{"./crypto_verify":51,"nanoassert":390,"sha512-universal":501}],37:[function(require,module,exports){
/* eslint-disable camelcase */
const { crypto_hash_sha512 } = require('./crypto_hash')
const { crypto_scalarmult, crypto_scalarmult_base } = require('./crypto_scalarmult')
const { randombytes } = require('./randombytes')
const { crypto_generichash_batch } = require('./crypto_generichash')
const { crypto_stream_xsalsa20_MESSAGEBYTES_MAX } = require('./crypto_stream')
const {
  crypto_secretbox_open_easy,
  crypto_secretbox_easy,
  crypto_secretbox_detached,
  crypto_secretbox_open_detached
} = require('./crypto_secretbox')
const xsalsa20 = require('xsalsa20')
const assert = require('nanoassert')

const crypto_box_PUBLICKEYBYTES = 32
const crypto_box_SECRETKEYBYTES = 32
const crypto_box_NONCEBYTES = 24
const crypto_box_ZEROBYTES = 32
const crypto_box_BOXZEROBYTES = 16
const crypto_box_SEALBYTES = 48
const crypto_box_SEEDBYTES = 32
const crypto_box_BEFORENMBYTES = 32
const crypto_box_MACBYTES = 16

const crypto_box_curve25519xsalsa20poly1305_MACBYTES = 16

const crypto_box_MESSAGEBYTES_MAX =
  crypto_stream_xsalsa20_MESSAGEBYTES_MAX -
  crypto_box_curve25519xsalsa20poly1305_MACBYTES

module.exports = {
  crypto_box_easy,
  crypto_box_open_easy,
  crypto_box_keypair,
  crypto_box_seed_keypair,
  crypto_box_seal,
  crypto_box_seal_open,
  crypto_box_PUBLICKEYBYTES,
  crypto_box_SECRETKEYBYTES,
  crypto_box_NONCEBYTES,
  crypto_box_ZEROBYTES,
  crypto_box_BOXZEROBYTES,
  crypto_box_SEALBYTES,
  crypto_box_SEEDBYTES,
  crypto_box_BEFORENMBYTES,
  crypto_box_MACBYTES
}

function crypto_box_keypair (pk, sk) {
  check(pk, crypto_box_PUBLICKEYBYTES)
  check(sk, crypto_box_SECRETKEYBYTES)
  randombytes(sk, 32)
  return crypto_scalarmult_base(pk, sk)
}
function crypto_box_seed_keypair (pk, sk, seed) {
  assert(pk.byteLength === crypto_box_PUBLICKEYBYTES, "pk should be 'crypto_box_PUBLICKEYBYTES' bytes")
  assert(sk.byteLength === crypto_box_SECRETKEYBYTES, "sk should be 'crypto_box_SECRETKEYBYTES' bytes")
  assert(sk.byteLength === crypto_box_SEEDBYTES, "sk should be 'crypto_box_SEEDBYTES' bytes")

  const hash = new Uint8Array(64)
  crypto_hash_sha512(hash, seed, 32)
  sk.set(hash.subarray(0, 32))
  hash.fill(0)

  return crypto_scalarmult_base(pk, sk)
}

function crypto_box_seal (c, m, pk) {
  check(c, crypto_box_SEALBYTES + m.length)
  check(pk, crypto_box_PUBLICKEYBYTES)

  var epk = c.subarray(0, crypto_box_PUBLICKEYBYTES)
  var esk = new Uint8Array(crypto_box_SECRETKEYBYTES)
  crypto_box_keypair(epk, esk)

  var n = new Uint8Array(crypto_box_NONCEBYTES)
  crypto_generichash_batch(n, [epk, pk])

  var s = new Uint8Array(crypto_box_PUBLICKEYBYTES)
  crypto_scalarmult(s, esk, pk)

  var k = new Uint8Array(crypto_box_BEFORENMBYTES)
  var zero = new Uint8Array(16)
  xsalsa20.core_hsalsa20(k, zero, s, xsalsa20.SIGMA)

  crypto_secretbox_easy(c.subarray(epk.length), m, n, k)

  cleanup(esk)
}

function crypto_box_seal_open (m, c, pk, sk) {
  check(c, crypto_box_SEALBYTES)
  check(m, c.length - crypto_box_SEALBYTES)
  check(pk, crypto_box_PUBLICKEYBYTES)
  check(sk, crypto_box_SECRETKEYBYTES)

  var epk = c.subarray(0, crypto_box_PUBLICKEYBYTES)

  var n = new Uint8Array(crypto_box_NONCEBYTES)
  crypto_generichash_batch(n, [epk, pk])

  var s = new Uint8Array(crypto_box_PUBLICKEYBYTES)
  crypto_scalarmult(s, sk, epk)

  var k = new Uint8Array(crypto_box_BEFORENMBYTES)
  var zero = new Uint8Array(16)
  xsalsa20.core_hsalsa20(k, zero, s, xsalsa20.SIGMA)

  return crypto_secretbox_open_easy(m, c.subarray(epk.length), n, k)
}

function crypto_box_beforenm (k, pk, sk) {
  const zero = new Uint8Array(16)
  const s = new Uint8Array(32)

  assert(crypto_scalarmult(s, sk, pk) === 0)

  xsalsa20.core_hsalsa20(k, zero, s, xsalsa20.SIGMA)

  return true
}

function crypto_box_detached_afternm (c, mac, m, n, k) {
  return crypto_secretbox_detached(c, mac, m, n, k)
}

function crypto_box_detached (c, mac, m, n, pk, sk) {
  check(mac, crypto_box_MACBYTES)
  check(n, crypto_box_NONCEBYTES)
  check(pk, crypto_box_PUBLICKEYBYTES)
  check(sk, crypto_box_SECRETKEYBYTES)

  const k = new Uint8Array(crypto_box_BEFORENMBYTES)

  assert(crypto_box_beforenm(k, pk, sk))

  const ret = crypto_box_detached_afternm(c, mac, m, n, k)
  cleanup(k)

  return ret
}

function crypto_box_easy (c, m, n, pk, sk) {
  assert(
    c.length >= m.length + crypto_box_MACBYTES,
    "c should be at least 'm.length + crypto_box_MACBYTES' bytes"
  )
  assert(
    m.length <= crypto_box_MESSAGEBYTES_MAX,
    "m should be at most 'crypto_box_MESSAGEBYTES_MAX' bytes"
  )

  return crypto_box_detached(
    c.subarray(crypto_box_MACBYTES, m.length + crypto_box_MACBYTES),
    c.subarray(0, crypto_box_MACBYTES),
    m,
    n,
    pk,
    sk
  )
}

function crypto_box_open_detached_afternm (m, c, mac, n, k) {
  return crypto_secretbox_open_detached(m, c, mac, n, k)
}

function crypto_box_open_detached (m, c, mac, n, pk, sk) {
  const k = new Uint8Array(crypto_box_BEFORENMBYTES)
  assert(crypto_box_beforenm(k, pk, sk))

  const ret = crypto_box_open_detached_afternm(m, c, mac, n, k)
  cleanup(k)

  return ret
}

function crypto_box_open_easy (m, c, n, pk, sk) {
  assert(
    c.length >= m.length + crypto_box_MACBYTES,
    "c should be at least 'm.length + crypto_box_MACBYTES' bytes"
  )

  return crypto_box_open_detached(
    m,
    c.subarray(crypto_box_MACBYTES, m.length + crypto_box_MACBYTES),
    c.subarray(0, crypto_box_MACBYTES),
    n,
    pk,
    sk
  )
}

function check (buf, len) {
  if (!buf || (len && buf.length < len)) throw new Error('Argument must be a buffer' + (len ? ' of length ' + len : ''))
}

function cleanup (arr) {
  for (let i = 0; i < arr.length; i++) arr[i] = 0
}

},{"./crypto_generichash":38,"./crypto_hash":39,"./crypto_scalarmult":44,"./crypto_secretbox":45,"./crypto_stream":49,"./randombytes":58,"nanoassert":390,"xsalsa20":600}],38:[function(require,module,exports){
var blake2b = require('blake2b')

if (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')

module.exports.crypto_generichash_PRIMITIVE = 'blake2b'
module.exports.crypto_generichash_BYTES_MIN = blake2b.BYTES_MIN
module.exports.crypto_generichash_BYTES_MAX = blake2b.BYTES_MAX
module.exports.crypto_generichash_BYTES = blake2b.BYTES
module.exports.crypto_generichash_KEYBYTES_MIN = blake2b.KEYBYTES_MIN
module.exports.crypto_generichash_KEYBYTES_MAX = blake2b.KEYBYTES_MAX
module.exports.crypto_generichash_KEYBYTES = blake2b.KEYBYTES
module.exports.crypto_generichash_WASM_SUPPORTED = blake2b.WASM_SUPPORTED
module.exports.crypto_generichash_WASM_LOADED = false

module.exports.crypto_generichash = function (output, input, key) {
  blake2b(output.length, key).update(input).final(output)
}

module.exports.crypto_generichash_ready = blake2b.ready

module.exports.crypto_generichash_batch = function (output, inputArray, key) {
  var ctx = blake2b(output.length, key)
  for (var i = 0; i < inputArray.length; i++) {
    ctx.update(inputArray[i])
  }
  ctx.final(output)
}

module.exports.crypto_generichash_instance = function (key, outlen) {
  if (outlen == null) outlen = module.exports.crypto_generichash_BYTES
  return blake2b(outlen, key)
}

blake2b.ready(function (_) {
  module.exports.crypto_generichash_WASM_LOADED = blake2b.WASM_LOADED
})

},{"blake2b":125}],39:[function(require,module,exports){
/* eslint-disable camelcase */
const sha512 = require('sha512-universal')
const assert = require('nanoassert')

if (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')

const crypto_hash_sha512_BYTES = 64
const crypto_hash_BYTES = crypto_hash_sha512_BYTES

function crypto_hash_sha512 (out, m, n) {
  assert(out.byteLength === crypto_hash_sha512_BYTES, "out must be 'crypto_hash_sha512_BYTES' bytes long")

  sha512().update(m.subarray(0, n)).digest(out)
  return 0
}

function crypto_hash (out, m, n) {
  return crypto_hash_sha512(out, m, n)
}

module.exports = {
  crypto_hash,
  crypto_hash_sha512,
  crypto_hash_sha512_BYTES,
  crypto_hash_BYTES
}

},{"nanoassert":390,"sha512-universal":501}],40:[function(require,module,exports){
/* eslint-disable camelcase */
const sha256 = require('sha256-universal')
const assert = require('nanoassert')

if (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')

const crypto_hash_sha256_BYTES = 32

function crypto_hash_sha256 (out, m, n) {
  assert(out.byteLength === crypto_hash_sha256_BYTES, "out must be 'crypto_hash_sha256_BYTES' bytes long")

  sha256().update(m.subarray(0, n)).digest(out)
  return 0
}

module.exports = {
  crypto_hash_sha256,
  crypto_hash_sha256_BYTES
}

},{"nanoassert":390,"sha256-universal":497}],41:[function(require,module,exports){
/* eslint-disable camelcase */
const assert = require('nanoassert')
const randombytes_buf = require('./randombytes').randombytes_buf
const blake2b = require('blake2b')

module.exports.crypto_kdf_PRIMITIVE = 'blake2b'
module.exports.crypto_kdf_BYTES_MIN = 16
module.exports.crypto_kdf_BYTES_MAX = 64
module.exports.crypto_kdf_CONTEXTBYTES = 8
module.exports.crypto_kdf_KEYBYTES = 32

function STORE64_LE (dest, int) {
  var mul = 1
  var i = 0
  dest[0] = int & 0xFF
  while (++i < 8 && (mul *= 0x100)) {
    dest[i] = (int / mul) & 0xFF
  }
}

module.exports.crypto_kdf_derive_from_key = function crypto_kdf_derive_from_key (subkey, subkey_id, ctx, key) {
  assert(subkey.length >= module.exports.crypto_kdf_BYTES_MIN, 'subkey must be at least crypto_kdf_BYTES_MIN')
  assert(subkey_id >= 0 && subkey_id <= 0x1fffffffffffff, 'subkey_id must be safe integer')
  assert(ctx.length >= module.exports.crypto_kdf_CONTEXTBYTES, 'context must be at least crypto_kdf_CONTEXTBYTES')

  var ctx_padded = new Uint8Array(blake2b.PERSONALBYTES)
  var salt = new Uint8Array(blake2b.SALTBYTES)

  ctx_padded.set(ctx, 0, module.exports.crypto_kdf_CONTEXTBYTES)
  STORE64_LE(salt, subkey_id)

  var outlen = Math.min(subkey.length, module.exports.crypto_kdf_BYTES_MAX)
  blake2b(outlen, key.subarray(0, module.exports.crypto_kdf_KEYBYTES), salt, ctx_padded, true)
    .final(subkey)
}

module.exports.crypto_kdf_keygen = function crypto_kdf_keygen (out) {
  assert(out.length >= module.exports.crypto_kdf_KEYBYTES, 'out.length must be crypto_kdf_KEYBYTES')
  randombytes_buf(out.subarray(0, module.exports.crypto_kdf_KEYBYTES))
}

},{"./randombytes":58,"blake2b":125,"nanoassert":390}],42:[function(require,module,exports){
/* eslint-disable camelcase */
const { crypto_scalarmult_base } = require('./crypto_scalarmult')
const { crypto_generichash } = require('./crypto_generichash')
const { randombytes_buf } = require('./randombytes')
const assert = require('nanoassert')

const crypto_kx_SEEDBYTES = 32
const crypto_kx_PUBLICKEYBYTES = 32
const crypto_kx_SECRETKEYBYTES = 32

function crypto_kx_keypair (pk, sk) {
  assert(pk.byteLength === crypto_kx_PUBLICKEYBYTES, "pk must be 'crypto_kx_PUBLICKEYBYTES' bytes")
  assert(sk.byteLength === crypto_kx_SECRETKEYBYTES, "sk must be 'crypto_kx_SECRETKEYBYTES' bytes")

  randombytes_buf(sk, crypto_kx_SECRETKEYBYTES)
  return crypto_scalarmult_base(pk, sk)
}

function crypto_kx_seed_keypair (pk, sk, seed) {
  assert(pk.byteLength === crypto_kx_PUBLICKEYBYTES, "pk must be 'crypto_kx_PUBLICKEYBYTES' bytes")
  assert(sk.byteLength === crypto_kx_SECRETKEYBYTES, "sk must be 'crypto_kx_SECRETKEYBYTES' bytes")
  assert(seed.byteLength === crypto_kx_SEEDBYTES, "seed must be 'crypto_kx_SEEDBYTES' bytes")

  crypto_generichash(sk, seed)
  return crypto_scalarmult_base(pk, sk)
}

module.exports = {
  crypto_kx_keypair,
  crypto_kx_seed_keypair,
  crypto_kx_SEEDBYTES,
  crypto_kx_SECRETKEYBYTES,
  crypto_kx_PUBLICKEYBYTES
}

},{"./crypto_generichash":38,"./crypto_scalarmult":44,"./randombytes":58,"nanoassert":390}],43:[function(require,module,exports){
/* eslint-disable camelcase */
const assert = require('nanoassert')
const Poly1305 = require('./internal/poly1305')
const { crypto_verify_16 } = require('./crypto_verify')

const crypto_onetimeauth_BYTES = 16
const crypto_onetimeauth_KEYBYTES = 32
const crypto_onetimeauth_PRIMITIVE = 'poly1305'

module.exports = {
  crypto_onetimeauth,
  crypto_onetimeauth_verify,
  crypto_onetimeauth_BYTES,
  crypto_onetimeauth_KEYBYTES,
  crypto_onetimeauth_PRIMITIVE
}

function crypto_onetimeauth (mac, msg, key) {
  assert(mac.byteLength === crypto_onetimeauth_BYTES, "mac must be 'crypto_onetimeauth_BYTES' bytes")
  assert(msg.byteLength != null, 'msg must be buffer')
  assert(key.byteLength === crypto_onetimeauth_KEYBYTES, "key must be 'crypto_onetimeauth_KEYBYTES' bytes")

  var s = new Poly1305(key)
  s.update(msg, 0, msg.byteLength)
  s.finish(mac, 0)
}

function crypto_onetimeauth_verify (mac, msg, key) {
  assert(mac.byteLength === crypto_onetimeauth_BYTES, "mac must be 'crypto_onetimeauth_BYTES' bytes")
  assert(msg.byteLength != null, 'msg must be buffer')
  assert(key.byteLength === crypto_onetimeauth_KEYBYTES, "key must be 'crypto_onetimeauth_KEYBYTES' bytes")

  var tmp = new Uint8Array(16)
  crypto_onetimeauth(tmp, msg, key)
  return crypto_verify_16(mac, 0, tmp, 0)
}

},{"./crypto_verify":51,"./internal/poly1305":56,"nanoassert":390}],44:[function(require,module,exports){
/* eslint-disable camelcase, one-var */
const { _9, _121665, gf, inv25519, pack25519, unpack25519, sel25519, A, M, Z, S } = require('./internal/ed25519')

const crypto_scalarmult_BYTES = 32
const crypto_scalarmult_SCALARBYTES = 32

module.exports = {
  crypto_scalarmult,
  crypto_scalarmult_base,
  crypto_scalarmult_BYTES,
  crypto_scalarmult_SCALARBYTES
}

function crypto_scalarmult (q, n, p) {
  check(q, crypto_scalarmult_BYTES)
  check(n, crypto_scalarmult_SCALARBYTES)
  check(p, crypto_scalarmult_BYTES)
  var z = new Uint8Array(32)
  var x = new Float64Array(80), r, i
  var a = gf(), b = gf(), c = gf(),
    d = gf(), e = gf(), f = gf()
  for (i = 0; i < 31; i++) z[i] = n[i]
  z[31] = (n[31] & 127) | 64
  z[0] &= 248
  unpack25519(x, p)
  for (i = 0; i < 16; i++) {
    b[i] = x[i]
    d[i] = a[i] = c[i] = 0
  }
  a[0] = d[0] = 1
  for (i = 254; i >= 0; --i) {
    r = (z[i >>> 3] >>> (i & 7)) & 1
    sel25519(a, b, r)
    sel25519(c, d, r)
    A(e, a, c)
    Z(a, a, c)
    A(c, b, d)
    Z(b, b, d)
    S(d, e)
    S(f, a)
    M(a, c, a)
    M(c, b, e)
    A(e, a, c)
    Z(a, a, c)
    S(b, a)
    Z(c, d, f)
    M(a, c, _121665)
    A(a, a, d)
    M(c, c, a)
    M(a, d, f)
    M(d, b, x)
    S(b, e)
    sel25519(a, b, r)
    sel25519(c, d, r)
  }
  for (i = 0; i < 16; i++) {
    x[i + 16] = a[i]
    x[i + 32] = c[i]
    x[i + 48] = b[i]
    x[i + 64] = d[i]
  }
  var x32 = x.subarray(32)
  var x16 = x.subarray(16)
  inv25519(x32, x32)
  M(x16, x16, x32)
  pack25519(q, x16)
  return 0
}

function crypto_scalarmult_base (q, n) {
  return crypto_scalarmult(q, n, _9)
}

function check (buf, len) {
  if (!buf || (len && buf.length < len)) throw new Error('Argument must be a buffer' + (len ? ' of length ' + len : ''))
}

},{"./internal/ed25519":54}],45:[function(require,module,exports){
/* eslint-disable camelcase */
const assert = require('nanoassert')
const { crypto_stream, crypto_stream_xor } = require('./crypto_stream')
const { crypto_onetimeauth, crypto_onetimeauth_verify, crypto_onetimeauth_BYTES, crypto_onetimeauth_KEYBYTES } = require('./crypto_onetimeauth')

const crypto_secretbox_KEYBYTES = 32
const crypto_secretbox_NONCEBYTES = 24
const crypto_secretbox_ZEROBYTES = 32
const crypto_secretbox_BOXZEROBYTES = 16
const crypto_secretbox_MACBYTES = 16

module.exports = {
  crypto_secretbox,
  crypto_secretbox_open,
  crypto_secretbox_detached,
  crypto_secretbox_open_detached,
  crypto_secretbox_easy,
  crypto_secretbox_open_easy,
  crypto_secretbox_KEYBYTES,
  crypto_secretbox_NONCEBYTES,
  crypto_secretbox_ZEROBYTES,
  crypto_secretbox_BOXZEROBYTES,
  crypto_secretbox_MACBYTES
}

function crypto_secretbox (c, m, n, k) {
  assert(c.byteLength === m.byteLength, "c must be 'm.byteLength' bytes")
  const mlen = m.byteLength
  assert(mlen >= crypto_secretbox_ZEROBYTES, "mlen must be at least 'crypto_secretbox_ZEROBYTES'")
  assert(n.byteLength === crypto_secretbox_NONCEBYTES, "n must be 'crypto_secretbox_NONCEBYTES' bytes")
  assert(k.byteLength === crypto_secretbox_KEYBYTES, "k must be 'crypto_secretbox_KEYBYTES' bytes")

  crypto_stream_xor(c, m, n, k)
  crypto_onetimeauth(
    c.subarray(crypto_secretbox_BOXZEROBYTES, crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES),
    c.subarray(crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES, c.byteLength),
    c.subarray(0, crypto_onetimeauth_KEYBYTES)
  )
  c.fill(0, 0, crypto_secretbox_BOXZEROBYTES)
}

function crypto_secretbox_open (m, c, n, k) {
  assert(c.byteLength === m.byteLength, "c must be 'm.byteLength' bytes")
  const mlen = m.byteLength
  assert(mlen >= crypto_secretbox_ZEROBYTES, "mlen must be at least 'crypto_secretbox_ZEROBYTES'")
  assert(n.byteLength === crypto_secretbox_NONCEBYTES, "n must be 'crypto_secretbox_NONCEBYTES' bytes")
  assert(k.byteLength === crypto_secretbox_KEYBYTES, "k must be 'crypto_secretbox_KEYBYTES' bytes")

  const x = new Uint8Array(crypto_onetimeauth_KEYBYTES)
  crypto_stream(x, n, k)
  const validMac = crypto_onetimeauth_verify(
    c.subarray(crypto_secretbox_BOXZEROBYTES, crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES),
    c.subarray(crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES, c.byteLength),
    x
  )

  if (validMac === false) return false
  crypto_stream_xor(m, c, n, k)
  m.fill(0, 0, 32)
  return true
}

function crypto_secretbox_detached (o, mac, msg, n, k) {
  assert(o.byteLength === msg.byteLength, "o must be 'msg.byteLength' bytes")
  assert(mac.byteLength === crypto_secretbox_MACBYTES, "mac must be 'crypto_secretbox_MACBYTES' bytes")
  assert(n.byteLength === crypto_secretbox_NONCEBYTES, "n must be 'crypto_secretbox_NONCEBYTES' bytes")
  assert(k.byteLength === crypto_secretbox_KEYBYTES, "k must be 'crypto_secretbox_KEYBYTES' bytes")

  const tmp = new Uint8Array(msg.byteLength + mac.byteLength)
  crypto_secretbox_easy(tmp, msg, n, k)
  mac.set(tmp.subarray(0, mac.byteLength))
  o.set(tmp.subarray(mac.byteLength))
  return true
}

function crypto_secretbox_open_detached (msg, o, mac, n, k) {
  assert(o.byteLength === msg.byteLength, "o must be 'msg.byteLength' bytes")
  assert(mac.byteLength === crypto_secretbox_MACBYTES, "mac must be 'crypto_secretbox_MACBYTES' bytes")
  assert(n.byteLength === crypto_secretbox_NONCEBYTES, "n must be 'crypto_secretbox_NONCEBYTES' bytes")
  assert(k.byteLength === crypto_secretbox_KEYBYTES, "k must be 'crypto_secretbox_KEYBYTES' bytes")

  const tmp = new Uint8Array(o.byteLength + mac.byteLength)
  tmp.set(mac)
  tmp.set(o, mac.byteLength)
  return crypto_secretbox_open_easy(msg, tmp, n, k)
}

function crypto_secretbox_easy (o, msg, n, k) {
  assert(o.byteLength === msg.byteLength + crypto_secretbox_MACBYTES, "o must be 'msg.byteLength + crypto_secretbox_MACBYTES' bytes")
  assert(n.byteLength === crypto_secretbox_NONCEBYTES, "n must be 'crypto_secretbox_NONCEBYTES' bytes")
  assert(k.byteLength === crypto_secretbox_KEYBYTES, "k must be 'crypto_secretbox_KEYBYTES' bytes")

  const m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.byteLength)
  const c = new Uint8Array(m.byteLength)
  m.set(msg, crypto_secretbox_ZEROBYTES)
  crypto_secretbox(c, m, n, k)
  o.set(c.subarray(crypto_secretbox_BOXZEROBYTES))
}

function crypto_secretbox_open_easy (msg, box, n, k) {
  assert(box.byteLength === msg.byteLength + crypto_secretbox_MACBYTES, "box must be 'msg.byteLength + crypto_secretbox_MACBYTES' bytes")
  assert(n.byteLength === crypto_secretbox_NONCEBYTES, "n must be 'crypto_secretbox_NONCEBYTES' bytes")
  assert(k.byteLength === crypto_secretbox_KEYBYTES, "k must be 'crypto_secretbox_KEYBYTES' bytes")

  const c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.byteLength)
  const m = new Uint8Array(c.byteLength)
  c.set(box, crypto_secretbox_BOXZEROBYTES)
  if (crypto_secretbox_open(m, c, n, k) === false) return false
  msg.set(m.subarray(crypto_secretbox_ZEROBYTES))
  return true
}

},{"./crypto_onetimeauth":43,"./crypto_stream":49,"nanoassert":390}],46:[function(require,module,exports){
/* eslint-disable camelcase */
const assert = require('nanoassert')
const { randombytes_buf } = require('./randombytes')
const {
  crypto_stream_chacha20_ietf,
  crypto_stream_chacha20_ietf_xor,
  crypto_stream_chacha20_ietf_xor_ic,
  crypto_stream_chacha20_ietf_KEYBYTES
} = require('./crypto_stream_chacha20')
const { crypto_core_hchacha20, crypto_core_hchacha20_INPUTBYTES } = require('./internal/hchacha20')
const Poly1305 = require('./internal/poly1305')
const { sodium_increment, sodium_is_zero, sodium_memcmp } = require('./helpers')

const crypto_onetimeauth_poly1305_BYTES = 16
const crypto_secretstream_xchacha20poly1305_COUNTERBYTES = 4
const crypto_secretstream_xchacha20poly1305_INONCEBYTES = 8
const crypto_aead_xchacha20poly1305_ietf_KEYBYTES = 32
const crypto_secretstream_xchacha20poly1305_KEYBYTES = crypto_aead_xchacha20poly1305_ietf_KEYBYTES
const crypto_aead_xchacha20poly1305_ietf_NPUBBYTES = 24
const crypto_secretstream_xchacha20poly1305_HEADERBYTES = crypto_aead_xchacha20poly1305_ietf_NPUBBYTES
const crypto_aead_xchacha20poly1305_ietf_ABYTES = 16
const crypto_secretstream_xchacha20poly1305_ABYTES = 1 + crypto_aead_xchacha20poly1305_ietf_ABYTES
const crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER
const crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER
const crypto_secretstream_xchacha20poly1305_TAGBYTES = 1
const crypto_secretstream_xchacha20poly1305_TAG_MESSAGE = new Uint8Array([0])
const crypto_secretstream_xchacha20poly1305_TAG_PUSH = new Uint8Array([1])
const crypto_secretstream_xchacha20poly1305_TAG_REKEY = new Uint8Array([2])
const crypto_secretstream_xchacha20poly1305_TAG_FINAL = new Uint8Array([crypto_secretstream_xchacha20poly1305_TAG_PUSH | crypto_secretstream_xchacha20poly1305_TAG_REKEY])
const crypto_secretstream_xchacha20poly1305_STATEBYTES = crypto_secretstream_xchacha20poly1305_KEYBYTES +
  crypto_secretstream_xchacha20poly1305_INONCEBYTES + crypto_secretstream_xchacha20poly1305_COUNTERBYTES + 8

const KEY_OFFSET = 0
const NONCE_OFFSET = crypto_secretstream_xchacha20poly1305_KEYBYTES
const PAD_OFFSET = NONCE_OFFSET + crypto_secretstream_xchacha20poly1305_INONCEBYTES + crypto_secretstream_xchacha20poly1305_COUNTERBYTES

const _pad0 = new Uint8Array(16)

function STORE64_LE (dest, int) {
  let mul = 1
  let i = 0
  dest[0] = int & 0xFF
  while (++i < 8 && (mul *= 0x100)) {
    dest[i] = (int / mul) & 0xFF
  }
}

function crypto_secretstream_xchacha20poly1305_counter_reset (state) {
  assert(state.byteLength === crypto_secretstream_xchacha20poly1305_STATEBYTES,
    'state is should be crypto_secretstream_xchacha20poly1305_STATEBYTES long')

  const nonce = state.subarray(NONCE_OFFSET, PAD_OFFSET)
  for (let i = 0; i < crypto_secretstream_xchacha20poly1305_COUNTERBYTES; i++) {
    nonce[i] = 0
  }
  nonce[0] = 1
}

function crypto_secretstream_xchacha20poly1305_keygen (k) {
  assert(k.length === crypto_secretstream_xchacha20poly1305_KEYBYTES)
  randombytes_buf(k)
}

function crypto_secretstream_xchacha20poly1305_init_push (state, out, key) {
  assert(state.byteLength === crypto_secretstream_xchacha20poly1305_STATEBYTES,
    'state is should be crypto_secretstream_xchacha20poly1305_STATEBYTES long')
  assert(out instanceof Uint8Array && out.length === crypto_secretstream_xchacha20poly1305_HEADERBYTES, 'out not byte array of length crypto_secretstream_xchacha20poly1305_HEADERBYTES')
  assert(key instanceof Uint8Array && key.length === crypto_secretstream_xchacha20poly1305_KEYBYTES, 'key not byte array of length crypto_secretstream_xchacha20poly1305_KEYBYTES')

  const k = state.subarray(KEY_OFFSET, NONCE_OFFSET)
  const nonce = state.subarray(NONCE_OFFSET, PAD_OFFSET)
  const pad = state.subarray(PAD_OFFSET)

  randombytes_buf(out, crypto_secretstream_xchacha20poly1305_HEADERBYTES)
  crypto_core_hchacha20(k, out, key, null)
  crypto_secretstream_xchacha20poly1305_counter_reset(state)
  for (let i = 0; i < crypto_secretstream_xchacha20poly1305_INONCEBYTES; i++) {
    nonce[i + crypto_secretstream_xchacha20poly1305_COUNTERBYTES] = out[i + crypto_core_hchacha20_INPUTBYTES]
  }
  pad.fill(0)
}

function crypto_secretstream_xchacha20poly1305_init_pull (state, _in, key) {
  assert(state.byteLength === crypto_secretstream_xchacha20poly1305_STATEBYTES,
    'state is should be crypto_secretstream_xchacha20poly1305_STATEBYTES long')
  assert(_in instanceof Uint8Array && _in.length === crypto_secretstream_xchacha20poly1305_HEADERBYTES,
    '_in not byte array of length crypto_secretstream_xchacha20poly1305_HEADERBYTES')
  assert(key instanceof Uint8Array && key.length === crypto_secretstream_xchacha20poly1305_KEYBYTES,
    'key not byte array of length crypto_secretstream_xchacha20poly1305_KEYBYTES')

  const k = state.subarray(KEY_OFFSET, NONCE_OFFSET)
  const nonce = state.subarray(NONCE_OFFSET, PAD_OFFSET)
  const pad = state.subarray(PAD_OFFSET)

  crypto_core_hchacha20(k, _in, key, null)
  crypto_secretstream_xchacha20poly1305_counter_reset(state)

  for (let i = 0; i < crypto_secretstream_xchacha20poly1305_INONCEBYTES; i++) {
    nonce[i + crypto_secretstream_xchacha20poly1305_COUNTERBYTES] = _in[i + crypto_core_hchacha20_INPUTBYTES]
  }
  pad.fill(0)
}

function crypto_secretstream_xchacha20poly1305_rekey (state) {
  assert(state.byteLength === crypto_secretstream_xchacha20poly1305_STATEBYTES,
    'state is should be crypto_secretstream_xchacha20poly1305_STATEBYTES long')

  const k = state.subarray(KEY_OFFSET, NONCE_OFFSET)
  const nonce = state.subarray(NONCE_OFFSET, PAD_OFFSET)

  const new_key_and_inonce = new Uint8Array(
    crypto_stream_chacha20_ietf_KEYBYTES + crypto_secretstream_xchacha20poly1305_INONCEBYTES)
  let i
  for (i = 0; i < crypto_stream_chacha20_ietf_KEYBYTES; i++) {
    new_key_and_inonce[i] = k[i]
  }
  for (i = 0; i < crypto_secretstream_xchacha20poly1305_INONCEBYTES; i++) {
    new_key_and_inonce[crypto_stream_chacha20_ietf_KEYBYTES + i] =
      nonce[crypto_secretstream_xchacha20poly1305_COUNTERBYTES + i]
  }
  crypto_stream_chacha20_ietf_xor(new_key_and_inonce, new_key_and_inonce, nonce, k)
  for (i = 0; i < crypto_stream_chacha20_ietf_KEYBYTES; i++) {
    k[i] = new_key_and_inonce[i]
  }
  for (i = 0; i < crypto_secretstream_xchacha20poly1305_INONCEBYTES; i++) {
    nonce[crypto_secretstream_xchacha20poly1305_COUNTERBYTES + i] =
      new_key_and_inonce[crypto_stream_chacha20_ietf_KEYBYTES + i]
  }
  crypto_secretstream_xchacha20poly1305_counter_reset(state)
}

function crypto_secretstream_xchacha20poly1305_push (state, out, m, ad, tag) {
  assert(state.byteLength === crypto_secretstream_xchacha20poly1305_STATEBYTES,
    'state is should be crypto_secretstream_xchacha20poly1305_STATEBYTES long')
  if (!ad) ad = new Uint8Array(0)

  const k = state.subarray(KEY_OFFSET, NONCE_OFFSET)
  const nonce = state.subarray(NONCE_OFFSET, PAD_OFFSET)

  const block = new Uint8Array(64)
  const slen = new Uint8Array(8)

  assert(crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX <=
    crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX)

  crypto_stream_chacha20_ietf(block, nonce, k)
  const poly = new Poly1305(block)
  block.fill(0)

  poly.update(ad, 0, ad.byteLength)
  poly.update(_pad0, 0, (0x10 - ad.byteLength) & 0xf)

  block[0] = tag[0]
  crypto_stream_chacha20_ietf_xor_ic(block, block, nonce, 1, k)

  poly.update(block, 0, block.byteLength)
  out[0] = block[0]

  const c = out.subarray(1, out.byteLength)
  crypto_stream_chacha20_ietf_xor_ic(c, m, nonce, 2, k)
  poly.update(c, 0, m.byteLength)
  poly.update(_pad0, 0, (0x10 - block.byteLength + m.byteLength) & 0xf)

  STORE64_LE(slen, ad.byteLength)
  poly.update(slen, 0, slen.byteLength)
  STORE64_LE(slen, block.byteLength + m.byteLength)
  poly.update(slen, 0, slen.byteLength)

  const mac = out.subarray(1 + m.byteLength, out.byteLength)
  poly.finish(mac, 0)

  assert(crypto_onetimeauth_poly1305_BYTES >=
    crypto_secretstream_xchacha20poly1305_INONCEBYTES)
  xor_buf(nonce.subarray(crypto_secretstream_xchacha20poly1305_COUNTERBYTES, nonce.length),
    mac, crypto_secretstream_xchacha20poly1305_INONCEBYTES)
  sodium_increment(nonce)

  if ((tag[0] & crypto_secretstream_xchacha20poly1305_TAG_REKEY) !== 0 ||
    sodium_is_zero(nonce.subarray(0, crypto_secretstream_xchacha20poly1305_COUNTERBYTES))) {
    crypto_secretstream_xchacha20poly1305_rekey(state)
  }

  return crypto_secretstream_xchacha20poly1305_ABYTES + m.byteLength
}

function crypto_secretstream_xchacha20poly1305_pull (state, m, tag, _in, ad) {
  assert(state.byteLength === crypto_secretstream_xchacha20poly1305_STATEBYTES,
    'state is should be crypto_secretstream_xchacha20poly1305_STATEBYTES long')
  if (!ad) ad = new Uint8Array(0)

  const k = state.subarray(KEY_OFFSET, NONCE_OFFSET)
  const nonce = state.subarray(NONCE_OFFSET, PAD_OFFSET)

  const block = new Uint8Array(64)
  const slen = new Uint8Array(8)
  const mac = new Uint8Array(crypto_onetimeauth_poly1305_BYTES)

  assert(_in.byteLength >= crypto_secretstream_xchacha20poly1305_ABYTES,
    'ciphertext is too short.')

  const mlen = _in.byteLength - crypto_secretstream_xchacha20poly1305_ABYTES
  crypto_stream_chacha20_ietf(block, nonce, k)
  const poly = new Poly1305(block)
  block.fill(0) // sodium_memzero(block, sizeof block);

  poly.update(ad, 0, ad.byteLength)
  poly.update(_pad0, 0, (0x10 - ad.byteLength) & 0xf)

  block.fill(0) // memset(block, 0, sizeof block);
  block[0] = _in[0]
  crypto_stream_chacha20_ietf_xor_ic(block, block, nonce, 1, k)

  tag[0] = block[0]
  block[0] = _in[0]
  poly.update(block, 0, block.byteLength)

  const c = _in.subarray(1, _in.length)
  poly.update(c, 0, mlen)

  poly.update(_pad0, 0, (0x10 - block.byteLength + mlen) & 0xf)

  STORE64_LE(slen, ad.byteLength)
  poly.update(slen, 0, slen.byteLength)
  STORE64_LE(slen, block.byteLength + m.byteLength)
  poly.update(slen, 0, slen.byteLength)

  poly.finish(mac, 0)
  const stored_mac = _in.subarray(1 + mlen, _in.length)

  if (!sodium_memcmp(mac, stored_mac)) {
    mac.fill(0)
    throw new Error('MAC could not be verified.')
  }

  crypto_stream_chacha20_ietf_xor_ic(m, c.subarray(0, m.length), nonce, 2, k)
  xor_buf(nonce.subarray(crypto_secretstream_xchacha20poly1305_COUNTERBYTES, nonce.length),
    mac, crypto_secretstream_xchacha20poly1305_INONCEBYTES)
  sodium_increment(nonce)

  if ((tag & crypto_secretstream_xchacha20poly1305_TAG_REKEY) !== 0 ||
    sodium_is_zero(nonce.subarray(0, crypto_secretstream_xchacha20poly1305_COUNTERBYTES))) {
    crypto_secretstream_xchacha20poly1305_rekey(state)
  }

  return mlen
}

function xor_buf (out, _in, n) {
  for (let i = 0; i < n; i++) {
    out[i] ^= _in[i]
  }
}

module.exports = {
  crypto_secretstream_xchacha20poly1305_keygen,
  crypto_secretstream_xchacha20poly1305_init_push,
  crypto_secretstream_xchacha20poly1305_init_pull,
  crypto_secretstream_xchacha20poly1305_rekey,
  crypto_secretstream_xchacha20poly1305_push,
  crypto_secretstream_xchacha20poly1305_pull,
  crypto_secretstream_xchacha20poly1305_STATEBYTES,
  crypto_secretstream_xchacha20poly1305_ABYTES,
  crypto_secretstream_xchacha20poly1305_HEADERBYTES,
  crypto_secretstream_xchacha20poly1305_KEYBYTES,
  crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX,
  crypto_secretstream_xchacha20poly1305_TAGBYTES,
  crypto_secretstream_xchacha20poly1305_TAG_MESSAGE,
  crypto_secretstream_xchacha20poly1305_TAG_PUSH,
  crypto_secretstream_xchacha20poly1305_TAG_REKEY,
  crypto_secretstream_xchacha20poly1305_TAG_FINAL
}

},{"./crypto_stream_chacha20":50,"./helpers":52,"./internal/hchacha20":55,"./internal/poly1305":56,"./randombytes":58,"nanoassert":390}],47:[function(require,module,exports){
var siphash = require('siphash24')

if (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')

exports.crypto_shorthash_PRIMITIVE = 'siphash24'
exports.crypto_shorthash_BYTES = siphash.BYTES
exports.crypto_shorthash_KEYBYTES = siphash.KEYBYTES
exports.crypto_shorthash_WASM_SUPPORTED = siphash.WASM_SUPPORTED
exports.crypto_shorthash_WASM_LOADED = siphash.WASM_LOADED
exports.crypto_shorthash = shorthash

function shorthash (out, data, key, noAssert) {
  siphash(data, key, out, noAssert)
}

},{"siphash24":511}],48:[function(require,module,exports){
/* eslint-disable camelcase, one-var */
const { crypto_verify_32 } = require('./crypto_verify')
const { crypto_hash } = require('./crypto_hash')
const {
  gf, gf0, gf1, D, D2,
  X, Y, I, A, Z, M, S,
  sel25519, pack25519,
  inv25519, unpack25519
} = require('./internal/ed25519')
const { randombytes } = require('./randombytes')
const { crypto_scalarmult_BYTES } = require('./crypto_scalarmult.js')
const { crypto_hash_sha512_BYTES } = require('./crypto_hash.js')
const assert = require('nanoassert')

const crypto_sign_ed25519_PUBLICKEYBYTES = 32
const crypto_sign_ed25519_SECRETKEYBYTES = 64
const crypto_sign_ed25519_SEEDBYTES = 32
const crypto_sign_ed25519_BYTES = 64

const crypto_sign_BYTES = crypto_sign_ed25519_BYTES
const crypto_sign_PUBLICKEYBYTES = crypto_sign_ed25519_PUBLICKEYBYTES
const crypto_sign_SECRETKEYBYTES = crypto_sign_ed25519_SECRETKEYBYTES
const crypto_sign_SEEDBYTES = crypto_sign_ed25519_SEEDBYTES

module.exports = {
  crypto_sign_keypair,
  crypto_sign_seed_keypair,
  crypto_sign,
  crypto_sign_detached,
  crypto_sign_open,
  crypto_sign_verify_detached,
  crypto_sign_BYTES,
  crypto_sign_PUBLICKEYBYTES,
  crypto_sign_SECRETKEYBYTES,
  crypto_sign_SEEDBYTES,
  crypto_sign_ed25519_PUBLICKEYBYTES,
  crypto_sign_ed25519_SECRETKEYBYTES,
  crypto_sign_ed25519_SEEDBYTES,
  crypto_sign_ed25519_BYTES,
  crypto_sign_ed25519_pk_to_curve25519,
  crypto_sign_ed25519_sk_to_curve25519,
  crypto_sign_ed25519_sk_to_pk,
  unpackneg,
  pack
}

function set25519 (r, a) {
  for (let i = 0; i < 16; i++) r[i] = a[i] | 0
}

function pow2523 (o, i) {
  var c = gf()
  var a
  for (a = 0; a < 16; a++) c[a] = i[a]
  for (a = 250; a >= 0; a--) {
    S(c, c)
    if (a !== 1) M(c, c, i)
  }
  for (a = 0; a < 16; a++) o[a] = c[a]
}

function add (p, q) {
  var a = gf(), b = gf(), c = gf(),
    d = gf(), e = gf(), f = gf(),
    g = gf(), h = gf(), t = gf()

  Z(a, p[1], p[0])
  Z(t, q[1], q[0])
  M(a, a, t)
  A(b, p[0], p[1])
  A(t, q[0], q[1])
  M(b, b, t)
  M(c, p[3], q[3])
  M(c, c, D2)
  M(d, p[2], q[2])
  A(d, d, d)
  Z(e, b, a)
  Z(f, d, c)
  A(g, d, c)
  A(h, b, a)

  M(p[0], e, f)
  M(p[1], h, g)
  M(p[2], g, f)
  M(p[3], e, h)
}

function cswap (p, q, b) {
  var i
  for (i = 0; i < 4; i++) {
    sel25519(p[i], q[i], b)
  }
}

function pack (r, p) {
  var tx = gf(), ty = gf(), zi = gf()
  inv25519(zi, p[2])
  M(tx, p[0], zi)
  M(ty, p[1], zi)
  pack25519(r, ty)
  r[31] ^= par25519(tx) << 7
}

function scalarmult (p, q, s) {
  // don't mutate q
  var h = [gf(q[0]), gf(q[1]), gf(q[2]), gf(q[3])]
  var b, i
  set25519(p[0], gf0)
  set25519(p[1], gf1)
  set25519(p[2], gf1)
  set25519(p[3], gf0)
  for (i = 255; i >= 0; --i) {
    b = (s[(i / 8) | 0] >> (i & 7)) & 1
    cswap(p, h, b)
    add(h, p)
    add(p, p)
    cswap(p, h, b)
  }
}

function scalarbase (p, s) {
  var q = [gf(), gf(), gf(), gf()]
  set25519(q[0], X)
  set25519(q[1], Y)
  set25519(q[2], gf1)
  M(q[3], X, Y)
  scalarmult(p, q, s)
}

function crypto_sign_keypair (pk, sk, seeded) {
  check(pk, crypto_sign_PUBLICKEYBYTES)
  check(sk, crypto_sign_SECRETKEYBYTES)

  var d = new Uint8Array(64)
  var p = [gf(), gf(), gf(), gf()]
  var i

  if (!seeded) randombytes(sk, 32)
  crypto_hash(d, sk, 32)
  d[0] &= 248
  d[31] &= 127
  d[31] |= 64

  scalarbase(p, d)
  pack(pk, p)

  for (i = 0; i < 32; i++) sk[i + 32] = pk[i]
}

function crypto_sign_seed_keypair (pk, sk, seed) {
  check(seed, crypto_sign_SEEDBYTES)
  sk.set(seed)
  return crypto_sign_keypair(pk, sk, true)
}

var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10])

function modL (r, x) {
  var carry, i, j, k
  for (i = 63; i >= 32; --i) {
    carry = 0
    for (j = i - 32, k = i - 12; j < k; ++j) {
      x[j] += carry - 16 * x[i] * L[j - (i - 32)]
      carry = (x[j] + 128) >> 8
      x[j] -= carry * 256
    }
    x[j] += carry
    x[i] = 0
  }
  carry = 0
  for (j = 0; j < 32; j++) {
    x[j] += carry - (x[31] >> 4) * L[j]
    carry = x[j] >> 8
    x[j] &= 255
  }
  for (j = 0; j < 32; j++) x[j] -= carry * L[j]
  for (i = 0; i < 32; i++) {
    x[i + 1] += x[i] >> 8
    r[i] = x[i] & 255
  }
}

function reduce (r) {
  var x = new Float64Array(64)
  for (let i = 0; i < 64; i++) x[i] = r[i]
  for (let i = 0; i < 64; i++) r[i] = 0
  modL(r, x)
}

// Note: difference from C - smlen returned, not passed as argument.
function crypto_sign (sm, m, sk) {
  check(sm, crypto_sign_BYTES + m.length)
  check(m, 0)
  check(sk, crypto_sign_SECRETKEYBYTES)
  var n = m.length

  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64)
  var i, j, x = new Float64Array(64)
  var p = [gf(), gf(), gf(), gf()]

  crypto_hash(d, sk, 32)
  d[0] &= 248
  d[31] &= 127
  d[31] |= 64

  var smlen = n + 64
  for (i = 0; i < n; i++) sm[64 + i] = m[i]
  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i]

  crypto_hash(r, sm.subarray(32), n + 32)
  reduce(r)
  scalarbase(p, r)
  pack(sm, p)

  for (i = 32; i < 64; i++) sm[i] = sk[i]
  crypto_hash(h, sm, n + 64)
  reduce(h)

  for (i = 0; i < 64; i++) x[i] = 0
  for (i = 0; i < 32; i++) x[i] = r[i]
  for (i = 0; i < 32; i++) {
    for (j = 0; j < 32; j++) {
      x[i + j] += h[i] * d[j]
    }
  }

  modL(sm.subarray(32), x)
  return smlen
}

function crypto_sign_detached (sig, m, sk) {
  var sm = new Uint8Array(m.length + crypto_sign_BYTES)
  crypto_sign(sm, m, sk)
  for (let i = 0; i < crypto_sign_BYTES; i++) sig[i] = sm[i]
}

function unpackneg (r, p) {
  var t = gf(), chk = gf(), num = gf(),
    den = gf(), den2 = gf(), den4 = gf(),
    den6 = gf()

  set25519(r[2], gf1)
  unpack25519(r[1], p)
  S(num, r[1])
  M(den, num, D)
  Z(num, num, r[2])
  A(den, r[2], den)

  S(den2, den)
  S(den4, den2)
  M(den6, den4, den2)
  M(t, den6, num)
  M(t, t, den)

  pow2523(t, t)
  M(t, t, num)
  M(t, t, den)
  M(t, t, den)
  M(r[0], t, den)

  S(chk, r[0])
  M(chk, chk, den)
  if (!neq25519(chk, num)) M(r[0], r[0], I)

  S(chk, r[0])
  M(chk, chk, den)
  if (!neq25519(chk, num)) return false

  if (par25519(r[0]) === (p[31] >> 7)) {
    Z(r[0], gf(), r[0])
  }

  M(r[3], r[0], r[1])
  return true
}

/* eslint-disable no-unused-vars */
function crypto_sign_open (msg, sm, pk) {
  check(msg, sm.length - crypto_sign_BYTES)
  check(sm, crypto_sign_BYTES)
  check(pk, crypto_sign_PUBLICKEYBYTES)
  var n = sm.length
  var m = new Uint8Array(sm.length)

  var i, mlen
  var t = new Uint8Array(32), h = new Uint8Array(64)
  var p = [gf(), gf(), gf(), gf()],
    q = [gf(), gf(), gf(), gf()]

  mlen = -1
  if (n < 64) return false

  if (!unpackneg(q, pk)) return false

  for (i = 0; i < n; i++) m[i] = sm[i]
  for (i = 0; i < 32; i++) m[i + 32] = pk[i]
  crypto_hash(h, m, n)
  reduce(h)
  scalarmult(p, q, h)

  scalarbase(q, sm.subarray(32))
  add(p, q)
  pack(t, p)

  n -= 64
  if (!crypto_verify_32(sm, 0, t, 0)) {
    for (i = 0; i < n; i++) m[i] = 0
    return false
    // throw new Error('crypto_sign_open failed')
  }

  for (i = 0; i < n; i++) msg[i] = sm[i + 64]
  mlen = n
  return true
}
/* eslint-enable no-unused-vars */

function crypto_sign_verify_detached (sig, m, pk) {
  check(sig, crypto_sign_BYTES)
  var sm = new Uint8Array(m.length + crypto_sign_BYTES)
  var i = 0
  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i]
  for (i = 0; i < m.length; i++) sm[i + crypto_sign_BYTES] = m[i]
  return crypto_sign_open(m, sm, pk)
}

function par25519 (a) {
  var d = new Uint8Array(32)
  pack25519(d, a)
  return d[0] & 1
}

function neq25519 (a, b) {
  var c = new Uint8Array(32), d = new Uint8Array(32)
  pack25519(c, a)
  pack25519(d, b)
  return crypto_verify_32(c, 0, d, 0)
}

function ed25519_mul_l (p, q) {
  scalarmult(p, q, L)
}

function ed25519_is_on_main_subgroup (p) {
  var pl = [gf(), gf(), gf(), gf()]

  ed25519_mul_l(pl, p)

  var zero = 0
  for (let i = 0; i < 16; i++) {
    zero |= (pl[0][i] & 0xffff)
  }

  return zero === 0
}

function crypto_sign_ed25519_pk_to_curve25519 (x25519_pk, ed25519_pk) {
  check(x25519_pk, crypto_sign_PUBLICKEYBYTES)
  check(ed25519_pk, crypto_sign_ed25519_PUBLICKEYBYTES)

  var a = [gf(), gf(), gf(), gf()]
  var x = gf([1])
  var one_minus_y = gf([1])

  assert(
    isSmallOrder(ed25519_pk) &&
    unpackneg(a, ed25519_pk) &&
    ed25519_is_on_main_subgroup(a), 'Cannot convert key: bad point')

  for (let i = 0; i < a.length; i++) {
    pack25519(x25519_pk, a[i])
  }

  Z(one_minus_y, one_minus_y, a[1])
  A(x, x, a[1])
  inv25519(one_minus_y, one_minus_y)
  M(x, x, one_minus_y)
  pack25519(x25519_pk, x)

  return 0
}

function isSmallOrder (s) {
  Uint8Array.from([])

  var bad_points = [
    // 0 (order 4)
    Uint8Array.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),

    // 1 (order 1)
    Uint8Array.from([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),

    // 2707385501144840649318225287225658788936804267575313519463743609750303402022(order 8)
    Uint8Array.from([0x26, 0xe8, 0x95, 0x8f, 0xc2, 0xb2, 0x27, 0xb0, 0x45, 0xc3,
      0xf4, 0x89, 0xf2, 0xef, 0x98, 0xf0, 0xd5, 0xdf, 0xac, 0x05, 0xd3,
      0xc6, 0x33, 0x39, 0xb1, 0x38, 0x02, 0x88, 0x6d, 0x53, 0xfc, 0x05]),

    // 55188659117513257062467267217118295137698188065244968500265048394206261417927 (order 8)
    Uint8Array.from([0xc7, 0x17, 0x6a, 0x70, 0x3d, 0x4d, 0xd8, 0x4f, 0xba, 0x3c,
      0x0b, 0x76, 0x0d, 0x10, 0x67, 0x0f, 0x2a, 0x20, 0x53, 0xfa, 0x2c,
      0x39, 0xcc, 0xc6, 0x4e, 0xc7, 0xfd, 0x77, 0x92, 0xac, 0x03, 0x7a]),

    // p-1 (order 2)
    Uint8Array.from([0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f]),

    //  p (=0 order 4)
    Uint8Array.from([0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f]),

    // p + 1 (=1 order 1)
    Uint8Array.from([0xee, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f])
  ]

  var c = new Uint8Array(7)
  var j

  check(bad_points, 7)
  for (let i = 0; i < bad_points.length; i++) {
    for (j = 0; j < 31; j++) {
      c[i] |= s[j] ^ bad_points[i][j]
    }
  }

  for (let i = 0; i < bad_points.length; i++) {
    c[i] |= (s[j] & 0x7f) ^ bad_points[i][j]
  }

  var k = 0
  for (let i = 0; i < bad_points.length; i++) {
    k |= (c[i] - 1)
  }

  return ((k >> 8) & 1) === 0
}

function crypto_sign_ed25519_sk_to_pk (pk, sk) {
  check(pk, crypto_sign_ed25519_PUBLICKEYBYTES)
  pk.set(sk.subarray(crypto_sign_ed25519_SEEDBYTES))
  return pk
}

function crypto_sign_ed25519_sk_to_curve25519 (curveSk, edSk) {
  assert(curveSk && curveSk.byteLength === crypto_scalarmult_BYTES, "curveSk must be 'crypto_sign_SECRETKEYBYTES' long")
  assert(edSk && edSk.byteLength === crypto_sign_ed25519_SECRETKEYBYTES, "edSk must be 'crypto_sign_ed25519_SECRETKEYBYTES' long")

  var h = new Uint8Array(crypto_hash_sha512_BYTES)
  crypto_hash(h, edSk, 32)

  h[0] &= 248
  h[31] &= 127
  h[31] |= 64

  curveSk.set(h.subarray(0, crypto_scalarmult_BYTES))
  h.fill(0)
  return curveSk
}

function check (buf, len, arg = 'Argument') {
  if (!buf || (len && buf.length < len)) throw new Error(arg + ' must be a buffer' + (len ? ' of length ' + len : ''))
}

},{"./crypto_hash":39,"./crypto_hash.js":39,"./crypto_scalarmult.js":44,"./crypto_verify":51,"./internal/ed25519":54,"./randombytes":58,"nanoassert":390}],49:[function(require,module,exports){
/* eslint-disable camelcase */
const xsalsa20 = require('xsalsa20')

if (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')

exports.crypto_stream_KEYBYTES = 32
exports.crypto_stream_NONCEBYTES = 24
exports.crypto_stream_PRIMITIVE = 'xsalsa20'
exports.crypto_stream_xsalsa20_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER

exports.crypto_stream = function (c, nonce, key) {
  c.fill(0)
  exports.crypto_stream_xor(c, c, nonce, key)
}

exports.crypto_stream_xor = function (c, m, nonce, key) {
  const xor = xsalsa20(nonce, key)

  xor.update(m, c)
  xor.final()
}

exports.crypto_stream_xor_instance = function (nonce, key) {
  return new XOR(nonce, key)
}

function XOR (nonce, key) {
  this._instance = xsalsa20(nonce, key)
}

XOR.prototype.update = function (out, inp) {
  this._instance.update(inp, out)
}

XOR.prototype.final = function () {
  this._instance.finalize()
  this._instance = null
}

},{"xsalsa20":600}],50:[function(require,module,exports){
const assert = require('nanoassert')
const Chacha20 = require('chacha20-universal')

if (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')

exports.crypto_stream_chacha20_KEYBYTES = 32
exports.crypto_stream_chacha20_NONCEBYTES = 8
exports.crypto_stream_chacha20_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER

exports.crypto_stream_chacha20_ietf_KEYBYTES = 32
exports.crypto_stream_chacha20_ietf_NONCEBYTES = 12
exports.crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX = 2 ** 32

exports.crypto_stream_chacha20 = function (c, n, k) {
  c.fill(0)
  exports.crypto_stream_chacha20_xor(c, c, n, k)
}

exports.crypto_stream_chacha20_xor = function (c, m, n, k) {
  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,
    'n should be crypto_stream_chacha20_NONCEBYTES')
  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,
    'k should be crypto_stream_chacha20_KEYBYTES')

  const xor = new Chacha20(n, k)
  xor.update(c, m)
  xor.final()
}

exports.crypto_stream_chacha20_xor_ic = function (c, m, n, ic, k) {
  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,
    'n should be crypto_stream_chacha20_NONCEBYTES')
  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,
    'k should be crypto_stream_chacha20_KEYBYTES')

  const xor = new Chacha20(n, k, ic)
  xor.update(c, m)
  xor.final()
}

exports.crypto_stream_chacha20_xor_instance = function (n, k) {
  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,
    'n should be crypto_stream_chacha20_NONCEBYTES')
  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,
    'k should be crypto_stream_chacha20_KEYBYTES')

  return new Chacha20(n, k)
}

exports.crypto_stream_chacha20_ietf = function (c, n, k) {
  c.fill(0)
  exports.crypto_stream_chacha20_ietf_xor(c, c, n, k)
}

exports.crypto_stream_chacha20_ietf_xor = function (c, m, n, k) {
  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,
    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')
  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,
    'k should be crypto_stream_chacha20_ietf_KEYBYTES')

  const xor = new Chacha20(n, k)
  xor.update(c, m)
  xor.final()
}

exports.crypto_stream_chacha20_ietf_xor_ic = function (c, m, n, ic, k) {
  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,
    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')
  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,
    'k should be crypto_stream_chacha20_ietf_KEYBYTES')

  const xor = new Chacha20(n, k, ic)
  xor.update(c, m)
  xor.final()
}

exports.crypto_stream_chacha20_ietf_xor_instance = function (n, k) {
  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,
    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')
  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,
    'k should be crypto_stream_chacha20_ietf_KEYBYTES')

  return new Chacha20(n, k)
}

},{"chacha20-universal":173,"nanoassert":390}],51:[function(require,module,exports){
/* eslint-disable camelcase */
module.exports = {
  crypto_verify_16,
  crypto_verify_32,
  crypto_verify_64
}

function vn (x, xi, y, yi, n) {
  var d = 0
  for (let i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i]
  return (1 & ((d - 1) >>> 8)) - 1
}

// Make non enumerable as this is an internal function
Object.defineProperty(module.exports, 'vn', {
  value: vn
})

function crypto_verify_16 (x, xi, y, yi) {
  return vn(x, xi, y, yi, 16) === 0
}

function crypto_verify_32 (x, xi, y, yi) {
  return vn(x, xi, y, yi, 32) === 0
}

function crypto_verify_64 (x, xi, y, yi) {
  return vn(x, xi, y, yi, 64) === 0
}

},{}],52:[function(require,module,exports){
/* eslint-disable camelcase */
const assert = require('nanoassert')
const { vn } = require('./crypto_verify')

function sodium_increment (n) {
  const nlen = n.byteLength
  var c = 1
  for (var i = 0; i < nlen; i++) {
    c += n[i]
    n[i] = c
    c >>= 8
  }
}

function sodium_memcmp (a, b) {
  assert(a.byteLength === b.byteLength, 'buffers must be the same size')

  return vn(a, 0, b, 0, a.byteLength) === 0
}

function sodium_is_zero (arr) {
  var d = 0
  for (let i = 0; i < arr.length; i++) d |= arr[i]
  return d === 0
}

module.exports = {
  sodium_increment,
  sodium_memcmp,
  sodium_is_zero
}

},{"./crypto_verify":51,"nanoassert":390}],53:[function(require,module,exports){
'use strict'

// Based on https://github.com/dchest/tweetnacl-js/blob/6dcbcaf5f5cbfd313f2dcfe763db35c828c8ff5b/nacl-fast.js.

// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/

forward(require('./randombytes'))
forward(require('./memory'))
forward(require('./helpers'))
forward(require('./crypto_verify'))
forward(require('./crypto_auth'))
forward(require('./crypto_box'))
forward(require('./crypto_generichash'))
forward(require('./crypto_hash'))
forward(require('./crypto_hash_sha256'))
forward(require('./crypto_kdf'))
forward(require('./crypto_kx'))
forward(require('./crypto_aead'))
forward(require('./crypto_onetimeauth'))
forward(require('./crypto_scalarmult'))
forward(require('./crypto_secretbox'))
forward(require('./crypto_secretstream'))
forward(require('./crypto_shorthash'))
forward(require('./crypto_sign'))
forward(require('./crypto_stream'))
forward(require('./crypto_stream_chacha20'))

function forward (submodule) {
  Object.keys(submodule).forEach(function (prop) {
    module.exports[prop] = submodule[prop]
  })
}

},{"./crypto_aead":35,"./crypto_auth":36,"./crypto_box":37,"./crypto_generichash":38,"./crypto_hash":39,"./crypto_hash_sha256":40,"./crypto_kdf":41,"./crypto_kx":42,"./crypto_onetimeauth":43,"./crypto_scalarmult":44,"./crypto_secretbox":45,"./crypto_secretstream":46,"./crypto_shorthash":47,"./crypto_sign":48,"./crypto_stream":49,"./crypto_stream_chacha20":50,"./crypto_verify":51,"./helpers":52,"./memory":57,"./randombytes":58}],54:[function(require,module,exports){
if (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')

var gf = function(init) {
  var i, r = new Float64Array(16);
  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
  return r;
}

var _0 = new Uint8Array(16);
var _9 = new Uint8Array(32); _9[0] = 9;

var gf0 = gf(),
    gf1 = gf([1]),
    _121665 = gf([0xdb41, 1]),
    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

function A(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
}

function Z(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
}

function M(o, a, b) {
  var v, c,
    t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
    t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
    b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3],
    b4 = b[4],
    b5 = b[5],
    b6 = b[6],
    b7 = b[7],
    b8 = b[8],
    b9 = b[9],
    b10 = b[10],
    b11 = b[11],
    b12 = b[12],
    b13 = b[13],
    b14 = b[14],
    b15 = b[15];

  v = a[0];
  t0 += v * b0;
  t1 += v * b1;
  t2 += v * b2;
  t3 += v * b3;
  t4 += v * b4;
  t5 += v * b5;
  t6 += v * b6;
  t7 += v * b7;
  t8 += v * b8;
  t9 += v * b9;
  t10 += v * b10;
  t11 += v * b11;
  t12 += v * b12;
  t13 += v * b13;
  t14 += v * b14;
  t15 += v * b15;
  v = a[1];
  t1 += v * b0;
  t2 += v * b1;
  t3 += v * b2;
  t4 += v * b3;
  t5 += v * b4;
  t6 += v * b5;
  t7 += v * b6;
  t8 += v * b7;
  t9 += v * b8;
  t10 += v * b9;
  t11 += v * b10;
  t12 += v * b11;
  t13 += v * b12;
  t14 += v * b13;
  t15 += v * b14;
  t16 += v * b15;
  v = a[2];
  t2 += v * b0;
  t3 += v * b1;
  t4 += v * b2;
  t5 += v * b3;
  t6 += v * b4;
  t7 += v * b5;
  t8 += v * b6;
  t9 += v * b7;
  t10 += v * b8;
  t11 += v * b9;
  t12 += v * b10;
  t13 += v * b11;
  t14 += v * b12;
  t15 += v * b13;
  t16 += v * b14;
  t17 += v * b15;
  v = a[3];
  t3 += v * b0;
  t4 += v * b1;
  t5 += v * b2;
  t6 += v * b3;
  t7 += v * b4;
  t8 += v * b5;
  t9 += v * b6;
  t10 += v * b7;
  t11 += v * b8;
  t12 += v * b9;
  t13 += v * b10;
  t14 += v * b11;
  t15 += v * b12;
  t16 += v * b13;
  t17 += v * b14;
  t18 += v * b15;
  v = a[4];
  t4 += v * b0;
  t5 += v * b1;
  t6 += v * b2;
  t7 += v * b3;
  t8 += v * b4;
  t9 += v * b5;
  t10 += v * b6;
  t11 += v * b7;
  t12 += v * b8;
  t13 += v * b9;
  t14 += v * b10;
  t15 += v * b11;
  t16 += v * b12;
  t17 += v * b13;
  t18 += v * b14;
  t19 += v * b15;
  v = a[5];
  t5 += v * b0;
  t6 += v * b1;
  t7 += v * b2;
  t8 += v * b3;
  t9 += v * b4;
  t10 += v * b5;
  t11 += v * b6;
  t12 += v * b7;
  t13 += v * b8;
  t14 += v * b9;
  t15 += v * b10;
  t16 += v * b11;
  t17 += v * b12;
  t18 += v * b13;
  t19 += v * b14;
  t20 += v * b15;
  v = a[6];
  t6 += v * b0;
  t7 += v * b1;
  t8 += v * b2;
  t9 += v * b3;
  t10 += v * b4;
  t11 += v * b5;
  t12 += v * b6;
  t13 += v * b7;
  t14 += v * b8;
  t15 += v * b9;
  t16 += v * b10;
  t17 += v * b11;
  t18 += v * b12;
  t19 += v * b13;
  t20 += v * b14;
  t21 += v * b15;
  v = a[7];
  t7 += v * b0;
  t8 += v * b1;
  t9 += v * b2;
  t10 += v * b3;
  t11 += v * b4;
  t12 += v * b5;
  t13 += v * b6;
  t14 += v * b7;
  t15 += v * b8;
  t16 += v * b9;
  t17 += v * b10;
  t18 += v * b11;
  t19 += v * b12;
  t20 += v * b13;
  t21 += v * b14;
  t22 += v * b15;
  v = a[8];
  t8 += v * b0;
  t9 += v * b1;
  t10 += v * b2;
  t11 += v * b3;
  t12 += v * b4;
  t13 += v * b5;
  t14 += v * b6;
  t15 += v * b7;
  t16 += v * b8;
  t17 += v * b9;
  t18 += v * b10;
  t19 += v * b11;
  t20 += v * b12;
  t21 += v * b13;
  t22 += v * b14;
  t23 += v * b15;
  v = a[9];
  t9 += v * b0;
  t10 += v * b1;
  t11 += v * b2;
  t12 += v * b3;
  t13 += v * b4;
  t14 += v * b5;
  t15 += v * b6;
  t16 += v * b7;
  t17 += v * b8;
  t18 += v * b9;
  t19 += v * b10;
  t20 += v * b11;
  t21 += v * b12;
  t22 += v * b13;
  t23 += v * b14;
  t24 += v * b15;
  v = a[10];
  t10 += v * b0;
  t11 += v * b1;
  t12 += v * b2;
  t13 += v * b3;
  t14 += v * b4;
  t15 += v * b5;
  t16 += v * b6;
  t17 += v * b7;
  t18 += v * b8;
  t19 += v * b9;
  t20 += v * b10;
  t21 += v * b11;
  t22 += v * b12;
  t23 += v * b13;
  t24 += v * b14;
  t25 += v * b15;
  v = a[11];
  t11 += v * b0;
  t12 += v * b1;
  t13 += v * b2;
  t14 += v * b3;
  t15 += v * b4;
  t16 += v * b5;
  t17 += v * b6;
  t18 += v * b7;
  t19 += v * b8;
  t20 += v * b9;
  t21 += v * b10;
  t22 += v * b11;
  t23 += v * b12;
  t24 += v * b13;
  t25 += v * b14;
  t26 += v * b15;
  v = a[12];
  t12 += v * b0;
  t13 += v * b1;
  t14 += v * b2;
  t15 += v * b3;
  t16 += v * b4;
  t17 += v * b5;
  t18 += v * b6;
  t19 += v * b7;
  t20 += v * b8;
  t21 += v * b9;
  t22 += v * b10;
  t23 += v * b11;
  t24 += v * b12;
  t25 += v * b13;
  t26 += v * b14;
  t27 += v * b15;
  v = a[13];
  t13 += v * b0;
  t14 += v * b1;
  t15 += v * b2;
  t16 += v * b3;
  t17 += v * b4;
  t18 += v * b5;
  t19 += v * b6;
  t20 += v * b7;
  t21 += v * b8;
  t22 += v * b9;
  t23 += v * b10;
  t24 += v * b11;
  t25 += v * b12;
  t26 += v * b13;
  t27 += v * b14;
  t28 += v * b15;
  v = a[14];
  t14 += v * b0;
  t15 += v * b1;
  t16 += v * b2;
  t17 += v * b3;
  t18 += v * b4;
  t19 += v * b5;
  t20 += v * b6;
  t21 += v * b7;
  t22 += v * b8;
  t23 += v * b9;
  t24 += v * b10;
  t25 += v * b11;
  t26 += v * b12;
  t27 += v * b13;
  t28 += v * b14;
  t29 += v * b15;
  v = a[15];
  t15 += v * b0;
  t16 += v * b1;
  t17 += v * b2;
  t18 += v * b3;
  t19 += v * b4;
  t20 += v * b5;
  t21 += v * b6;
  t22 += v * b7;
  t23 += v * b8;
  t24 += v * b9;
  t25 += v * b10;
  t26 += v * b11;
  t27 += v * b12;
  t28 += v * b13;
  t29 += v * b14;
  t30 += v * b15;

  t0  += 38 * t16;
  t1  += 38 * t17;
  t2  += 38 * t18;
  t3  += 38 * t19;
  t4  += 38 * t20;
  t5  += 38 * t21;
  t6  += 38 * t22;
  t7  += 38 * t23;
  t8  += 38 * t24;
  t9  += 38 * t25;
  t10 += 38 * t26;
  t11 += 38 * t27;
  t12 += 38 * t28;
  t13 += 38 * t29;
  t14 += 38 * t30;
  // t15 left as is

  // first car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  // second car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  o[ 0] = t0;
  o[ 1] = t1;
  o[ 2] = t2;
  o[ 3] = t3;
  o[ 4] = t4;
  o[ 5] = t5;
  o[ 6] = t6;
  o[ 7] = t7;
  o[ 8] = t8;
  o[ 9] = t9;
  o[10] = t10;
  o[11] = t11;
  o[12] = t12;
  o[13] = t13;
  o[14] = t14;
  o[15] = t15;
}

function S(o, a) {
  M(o, a, a);
}

function sel25519(p, q, b) {
  var t, c = ~(b-1);
  for (var i = 0; i < 16; i++) {
    t = c & (p[i] ^ q[i]);
    p[i] ^= t;
    q[i] ^= t;
  }
}

function pack25519(o, n) {
  var i, j, b;
  var m = gf(), t = gf();
  for (i = 0; i < 16; i++) t[i] = n[i];
  car25519(t);
  car25519(t);
  car25519(t);
  for (j = 0; j < 2; j++) {
    m[0] = t[0] - 0xffed;
    for (i = 1; i < 15; i++) {
      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
      m[i-1] &= 0xffff;
    }
    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
    b = (m[15]>>16) & 1;
    m[14] &= 0xffff;
    sel25519(t, m, 1-b);
  }
  for (i = 0; i < 16; i++) {
    o[2*i] = t[i] & 0xff;
    o[2*i+1] = t[i]>>8;
  }
}

function unpack25519(o, n) {
  var i;
  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
  o[15] &= 0x7fff;
}

function inv25519(o, i) {
  var c = gf();
  var a;
  for (a = 0; a < 16; a++) c[a] = i[a];
  for (a = 253; a >= 0; a--) {
    S(c, c);
    if(a !== 2 && a !== 4) M(c, c, i);
  }
  for (a = 0; a < 16; a++) o[a] = c[a];
}

function car25519(o) {
  var i, v, c = 1;
  for (i = 0; i < 16; i++) {
    v = o[i] + c + 65535;
    c = Math.floor(v / 65536);
    o[i] = v - c * 65536;
  }
  o[0] += c-1 + 37 * (c-1);
}

module.exports = {
  gf,
  A,
  Z,
  M,
  S,
  sel25519,
  pack25519,
  unpack25519,
  inv25519,
  gf0,
  gf1,
  _9,
  _121665,
  D,
  D2,
  X,
  Y,
  I
}

},{}],55:[function(require,module,exports){
/* eslint-disable camelcase */
const { sodium_malloc } = require('../memory')
const assert = require('nanoassert')

if (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')

const crypto_core_hchacha20_OUTPUTBYTES = 32
const crypto_core_hchacha20_INPUTBYTES = 16
const crypto_core_hchacha20_KEYBYTES = 32
const crypto_core_hchacha20_CONSTBYTES = 16

function ROTL32 (x, b) {
  x &= 0xFFFFFFFF
  b &= 0xFFFFFFFF
  return (x << b) | (x >>> (32 - b))
}

function LOAD32_LE (src, offset) {
  assert(src instanceof Uint8Array, 'src not byte array')
  let w = src[offset]
  w |= src[offset + 1] << 8
  w |= src[offset + 2] << 16
  w |= src[offset + 3] << 24
  return w
}

function STORE32_LE (dest, int, offset) {
  assert(dest instanceof Uint8Array, 'dest not byte array')
  var mul = 1
  var i = 0
  dest[offset] = int & 0xFF // grab bottom byte
  while (++i < 4 && (mul *= 0x100)) {
    dest[offset + i] = (int / mul) & 0xFF
  }
}

function QUARTERROUND (l, A, B, C, D) {
  l[A] += l[B]
  l[D] = ROTL32(l[D] ^ l[A], 16)
  l[C] += l[D]
  l[B] = ROTL32(l[B] ^ l[C], 12)
  l[A] += l[B]
  l[D] = ROTL32(l[D] ^ l[A], 8)
  l[C] += l[D]
  l[B] = ROTL32(l[B] ^ l[C], 7)
}

function crypto_core_hchacha20 (out, _in, k, c) {
  assert(out instanceof Uint8Array && out.length === 32, 'out is not an array of 32 bytes')
  assert(k instanceof Uint8Array && k.length === 32, 'k is not an array of 32 bytes')
  assert(c === null || (c instanceof Uint8Array && c.length === 16), 'c is not null or an array of 16 bytes')

  let i = 0
  const x = new Uint32Array(16)
  if (!c) {
    x[0] = 0x61707865
    x[1] = 0x3320646E
    x[2] = 0x79622D32
    x[3] = 0x6B206574
  } else {
    x[0] = LOAD32_LE(c, 0)
    x[1] = LOAD32_LE(c, 4)
    x[2] = LOAD32_LE(c, 8)
    x[3] = LOAD32_LE(c, 12)
  }
  x[4] = LOAD32_LE(k, 0)
  x[5] = LOAD32_LE(k, 4)
  x[6] = LOAD32_LE(k, 8)
  x[7] = LOAD32_LE(k, 12)
  x[8] = LOAD32_LE(k, 16)
  x[9] = LOAD32_LE(k, 20)
  x[10] = LOAD32_LE(k, 24)
  x[11] = LOAD32_LE(k, 28)
  x[12] = LOAD32_LE(_in, 0)
  x[13] = LOAD32_LE(_in, 4)
  x[14] = LOAD32_LE(_in, 8)
  x[15] = LOAD32_LE(_in, 12)

  for (i = 0; i < 10; i++) {
    QUARTERROUND(x, 0, 4, 8, 12)
    QUARTERROUND(x, 1, 5, 9, 13)
    QUARTERROUND(x, 2, 6, 10, 14)
    QUARTERROUND(x, 3, 7, 11, 15)
    QUARTERROUND(x, 0, 5, 10, 15)
    QUARTERROUND(x, 1, 6, 11, 12)
    QUARTERROUND(x, 2, 7, 8, 13)
    QUARTERROUND(x, 3, 4, 9, 14)
  }

  STORE32_LE(out, x[0], 0)
  STORE32_LE(out, x[1], 4)
  STORE32_LE(out, x[2], 8)
  STORE32_LE(out, x[3], 12)
  STORE32_LE(out, x[12], 16)
  STORE32_LE(out, x[13], 20)
  STORE32_LE(out, x[14], 24)
  STORE32_LE(out, x[15], 28)

  return 0
}

function crypto_core_hchacha20_outputbytes () {
  return crypto_core_hchacha20_OUTPUTBYTES
}

function crypto_core_hchacha20_inputbytes () {
  return crypto_core_hchacha20_INPUTBYTES
}

function crypto_core_hchacha20_keybytes () {
  return crypto_core_hchacha20_KEYBYTES
}

function crypto_core_hchacha20_constbytes () {
  return crypto_core_hchacha20_CONSTBYTES
}

module.exports = {
  crypto_core_hchacha20_INPUTBYTES,
  LOAD32_LE,
  STORE32_LE,
  QUARTERROUND,
  crypto_core_hchacha20,
  crypto_core_hchacha20_outputbytes,
  crypto_core_hchacha20_inputbytes,
  crypto_core_hchacha20_keybytes,
  crypto_core_hchacha20_constbytes
}

},{"../memory":57,"nanoassert":390}],56:[function(require,module,exports){
/*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/

if (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')

var poly1305 = function(key) {
  this.buffer = new Uint8Array(16);
  this.r = new Uint16Array(10);
  this.h = new Uint16Array(10);
  this.pad = new Uint16Array(8);
  this.leftover = 0;
  this.fin = 0;

  var t0, t1, t2, t3, t4, t5, t6, t7;

  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
  this.r[9] = ((t7 >>>  5)) & 0x007f;

  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
};

poly1305.prototype.blocks = function(m, mpos, bytes) {
  var hibit = this.fin ? 0 : (1 << 11);
  var t0, t1, t2, t3, t4, t5, t6, t7, c;
  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

  var h0 = this.h[0],
      h1 = this.h[1],
      h2 = this.h[2],
      h3 = this.h[3],
      h4 = this.h[4],
      h5 = this.h[5],
      h6 = this.h[6],
      h7 = this.h[7],
      h8 = this.h[8],
      h9 = this.h[9];

  var r0 = this.r[0],
      r1 = this.r[1],
      r2 = this.r[2],
      r3 = this.r[3],
      r4 = this.r[4],
      r5 = this.r[5],
      r6 = this.r[6],
      r7 = this.r[7],
      r8 = this.r[8],
      r9 = this.r[9];

  while (bytes >= 16) {
    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
    h5 += ((t4 >>>  1)) & 0x1fff;
    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
    h9 += ((t7 >>> 5)) | hibit;

    c = 0;

    d0 = c;
    d0 += h0 * r0;
    d0 += h1 * (5 * r9);
    d0 += h2 * (5 * r8);
    d0 += h3 * (5 * r7);
    d0 += h4 * (5 * r6);
    c = (d0 >>> 13); d0 &= 0x1fff;
    d0 += h5 * (5 * r5);
    d0 += h6 * (5 * r4);
    d0 += h7 * (5 * r3);
    d0 += h8 * (5 * r2);
    d0 += h9 * (5 * r1);
    c += (d0 >>> 13); d0 &= 0x1fff;

    d1 = c;
    d1 += h0 * r1;
    d1 += h1 * r0;
    d1 += h2 * (5 * r9);
    d1 += h3 * (5 * r8);
    d1 += h4 * (5 * r7);
    c = (d1 >>> 13); d1 &= 0x1fff;
    d1 += h5 * (5 * r6);
    d1 += h6 * (5 * r5);
    d1 += h7 * (5 * r4);
    d1 += h8 * (5 * r3);
    d1 += h9 * (5 * r2);
    c += (d1 >>> 13); d1 &= 0x1fff;

    d2 = c;
    d2 += h0 * r2;
    d2 += h1 * r1;
    d2 += h2 * r0;
    d2 += h3 * (5 * r9);
    d2 += h4 * (5 * r8);
    c = (d2 >>> 13); d2 &= 0x1fff;
    d2 += h5 * (5 * r7);
    d2 += h6 * (5 * r6);
    d2 += h7 * (5 * r5);
    d2 += h8 * (5 * r4);
    d2 += h9 * (5 * r3);
    c += (d2 >>> 13); d2 &= 0x1fff;

    d3 = c;
    d3 += h0 * r3;
    d3 += h1 * r2;
    d3 += h2 * r1;
    d3 += h3 * r0;
    d3 += h4 * (5 * r9);
    c = (d3 >>> 13); d3 &= 0x1fff;
    d3 += h5 * (5 * r8);
    d3 += h6 * (5 * r7);
    d3 += h7 * (5 * r6);
    d3 += h8 * (5 * r5);
    d3 += h9 * (5 * r4);
    c += (d3 >>> 13); d3 &= 0x1fff;

    d4 = c;
    d4 += h0 * r4;
    d4 += h1 * r3;
    d4 += h2 * r2;
    d4 += h3 * r1;
    d4 += h4 * r0;
    c = (d4 >>> 13); d4 &= 0x1fff;
    d4 += h5 * (5 * r9);
    d4 += h6 * (5 * r8);
    d4 += h7 * (5 * r7);
    d4 += h8 * (5 * r6);
    d4 += h9 * (5 * r5);
    c += (d4 >>> 13); d4 &= 0x1fff;

    d5 = c;
    d5 += h0 * r5;
    d5 += h1 * r4;
    d5 += h2 * r3;
    d5 += h3 * r2;
    d5 += h4 * r1;
    c = (d5 >>> 13); d5 &= 0x1fff;
    d5 += h5 * r0;
    d5 += h6 * (5 * r9);
    d5 += h7 * (5 * r8);
    d5 += h8 * (5 * r7);
    d5 += h9 * (5 * r6);
    c += (d5 >>> 13); d5 &= 0x1fff;

    d6 = c;
    d6 += h0 * r6;
    d6 += h1 * r5;
    d6 += h2 * r4;
    d6 += h3 * r3;
    d6 += h4 * r2;
    c = (d6 >>> 13); d6 &= 0x1fff;
    d6 += h5 * r1;
    d6 += h6 * r0;
    d6 += h7 * (5 * r9);
    d6 += h8 * (5 * r8);
    d6 += h9 * (5 * r7);
    c += (d6 >>> 13); d6 &= 0x1fff;

    d7 = c;
    d7 += h0 * r7;
    d7 += h1 * r6;
    d7 += h2 * r5;
    d7 += h3 * r4;
    d7 += h4 * r3;
    c = (d7 >>> 13); d7 &= 0x1fff;
    d7 += h5 * r2;
    d7 += h6 * r1;
    d7 += h7 * r0;
    d7 += h8 * (5 * r9);
    d7 += h9 * (5 * r8);
    c += (d7 >>> 13); d7 &= 0x1fff;

    d8 = c;
    d8 += h0 * r8;
    d8 += h1 * r7;
    d8 += h2 * r6;
    d8 += h3 * r5;
    d8 += h4 * r4;
    c = (d8 >>> 13); d8 &= 0x1fff;
    d8 += h5 * r3;
    d8 += h6 * r2;
    d8 += h7 * r1;
    d8 += h8 * r0;
    d8 += h9 * (5 * r9);
    c += (d8 >>> 13); d8 &= 0x1fff;

    d9 = c;
    d9 += h0 * r9;
    d9 += h1 * r8;
    d9 += h2 * r7;
    d9 += h3 * r6;
    d9 += h4 * r5;
    c = (d9 >>> 13); d9 &= 0x1fff;
    d9 += h5 * r4;
    d9 += h6 * r3;
    d9 += h7 * r2;
    d9 += h8 * r1;
    d9 += h9 * r0;
    c += (d9 >>> 13); d9 &= 0x1fff;

    c = (((c << 2) + c)) | 0;
    c = (c + d0) | 0;
    d0 = c & 0x1fff;
    c = (c >>> 13);
    d1 += c;

    h0 = d0;
    h1 = d1;
    h2 = d2;
    h3 = d3;
    h4 = d4;
    h5 = d5;
    h6 = d6;
    h7 = d7;
    h8 = d8;
    h9 = d9;

    mpos += 16;
    bytes -= 16;
  }
  this.h[0] = h0;
  this.h[1] = h1;
  this.h[2] = h2;
  this.h[3] = h3;
  this.h[4] = h4;
  this.h[5] = h5;
  this.h[6] = h6;
  this.h[7] = h7;
  this.h[8] = h8;
  this.h[9] = h9;
};

poly1305.prototype.finish = function(mac, macpos) {
  var g = new Uint16Array(10);
  var c, mask, f, i;

  if (this.leftover) {
    i = this.leftover;
    this.buffer[i++] = 1;
    for (; i < 16; i++) this.buffer[i] = 0;
    this.fin = 1;
    this.blocks(this.buffer, 0, 16);
  }

  c = this.h[1] >>> 13;
  this.h[1] &= 0x1fff;
  for (i = 2; i < 10; i++) {
    this.h[i] += c;
    c = this.h[i] >>> 13;
    this.h[i] &= 0x1fff;
  }
  this.h[0] += (c * 5);
  c = this.h[0] >>> 13;
  this.h[0] &= 0x1fff;
  this.h[1] += c;
  c = this.h[1] >>> 13;
  this.h[1] &= 0x1fff;
  this.h[2] += c;

  g[0] = this.h[0] + 5;
  c = g[0] >>> 13;
  g[0] &= 0x1fff;
  for (i = 1; i < 10; i++) {
    g[i] = this.h[i] + c;
    c = g[i] >>> 13;
    g[i] &= 0x1fff;
  }
  g[9] -= (1 << 13);

  mask = (c ^ 1) - 1;
  for (i = 0; i < 10; i++) g[i] &= mask;
  mask = ~mask;
  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

  f = this.h[0] + this.pad[0];
  this.h[0] = f & 0xffff;
  for (i = 1; i < 8; i++) {
    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
    this.h[i] = f & 0xffff;
  }

  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
};

poly1305.prototype.update = function(m, mpos, bytes) {
  var i, want;

  if (this.leftover) {
    want = (16 - this.leftover);
    if (want > bytes)
      want = bytes;
    for (i = 0; i < want; i++)
      this.buffer[this.leftover + i] = m[mpos+i];
    bytes -= want;
    mpos += want;
    this.leftover += want;
    if (this.leftover < 16)
      return;
    this.blocks(this.buffer, 0, 16);
    this.leftover = 0;
  }

  if (bytes >= 16) {
    want = bytes - (bytes % 16);
    this.blocks(m, mpos, want);
    mpos += want;
    bytes -= want;
  }

  if (bytes) {
    for (i = 0; i < bytes; i++)
      this.buffer[this.leftover + i] = m[mpos+i];
    this.leftover += bytes;
  }
};

module.exports = poly1305

},{}],57:[function(require,module,exports){
/* eslint-disable camelcase */

function sodium_malloc (n) {
  return new Uint8Array(n)
}

function sodium_free (n) {
  sodium_memzero(n)
  loadSink().port1.postMessage(n.buffer, [n.buffer])
}

function sodium_memzero (arr) {
  arr.fill(0)
}

var sink

function loadSink () {
  if (sink) return sink
  var MessageChannel = globalThis.MessageChannel
  if (MessageChannel == null) ({ MessageChannel } = require('worker' + '_threads'))
  sink = new MessageChannel()
  return sink
}

module.exports = {
  sodium_malloc,
  sodium_free,
  sodium_memzero
}

},{}],58:[function(require,module,exports){
var assert = require('nanoassert')

var randombytes = (function () {
  var QUOTA = 65536 // limit for QuotaExceededException
  var crypto = globalThis.crypto || globalThis.msCrypto

  function browserBytes (out, n) {
    for (let i = 0; i < n; i += QUOTA) {
      crypto.getRandomValues(new Uint8Array(out.buffer, i + out.byteOffset, Math.min(n - i, QUOTA)))
    }
  }

  function nodeBytes (out, n) {
    new Uint8Array(out.buffer, out.byteOffset, n).set(crypto.randomBytes(n))
  }

  function noImpl () {
    throw new Error('No secure random number generator available')
  }

  if (crypto && crypto.getRandomValues) return browserBytes

  if (require != null) {
    // Node.js. Bust Browserify
    crypto = require('cry' + 'pto')
    if (crypto && crypto.randomBytes) return nodeBytes
  }

  return noImpl
})()

// Make non enumerable as this is an internal function
Object.defineProperty(module.exports, 'randombytes', {
  value: randombytes
})

module.exports.randombytes_buf = function (out) {
  assert(out, 'out must be given')
  randombytes(out, out.byteLength)
}

},{"nanoassert":390}],59:[function(require,module,exports){
module.exports = require('./lib/transport/ws')

},{"./lib/transport/ws":34}],60:[function(require,module,exports){
const { Pull, Push, HEADERBYTES, KEYBYTES, ABYTES } = require('sodium-secretstream')
const sodium = require('sodium-universal')
const crypto = require('hypercore-crypto')
const { Duplex, Writable, getStreamError } = require('streamx')
const b4a = require('b4a')
const Timeout = require('timeout-refresh')
const unslab = require('unslab')
const Bridge = require('./lib/bridge')
const Handshake = require('./lib/handshake')

const IDHEADERBYTES = HEADERBYTES + 32
const [NS_INITIATOR, NS_RESPONDER, NS_SEND] = crypto.namespace('hyperswarm/secret-stream', 3)
const MAX_ATOMIC_WRITE = 256 * 256 * 256 - 1

module.exports = class NoiseSecretStream extends Duplex {
  constructor (isInitiator, rawStream, opts = {}) {
    super({ mapWritable: toBuffer })

    if (typeof isInitiator !== 'boolean') {
      throw new Error('isInitiator should be a boolean')
    }

    this.noiseStream = this
    this.isInitiator = isInitiator
    this.rawStream = null

    this.publicKey = opts.publicKey || null
    this.remotePublicKey = opts.remotePublicKey || null
    this.handshakeHash = null
    this.connected = false
    this.keepAlive = opts.keepAlive || 0
    this.timeout = 0
    this.enableSend = opts.enableSend !== false

    // pointer for upstream to set data here if they want
    this.userData = null

    let openedDone = null
    this.opened = new Promise((resolve) => { openedDone = resolve })

    this.rawBytesWritten = 0
    this.rawBytesRead = 0

    // metadata used by 'hyperdht'
    this.relay = null
    this.puncher = null

    // unwrapped raw stream
    this._rawStream = null

    // handshake state
    this._handshake = null
    this._handshakePattern = opts.pattern || null
    this._handshakeDone = null

    // message parsing state
    this._state = 0
    this._len = 0
    this._tmp = 1
    this._message = null

    this._openedDone = openedDone
    this._startDone = null
    this._drainDone = null
    this._outgoingPlain = null
    this._outgoingWrapped = null
    this._utp = null
    this._setup = true
    this._ended = 2
    this._encrypt = null
    this._decrypt = null
    this._timeoutTimer = null
    this._keepAliveTimer = null
    this._sendState = null

    if (opts.autoStart !== false) this.start(rawStream, opts)

    // wiggle it to trigger open immediately (TODO add streamx option for this)
    this.resume()
    this.pause()
  }

  static keyPair (seed) {
    return Handshake.keyPair(seed)
  }

  static id (handshakeHash, isInitiator, id) {
    return streamId(handshakeHash, isInitiator, id)
  }

  setTimeout (ms) {
    if (!ms) ms = 0

    this._clearTimeout()
    this.timeout = ms

    if (!ms || this.rawStream === null) return

    this._timeoutTimer = Timeout.once(ms, destroyTimeout, this)
    this._timeoutTimer.unref()
  }

  setKeepAlive (ms) {
    if (!ms) ms = 0

    this._clearKeepAlive()

    this.keepAlive = ms

    if (!ms || this.rawStream === null) return

    this._keepAliveTimer = Timeout.on(ms, sendKeepAlive, this)
    this._keepAliveTimer.unref()
  }

  sendKeepAlive () {
    const empty = this.alloc(0)
    this.write(empty)
  }

  start (rawStream, opts = {}) {
    if (rawStream) {
      this.rawStream = rawStream
      this._rawStream = rawStream
      if (typeof this.rawStream.setContentSize === 'function') {
        this._utp = rawStream
      }
    } else {
      this.rawStream = new Bridge(this)
      this._rawStream = this.rawStream.reverse
    }

    this.rawStream.on('error', this._onrawerror.bind(this))
    this.rawStream.on('close', this._onrawclose.bind(this))

    this._startHandshake(opts.handshake, opts.keyPair || null)
    this._continueOpen(null)

    if (this.destroying) return

    if (opts.data) this._onrawdata(opts.data)
    if (opts.ended) this._onrawend()

    if (this.keepAlive > 0 && this._keepAliveTimer === null) {
      this.setKeepAlive(this.keepAlive)
    }

    if (this.timeout > 0 && this._timeoutTimer === null) {
      this.setTimeout(this.timeout)
    }
  }

  async flush () {
    if ((await this.opened) === false) return false
    if ((await Writable.drained(this)) === false) return false
    if (this.destroying) return false

    if (this.rawStream !== null && this.rawStream.flush) {
      return await this.rawStream.flush()
    }

    return true
  }

  _continueOpen (err) {
    if (err) this.destroy(err)
    if (this._startDone === null) return
    const done = this._startDone
    this._startDone = null
    this._open(done)
  }

  _onkeypairpromise (p) {
    const self = this
    const cont = this._continueOpen.bind(this)

    p.then(onkeypair, cont)

    function onkeypair (kp) {
      self._onkeypair(kp)
      cont(null)
    }
  }

  _onkeypair (keyPair) {
    const pattern = this._handshakePattern || 'XX'
    const remotePublicKey = this.remotePublicKey

    this._handshake = new Handshake(this.isInitiator, keyPair, remotePublicKey, pattern)
    this.publicKey = this._handshake.keyPair.publicKey
  }

  _startHandshake (handshake, keyPair) {
    if (handshake) {
      const { tx, rx, hash, publicKey, remotePublicKey } = handshake
      this._setupSecretStream(tx, rx, hash, publicKey, remotePublicKey)
      return
    }

    if (!keyPair) keyPair = Handshake.keyPair()

    if (typeof keyPair.then === 'function') {
      this._onkeypairpromise(keyPair)
    } else {
      this._onkeypair(keyPair)
    }
  }

  _onrawerror (err) {
    this.destroy(err)
  }

  _onrawclose () {
    if (this._ended !== 0) this.destroy()
  }

  _onrawdata (data) {
    let offset = 0

    if (this._timeoutTimer !== null) {
      this._timeoutTimer.refresh()
    }

    do {
      switch (this._state) {
        case 0: {
          while (this._tmp !== 0x1000000 && offset < data.byteLength) {
            const v = data[offset++]
            this._len += this._tmp * v
            this._tmp *= 256
          }

          if (this._tmp === 0x1000000) {
            this._tmp = 0
            this._state = 1
            const unprocessed = data.byteLength - offset
            if (unprocessed < this._len && this._utp !== null) this._utp.setContentSize(this._len - unprocessed)
          }

          break
        }

        case 1: {
          const missing = this._len - this._tmp
          const end = missing + offset

          if (this._message === null && end <= data.byteLength) {
            this._message = data.subarray(offset, end)
            offset += missing
            this._incoming()
            break
          }

          const unprocessed = data.byteLength - offset

          if (this._message === null) {
            this._message = b4a.allocUnsafe(this._len)
          }

          b4a.copy(data, this._message, this._tmp, offset)
          this._tmp += unprocessed

          if (end <= data.byteLength) {
            offset += missing
            this._incoming()
          } else {
            offset += unprocessed
          }

          break
        }
      }
    } while (offset < data.byteLength && !this.destroying)
  }

  _onrawend () {
    this._ended--
    this.push(null)
  }

  _onrawdrain () {
    const drain = this._drainDone
    if (drain === null) return
    this._drainDone = null
    drain()
  }

  _read (cb) {
    this.rawStream.resume()
    cb(null)
  }

  _incoming () {
    const message = this._message

    this._state = 0
    this._len = 0
    this._tmp = 1
    this._message = null

    if (this._setup === true) {
      if (this._handshake) {
        this._onhandshakert(this._handshake.recv(message))
      } else {
        if (message.byteLength !== IDHEADERBYTES) {
          this.destroy(new Error('Invalid header message received'))
          return
        }

        const remoteId = message.subarray(0, 32)
        const expectedId = streamId(this.handshakeHash, !this.isInitiator)
        const header = message.subarray(32)

        if (!b4a.equals(expectedId, remoteId)) {
          this.destroy(new Error('Invalid header received'))
          return
        }

        this._decrypt.init(header)
        this._setup = false // setup is now done
      }
      return
    }

    if (message.byteLength < ABYTES) {
      this.destroy(new Error('Invalid message received'))
      return
    }

    this.rawBytesRead += message.byteLength

    const plain = message.subarray(1, message.byteLength - ABYTES + 1)

    try {
      this._decrypt.next(message, plain)
    } catch (err) {
      this.destroy(err)
      return
    }

    // If keep alive is selective, eat the empty buffers (ie assume the other side has it enabled also)
    if (plain.byteLength === 0 && this.keepAlive !== 0) return

    if (this.push(plain) === false) {
      this.rawStream.pause()
    }
  }

  _onhandshakert (h) {
    if (this._handshakeDone === null) return

    if (h !== null) {
      if (h.data) this._rawStream.write(h.data)
      if (!h.tx) return
    }

    const done = this._handshakeDone
    const publicKey = this._handshake.keyPair.publicKey

    this._handshakeDone = null
    this._handshake = null

    if (h === null) return done(new Error('Noise handshake failed'))

    this._setupSecretStream(h.tx, h.rx, h.hash, publicKey, h.remotePublicKey)
    this._resolveOpened(true)
    done(null)
  }

  _setupSecretStream (tx, rx, handshakeHash, publicKey, remotePublicKey) {
    const buf = b4a.allocUnsafeSlow(3 + IDHEADERBYTES)
    writeUint24le(IDHEADERBYTES, buf)

    this._encrypt = new Push(unslab(tx.subarray(0, KEYBYTES)), undefined, buf.subarray(3 + 32))
    this._decrypt = new Pull(unslab(rx.subarray(0, KEYBYTES)))

    this.publicKey = publicKey
    this.remotePublicKey = remotePublicKey
    this.handshakeHash = handshakeHash

    const id = buf.subarray(3, 3 + 32)
    streamId(handshakeHash, this.isInitiator, id)

    // initialize secretbox state for unordered messages
    this._setupSecretSend(handshakeHash)

    this.emit('handshake')
    // if rawStream is a bridge, also emit it there
    if (this.rawStream !== this._rawStream) this.rawStream.emit('handshake')

    if (this.destroying) return

    this._rawStream.write(buf)
  }

  _setupSecretSend (handshakeHash) {
    this._sendState = b4a.allocUnsafeSlow(32 + 32 + 8 + 8)
    const encrypt = this._sendState.subarray(0, 32) // secrets
    const decrypt = this._sendState.subarray(32, 64)
    const counter = this._sendState.subarray(64, 72) // nonce
    const initial = this._sendState.subarray(72)

    const inputs = this.isInitiator
      ? [[NS_INITIATOR, NS_SEND], [NS_RESPONDER, NS_SEND]]
      : [[NS_RESPONDER, NS_SEND], [NS_INITIATOR, NS_SEND]]

    sodium.crypto_generichash_batch(encrypt, inputs[0], handshakeHash)
    sodium.crypto_generichash_batch(decrypt, inputs[1], handshakeHash)

    sodium.randombytes_buf(initial)
    counter.set(initial)
  }

  _open (cb) {
    // no autostart or no handshake yet
    if (this._rawStream === null || (this._handshake === null && this._encrypt === null)) {
      this._startDone = cb
      return
    }

    this._rawStream.on('data', this._onrawdata.bind(this))
    this._rawStream.on('end', this._onrawend.bind(this))
    this._rawStream.on('drain', this._onrawdrain.bind(this))

    if (this.enableSend) this._rawStream.on('message', this._onmessage.bind(this))

    if (this._encrypt !== null) {
      this._resolveOpened(true)
      return cb(null)
    }

    this._handshakeDone = cb

    if (this.isInitiator) this._onhandshakert(this._handshake.send())
  }

  _predestroy () {
    if (this.rawStream) {
      const error = getStreamError(this)
      this.rawStream.destroy(error)
    }

    if (this._startDone !== null) {
      const done = this._startDone
      this._startDone = null
      done(new Error('Stream destroyed'))
    }

    if (this._handshakeDone !== null) {
      const done = this._handshakeDone
      this._handshakeDone = null
      done(new Error('Stream destroyed'))
    }

    if (this._drainDone !== null) {
      const done = this._drainDone
      this._drainDone = null
      done(new Error('Stream destroyed'))
    }
  }

  _write (data, cb) {
    let wrapped = this._outgoingWrapped

    if (data !== this._outgoingPlain) {
      wrapped = b4a.allocUnsafe(data.byteLength + 3 + ABYTES)
      wrapped.set(data, 4)
    } else {
      this._outgoingWrapped = this._outgoingPlain = null
    }

    if (wrapped.byteLength - 3 > MAX_ATOMIC_WRITE) {
      return cb(new Error('Message is too large for an atomic write. Max size is ' + MAX_ATOMIC_WRITE + ' bytes.'))
    }
    this.rawBytesWritten += wrapped.byteLength

    writeUint24le(wrapped.byteLength - 3, wrapped)
    // offset 4 so we can do it in-place
    this._encrypt.next(wrapped.subarray(4, 4 + data.byteLength), wrapped.subarray(3))

    if (this._keepAliveTimer !== null) this._keepAliveTimer.refresh()

    if (this._rawStream.write(wrapped) === false) {
      this._drainDone = cb
    } else {
      cb(null)
    }
  }

  _final (cb) {
    this._clearKeepAlive()
    this._ended--
    this._rawStream.end()
    cb(null)
  }

  _resolveOpened (val) {
    if (this._openedDone === null) return
    const opened = this._openedDone
    this._openedDone = null
    opened(val)
    if (!val) return
    this.connected = true
    this.emit('connect')
  }

  _clearTimeout () {
    if (this._timeoutTimer === null) return
    this._timeoutTimer.destroy()
    this._timeoutTimer = null
    this.timeout = 0
  }

  _clearKeepAlive () {
    if (this._keepAliveTimer === null) return
    this._keepAliveTimer.destroy()
    this._keepAliveTimer = null
    this.keepAlive = 0
  }

  _destroy (cb) {
    this._clearKeepAlive()
    this._clearTimeout()
    this._resolveOpened(false)
    cb(null)
  }

  _boxMessage (buffer) {
    const MB = sodium.crypto_secretbox_MACBYTES // 16
    const NB = sodium.crypto_secretbox_NONCEBYTES // 24

    const counter = this._sendState.subarray(64, 72)
    sodium.sodium_increment(counter)
    if (b4a.equals(counter, this._sendState.subarray(72))) {
      this.destroy(new Error('udp send nonce exchausted'))
      return
    }

    const secret = this._sendState.subarray(0, 32)
    const envelope = b4a.allocUnsafe(8 + MB + buffer.byteLength)
    const nonce = envelope.subarray(0, NB)
    const ciphertext = envelope.subarray(8)

    b4a.fill(nonce, 0) // pad suffix
    nonce.set(counter)

    sodium.crypto_secretbox_easy(ciphertext, buffer, nonce, secret)
    return envelope
  }

  send (buffer) {
    if (!this._sendState) return
    if (!this.rawStream?.send) return // udx-stream expected

    const message = this._boxMessage(buffer)
    return this.rawStream.send(message)
  }

  trySend (buffer) {
    if (!this._sendState) return
    if (!this.rawStream?.trySend) return // udx-stream expected

    const message = this._boxMessage(buffer)
    this.rawStream.trySend(message)
  }

  _onmessage (buffer) {
    if (!this._sendState) return // messages before handshake are dropped

    const MB = sodium.crypto_secretbox_MACBYTES // 16
    const NB = sodium.crypto_secretbox_NONCEBYTES // 24

    if (buffer.byteLength < NB) return // Invalid message

    const nonce = b4a.allocUnsafe(NB)
    b4a.fill(nonce, 0)
    nonce.set(buffer.subarray(0, 8))

    const secret = this._sendState.subarray(32, 64)
    const ciphertext = buffer.subarray(8)
    const plain = buffer.subarray(8, buffer.byteLength - MB)

    if (ciphertext.byteLength < MB) return // invalid message

    const success = sodium.crypto_secretbox_open_easy(plain, ciphertext, nonce, secret)

    if (success) this.emit('message', plain)
  }

  alloc (len) {
    const buf = b4a.allocUnsafe(len + 3 + ABYTES)
    this._outgoingWrapped = buf
    this._outgoingPlain = buf.subarray(4, buf.byteLength - ABYTES + 1)
    return this._outgoingPlain
  }

  toJSON () {
    return {
      isInitiator: this.isInitiator,
      publicKey: this.publicKey && b4a.toString(this.publicKey, 'hex'),
      remotePublicKey: this.remotePublicKey && b4a.toString(this.remotePublicKey, 'hex'),
      connected: this.connected,
      destroying: this.destroying,
      destroyed: this.destroyed,
      rawStream: this.rawStream && this.rawStream.toJSON ? this.rawStream.toJSON() : null
    }
  }
}

function writeUint24le (n, buf) {
  buf[0] = (n & 255)
  buf[1] = (n >>> 8) & 255
  buf[2] = (n >>> 16) & 255
}

function streamId (handshakeHash, isInitiator, out = b4a.allocUnsafe(32)) {
  sodium.crypto_generichash(out, isInitiator ? NS_INITIATOR : NS_RESPONDER, handshakeHash)
  return out
}

function toBuffer (data) {
  return typeof data === 'string' ? b4a.from(data) : data
}

function destroyTimeout () {
  this.destroy(new Error('Stream timed out'))
}

function sendKeepAlive () {
  const empty = this.alloc(0)
  this.write(empty)
}

},{"./lib/bridge":61,"./lib/handshake":62,"b4a":102,"hypercore-crypto":305,"sodium-secretstream":537,"sodium-universal":556,"streamx":578,"timeout-refresh":583,"unslab":590}],61:[function(require,module,exports){
const { Duplex, Writable } = require('streamx')

class ReversePassThrough extends Duplex {
  constructor (s) {
    super()
    this._stream = s
    this._ondrain = null
  }

  _write (data, cb) {
    if (this._stream.push(data) === false) {
      this._stream._ondrain = cb
    } else {
      cb(null)
    }
  }

  _final (cb) {
    this._stream.push(null)
    cb(null)
  }

  _read (cb) {
    const ondrain = this._ondrain
    this._ondrain = null
    if (ondrain) ondrain()
    cb(null)
  }
}

module.exports = class Bridge extends Duplex {
  constructor (noiseStream) {
    super()

    this.noiseStream = noiseStream

    this._ondrain = null
    this.reverse = new ReversePassThrough(this)
  }

  get publicKey () {
    return this.noiseStream.publicKey
  }

  get remotePublicKey () {
    return this.noiseStream.remotePublicKey
  }

  get handshakeHash () {
    return this.noiseStream.handshakeHash
  }

  flush () {
    return Writable.drained(this)
  }

  _read (cb) {
    const ondrain = this._ondrain
    this._ondrain = null
    if (ondrain) ondrain()
    cb(null)
  }

  _write (data, cb) {
    if (this.reverse.push(data) === false) {
      this.reverse._ondrain = cb
    } else {
      cb(null)
    }
  }

  _final (cb) {
    this.reverse.push(null)
    cb(null)
  }
}

},{"streamx":578}],62:[function(require,module,exports){
const sodium = require('sodium-universal')
const curve = require('noise-curve-ed')
const Noise = require('noise-handshake')
const b4a = require('b4a')

const EMPTY = b4a.alloc(0)

module.exports = class Handshake {
  constructor (isInitiator, keyPair, remotePublicKey, pattern) {
    this.isInitiator = isInitiator
    this.keyPair = keyPair
    this.noise = new Noise(pattern, isInitiator, keyPair, { curve })
    this.noise.initialise(EMPTY, remotePublicKey)
    this.destroyed = false
  }

  static keyPair (seed) {
    const publicKey = b4a.alloc(32)
    const secretKey = b4a.alloc(64)
    if (seed) sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed)
    else sodium.crypto_sign_keypair(publicKey, secretKey)
    return { publicKey, secretKey }
  }

  recv (data) {
    try {
      this.noise.recv(data)
      if (this.noise.complete) return this._return(null)
      return this.send()
    } catch {
      this.destroy()
      return null
    }
  }

  // note that the data returned here is framed so we don't have to do an extra copy
  // when sending it...
  send () {
    try {
      const data = this.noise.send()
      const wrap = b4a.allocUnsafe(data.byteLength + 3)

      writeUint24le(data.byteLength, wrap)
      wrap.set(data, 3)

      return this._return(wrap)
    } catch {
      this.destroy()
      return null
    }
  }

  destroy () {
    if (this.destroyed) return
    this.destroyed = true
  }

  _return (data) {
    const tx = this.noise.complete ? b4a.toBuffer(this.noise.tx) : null
    const rx = this.noise.complete ? b4a.toBuffer(this.noise.rx) : null
    const hash = this.noise.complete ? b4a.toBuffer(this.noise.hash) : null
    const remotePublicKey = this.noise.complete ? b4a.toBuffer(this.noise.rs) : null

    return {
      data,
      remotePublicKey,
      hash,
      tx,
      rx
    }
  }
}

function writeUint24le (n, buf) {
  buf[0] = (n & 255)
  buf[1] = (n >>> 8) & 255
  buf[2] = (n >>> 16) & 255
}

},{"b4a":102,"noise-curve-ed":392,"noise-handshake":67,"sodium-universal":556}],63:[function(require,module,exports){
const sodium = require('sodium-universal')
const b4a = require('b4a')

module.exports = class CipherState {
  constructor (key) {
    this.key = key || null
    this.nonce = 0
    this.CIPHER_ALG = 'ChaChaPoly'
  }

  initialiseKey (key) {
    this.key = key
    this.nonce = 0
  }

  setNonce (nonce) {
    this.nonce = nonce
  }

  encrypt (plaintext, ad) {
    if (!this.hasKey) return plaintext
    if (!ad) ad = b4a.alloc(0)

    const ciphertext = encryptWithAD(this.key, this.nonce, ad, plaintext)
    if (ciphertext.length > 65535) throw new Error(`ciphertext length of ${ciphertext.length} exceeds maximum Noise message length of 65535`)
    this.nonce++

    return ciphertext
  }

  decrypt (ciphertext, ad) {
    if (!this.hasKey) return ciphertext
    if (!ad) ad = b4a.alloc(0)
    if (ciphertext.length > 65535) throw new Error(`ciphertext length of ${ciphertext.length} exceeds maximum Noise message length of 65535`)

    const plaintext = decryptWithAD(this.key, this.nonce, ad, ciphertext)
    this.nonce++

    return plaintext
  }

  get hasKey () {
    return this.key !== null
  }

  _clear () {
    sodium.sodium_memzero(this.key)
    this.key = null
    this.nonce = null
  }

  static get MACBYTES () {
    return 16
  }

  static get NONCEBYTES () {
    return 8
  }

  static get KEYBYTES () {
    return 32
  }
}

function encryptWithAD (key, counter, additionalData, plaintext) {
  // for our purposes, additionalData will always be a pubkey so we encode from hex
  if (!b4a.isBuffer(additionalData)) additionalData = b4a.from(additionalData, 'hex')
  if (!b4a.isBuffer(plaintext)) plaintext = b4a.from(plaintext, 'hex')

  const nonce = b4a.alloc(sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES)
  const view = new DataView(nonce.buffer, nonce.byteOffset, nonce.byteLength)
  view.setUint32(4, counter, true)

  const ciphertext = b4a.alloc(plaintext.byteLength + sodium.crypto_aead_chacha20poly1305_ietf_ABYTES)

  sodium.crypto_aead_chacha20poly1305_ietf_encrypt(ciphertext, plaintext, additionalData, null, nonce, key)
  return ciphertext
}

function decryptWithAD (key, counter, additionalData, ciphertext) {
  // for our purposes, additionalData will always be a pubkey so we encode from hex
  if (!b4a.isBuffer(additionalData)) additionalData = b4a.from(additionalData, 'hex')
  if (!b4a.isBuffer(ciphertext)) ciphertext = b4a.from(ciphertext, 'hex')

  const nonce = b4a.alloc(sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES)
  const view = new DataView(nonce.buffer, nonce.byteOffset, nonce.byteLength)
  view.setUint32(4, counter, true)

  const plaintext = b4a.alloc(ciphertext.byteLength - sodium.crypto_aead_chacha20poly1305_ietf_ABYTES)

  sodium.crypto_aead_chacha20poly1305_ietf_decrypt(plaintext, null, ciphertext, additionalData, nonce, key)
  return plaintext
}

},{"b4a":102,"sodium-universal":556}],64:[function(require,module,exports){
/* eslint-disable camelcase */
const {
  crypto_kx_SEEDBYTES,
  crypto_kx_keypair,
  crypto_kx_seed_keypair,
  crypto_scalarmult_BYTES,
  crypto_scalarmult_SCALARBYTES,
  crypto_scalarmult,
  crypto_scalarmult_base
} = require('sodium-universal')

const assert = require('nanoassert')
const b4a = require('b4a')

const DHLEN = crypto_scalarmult_BYTES
const PKLEN = crypto_scalarmult_BYTES
const SKLEN = crypto_scalarmult_SCALARBYTES
const SEEDLEN = crypto_kx_SEEDBYTES
const ALG = '25519'

module.exports = {
  DHLEN,
  PKLEN,
  SKLEN,
  SEEDLEN,
  ALG,
  generateKeyPair,
  generateSeedKeyPair,
  dh
}

function generateKeyPair (privKey) {
  const keyPair = {}

  keyPair.secretKey = privKey || b4a.alloc(SKLEN)
  keyPair.publicKey = b4a.alloc(PKLEN)

  if (privKey) {
    crypto_scalarmult_base(keyPair.publicKey, keyPair.secretKey)
  } else {
    crypto_kx_keypair(keyPair.publicKey, keyPair.secretKey)
  }

  return keyPair
}

function generateSeedKeyPair (seed) {
  assert(seed.byteLength === SKLEN)

  const keyPair = {}
  keyPair.secretKey = b4a.alloc(SKLEN)
  keyPair.publicKey = b4a.alloc(PKLEN)

  crypto_kx_seed_keypair(keyPair.publicKey, keyPair.secretKey, seed)
  return keyPair
}

function dh (publicKey, { secretKey }) {
  assert(secretKey.byteLength === SKLEN)
  assert(publicKey.byteLength === PKLEN)

  const output = b4a.alloc(DHLEN)

  crypto_scalarmult(
    output,
    secretKey,
    publicKey
  )

  return output
}

},{"b4a":102,"nanoassert":390,"sodium-universal":556}],65:[function(require,module,exports){
const hmacBlake2b = require('./hmac')
const b4a = require('b4a')

const HASHLEN = 64

module.exports = {
  hkdf,
  HASHLEN
}

// HMAC-based Extract-and-Expand KDF
// https://www.ietf.org/rfc/rfc5869.txt

function hkdf (salt, inputKeyMaterial, info = '', length = 2 * HASHLEN) {
  const pseudoRandomKey = hkdfExtract(salt, inputKeyMaterial)
  return hkdfExpand(pseudoRandomKey, info, length)
}

function hkdfExtract (salt, inputKeyMaterial) {
  const hmac = b4a.alloc(HASHLEN)
  return hmacDigest(hmac, salt, inputKeyMaterial)
}

function hkdfExpand (key, info, length) {
  // Put in dedicated slab to avoid keeping shared slab from being gc'ed
  const buffer = b4a.allocUnsafeSlow(length)

  const infoBuf = b4a.from(info)
  let prev = infoBuf

  const result = []
  for (let i = 0; i < length; i += HASHLEN) {
    const pos = b4a.from([(i / HASHLEN) + 1])

    const out = buffer.subarray(i, i + HASHLEN)
    result.push(out)

    prev = hmacDigest(out, key, [prev, infoBuf, pos])
  }

  return result
}

function hmacDigest (out, key, input) {
  hmacBlake2b(out, input, key)
  return out
}

},{"./hmac":66,"b4a":102}],66:[function(require,module,exports){
/* eslint-disable camelcase */
const b4a = require('b4a')
const { sodium_memzero, crypto_generichash, crypto_generichash_batch } = require('sodium-universal')

const HASHLEN = 64
const BLOCKLEN = 128
const scratch = b4a.alloc(BLOCKLEN * 3)
const HMACKey = scratch.subarray(BLOCKLEN * 0, BLOCKLEN * 1)
const OuterKeyPad = scratch.subarray(BLOCKLEN * 1, BLOCKLEN * 2)
const InnerKeyPad = scratch.subarray(BLOCKLEN * 2, BLOCKLEN * 3)

// Post-fill is done in the cases where someone caught an exception that
// happened before we were able to clear data at the end

module.exports = function hmac (out, batch, key) {
  if (key.byteLength > BLOCKLEN) {
    crypto_generichash(HMACKey.subarray(0, HASHLEN), key)
    sodium_memzero(HMACKey.subarray(HASHLEN))
  } else {
    // Covers key <= BLOCKLEN
    HMACKey.set(key)
    sodium_memzero(HMACKey.subarray(key.byteLength))
  }

  for (let i = 0; i < HMACKey.byteLength; i++) {
    OuterKeyPad[i] = 0x5c ^ HMACKey[i]
    InnerKeyPad[i] = 0x36 ^ HMACKey[i]
  }
  sodium_memzero(HMACKey)

  crypto_generichash_batch(out, [InnerKeyPad].concat(batch))
  sodium_memzero(InnerKeyPad)
  crypto_generichash_batch(out, [OuterKeyPad, out])
  sodium_memzero(OuterKeyPad)
}

module.exports.BYTES = HASHLEN
module.exports.KEYBYTES = BLOCKLEN

},{"b4a":102,"sodium-universal":556}],67:[function(require,module,exports){
const assert = require('nanoassert')
const b4a = require('b4a')

const SymmetricState = require('./symmetric-state')
const { HASHLEN } = require('./hkdf')

const PRESHARE_IS = Symbol('initiator static key preshared')
const PRESHARE_RS = Symbol('responder static key preshared')

const TOK_PSK = Symbol('psk')

const TOK_S = Symbol('s')
const TOK_E = Symbol('e')

const TOK_ES = Symbol('es')
const TOK_SE = Symbol('se')
const TOK_EE = Symbol('ee')
const TOK_SS = Symbol('ss')

const HANDSHAKES = Object.freeze({
  NN: [
    [TOK_E],
    [TOK_E, TOK_EE]
  ],
  NNpsk0: [
    [TOK_PSK, TOK_E],
    [TOK_E, TOK_EE]
  ],
  XX: [
    [TOK_E],
    [TOK_E, TOK_EE, TOK_S, TOK_ES],
    [TOK_S, TOK_SE]
  ],
  XXpsk0: [
    [TOK_PSK, TOK_E],
    [TOK_E, TOK_EE, TOK_S, TOK_ES],
    [TOK_S, TOK_SE]
  ],
  IK: [
    PRESHARE_RS,
    [TOK_E, TOK_ES, TOK_S, TOK_SS],
    [TOK_E, TOK_EE, TOK_SE]
  ]
})

class Writer {
  constructor () {
    this.size = 0
    this.buffers = []
  }

  push (b) {
    this.size += b.byteLength
    this.buffers.push(b)
  }

  end () {
    const all = b4a.alloc(this.size)
    let offset = 0
    for (const b of this.buffers) {
      all.set(b, offset)
      offset += b.byteLength
    }
    return all
  }
}

class Reader {
  constructor (buf) {
    this.offset = 0
    this.buffer = buf
  }

  shift (n) {
    const start = this.offset
    const end = this.offset += n
    if (end > this.buffer.byteLength) throw new Error('Insufficient bytes')
    return this.buffer.subarray(start, end)
  }

  end () {
    return this.shift(this.buffer.byteLength - this.offset)
  }
}

module.exports = class NoiseState extends SymmetricState {
  constructor (pattern, initiator, staticKeypair, opts = {}) {
    super(opts)

    this.s = staticKeypair || this.curve.generateKeyPair()
    this.e = null

    this.psk = null
    if (opts && opts.psk) this.psk = opts.psk

    this.re = null
    this.rs = null

    this.pattern = pattern
    this.handshake = HANDSHAKES[this.pattern].slice()

    this.isPskHandshake = !!this.psk && hasPskToken(this.handshake)

    this.protocol = b4a.from([
      'Noise',
      this.pattern,
      this.DH_ALG,
      this.CIPHER_ALG,
      'BLAKE2b'
    ].join('_'))

    this.initiator = initiator
    this.complete = false

    this.rx = null
    this.tx = null
    this.hash = null
  }

  initialise (prologue, remoteStatic) {
    if (this.protocol.byteLength <= HASHLEN) this.digest.set(this.protocol)
    else this.mixHash(this.protocol)

    this.chainingKey = b4a.from(this.digest)

    this.mixHash(prologue)

    while (!Array.isArray(this.handshake[0])) {
      const message = this.handshake.shift()

      // handshake steps should be as arrays, only
      // preshare tokens are provided otherwise
      assert(message === PRESHARE_RS || message === PRESHARE_IS,
        'Unexpected pattern')

      const takeRemoteKey = this.initiator
        ? message === PRESHARE_RS
        : message === PRESHARE_IS

      if (takeRemoteKey) this.rs = remoteStatic

      const key = takeRemoteKey ? this.rs : this.s.publicKey
      assert(key != null, 'Remote pubkey required')

      this.mixHash(key)
    }
  }

  final () {
    const [k1, k2] = this.split()

    this.tx = this.initiator ? k1 : k2
    this.rx = this.initiator ? k2 : k1

    this.complete = true
    this.hash = this.getHandshakeHash()

    this._clear()
  }

  recv (buf) {
    const r = new Reader(buf)

    for (const pattern of this.handshake.shift()) {
      switch (pattern) {
        case TOK_PSK :
          this.mixKeyAndHash(this.psk)
          break

        case TOK_E :
          this.re = r.shift(this.curve.PKLEN)
          this.mixHash(this.re)
          if (this.isPskHandshake) this.mixKeyNormal(this.re)
          break

        case TOK_S : {
          const klen = this.hasKey ? this.curve.PKLEN + 16 : this.curve.PKLEN
          this.rs = this.decryptAndHash(r.shift(klen))
          break
        }

        case TOK_EE :
        case TOK_ES :
        case TOK_SE :
        case TOK_SS : {
          const useStatic = keyPattern(pattern, this.initiator)

          const localKey = useStatic.local ? this.s : this.e
          const remoteKey = useStatic.remote ? this.rs : this.re

          this.mixKey(remoteKey, localKey)
          break
        }

        default :
          throw new Error('Unexpected message')
      }
    }

    const payload = this.decryptAndHash(r.end())

    if (!this.handshake.length) this.final()
    return payload
  }

  send (payload = b4a.alloc(0)) {
    const w = new Writer()

    for (const pattern of this.handshake.shift()) {
      switch (pattern) {
        case TOK_PSK :
          this.mixKeyAndHash(this.psk)
          break

        case TOK_E :
          if (this.e === null) this.e = this.curve.generateKeyPair()
          this.mixHash(this.e.publicKey)
          if (this.isPskHandshake) this.mixKeyNormal(this.e.publicKey)
          w.push(this.e.publicKey)
          break

        case TOK_S :
          w.push(this.encryptAndHash(this.s.publicKey))
          break

        case TOK_ES :
        case TOK_SE :
        case TOK_EE :
        case TOK_SS : {
          const useStatic = keyPattern(pattern, this.initiator)

          const localKey = useStatic.local ? this.s : this.e
          const remoteKey = useStatic.remote ? this.rs : this.re

          this.mixKey(remoteKey, localKey)
          break
        }

        default :
          throw new Error('Unexpected message')
      }
    }

    w.push(this.encryptAndHash(payload))
    const response = w.end()

    if (!this.handshake.length) this.final()
    return response
  }

  _clear () {
    super._clear()

    this.e.secretKey.fill(0)
    this.e.publicKey.fill(0)

    this.re.fill(0)

    this.e = null
    this.re = null
  }
}

function keyPattern (pattern, initiator) {
  const ret = {
    local: false,
    remote: false
  }

  switch (pattern) {
    case TOK_EE:
      return ret

    case TOK_ES:
      ret.local ^= !initiator
      ret.remote ^= initiator
      return ret

    case TOK_SE:
      ret.local ^= initiator
      ret.remote ^= !initiator
      return ret

    case TOK_SS:
      ret.local ^= 1
      ret.remote ^= 1
      return ret
  }
}

function hasPskToken (handshake) {
  return handshake.some(x => {
    return Array.isArray(x) && x.indexOf(TOK_PSK) !== -1
  })
}

},{"./hkdf":65,"./symmetric-state":68,"b4a":102,"nanoassert":390}],68:[function(require,module,exports){
const sodium = require('sodium-universal')
const assert = require('nanoassert')
const b4a = require('b4a')
const CipherState = require('./cipher')
const curve = require('./dh')
const { HASHLEN, hkdf } = require('./hkdf')

module.exports = class SymmetricState extends CipherState {
  constructor (opts = {}) {
    super()

    this.curve = opts.curve || curve
    this.digest = b4a.alloc(HASHLEN)
    this.chainingKey = null
    this.offset = 0

    this.DH_ALG = this.curve.ALG
  }

  mixHash (data) {
    accumulateDigest(this.digest, data)
  }

  mixKeyAndHash (key) {
    const [ck, tempH, tempK] = hkdf(this.chainingKey, key, '', 3 * HASHLEN)
    this.chainingKey = ck
    this.mixHash(tempH)
    this.initialiseKey(tempK.subarray(0, 32))
  }

  mixKeyNormal (key) {
    const [ck, tempK] = hkdf(this.chainingKey, key)
    this.chainingKey = ck
    this.initialiseKey(tempK.subarray(0, 32))
  }

  mixKey (remoteKey, localKey) {
    const dh = this.curve.dh(remoteKey, localKey)
    const hkdfResult = hkdf(this.chainingKey, dh)
    this.chainingKey = hkdfResult[0]
    this.initialiseKey(hkdfResult[1].subarray(0, 32))
  }

  encryptAndHash (plaintext) {
    const ciphertext = this.encrypt(plaintext, this.digest)
    accumulateDigest(this.digest, ciphertext)
    return ciphertext
  }

  decryptAndHash (ciphertext) {
    const plaintext = this.decrypt(ciphertext, this.digest)
    accumulateDigest(this.digest, ciphertext)
    return plaintext
  }

  getHandshakeHash (out) {
    if (!out) return this.getHandshakeHash(b4a.alloc(HASHLEN))
    assert(out.byteLength === HASHLEN, `output must be ${HASHLEN} bytes`)

    out.set(this.digest)
    return out
  }

  split () {
    const res = hkdf(this.chainingKey, b4a.alloc(0))
    return res.map(k => k.subarray(0, 32))
  }

  _clear () {
    super._clear()

    sodium.sodium_memzero(this.digest)
    sodium.sodium_memzero(this.chainingKey)

    this.digest = null
    this.chainingKey = null
    this.offset = null

    this.curve = null
  }

  static get alg () {
    return CipherState.alg + '_BLAKE2b'
  }
}

function accumulateDigest (digest, input) {
  const toHash = b4a.concat([digest, input])
  sodium.crypto_generichash(digest, toHash)
}

},{"./cipher":63,"./dh":64,"./hkdf":65,"b4a":102,"nanoassert":390,"sodium-universal":556}],69:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":70,"./asn1/base":72,"./asn1/constants":76,"./asn1/decoders":78,"./asn1/encoders":81,"bn.js":83}],70:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":69,"inherits":369,"vm":596}],71:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":72,"buffer":164,"inherits":369}],72:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":71,"./node":73,"./reporter":74}],73:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var DecoderBuffer = require('../base').DecoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

},{"../base":72,"minimalistic-assert":385}],74:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":369}],75:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":76}],76:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":75}],77:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":69,"inherits":369}],78:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":77,"./pem":79}],79:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":77,"buffer":164,"inherits":369}],80:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":69,"buffer":164,"inherits":369}],81:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":80,"./pem":82}],82:[function(require,module,exports){
var inherits = require('inherits');

var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":80,"inherits":369}],83:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    this.length = num === 0 ? 1 : this.length;

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":132}],84:[function(require,module,exports){
const b4a = require('b4a')
const ReadyResource = require('ready-resource')
const debounceify = require('debounceify')
const c = require('compact-encoding')
const safetyCatch = require('safety-catch')
const hypercoreId = require('hypercore-id-encoding')
const assert = require('nanoassert')
const SignalPromise = require('signal-promise')
const CoreCoupler = require('core-coupler')
const mutexify = require('mutexify/promise')

const Linearizer = require('./lib/linearizer')
const AutoStore = require('./lib/store')
const SystemView = require('./lib/system')
const messages = require('./lib/messages')
const Timer = require('./lib/timer')
const Writer = require('./lib/writer')
const ActiveWriters = require('./lib/active-writers')
const CorePool = require('./lib/core-pool')
const AutoWakeup = require('./lib/wakeup')

const WakeupExtension = require('./lib/extension')

const inspect = Symbol.for('nodejs.util.inspect.custom')
const INTERRUPT = new Error('Apply interrupted')

const AUTOBASE_VERSION = 1

// default is to automatically ack
const DEFAULT_ACK_INTERVAL = 10_000
const DEFAULT_ACK_THRESHOLD = 4

const FF_THRESHOLD = 16
const DEFAULT_FF_TIMEOUT = 10_000

const REMOTE_ADD_BATCH = 64

module.exports = class Autobase extends ReadyResource {
  constructor (store, bootstrap, handlers = {}) {
    if (Array.isArray(bootstrap)) bootstrap = bootstrap[0] // TODO: just a quick compat, lets remove soon

    if (bootstrap && typeof bootstrap !== 'string' && !b4a.isBuffer(bootstrap)) {
      handlers = bootstrap
      bootstrap = null
    }

    super()

    this.bootstrap = bootstrap ? toKey(bootstrap) : null
    this.keyPair = handlers.keyPair || null
    this.valueEncoding = c.from(handlers.valueEncoding || 'binary')
    this.store = store
    this.globalCache = store.globalCache || null
    this.encrypted = handlers.encrypted || !!handlers.encryptionKey
    this.encrypt = !!handlers.encrypt
    this.encryptionKey = handlers.encryptionKey || null

    this._tryLoadingLocal = true
    this._primaryBootstrap = null
    if (this.bootstrap) {
      this._primaryBootstrap = this.store.get({ key: this.bootstrap, compat: false, active: false, encryptionKey: this.encryptionKey })
      this.wakeupExtension = new WakeupExtension(this, this._primaryBootstrap, true)
      this.store = this.store.namespace(this._primaryBootstrap, { detach: false })
    }

    this.local = null
    this.localWriter = null
    this.isIndexer = false

    this.activeWriters = new ActiveWriters()
    this.corePool = new CorePool()
    this.linearizer = null
    this.updating = false

    this.fastForwardEnabled = handlers.fastForward !== false
    this.fastForwarding = 0
    this.fastForwardTo = null

    if (this.fastForwardEnabled && isObject(handlers.fastForward)) {
      this.fastForwardTo = handlers.fastForward
    }

    this._bootstrapWriters = [] // might contain dups, but thats ok
    this._bootstrapWritersChanged = false

    this._checkWriters = []
    this._appending = null
    this._wakeup = new AutoWakeup(this)
    this._wakeupHints = new Map()
    this._wakeupPeerBound = this._wakeupPeer.bind(this)
    this._coupler = null

    this._queueViewReset = false
    this._lock = mutexify()

    this._applying = null
    this._updatingCores = false
    this._localDigest = null
    this._needsWakeup = true
    this._needsWakeupHeads = true
    this._addCheckpoints = false
    this._firstCheckpoint = true
    this._hasPendingCheckpoint = false
    this._completeRemovalAt = null
    this._systemPointer = 0
    this._maybeStaticFastForward = false // writer bumps this

    this._updates = []
    this._handlers = handlers || {}
    this._warn = emitWarning.bind(this)

    this._draining = false
    this._advancing = null
    this._advanced = null
    this._interrupting = false

    this.reindexing = false
    this.paused = false

    this._bump = debounceify(() => {
      this._advancing = this._advance()
      return this._advancing
    })

    this._onremotewriterchangeBound = this._onremotewriterchange.bind(this)

    this.maxSupportedVersion = AUTOBASE_VERSION // working version

    this._presystem = null
    this._prebump = null

    this._hasApply = !!this._handlers.apply
    this._hasOpen = !!this._handlers.open
    this._hasClose = !!this._handlers.close

    this.onindex = handlers.onindex || noop

    this._viewStore = new AutoStore(this)

    this.view = null
    this.system = null
    this.version = -1
    this.interrupted = null

    const {
      ackInterval = DEFAULT_ACK_INTERVAL,
      ackThreshold = DEFAULT_ACK_THRESHOLD
    } = handlers

    this._ackInterval = ackInterval
    this._ackThreshold = ackThreshold
    this._ackTickThreshold = ackThreshold
    this._ackTick = 0

    this._ackTimer = null
    this._acking = false

    this._initialHeads = []
    this._initialSystem = null
    this._initialViews = null

    this._waiting = new SignalPromise()

    const sysCore = this._viewStore.get({ name: '_system', exclusive: true })

    this.system = new SystemView(sysCore, {
      checkout: 0
    })

    this.view = this._hasOpen ? this._handlers.open(this._viewStore, this) : null

    this.ready().catch(safetyCatch)
  }

  [inspect] (depth, opts) {
    let indent = ''
    if (typeof opts.indentationLvl === 'number') {
      while (indent.length < opts.indentationLvl) indent += ' '
    }

    return indent + 'Autobase { ... }'
  }

  // TODO: compat, will be removed
  get bootstraps () {
    return [this.bootstrap]
  }

  get writable () {
    return this.localWriter !== null && !this.localWriter.isRemoved
  }

  get ackable () {
    return this.localWriter !== null // prop should add .isIndexer but keeping it simple for now
  }

  get key () {
    return this._primaryBootstrap === null ? this.local.key : this._primaryBootstrap.key
  }

  get discoveryKey () {
    return this._primaryBootstrap === null ? this.local.discoveryKey : this._primaryBootstrap.discoveryKey
  }

  _isActiveIndexer () {
    return this.localWriter ? this.localWriter.isActiveIndexer : false
  }

  replicate (init, opts) {
    return this.store.replicate(init, opts)
  }

  heads () {
    const nodes = new Array(this.system.heads.length)
    for (let i = 0; i < this.system.heads.length; i++) nodes[i] = this.system.heads[i]
    return nodes.sort(compareNodes)
  }

  // any pending indexers
  hasPendingIndexers () {
    if (this.system.pendingIndexers.length > 0) return true
    return this.hasUnflushedIndexers()
  }

  // confirmed indexers that aren't in linearizer yet
  hasUnflushedIndexers () {
    if (this.linearizer.indexers.length !== this.system.indexers.length) return true

    for (let i = 0; i < this.system.indexers.length; i++) {
      const w = this.linearizer.indexers[i]
      if (!b4a.equals(w.core.key, this.system.indexers[i].key)) return true
    }

    return false
  }

  hintWakeup (hints) {
    if (!Array.isArray(hints)) hints = [hints]
    for (const { key, length } of hints) {
      const hex = b4a.toString(key, 'hex')
      const prev = this._wakeupHints.get(hex)
      if (!prev || length === -1 || prev < length) this._wakeupHints.set(hex, length)
    }
    this._queueBump()
  }

  _queueBump () {
    this._bump().catch(safetyCatch)
  }

  async _openPreSystem () {
    if (this._handlers.wait) await this._handlers.wait()
    await this.store.ready()

    const opts = {
      valueEncoding: this.valueEncoding,
      keyPair: this.keyPair,
      key: this._primaryBootstrap ? await this._primaryBootstrap.getUserData('autobase/local') : null
    }

    this.local = Autobase.getLocalCore(this.store, opts, this.encryptionKey)

    await this.local.ready()

    if (this.encryptionKey) {
      await this.local.setUserData('autobase/encryption', this.encryptionKey)
    } else {
      this.encryptionKey = await this.local.getUserData('autobase/encryption')
      if (this.encrypt && this.encryptionKey === null) {
        this.encryptionKey = (await this.store.createKeyPair('autobase/encryption')).secretKey.subarray(0, 32)
        await this.local.setUserData('autobase/encryption', this.encryptionKey)
      }
      if (this.encryptionKey) {
        await this.local.setEncryptionKey(this.encryptionKey)
        // not needed but, just for good meassure
        if (this._primaryBootstrap) this._primaryBootstrap.setEncryptionKey(this.encryptionKey)
      }
    }

    if (this.encrypted) {
      assert(this.encryptionKey !== null, 'Encryption key is expected')
    }

    // stateless open
    const ref = await this.local.getUserData('referrer')
    if (ref && !b4a.equals(ref, this.local.key) && !this._primaryBootstrap) {
      this._primaryBootstrap = this.store.get({ key: ref, compat: false, active: false, encryptionKey: this.encryptionKey })
      this.wakeupExtension = new WakeupExtension(this, this._primaryBootstrap, true)
      this.store = this.store.namespace(this._primaryBootstrap, { detach: false })
    }

    await this.local.setUserData('referrer', this.key)

    if (this._primaryBootstrap) {
      await this._primaryBootstrap.ready()
      this._primaryBootstrap.setUserData('autobase/local', this.local.key)
      if (this.encryptionKey) await this._primaryBootstrap.setUserData('autobase/encryption', this.encryptionKey)
    } else {
      this.local.setUserData('autobase/local', this.local.key)
      this.wakeupExtension = new WakeupExtension(this, this.local, true)
    }

    const { bootstrap, system, heads } = await this._loadSystemInfo()

    this.version = system
      ? system.version
      : this.bootstrap && !b4a.equals(this.bootstrap, this.local.key)
        ? -1
        : this.maxSupportedVersion

    this.bootstrap = bootstrap

    this._initialSystem = system
    this._initialHeads = heads

    await this._makeLinearizer(system)
  }

  async _loadSystemInfo () {
    const pointer = await this.local.getUserData('autobase/boot')
    const bootstrap = this.bootstrap || (await this.local.getUserData('referrer')) || this.local.key
    if (!pointer) return { bootstrap, system: null, heads: [] }

    const { indexed, views, heads } = c.decode(messages.BootRecord, pointer)
    const { key, length } = indexed

    this._systemPointer = length

    if (!length) return { bootstrap, system: null, heads: [] }

    const encryptionKey = AutoStore.getBlockKey(bootstrap, this.encryptionKey, '_system')
    const actualCore = this.store.get({ key, exclusive: false, compat: false, encryptionKey, isBlockKey: true })

    await actualCore.ready()

    const core = actualCore.batch({ checkout: length, session: false })

    // safety check the batch is not corrupt
    if (length === 0 || !(await core.has(length - 1))) {
      await this.local.setUserData('autobase/boot', null)
      this._systemPointer = 0
      return { bootstrap, system: null, heads: [] }
    }

    const system = new SystemView(core, {
      checkout: length
    })

    await system.ready()

    if (system.version > this.maxSupportedVersion) {
      throw new Error('Autobase upgrade required')
    }

    this._initialViews = [{ name: '_system', key, length }]

    for (let i = 0; i < system.views.length; i++) {
      this._initialViews.push({ name: views[i], ...system.views[i] })
    }

    return {
      bootstrap,
      system,
      heads
    }
  }

  interrupt (reason) {
    assert(this._applying !== null, 'Interrupt is only allowed in apply')
    this._interrupting = true
    if (reason) this.interrupted = reason
    throw INTERRUPT
  }

  async flush () {
    if (this.opened === false) await this.ready()
    await this._advancing
  }

  getSystemKey () {
    const core = this.system.core.getBackingCore()
    return core ? core.key : null
  }

  recouple () {
    if (this._coupler) this._coupler.destroy()
    const core = this.system.core.getBackingCore()
    this._coupler = new CoreCoupler(core.session, this._wakeupPeerBound)
  }

  _updateBootstrapWriters () {
    const writers = this.linearizer.getBootstrapWriters()

    // first clear all, but without applying it for churn reasons
    for (const writer of this._bootstrapWriters) writer.isBootstrap = false

    // all passed are bootstraps
    for (const writer of writers) writer.setBootstrap(true)

    // reset activity on old ones, all should be in sync now
    for (const writer of this._bootstrapWriters) {
      if (writer.isBootstrap === false) writer.setBootstrap(false)
    }

    this._bootstrapWriters = writers
    this._bootstrapWritersChanged = false
  }

  async _openPreBump () {
    this._presystem = this._openPreSystem()

    try {
      await this._presystem
      await this._viewStore.flush()
    } catch (err) {
      safetyCatch(err)
      if (err.code === 'ELOCKED') throw err
      await this.local.setUserData('autobase/last-error', b4a.from(err.stack + ''))
      await this.local.setUserData('autobase/boot', null)
      this.store.close().catch(safetyCatch)
      throw err
    }

    // see if we can load from indexer checkpoint
    await this.system.ready()

    if (this._initialSystem) {
      await this._initialSystem.close()
      this._initialSystem = null
      this._initialViews = null
    }

    // check if this is a v0 base
    const record = await this.local.getUserData('autobase/system')
    if (record !== null && (await this.local.getUserData('autobase/reindexed')) === null) {
      this.reindexing = true
      this.emit('reindexing')
      this._onreindexing(record).catch(safetyCatch)
    }

    // load previous digest if available
    if (this.localWriter && !this.system.bootstrapping) {
      await this._restoreLocalState()
    }

    this.recouple()

    if (this.fastForwardTo !== null) {
      const { key, timeout } = this.fastForwardTo
      this.fastForwardTo = null // will get reset once ready
      this.initialFastForward(key, timeout || DEFAULT_FF_TIMEOUT * 2)
    }

    if (this.localWriter && this._ackInterval) this._startAckTimer()
  }

  async _onreindexing (record) {
    const { key, length } = messages.Checkout.decode({ buffer: record, start: 0, end: record.byteLength })
    const encryptionKey = this._viewStore.getBlockKey(this._viewStore.getSystemCore().name)
    const core = this.store.get({ key, encryptionKey, isBlockKey: true }).batch({ checkout: length, session: false })

    const base = this
    const system = new SystemView(core, {
      checkout: length
    })

    await system.ready()

    const indexerCores = []
    for (const { key } of system.indexers) {
      const core = this.store.get({ key, compat: false, valueEncoding: messages.OplogMessage, encryptionKey: this.encryptionKey })
      indexerCores.push(core)
    }

    await system.close()

    for (const core of indexerCores) tail(core).catch(safetyCatch)

    async function onsyskey (key) {
      for (const core of indexerCores) await core.close()
      if (key === null || !base.reindexing || base._isFastForwarding()) return
      base.initialFastForward(key, DEFAULT_FF_TIMEOUT * 2)
    }

    async function tail (core) {
      await core.ready()

      while (base.reindexing && !base._isFastForwarding()) {
        const seq = core.length - 1
        const blk = seq >= 0 ? await core.get(seq) : null
        if (blk && blk.version >= 1) {
          const sysKey = await getSystemKey(core, seq, blk)
          if (sysKey) return onsyskey(sysKey)
        }

        await core.get(core.length) // force get next blk
      }

      return onsyskey(null)
    }

    async function getSystemKey (core, seq, blk) {
      if (!blk.digest) return null
      if (blk.digest.key) return blk.digest.key
      const p = await core.get(seq - blk.digest.pointer)
      return p.digest && p.digest.key
    }
  }

  async _restoreLocalState () {
    const version = await this.localWriter.getVersion()
    if (version > this.maxSupportedVersion) {
      this.store.close().catch(safetyCatch)
      throw new Error('Autobase version cannot be downgraded')
    }

    await this._updateDigest()
  }

  async _open () {
    this._prebump = this._openPreBump()
    await this._prebump

    await this._catchup(this._initialHeads)

    await this._wakeup.ready()

    this.system.requestWakeup()

    // queue a full bump that handles wakeup etc (not legal to wait for that here)
    this._queueBump()
    this._advanced = this._advancing

    if (this.reindexing) this._setReindexed()

    this.queueFastForward()
    this._updateBootstrapWriters()
  }

  async _catchup (nodes) {
    if (!nodes.length) return

    const visited = new Set()
    const writers = new Map()

    while (nodes.length) {
      const { key, length } = nodes.pop()

      const hex = b4a.toString(key, 'hex')
      const ref = hex + ':' + length

      if (visited.has(ref)) continue
      visited.add(ref)

      let w = writers.get(hex)
      if (!w) {
        const writer = await this._getWriterByKey(key, -1, 0, true, false, null)

        w = { writer, end: writer.length }

        writers.set(hex, w)
      }

      if (w.writer.length >= length) continue

      if (length > w.end) w.end = length

      // we should have all nodes locally
      const block = await w.writer.core.get(length - 1, { wait: false })

      assert(block !== null, 'Catchup failed: local block not available')

      for (const dep of block.node.heads) {
        nodes.push(dep)
      }
    }

    while (writers.size) {
      for (const [hex, info] of writers) {
        const { writer, end } = info

        if (writer === null || writer.length === end) {
          writers.delete(hex)
          continue
        }

        if (writer.available <= writer.length) {
          // force in case they are not indexed yet
          await writer.update(true)
        }

        const node = writer.advance()
        if (!node) continue

        this.linearizer.addHead(node)
      }
    }

    await this._drain() // runs for one tick
  }

  _reindexersIdle () {
    for (const idx of this.linearizer.indexers) {
      if (idx.core.length !== idx.length) return false
    }
    return !this.localWriter || this.localWriter.core.length === this.localWriter.length
  }

  async _setReindexed () {
    try {
      while (true) {
        await this._bump()

        let p = this.progress()
        if (p.processed === p.total && !(this.linearizer.indexers.length === 1 && this.linearizer.indexers[0].core.length === 0)) break

        await this._waiting.wait(2000)
        await this._advancing

        p = this.progress()
        if (p.processed === p.total) break

        if (this._reindexersIdle()) break
      }
      if (this._interrupting) return
      await this.local.setUserData('autobase/reindexed', b4a.from([0]))
      this.reindexing = false
      this.emit('reindexed')
    } catch (err) {
      safetyCatch(err)
    }
  }

  async _close () {
    this._interrupting = true
    await Promise.resolve() // defer one tick

    if (this._coupler) this._coupler.destroy()
    this._coupler = null
    this._waiting.notify(null)

    const closing = this._advancing.catch(safetyCatch)

    if (this._ackTimer) {
      this._ackTimer.stop()
      await this._ackTimer.flush()
    }

    await this._wakeup.close()

    if (this._hasClose) await this._handlers.close(this.view)
    if (this._primaryBootstrap) await this._primaryBootstrap.close()
    await this.activeWriters.clear()
    await this.corePool.clear()
    await this.store.close()
    await closing
  }

  _onError (err) {
    if (this.closing) return

    if (err === INTERRUPT) {
      this.emit('interrupt', this.interrupted)
      return
    }

    this.close().catch(safetyCatch)

    // if no one is listening we should crash! we cannot rely on the EE here
    // as this is wrapped in a promise so instead of nextTick throw it
    if (ReadyResource.listenerCount(this, 'error') === 0) {
      crashSoon(err)
      return
    }

    this.emit('error', err)
  }

  async _closeWriter (w, now) {
    this.activeWriters.delete(w)
    if (!now) this.corePool.linger(w.core)
    await w.close()
  }

  async _gcWriters () {
    // just return early, why not
    if (this._checkWriters.length === 0) return

    while (this._checkWriters.length > 0) {
      const w = this._checkWriters.pop()

      if (!w.flushed()) continue

      const unqueued = this._wakeup.unqueue(w.core.key, w.core.length)
      this._coupler.remove(w.core)

      if (!unqueued || w.isActiveIndexer) continue
      if (this.localWriter === w) continue

      await this._closeWriter(w, false)
    }

    await this._wakeup.flush()
  }

  _startAckTimer () {
    if (this._ackTimer) return
    this._ackTimer = new Timer(this._backgroundAck.bind(this), this._ackInterval)
    this._bumpAckTimer()
  }

  _bumpAckTimer () {
    if (!this._ackTimer) return
    this._ackTimer.bump()
  }

  async _waitForIdle () {
    let p = this.progress()
    while (!this.closing && this.reindexing) {
      if (p.processed === p.total && !(this.linearizer.indexers.length === 1 && this.linearizer.indexers[0].core.length === 0)) break
      await this._waiting.wait(2000)
      await this._advancing
      const next = this.progress()
      if (next.processed === p.processed && next.total === p.total) break
      p = next
    }

    if (this.localWriter) {
      await this.localWriter.ready()
      while (!this.closing && this.localWriter.core.length > this.localWriter.length) {
        await this.localWriter.waitForSynced()
        await this._bump() // make sure its all flushed...
      }
    }
  }

  async update () {
    if (this.opened === false) await this.ready()

    try {
      await this._bump()
      if (this._acking) await this._bump() // if acking just rebump incase it was triggered from above...
      await this._waitForIdle()
    } catch (err) {
      if (this._interrupting) return
      throw err
    }
  }

  // runs in bg, not allowed to throw
  // TODO: refactor so this only moves the writer affected to a updated set
  async _onremotewriterchange () {
    this._bumpAckTimer()

    try {
      await this._bump()
    } catch (err) {
      if (!this._interrupting) throw err
    }
  }

  _onwakeup () {
    this._needsWakeup = true
    this._queueBump()
  }

  _isPending () {
    for (const key of this.system.pendingIndexers) {
      if (b4a.equals(key, this.local.key)) return true
    }
    return false
  }

  _isFastForwarding () {
    if (this.fastForwardTo !== null) return true
    return this.fastForwardEnabled && this.fastForwarding > 0
  }

  _backgroundAck () {
    return this.ack(true)
  }

  async ack (bg = false) {
    if (this.localWriter === null) return

    const isPendingIndexer = this._isPending()

    // if no one is waiting for our index manifest, wait for FF before pushing an ack
    if (!isPendingIndexer && this._isFastForwarding()) return

    const isIndexer = this.localWriter.isActiveIndexer || isPendingIndexer

    if (!isIndexer || this._acking || this._interrupting) return

    this._acking = true

    try {
      await this._bump()
    } catch (err) {
      if (!this._interrupting) throw err
    }

    // avoid lumping acks together due to the bump wait here
    if (this._ackTimer && bg) await this._ackTimer.asapStandalone()
    if (this._interrupting) return

    const unflushed = this._hasPendingCheckpoint || this.hasUnflushedIndexers()
    if (!this._interrupting && (isPendingIndexer || this.linearizer.shouldAck(this.localWriter, unflushed))) {
      try {
        if (this.localWriter) await this.append(null)
      } catch (err) {
        if (!this._interrupting) throw err
      }

      if (!this._interrupting) {
        this._updateAckThreshold()
        this._bumpAckTimer()
      }
    }

    this._acking = false
  }

  async append (value) {
    if (!this.opened) await this.ready()
    if (this._interrupting) throw new Error('Autobase is closing')

    // if a reset is scheduled await those
    while (this._queueViewReset && !this._interrupting) await this._bump()

    // we wanna allow acks so interdexers can flush
    if (this.localWriter === null || (this.localWriter.isRemoved && value !== null)) {
      throw new Error('Not writable')
    }

    if (this._appending === null) this._appending = []

    if (Array.isArray(value)) {
      for (const v of value) this._append(v)
    } else {
      this._append(value)
    }

    // await in case append is in current tick
    if (this._advancing) await this._advancing

    // only bump if there are unflushed nodes
    if (this._appending !== null) return this._bump()
  }

  _append (value) {
    // if prev value is an ack that hasnt been flushed, skip it
    if (this._appending.length > 0) {
      if (value === null) return
      if (this._appending[this._appending.length - 1] === null) {
        this._appending.pop()
      }
    }
    this._appending.push(value)
  }

  async checkpoint () {
    await this.ready()
    const all = []

    for (const w of this.activeWriters) {
      all.push(w.getCheckpoint())
    }

    const checkpoints = await Promise.all(all)
    let best = null

    for (const c of checkpoints) {
      if (!c) continue
      if (best === null || c.length > best.length) best = c
    }

    return best
  }

  static getLocalCore (store, handlers, encryptionKey) {
    const opts = { ...handlers, compat: false, active: false, exclusive: true, valueEncoding: messages.OplogMessage, encryptionKey }
    return opts.keyPair ? store.get(opts) : store.get({ ...opts, name: 'local' })
  }

  static async getUserData (core) {
    const view = await core.getUserData('autobase/view')

    return {
      referrer: await core.getUserData('referrer'),
      view: (!view || view[0] !== 0) ? null : c.decode(messages.ViewRecord, view)
    }
  }

  static async isAutobase (core, opts = {}) {
    const block = await core.get(0, opts)
    if (!block) throw new Error('Core is empty.')
    if (!b4a.isBuffer(block)) return isAutobaseMessage(block)

    try {
      const m = c.decode(messages.OplogMessage, block)
      return isAutobaseMessage(m)
    } catch {
      return false
    }
  }

  // no guarantees where the user data is stored, just that its associated with the base
  async setUserData (key, val) {
    await this._presystem
    const core = this._primaryBootstrap === null ? this.local : this._primaryBootstrap

    await core.setUserData(key, val)
  }

  async getUserData (key) {
    await this._presystem
    const core = this._primaryBootstrap === null ? this.local : this._primaryBootstrap

    return await core.getUserData(key)
  }

  getNamespace (key, core) {
    const w = this.activeWriters.get(key)
    if (!w) return null

    const namespace = w.deriveNamespace(core.name)
    const publicKey = w.core.manifest.signers[0].publicKey

    return {
      namespace,
      publicKey
    }
  }

  // no guarantees about writer.isActiveIndexer property here
  async _getWriterByKey (key, len, seen, allowGC, isAdded, system) {
    assert(this._draining === true || (this.opening && !this.opened))

    const release = await this._lock()

    if (this._interrupting) {
      release()
      throw new Error('Autobase is closing')
    }

    try {
      let w = this.activeWriters.get(key)
      if (w !== null) {
        if (isAdded && w.core.writable && this.localWriter === null) this._setLocalWriter(w)
        if (w.isRemoved && isAdded) w.isRemoved = false
        w.seen(seen)
        return w
      }

      const sys = system || this.system
      const writerInfo = await sys.get(key)

      if (len === -1) {
        if (!allowGC && writerInfo === null) return null
        len = writerInfo === null ? 0 : writerInfo.length
      }

      const isActive = writerInfo !== null && (isAdded || !writerInfo.isRemoved)

      // assumes that seen is passed 0 everywhere except in writer._ensureNodeDependencies
      const isRemoved = seen === 0
        ? writerInfo !== null && (!isAdded && writerInfo.isRemoved)
        : !isActive // a writer might have referenced a removed writer

      w = this._makeWriter(key, len, isActive, isRemoved)
      if (!w) return null

      w.seen(seen)
      await w.ready()

      if (allowGC && w.flushed()) {
        this._wakeup.unqueue(key, len)
        if (w !== this.localWriter) {
          this.corePool.linger(w.core)
          await w.close()
          return w
        }
      }

      this.activeWriters.add(w)
      this._checkWriters.push(w)

      // will only add non-indexer writers
      if (this._coupler) this._coupler.add(w.core)

      assert(w.opened)
      assert(!w.closed)

      this._resumeWriter(w)
      return w
    } finally {
      release()
    }
  }

  _updateAll () {
    const p = []
    for (const w of this.activeWriters) p.push(w.update(false).catch(this._warn))
    return Promise.all(p)
  }

  _makeWriterCore (key) {
    const pooled = this.corePool.get(key)
    if (pooled) {
      pooled.valueEncoding = messages.OplogMessage
      return pooled
    }

    const local = b4a.equals(key, this.local.key)

    const core = local
      ? this.local.session({ valueEncoding: messages.OplogMessage, encryptionKey: this.encryptionKey, active: false })
      : this.store.get({ key, compat: false, writable: false, valueEncoding: messages.OplogMessage, encryptionKey: this.encryptionKey, active: false })

    return core
  }

  _makeWriter (key, length, isActive, isRemoved) {
    const core = this._makeWriterCore(key)
    const w = new Writer(this, core, length, isRemoved)

    if (core.writable) {
      if (isActive) this._setLocalWriter(w) // only set active writer
      return w
    }

    core.on('append', this._onremotewriterchangeBound)
    core.on('download', this._onremotewriterchangeBound)
    core.on('manifest', this._onremotewriterchangeBound)

    return w
  }

  _updateLinearizer (indexers, heads) {
    // only current active indexers are reset to true below
    const wasActiveIndexer = this._isActiveIndexer()

    for (const w of this.activeWriters) w.isActiveIndexer = false
    for (const writer of indexers) writer.isActiveIndexer = true

    if (this._isActiveIndexer() && !wasActiveIndexer) {
      this._setLocalIndexer()
    } else if (!this._isActiveIndexer() && wasActiveIndexer) {
      this._unsetLocalIndexer()
      this._clearLocalIndexer()
    }

    this.linearizer = new Linearizer(indexers, { heads, writers: this.activeWriters })
    this._addCheckpoints = !!(this.localWriter && (this.localWriter.isActiveIndexer || this._isPending()))
    this._updateAckThreshold()
  }

  _resumeWriter (w) {
    if (!this._isFastForwarding()) w.resume()
  }

  async _loadLocalWriter (sys) {
    if (this.localWriter !== null) return
    await this._getWriterByKey(this.local.key, -1, 0, false, false, sys)
    this._tryLoadingLocal = false
  }

  async _bootstrapLinearizer () {
    const bootstrap = this._makeWriter(this.bootstrap, 0, true, false)

    this.activeWriters.add(bootstrap)
    this._checkWriters.push(bootstrap)
    bootstrap.inflateBackground()
    await bootstrap.ready()
    this._resumeWriter(bootstrap)

    this._updateLinearizer([bootstrap], [])
  }

  async _makeLinearizer (sys) {
    this._tryLoadingLocal = true

    if (sys === null) {
      return this._bootstrapLinearizer()
    }

    if (this.opened || await sys.hasLocal(this.local.key)) {
      await this._loadLocalWriter(sys)
    }

    const indexers = []

    for (const head of sys.indexers) {
      const writer = await this._getWriterByKey(head.key, head.length, 0, false, false, sys)
      writer.inflateBackground()
      indexers.push(writer)
    }

    if (!this._isActiveIndexer()) {
      for (const key of sys.pendingIndexers) {
        if (b4a.equals(key, this.local.key)) {
          this._setLocalIndexer()
          break
        }
      }
    }

    this._updateLinearizer(indexers, sys.heads)

    for (const { key, length } of sys.heads) {
      await this._getWriterByKey(key, length, 0, false, false, sys)
    }
  }

  async _refreshSystemState () {
    if (!(await this.system.update())) return

    for (const w of this.activeWriters) {
      const data = await this.system.get(w.core.key)
      w.isRemoved = data ? data.isRemoved : false
    }
  }

  async _reindex () {
    if (this._updates.length) {
      this._undoAll()
      await this._refreshSystemState()
    }

    const sameIndexers = this.system.sameIndexers(this.linearizer.indexers)

    await this._makeLinearizer(this.system)
    if (!sameIndexers) await this._viewStore.migrate()

    this.version = this.system.version

    this.queueFastForward()

    for (const w of this.activeWriters) {
      const value = await this.system.get(w.core.key)
      const length = value ? value.length : 0
      w.reset(length)
      this._resumeWriter(w)
    }
  }

  _onUpgrade (version) {
    if (version > this.maxSupportedVersion) throw new Error('Autobase upgrade required')
  }

  _setLocalWriter (w) {
    this.localWriter = w
    if (this._ackInterval) this._startAckTimer()
  }

  _unsetLocalWriter () {
    if (!this.localWriter) return

    this._closeWriter(this.localWriter, true)
    if (this.localWriter.isActiveIndexer) this._clearLocalIndexer()

    this.localWriter = null
  }

  _setLocalIndexer () {
    assert(this.localWriter !== null)
    if (this.isIndexer) return

    this.isIndexer = true
    this._addCheckpoints = true // unset once indexer is cleared
    this.emit('is-indexer')
  }

  _unsetLocalIndexer () {
    assert(this.localWriter !== null)
    if (!this.isIndexer) return

    this.isIndexer = false
    this.emit('is-non-indexer')
  }

  _clearLocalIndexer () {
    assert(this.localWriter !== null)

    this.localWriter.isActiveIndexer = false

    if (this._ackTimer) this._ackTimer.stop()
    this._ackTimer = null
    this._addCheckpoints = false
  }

  _addLocalHeads () {
    if (!this.localWriter.idle()) return null

    const nodes = new Array(this._appending.length)
    for (let i = 0; i < this._appending.length; i++) {
      const heads = this.linearizer.getHeads()
      const deps = new Set(this.linearizer.heads)
      const batch = this._appending.length - i
      const value = this._appending[i]

      const node = this.localWriter.append(value, heads, batch, deps, this.maxSupportedVersion)

      this.linearizer.addHead(node)
      nodes[i] = node
    }

    this._appending = null

    return nodes
  }

  async _addRemoteHeads () {
    let added = 0

    while (added < REMOTE_ADD_BATCH) {
      await this._updateAll()

      let advanced = 0

      for (const w of this.activeWriters) {
        let node = w.advance()
        if (node === null) continue

        advanced += node.batch

        while (true) {
          this.linearizer.addHead(node)
          if (node.batch === 1) break
          node = w.advance()
        }
      }

      if (advanced === 0) break
      added += advanced
    }

    return added
  }

  async _advanceBootRecord (length) {
    if (length) { // TODO: remove when we are 100% we never hit the return in this if
      const { views } = await this.system.getIndexedInfo(length)
      for (const { key, length } of views) {
        const view = this._viewStore.getByKey(key)
        if (!view || (view.core.flushedLength < length)) {
          // TODO: this fires in some FF scenarios cause the core above is another core, should be fine
          return
        }
      }
    }

    this._systemPointer = length

    const views = this._viewStore.indexedViewsByName()

    await this._setBootRecord(this.system.core.key, length, this.system.heads, views)
  }

  async _updateBootRecordHeads (heads) {
    if (this._systemPointer === 0) return // first tick

    const views = this._viewStore.indexedViewsByName()

    await this._setBootRecord(this.system.core.key, this._systemPointer, heads, views)
  }

  async _setBootRecord (key, length, heads, views) {
    const pointer = c.encode(messages.BootRecord, {
      indexed: { key, length },
      heads,
      views
    })

    await this.local.setUserData('autobase/boot', pointer)
  }

  async _drain () {
    const writable = this.writable

    while (!this._interrupting && !this.paused) {
      if (this.opened && this.fastForwardTo !== null) {
        await this._applyFastForward()
        this.system.requestWakeup()
      }

      if (this.localWriter === null && this._tryLoadingLocal === true) {
        // in case we cleared system blocks we need to defer loading of the local writer
        await this._loadLocalWriter(this.system)
      }

      const remoteAdded = this.opened ? await this._addRemoteHeads() : null
      const localNodes = this.opened && this._appending !== null ? this._addLocalHeads() : null

      if (this._maybeStaticFastForward === true && this.fastForwardEnabled === true) await this._checkStaticFastForward()
      if (this._interrupting) return

      if (remoteAdded > 0 || localNodes !== null) {
        this.updating = true
      }

      const u = this.linearizer.update()
      const changed = u ? await this._applyUpdate(u) : null
      const indexed = !!this._updatingCores

      if (this._interrupting) return

      if (this.localWriter !== null && localNodes !== null) {
        await this._flushLocal(localNodes)
      }

      if (this.opened) await this._updateBootRecordHeads(this.system.heads)

      if (this._interrupting) return

      const flushed = (await this._flushIndexes()) ? this.system.core.getBackingCore().flushedLength : this._systemPointer
      if (this.updating || flushed > this._systemPointer) await this._advanceBootRecord(flushed)

      if (indexed) await this.onindex(this)

      if (this._interrupting) return

      // force reset state in worst case
      if (this._queueViewReset && this._appending === null) {
        this._queueViewReset = false
        const sysCore = this.system.core.getBackingCore()
        await this._forceResetViews(sysCore.indexedLength)
        continue
      }

      if (!changed) {
        if (this._checkWriters.length > 0) {
          await this._gcWriters()
          if (!this.opened) break // at most one tick preready
          continue // rerun the update loop as a writer might have been added
        }
        if (remoteAdded >= REMOTE_ADD_BATCH) continue
        break
      }

      await this._gcWriters()
      await this._reindex()
    }

    // emit state changes post drain
    if (writable !== this.writable) this.emit(writable ? 'unwritable' : 'writable')
  }

  progress () {
    let processed = 0
    let total = 0

    for (const w of this.activeWriters) {
      processed += w.length
      total += w.core.length
    }

    return {
      processed,
      total
    }
  }

  async _getLocallyStoredHeads () {
    const buffer = await this.local.getUserData('autobase/boot')
    if (!buffer) return []
    return c.decode(messages.BootRecord, buffer).heads
  }

  _wakeupPeer (peer) {
    this.system.sendWakeup(peer.remotePublicKey)
  }

  async _wakeupWriter (key) {
    this._ensureWakeup(await this._getWriterByKey(key, -1, 0, true, false, null))
  }

  // ensure wakeup on an existing writer (the writer calls this in addition to above)
  _ensureWakeup (w) {
    if (w === null || w.isBootstrap === true) return
    w.setBootstrap(true) // even if turn false at end of drain, hypercore makes them linger a bit so no churn
    this._bootstrapWriters.push(w)
    this._bootstrapWritersChanged = true
  }

  async _drainWakeup () { // TODO: parallel load the writers here later
    if (this._needsWakeup === true) {
      this._needsWakeup = false

      for (const { key } of this._wakeup) {
        await this._wakeupWriter(key)
      }

      if (this._needsWakeupHeads === true) {
        this._needsWakeupHeads = false

        for (const { key } of await this._getLocallyStoredHeads()) {
          await this._wakeupWriter(key)
        }
      }
    }

    for (const [hex, length] of this._wakeupHints) {
      const key = b4a.from(hex, 'hex')
      if (length !== -1) {
        const info = await this.system.get(key)
        if (info && length < info.length) continue // stale hint
      }

      await this._wakeupWriter(key)
    }

    this._wakeupHints.clear()
  }

  pause () {
    this.paused = true
  }

  resume () {
    this.paused = false
    this._queueBump()
  }

  async _advance () {
    if (this.opened === false) await this.ready()
    if (this.paused) return

    try {
      this._draining = true
      // note: this might block due to network i/o
      if (this._needsWakeup === true || this._wakeupHints.size > 0) await this._drainWakeup()
      await this._drain()
      this._draining = false
    } catch (err) {
      this._onError(err)
      return
    }

    if (!this._interrupting && this.localWriter && this._ackIsNeeded()) {
      if (this._ackTimer) this._ackTimer.asap()
      else this.ack()
    }

    // keep bootstraps in sync with linearizer
    if (this.updating === true || this._bootstrapWritersChanged === true) {
      this._updateBootstrapWriters()
    }

    if (this.updating === true) {
      this.updating = false
      this.emit('update')
      this._waiting.notify(null)
    }

    if (!this.closing) await this._gcWriters()
  }

  _ackIsNeeded () {
    if (!this._addCheckpoints) return false // ack has no impact

    // flush any pending indexers
    if (this.system.pendingIndexers.length > 0) {
      for (const key of this.system.pendingIndexers) {
        if (b4a.equals(key, this.local.key) && !b4a.equals(key, this.bootstrap)) {
          return true
        }
      }
    }

    // flush any pending migrates
    for (const view of this._viewStore.opened.values()) {
      if (view.queued === -1) continue

      const checkpoint = view.signer.bestCheckpoint(this.localWriter)
      const length = checkpoint ? checkpoint.length : 0

      if (length < view.queued && length < view.indexedLength) {
        this._hasPendingCheckpoint = true
        return true
      }
    }

    // flush if threshold is reached and we are not already acking
    if (this._ackTickThreshold && !this._acking && this._ackTick >= this._ackTickThreshold) {
      if (this._ackTimer) { // the bool in this case is implicitly an "asap" signal
        for (const w of this.linearizer.indexers) {
          if (w.core.length > w.length) return false // wait for the normal ack cycle in this case
        }

        return this.linearizer.shouldAck(this.localWriter, this.hasUnflushedIndexers())
      }

      return true
    }

    return false
  }

  async forceResetViews () {
    if (!this.opened) await this.ready()

    this._queueViewReset = true
    this._queueBump()
    this._advanced = this._advancing
    await this._advanced
  }

  async _forceResetViews (length) {
    const info = await this.system.getIndexedInfo(length)

    this._undoAll()
    this._systemPointer = length

    const pointer = await this.local.getUserData('autobase/boot')
    const { views } = c.decode(messages.BootRecord, pointer)

    await this._setBootRecord(this.system.core.key, length, info.heads, views)

    for (const { key, length } of info.views) {
      const core = this._viewStore.getByKey(key)
      await core.reset(length)
    }

    await this._closeAllActiveWriters(false)

    await this._refreshSystemState()
    await this._makeLinearizer(this.system)
  }

  doneFastForwarding () {
    if (--this.fastForwarding === 0 && !this._isFastForwarding()) {
      for (const w of this.activeWriters) w.resume()
    }
  }

  async _checkStaticFastForward () {
    let tally = null

    for (let i = 0; i < this.linearizer.indexers.length; i++) {
      const w = this.linearizer.indexers[i]
      if (w.system !== null && !b4a.equals(w.system, this.system.core.key)) {
        if (tally === null) tally = new Map()
        const hex = b4a.toString(w.system, 'hex')
        tally.set(hex, (tally.get(hex) || 0) + 1)
      }
    }

    if (tally === null) {
      this._maybeStaticFastForward = false
      return
    }

    const maj = (this.linearizer.indexers.length >> 1) + 1

    let candidate = null
    for (const [hex, vote] of tally) {
      if (vote < maj) continue
      candidate = b4a.from(hex, 'hex')
      break
    }

    if (candidate && !this._isFastForwarding()) {
      await this.initialFastForward(candidate, DEFAULT_FF_TIMEOUT * 2)
    }
  }

  async initialFastForward (key, timeout) {
    this.fastForwarding++

    const encryptionKey = this._viewStore.getBlockKey(this._viewStore.getSystemCore().name)

    const core = this.store.get({ key, encryptionKey, isBlockKey: true })
    await core.ready()

    // get length from network
    const length = await new Promise((resolve, reject) => {
      if (core.length) return resolve(core.length)

      const timer = setTimeout(() => {
        core.off('append', resolveLength)
        resolve(0)
      }, timeout)

      core.once('append', resolveLength)

      function resolveLength () {
        clearTimeout(timer)
        resolve(core.length)
      }
    })

    if (!length || length < this.system.core.indexedLength) {
      await core.close()
      this.doneFastForwarding()
      this.queueFastForward()
      return
    }

    const target = await this._preFastForward(core, length, timeout)
    await core.close()

    // initial fast-forward failed
    if (target === null) {
      this.doneFastForwarding()
      return
    }

    this.fastForwardTo = target
    this.doneFastForwarding()

    this._bumpAckTimer()
    this._queueBump()
  }

  async queueFastForward () {
    // if already FFing, let the finish. TODO: auto kill the attempt after a while and move to latest?
    if (!this.fastForwardEnabled || this.fastForwarding > 0) return

    const core = this.system.core.getBackingCore()

    if (core.session.length <= core.length + FF_THRESHOLD) return
    if (this.fastForwardTo !== null && core.session.length <= this.fastForwardTo.length + FF_THRESHOLD) return
    if (!core.session.length) return

    this.fastForwarding++
    const target = await this._preFastForward(core.session, core.session.length, DEFAULT_FF_TIMEOUT)

    // fast-forward failed
    if (target === null) {
      this.doneFastForwarding()
      return
    }

    // if it migrated underneath us, ignore for now
    if (core !== this.system.core.getBackingCore()) {
      this.doneFastForwarding()
      return
    }

    this.fastForwardTo = target
    this.doneFastForwarding()

    this._bumpAckTimer()
    this._queueBump()
  }

  // NOTE: runs in parallel with everything, can never fail
  async _preFastForward (core, length, timeout) {
    if (length === 0) return null

    const info = {
      key: core.key,
      length,
      localLength: 0
    }

    // pause writers
    for (const w of this.activeWriters) w.pause()

    try {
      // sys runs open with wait false, so get head block first for low complexity
      if (!(await core.has(length - 1))) {
        await core.get(length - 1, { timeout })
      }

      const system = new SystemView(core.session(), {
        checkout: length,
        maxCacheSize: this.maxCacheSize
      })

      await system.ready()

      if (system.version > this.maxSupportedVersion) {
        const upgrade = {
          version: system.version,
          length
        }

        this.emit('upgrade-available', upgrade)
        return null
      }

      const systemShouldMigrate = b4a.equals(core.key, this.system.core.key) &&
        !system.sameIndexers(this.linearizer.indexers)

      const localLookup = this.localWriter ? system.get(this.local.key, { timeout }) : null
      if (localLookup) localLookup.catch(noop)

      const indexers = []
      const pendingViews = []

      for (const { key, length } of system.indexers) {
        if (length === 0) continue
        const core = this.store.get(key)
        await core.ready()
        indexers.push({ key, core, length })
      }

      // handle rest of views
      for (const v of system.views) {
        const core = this.store.get(v.key)

        // same as below, we technically just need to check that we have the hash, not the block
        if (v.length === 0 || await core.has(v.length - 1)) {
          await core.close()
        } else {
          pendingViews.push({ core, length: v.length })
        }
      }

      const promises = []

      for (const { key, core, length } of indexers) {
        if (core.length === 0 && length > 0) promises.push(core.get(length - 1, { timeout }))
        promises.push(system.get(key))
      }

      for (const { core, length } of pendingViews) {
        // we could just get the hash here, but likely user wants the block so yolo
        promises.push(core.get(length - 1, { timeout }))
      }

      await Promise.all(promises)

      if (localLookup) {
        const value = await localLookup
        if (value) info.localLength = value.isRemoved ? -1 : value.length
      }

      const closing = []

      // handle system migration
      if (systemShouldMigrate) {
        const hash = system.core.core.tree.hash()
        const name = this.system.core._source.name
        const prologue = { hash, length }

        info.key = this.deriveKey(name, indexers, prologue)

        const core = this.store.get(info.key)
        await core.get(length - 1, { timeout })

        closing.push(core.close())
      }

      for (const { core } of pendingViews) {
        closing.push(core.close())
      }

      closing.push(system.close())

      await Promise.allSettled(closing)
    } catch (err) {
      safetyCatch(err)
      return null
    }

    return info
  }

  _clearFastForward (queue) {
    if (this.fastForwarding === 0) {
      for (const w of this.activeWriters) w.resume()
    }
    this.fastForwardTo = null
    if (queue) this.queueFastForward() // queue in case we lost an ff while applying this one
  }

  async _applyFastForward () {
    // remember these in case another fast forward gets queued
    const { key, length, localLength } = this.fastForwardTo

    const migrated = !b4a.equals(key, this.system.core.key)

    const name = this._viewStore.getSystemCore().name
    const encryptionKey = this._viewStore.getBlockKey(name)

    const core = this.store.get({ key, encryptionKey, isBlockKey: true })
    await core.ready()

    const from = this.system.core.getBackingCore().length

    // just extra sanity check that we are not going back in time, nor that we cleared the storage needed for ff
    if (from >= length || core.length < length) {
      this._clearFastForward(true)
      return
    }

    const system = new SystemView(core, {
      checkout: length,
      maxCacheSize: this.maxCacheSize
    })

    await system.ready()

    const opened = []
    const indexers = [] // only used in migrate branch
    const prologues = [] // only used in migrate branch

    // preload async state
    if (migrated) {
      for (const { key } of system.indexers) {
        const core = this.store.get(key)
        await core.ready()
        indexers.push({ core })
        await core.close()
      }

      for (const { key } of system.views) {
        const core = this.store.get(key)
        await core.ready()
        prologues.push(core.manifest.prologue)
        await core.close()
      }
    }

    const views = new Map()

    const sysView = this.system.core._source
    const sysInfo = { key, length, systemIndex: -1 }

    views.set(sysView, sysInfo)

    for (let i = 0; i < system.views.length; i++) {
      const v = system.views[i]

      // TODO: check behaviour if new view keys (+ double FF)
      let view = this._viewStore.getByKey(v.key)

      // search for corresponding view
      if (!view) {
        for (view of this._viewStore.opened.values()) {
          const key = this.deriveKey(view.name, indexers, prologues[i])
          if (b4a.equals(key, v.key)) break
          view = null
        }
      }

      if (!view) {
        await closeAll(opened)
        this._clearFastForward(false) // something wrong somewhere, likely a bug, just safety
        return
      }

      const core = this.store.get(v.key)
      await core.ready()

      opened.push(core)

      if (core.length < v.length) { // sanity check in case there was a migration etc
        await closeAll(opened)
        this._clearFastForward(true)
        return
      }

      views.set(view, { key: v.key, length: v.length, systemIndex: i })
    }

    await system.close()
    await this._closeAllActiveWriters(false)

    this._undoAll()

    for (const view of this._viewStore.opened.values()) {
      const info = views.get(view)
      if (info) await view.catchup(info)
      else if (migrated) await view.migrateTo(indexers, 0)
    }

    await this._refreshSystemState()

    if (this.localWriter) {
      if (localLength < 0) this._unsetLocalWriter()
      else this.localWriter.reset(localLength)
    }

    await this._makeLinearizer(this.system)
    await this._advanceBootRecord(length)

    // manually set the digest
    if (migrated) {
      this._setDigest(key)
      this.recouple()
    }

    if (b4a.equals(this.fastForwardTo.key, key) && this.fastForwardTo.length === length) {
      this._clearFastForward(false)
    }

    this.updating = true
    this.emit('fast-forward', length, from)

    // requeue in case we can do another jump!
    this.queueFastForward()

    await closeAll(opened)
  }

  async _closeAllActiveWriters (keepPool) {
    for (const w of this.activeWriters) {
      if (this.localWriter === w) continue
      await this._closeWriter(w, true)
    }
    if (keepPool) await this.corePool.clear()
  }

  async _flushIndexes () {
    let complete = true
    this._updatingCores = false

    for (const core of this._viewStore.opened.values()) {
      if (!await core.flush()) complete = false
    }

    // updates emitted sync
    for (const core of this._viewStore.opened.values()) {
      if (core.indexing === 0) continue
      const indexing = core.indexing
      core.indexing = 0
      core._onindex(indexing)
    }

    return complete
  }

  // triggered from linearized core
  _onviewappend (core, blocks) {
    assert(this._applying !== null, 'Append is only allowed in apply')

    if (core.appending === 0) {
      this._applying.views.push({ core, appending: 0 })
    }

    core.appending += blocks
  }

  // triggered from apply
  async addWriter (key, { indexer = true, isIndexer = indexer } = {}) { // just compat for old version
    assert(this._applying !== null, 'System changes are only allowed in apply')
    await this.system.add(key, { isIndexer })

    const writer = (await this._getWriterByKey(key, -1, 0, false, true, null)) || this._makeWriter(key, 0, true, false)
    await writer.ready()

    if (!this.activeWriters.has(key)) {
      this.activeWriters.add(writer)
      this._checkWriters.push(writer)
      this._resumeWriter(writer)
    }

    // If we are getting added as indexer, already start adding checkpoints while we get confirmed...
    if (writer === this.localWriter) {
      if (isIndexer) this._setLocalIndexer()
      else this._unsetLocalIndexer() // unset if demoted
    }

    // fetch any nodes needed for dependents
    this._queueBump()
  }

  removeable (key) {
    if (this.system.indexers.length !== 1) return true
    return !b4a.equals(this.system.indexers[0].key, key)
  }

  // triggered from apply
  async removeWriter (key) { // just compat for old version
    assert(this._applying !== null, 'System changes are only allowed in apply')

    if (!this.removeable(key)) {
      throw new Error('Not allowed to remove the last indexer')
    }

    await this.system.remove(key)

    if (b4a.equals(key, this.local.key)) {
      if (this.isIndexer) this._unsetLocalIndexer()
    }

    const w = this.activeWriters.get(key)
    if (w) w.isRemoved = true

    this._queueBump()
  }

  _undoAll () {
    let count = 0
    for (const u of this._updates) {
      count += u.batch
    }
    return this._undo(count)
  }

  _undo (popped) {
    const truncating = []

    while (popped > 0) {
      const u = this._updates.pop()

      popped -= u.batch

      for (const { core, appending } of u.views) {
        if (core.truncating === 0) truncating.push(core)
        core.truncating += appending
      }
    }

    for (const core of truncating) {
      const truncating = core.truncating
      core.truncating = 0
      core._onundo(truncating)
    }
  }

  async _getManifest (indexer, len) {
    for (const w of this.linearizer.indexers) {
      const d = await w.getDigest(len)
      if (!d) continue
      if (d.indexers.length > indexer) return d.indexers[indexer]
    }

    return null
  }

  _bootstrap () {
    return this.system.add(this.bootstrap, { isIndexer: true, isPending: false })
  }

  _updateAckThreshold () {
    if (this._ackThreshold === 0) return
    if (this._ackTimer) this._ackTimer.bau()
    this._ackTickThreshold = random2over1(this.linearizer.indexers.length * this._ackThreshold)
  }

  _resetAckTick () {
    this._ackTick = 0
    if (this._ackTimer) this._ackTimer.bau()
  }

  async _applyUpdate (u) {
    assert(await this._viewStore.flush(), 'Views failed to open')

    if (u.undo) this._undo(u.undo)

    // if anything was indexed reset the ticks
    if (u.indexed.length) this._resetAckTick()

    // make sure the latest changes is reflected on the system...
    await this._refreshSystemState()

    // todo: refresh the active writer set in case any were removed

    let batch = 0
    let applyBatch = []
    let versionUpgrade = false

    let j = 0

    let i = 0
    while (i < Math.min(u.indexed.length, u.shared)) {
      const node = u.indexed[i++]

      if (node.batch > 1) continue
      this._shiftWriter(node.writer)

      const update = this._updates[j++]

      // autobase version was bumped
      let upgraded = false
      if (update.version > this.version) {
        this._onUpgrade(update.version) // throws if not supported
        upgraded = true
      }

      if (!update.indexers && !upgraded) continue

      this._queueIndexFlush(i)

      // we have to set the digest here so it is
      // flushed to local appends in same iteration
      await this._updateDigest()

      return true
    }

    for (i = u.shared; i < u.length; i++) {
      if (this.fastForwardTo !== null && this.fastForwardTo.length > this.system.core.length && b4a.equals(this.fastForwardTo.key, this.system.core.key)) {
        return false
      }

      const indexed = i < u.indexed.length
      const node = indexed ? u.indexed[i] : u.tip[i - u.indexed.length]

      if (node.version > this.system.version) versionUpgrade = true

      if (node.writer === this.localWriter) {
        this._resetAckTick()
      } else if (!indexed) {
        this._ackTick++
      }

      batch++

      this.system.addHead(node)

      if (node.value !== null && !node.writer.isRemoved) {
        applyBatch.push({
          indexed,
          from: node.writer.core,
          length: node.length,
          value: node.value,
          heads: node.actualHeads
        })
      }

      if (node.batch > 1) continue

      if (versionUpgrade) {
        const version = await this._checkVersion()
        this.system.version = version === -1 ? node.version : version
      }

      const update = {
        batch,
        indexers: false,
        views: [],
        version: this.system.version
      }

      this._updates.push(update)
      this._applying = update

      if (this.system.bootstrapping) await this._bootstrap()

      if (applyBatch.length && this._hasApply === true) {
        await this._handlers.apply(applyBatch, this.view, this)
      }

      update.indexers = !!this.system.indexerUpdate

      await this.system.flush(await this._getViewInfo(update.indexers))

      this._applying = null

      batch = 0
      applyBatch = []

      for (let k = 0; k < update.views.length; k++) {
        const u = update.views[k]
        u.appending = u.core.appending
        u.core.appending = 0
      }

      if (!indexed) continue

      this._shiftWriter(node.writer)

      // autobase version was bumped
      let upgraded = false
      if (update.version > this.version) {
        this._onUpgrade(update.version) // throws if not supported
        upgraded = true
      }

      if (!update.indexers && !upgraded) continue

      // indexer set has updated
      this._queueIndexFlush(i + 1)
      await this._updateDigest() // see above

      return true
    }

    if (u.indexed.length) {
      this._queueIndexFlush(u.indexed.length)
      await this._updateDigest() // see above
    }

    return false
  }

  async _getViewInfo (indexerUpdate) {
    const indexers = []

    for (const { key, length } of this.system.indexers) {
      const indexer = await this._getWriterByKey(key, length, 0, false, false, null)
      indexers.push(indexer)
    }

    // construct view keys to be passed to system
    const views = []
    for (const view of this._viewStore.opened.values()) {
      if (!view.length || view._isSystem()) continue // system is omitted

      const length = view.systemIndex !== -1
        ? this.system.views[view.systemIndex].length
        : 0

      // TODO: the first part of this condition could be make clearer with a !this._isBootstrapping() condition instead
      const key = (indexers.length > 1 || this.linearizer.indexers.length > indexers.length) && indexerUpdate
        ? await view.deriveKey(indexers, length + view.appending)
        : view.systemIndex === -1
          ? view.key
          : null

      views.push({ view, key })
    }

    return views
  }

  async _checkVersion () {
    if (!this.system.indexers.length) return -1

    const maj = (this.system.indexers.length >> 1) + 1

    const fetch = []

    let localUnflushed = false
    for (const { key, length } of this.system.indexers) {
      const w = await this._getWriterByKey(key, length, 0, false, false, null)

      if (length > w.core.length) localUnflushed = true // local writer has nodes in mem
      else fetch.push(w.core.get(length - 1))
    }

    const heads = await Promise.all(fetch)

    const tally = new Map()
    const versions = []

    // count ourself
    if (localUnflushed) {
      const local = { version: this.maxSupportedVersion, n: 1 }
      versions.push(local)
      tally.set(this.maxSupportedVersion, local)
    }

    for (const { maxSupportedVersion: version } of heads) {
      let v = tally.get(version)

      if (!v) {
        v = { version, n: 0 }

        tally.set(version, v)
        versions.push(v)
      }

      if (++v.n >= maj) return version
    }

    let count = 0
    for (const { version, n } of versions.sort(descendingVersion)) {
      if ((count += n) >= maj) return version
    }

    assert(false, 'Failed to determine version')
  }

  _shiftWriter (w) {
    w.shift()
    if (w.flushed()) this._checkWriters.push(w)
  }

  _queueIndexFlush (indexed) {
    assert(this._updatingCores === false, 'Updated cores not flushed')
    this._updatingCores = true

    while (indexed > 0) {
      const u = this._updates.shift()

      indexed -= u.batch

      for (const { core, appending } of u.views) {
        core.indexing += appending
      }
    }
  }

  deriveKey (name, indexers, prologue) {
    return this._viewStore.deriveKey(name, indexers, prologue)
  }

  async _updateDigest () {
    if (!this._addCheckpoints) return

    if (this._localDigest === null) {
      this._localDigest = await this.localWriter.getDigest()

      // no previous digest available
      if (this._localDigest === null) {
        this._setDigest(this.system.core.key)
      }

      return
    }

    // we predict what the system key will be after flushing
    const pending = this.system.core._source.pendingIndexedLength
    const info = await this.system.getIndexedInfo(pending)

    let same = info.indexers.length === this.linearizer.indexers.length
    if (same) {
      for (let i = 0; i < info.indexers.length; i++) {
        if (!b4a.equals(info.indexers[i].key, this.linearizer.indexers[i].core.key)) {
          same = false
          break
        }
      }
    }

    let key = this.system.core.key

    if (!same) {
      const p = []
      for (const { key } of info.indexers) {
        p.push(await this._getWriterByKey(key, -1, 0, false, false, null))
      }

      const indexers = await p
      const sys = this._viewStore.getSystemCore()
      key = await sys.deriveKey(indexers, pending)
    }

    if (this._localDigest.key && b4a.equals(key, this._localDigest.key)) return

    this._setDigest(key)
  }

  _setDigest (key) {
    if (this._localDigest === null) this._localDigest = {}
    this._localDigest.key = key
    this._localDigest.pointer = 0
  }

  _generateDigest () {
    return {
      pointer: this._localDigest.pointer,
      key: this._localDigest.key
    }
  }

  async _generateCheckpoint (cores) {
    if (!this._addCheckpoints) return null

    if (this._firstCheckpoint) {
      this._firstCheckpoint = false
      // TODO: unsafe, use an array instead for views as the order is important
      return generateCheckpoint(this._viewStore.opened.values())
    }

    return generateCheckpoint(cores)
  }

  async _flushLocal (localNodes) {
    if (!this._localDigest) await this._updateDigest()

    const cores = this._addCheckpoints ? this._viewStore.getIndexedCores() : []
    const blocks = new Array(localNodes.length)

    for (let i = 0; i < blocks.length; i++) {
      const { value, heads, batch } = localNodes[i]

      blocks[i] = {
        version: 1,
        maxSupportedVersion: this.maxSupportedVersion,
        checkpoint: this._addCheckpoints ? await generateCheckpoint(cores) : null,
        digest: this._addCheckpoints ? this._generateDigest() : null,
        node: {
          heads,
          batch,
          value: value === null ? null : c.encode(this.valueEncoding, value)
        },
        trace: []
      }

      if (this._addCheckpoints) this._localDigest.pointer++
    }

    await this.local.append(blocks)

    if (this._addCheckpoints) {
      const { checkpoint } = blocks[blocks.length - 1]
      this.localWriter._addCheckpoints(checkpoint)
      this._hasPendingCheckpoint = false
    }
  }
}

function generateCheckpoint (cores) {
  const checkpoint = []

  for (const core of cores) {
    checkpoint.push(core.checkpoint())
    core.checkpointer++
  }

  return Promise.all(checkpoint)
}

function toKey (k) {
  return b4a.isBuffer(k) ? k : hypercoreId.decode(k)
}

function isAutobaseMessage (msg) {
  return msg.checkpoint ? msg.checkpoint.length > 0 : msg.checkpoint === null
}

function compareNodes (a, b) {
  return b4a.compare(a.key, b.key)
}

function descendingVersion (a, b) {
  return b.version - a.version
}

function random2over1 (n) {
  return Math.floor(n + Math.random() * n)
}

function noop () {}

function crashSoon (err) {
  queueMicrotask(() => { throw err })
  throw err
}

function isObject (obj) {
  return typeof obj === 'object' && obj !== null
}

function emitWarning (err) {
  safetyCatch(err)
  this.emit('warning', err)
}

async function closeAll (list) {
  for (const core of list) await core.close()
}

},{"./lib/active-writers":85,"./lib/core-pool":88,"./lib/extension":90,"./lib/linearizer":91,"./lib/messages":92,"./lib/store":95,"./lib/system":96,"./lib/timer":97,"./lib/wakeup":99,"./lib/writer":100,"b4a":102,"compact-encoding":178,"core-coupler":181,"debounceify":217,"hypercore-id-encoding":307,"mutexify/promise":389,"nanoassert":390,"ready-resource":480,"safety-catch":486,"signal-promise":506}],85:[function(require,module,exports){
const b4a = require('b4a')

module.exports = class ActiveWriters {
  constructor () {
    this.map = new Map()
  }

  get size () {
    return this.map.size
  }

  [Symbol.iterator] () {
    return this.map.values()
  }

  get (key) {
    return this.map.get(b4a.toString(key, 'hex')) || null
  }

  has (key) {
    return this.get(key) !== null
  }

  add (writer) {
    this.map.set(b4a.toString(writer.core.key, 'hex'), writer)
  }

  delete (writer) {
    this.map.delete(b4a.toString(writer.core.key, 'hex'))
  }

  clear () {
    const p = []
    for (const w of this.map.values()) p.push(w.close())
    this.map.clear()

    return Promise.all(p)
  }
}

},{"b4a":102}],86:[function(require,module,exports){
const BufferMap = require('tiny-buffer-map')

// This is basically just a Map atm, but leaving it as an abstraction for now
// in case we wanna optimize it for our exact usecase

module.exports = class Clock {
  constructor () {
    this.seen = new BufferMap()
  }

  get size () {
    return this.seen.size
  }

  has (key) {
    return this.seen.has(key)
  }

  includes (key, length) {
    return this.seen.has(key) && this.seen.get(key) >= length
  }

  get (key) {
    return this.seen.get(key) || 0
  }

  set (key, len) {
    this.seen.set(key, len)
    return len
  }

  add (clock) {
    for (const [key, l] of clock) {
      if (this.get(key) < l) this.set(key, l)
    }
  }

  [Symbol.iterator] () {
    return this.seen[Symbol.iterator]()
  }
}

},{"tiny-buffer-map":585}],87:[function(require,module,exports){
const BufferMap = require('tiny-buffer-map')

const Clock = require('./clock')

const UNSEEN = 0
const NEWER = 1
const ACKED = 2

// Consensus machine for Autobase. Sort DAG nodes using
// vector clocks to determine a globally consistent view

module.exports = class Consensus {
  constructor (indexers) {
    this.merges = new Set()
    this.majority = (indexers.length >>> 1) + 1
    this.indexers = indexers
    this.removed = new Clock()
    this.updated = false

    this.writers = new BufferMap()
    for (const idx of this.indexers) {
      this.writers.set(idx.core.key, idx)
    }
  }

  addHead (node) {
    if (!node.writer.isActiveIndexer) return
    if (this._isMerge(node)) this.merges.add(node)
    this.updated = true
    return node
  }

  /* Indexer Only DAG methods */

  _tails (node, tails) {
    const tailSet = new Set()
    for (const t of tails) {
      if (node.clock.includes(t.writer.core.key, t.length)) tailSet.add(t)
    }

    return tailSet
  }

  _tailsAndMerges (node, tails) {
    const all = this._tails(node, tails)
    for (const m of this.merges) {
      if (m !== node && node.clock.includes(m.writer.core.key, m.length)) {
        all.add(m)
      }
    }
    return all
  }

  _isMerge (node) {
    if (!node.writer.isActiveIndexer) return false

    const deps = []

    for (const idx of this.indexers) {
      let seq = node.clock.get(idx.core.key) - 1

      if (idx === node.writer) seq--

      const head = idx.get(seq)
      if (!head || this.removed.includes(head.writer.core.key, head.length)) continue

      let isDep = true
      for (let i = 0; i < deps.length; i++) {
        const d = deps[i]
        if (d === head) continue

        if (d.clock.includes(head.writer.core.key, head.length)) {
          isDep = false
          break
        }

        if (head.clock.includes(d.writer.core.key, d.length)) {
          const popped = deps.pop()
          if (d === popped) continue
          deps[i--] = popped
        }
      }

      if (isDep) deps.push(head)
    }

    return deps.length > 1
  }

  _indexerTails () {
    const tails = new Set()
    for (const idx of this.indexers) {
      const length = this.removed.has(idx.core.key) ? this.removed.get(idx.core.key) : idx.indexed

      const head = idx.get(length)
      if (!head || this.removed.includes(head.writer.core.key, head.length)) continue

      let isTail = true
      for (const t of tails) {
        if (head.clock.includes(t.writer.core.key, t.length)) {
          isTail = false
          break
        }

        if (t.clock.includes(head.writer.core.key, head.length)) {
          tails.delete(t)
        }
      }

      if (isTail) tails.add(head)
    }

    return tails
  }

  // parent is newer if for any node in parent's view,
  // either node can see object or object can see node
  _strictlyNewer (object, parent) {
    for (const [key, latest] of parent.clock) {
      const oldest = this.removed.get(key)
      if (latest <= oldest) continue // check quickly if we removed it

      // get the NEXT mode from the writer from the objects pov, adjust if its removed
      let length = object.clock.get(key)
      if (length <= oldest) length = oldest

      // sanity check, likely not needed as someone has checked this before, but whatevs, free
      if (latest < length) return false

      // if the same, they both seen it, continue
      if (latest === length) continue

      const writer = this.writers.get(key)

      // might not be in the removed set but the writer can tell us if it was indexed...
      const next = writer && writer.get(length >= writer.indexed ? length : writer.indexed)

      // no next, its been indexed, both seen it
      if (!next) continue

      // if the NEXT node has seen the object its fine - newer
      if (next.clock.includes(object.writer.core.key, object.length)) continue

      // otherwise the parent must also NOT has seen the next node
      if (!parent.clock.includes(next.writer.core.key, next.length)) continue

      return false
    }

    return parent.clock.get(object.writer.core.key) >= object.length
  }

  _acks (target) {
    const acks = target.writer.isActiveIndexer ? [target] : [] // TODO: can be cached on the target node in future (ie if we add one we dont have to check it again)

    for (const idx of this.indexers) {
      if (idx === target.writer) continue

      let next = target.clock.get(idx.core.key)
      if (next < idx.nodes.offset) next = idx.nodes.offset

      const nextIndexNode = idx.get(next >= idx.indexed ? next : idx.indexed)

      // no node - no ack
      if (!nextIndexNode) continue

      // if the next index node does not see the target, no ack
      if (!nextIndexNode.clock.includes(target.writer.core.key, target.length)) continue

      // if the next index node is not strictly newer, skip to avoid ambig...
      if (!this._strictlyNewer(target, nextIndexNode)) continue

      acks.push(nextIndexNode)
    }

    return acks
  }

  acksFromNode (target, view) {
    const acks = new Set()

    if (!view || !view.clock.includes(target.writer.core.key, target.length)) return acks

    acks.add(view.writer)

    for (const idx of this.indexers) {
      if (idx === view.writer) continue

      const length = view.clock.get(idx.core.key)
      if (!length) continue

      if (target.clock.includes(idx.core.key, length)) continue

      const head = idx.get(length - 1)
      if (!head) continue

      if (head.clock.includes(target.writer.core.key, target.length)) {
        acks.add(idx)
      }
    }

    return acks
  }

  _ackedAt (acks, parent) {
    let seen = 0
    let missing = acks.length

    for (const node of acks) {
      missing--

      if (!parent.clock.includes(node.writer.core.key, node.length)) {
        if (seen + missing < this.majority) return false
        continue
      }

      if (++seen >= this.majority) return true
    }

    return false
  }

  confirms (indexer, target, acks, length) {
    if (!length || this.removed.get(indexer.core.key) >= length) return UNSEEN
    // def feels like there is a smarter way of doing this part
    // ie we just wanna find a node from the indexer that is strictly newer than target
    // and seens a maj of the acks - thats it

    let jump = true
    let newer = true

    for (let i = length - 1; i >= 0; i--) {
      const head = indexer.get(i)
      if (head === null) return UNSEEN

      let seen = 0

      for (const node of acks) {
        // if (node.writer === indexer) continue
        if (!head.clock.includes(node.writer.core.key, node.length)) continue
        if (++seen >= this.majority) break
      }

      if (!newer && seen < this.majority) {
        break
      }

      if (!this._strictlyNewer(target, head)) {
        // all strictly newer nodes are clustered together so bisect until we find the cluster
        if (jump) {
          jump = false

          let t = length - 1
          let b = 0

          while (t > b) {
            const mid = (t + b) >>> 1
            const node = indexer.get(mid)

            if (node === null || !node.clock.includes(target.writer.core.key, target.length) || this._strictlyNewer(target, node)) {
              b = mid + 1
            } else {
              t = mid - 1
            }
          }

          // + 2 in case we are off by one and the i--. its fine, just an optimisation
          if (b + 1 < i) i = b + 2
        }

        newer = false
        continue
      } else if (seen < this.majority) {
        return NEWER
      }

      return ACKED
    }

    return UNSEEN
  }

  _isConfirmed (target, parent = null) {
    const acks = this._acks(target)
    const confs = new Set()

    if (acks.length < this.majority) return false
    let allNewer = true

    for (const indexer of this.indexers) {
      const length = parent
        ? (parent.writer === indexer) ? parent.length - 1 : parent.clock.get(indexer.core.key)
        : indexer.length

      const result = this.confirms(indexer, target, acks, length)

      if (result === ACKED) {
        confs.add(indexer)
        if (confs.size >= this.majority) {
          return true
        }
      }

      if (result === UNSEEN) allNewer = false
    }

    if (parent) return this._isConfirmableAt(target, parent, acks, confs)

    return allNewer
  }

  _isConfirmableAt (target, parent, acks, confs) {
    if (!this._ackedAt(acks, parent)) return false

    let potential = confs.size

    for (const indexer of this.indexers) {
      if (confs.has(indexer)) continue

      const length = parent.clock.get(indexer.core.key)
      const isSeen = target.clock.includes(indexer.core.key, length)

      // if the target has seen the latest node, it can freely be used to confirm the target later
      // otherwise, check if a newer node is strictly newer...
      if (!isSeen) {
        const head = indexer.get(length - 1)

        // the next indexer head HAS to be strictly newer - meaning the current one has to be also.
        if (head && !this.removed.includes(head.writer.core.key, head.length) && !this._strictlyNewer(target, head)) {
          continue
        }
      }

      if (++potential >= this.majority) return true
    }

    return false
  }

  // this can get called multiple times for same node
  remove (node) {
    this.merges.delete(node)
    this.removed.set(node.writer.core.key, node.length)
    return node
  }

  shift () {
    if (!this.updated) return []

    const tails = this._indexerTails()

    for (const tail of tails) {
      if (this._isConfirmed(tail)) {
        return [this.remove(tail)]
      }
    }

    for (const merge of this.merges) {
      if (this._isConfirmed(merge)) {
        return this._yieldNext(merge, tails)
      }
    }

    this.updated = false
    return []
  }

  // yields next indexer node
  _yieldNext (node, tails) {
    // only stop when we find a tail
    while (!tails.has(node)) {
      let next = null

      // for merges check if one fork is confirmed
      for (const t of this._tailsAndMerges(node, tails)) {
        if (this._isConfirmed(t, node)) {
          next = t
          break
        }
      }

      if (next) {
        node = next
        continue
      }

      // otherwise yield all tails
      const tailSet = []
      for (const t of this._tails(node, tails)) {
        tailSet.push(this.remove(t))
      }

      return tailSet
    }

    return [this.remove(node)]
  }

  shouldAck (writer) {
    for (const t of this._indexerTails()) {
      if (t.writer === writer) continue
      if (this._shouldAckNode(t, writer)) return true
    }

    return false
  }

  _shouldAckNode (target, writer) {
    const head = writer.head()
    const next = target.clock.get(writer.core.key)
    const nextIndexNode = writer.get(next >= writer.indexed ? next : writer.indexed)

    // if we have no next node and we didn't write target then ack
    if (!nextIndexNode && writer !== target.writer) return true

    // shortcuts if we have next node
    if (nextIndexNode) {
      // if the next node does not see the target, should ack
      if (!nextIndexNode.clock.includes(target.writer.core.key, target.length)) {
        return !head.clock.includes(target.writer.core.key, target.length)
      }

      // if the next node is not strictly newer, no point acking
      if (!this._strictlyNewer(target, nextIndexNode)) return false
    }

    // now check if we can double confirm
    const acks = this._acks(target)

    // need enough to double confirm
    if (acks.length >= this.majority) {
      return this.confirms(writer, target, acks, writer.length) === UNSEEN
    }

    return false
  }
}

},{"./clock":86,"tiny-buffer-map":585}],88:[function(require,module,exports){
const b4a = require('b4a')
const safetyCatch = require('safety-catch')

// TODO: should really be expressable with a corestore

const LINGER_TIME = 30_000

module.exports = class CorePool {
  constructor () {
    this.pool = new Map()
  }

  linger (core) {
    const hex = b4a.toString(core.key, 'hex')
    if (this.pool.has(hex)) return

    const session = core.session()

    const wrap = {
      session,
      timeout: setTimeout(ontimeout, LINGER_TIME, this, session)
    }

    this.pool.set(hex, wrap)
  }

  get (key) {
    const hex = b4a.toString(key, 'hex')
    const wrap = this.pool.get(hex)
    if (!wrap) return null

    this.pool.delete(hex)
    clearTimeout(wrap.timeout)
    return wrap.session
  }

  clear () {
    const closing = []
    for (const { session, timeout } of this.pool.values()) {
      clearTimeout(timeout)
      closing.push(session.close())
    }
    this.pool.clear()
    return Promise.all(closing)
  }
}

function ontimeout (pool, core) {
  const hex = b4a.toString(core.key, 'hex')
  core.close().catch(safetyCatch)
  pool.pool.delete(hex)
}

},{"b4a":102,"safety-catch":486}],89:[function(require,module,exports){
const { EventEmitter } = require('events')
const ReadyResource = require('ready-resource')
const safetyCatch = require('safety-catch')
const c = require('compact-encoding')
const assert = require('nanoassert')
const b4a = require('b4a')
const WakeupExtension = require('./extension')
const Signer = require('./signer')
const { ViewRecord } = require('./messages')

const {
  SESSION_CLOSED,
  REQUEST_CANCELLED,
  BLOCK_NOT_AVAILABLE
} = require('hypercore/errors')

const BULK_SHIFT = 32

class Snapshot {
  constructor (source, update) {
    this.index = source._pendingSnapshots.push(this) - 1
    this.fork = 0
    this.length = 0
    this.byteLength = 0
    this.tipLength = 0
    this.tip = null
    this.source = source
    if (update) this.update()
  }

  clone () {
    const snap = new Snapshot(this.source, false)
    snap.fork = this.fork
    snap.length = this.length
    snap.byteLength = this.byteLength

    // detached clones should be detached
    if (this.index === -1) {
      snap.detach(this.tip, this.tipLength)
    }

    return snap
  }

  getIndexedLength () {
    const sharedLength = this.length - this.tipLength
    return Math.min(this.source.indexedLength, sharedLength)
  }

  getSignedLength () {
    const sharedLength = this.length - this.tipLength
    return Math.min(this.source.core.indexedLength, sharedLength)
  }

  getIndexedByteLength () {
    const sharedByteLength = this.tipLength === 0
      ? this.byteLength
      : this.tip[0].byteOffset

    return Math.min(this.source.indexedByteLength, sharedByteLength)
  }

  update () {
    if (this.index === -1) { // reattach
      this.index = this.source._pendingSnapshots.push(this) - 1
      this.tip = null
      this.tipLength = 0
    }
    this.fork = this.source.fork
    this.length = this.source.length
    this.byteLength = this.source.byteLength
  }

  clear () {
    if (this.index !== -1) this.detach(null, 0)
    this.source = null
  }

  detach (tip, length) {
    this.tip = tip
    this.tipLength = length
    if (this.index === -1) return
    const top = this.source._pendingSnapshots.pop()
    if (top !== this) this.source._pendingSnapshots[top.index = this.index] = top
    this.index = -1
  }
}

class AutocoreSession extends EventEmitter {
  constructor (source, snapshot, indexed, valueEncoding) {
    super()

    this.isAutobase = true

    this.closing = false
    this.closed = source.closed
    this.opened = false

    this.indexed = !snapshot && indexed === true

    this.writable = true // TODO: make this configurable

    this.activeRequests = []
    this.valueEncoding = valueEncoding || null
    this.globalCache = source.base.globalCache

    this._source = source
    this._index = source.sessions.push(this) - 1
    this._snapshot = snapshot

    this.ready().catch(safetyCatch)
  }

  get base () {
    return this._source.base
  }

  get id () {
    return this._source.id
  }

  get key () {
    return this._source.key
  }

  get snapshotted () {
    return this._snapshot !== null
  }

  get discoveryKey () {
    return this._source.discoveryKey
  }

  get fork () {
    return this._snapshot === null ? this._source.fork : this._snapshot.fork
  }

  get byteLength () {
    return this._snapshot === null ? this.indexed ? this.indexedByteLength : this._source.byteLength : this._snapshot.byteLength
  }

  get length () {
    return this._snapshot === null ? this.indexed ? this.indexedLength : this._source.length : this._snapshot.length
  }

  get indexedByteLength () {
    return this._snapshot === null ? this._source.indexedByteLength : this._snapshot.getIndexedByteLength()
  }

  get indexedLength () {
    return this._snapshot === null ? this._source.indexedLength : this._snapshot.getIndexedLength()
  }

  get signedLength () {
    return this._snapshot === null ? this._source.core.indexedLength : this._snapshot.getSignedLength()
  }

  get manifest () {
    return this._source.core ? this._source.core.manifest : null
  }

  getBackingCore () {
    return this._source.core ? this._source.core : null
  }

  async ready () {
    if (this.opened) return
    await this._source.ready()
    if (this.opened) return
    this.opened = true
    this.emit('ready')
  }

  async getUserData (name) {
    if (this.opened === false) await this.ready()
    if (this.closing === true) throw SESSION_CLOSED()

    return await this._source.getUserData(name)
  }

  async setUserData (name, value, opts) {
    if (this.opened === false) await this.ready()
    if (this.closing === true) throw SESSION_CLOSED()

    return await this._source.setUserData(name, value, opts)
  }

  snapshot ({ valueEncoding = this.valueEncoding } = {}) {
    if (this.closing === true) throw SESSION_CLOSED()

    return this._snapshot === null
      ? this._source.createSnapshot(valueEncoding)
      : this._source._createSession(this._snapshot.clone(), valueEncoding)
  }

  session ({ valueEncoding = this.valueEncoding, snapshot = this._snapshot !== false, indexed = this.indexed } = {}) {
    if (this.closing === true) throw SESSION_CLOSED()

    return snapshot
      ? this.snapshot({ valueEncoding })
      : this._source.createSession(valueEncoding, indexed)
  }

  async update (opts) {
    if (this.opened === false) await this.ready()
    if (this.closing === true) throw SESSION_CLOSED()

    if (opts && opts.wait) {
      await this._source.update(opts)
      if (this.closing === true) throw SESSION_CLOSED()
    }

    if (this._snapshot !== null) this._snapshot.update()
    return true
  }

  async seek (byteOffset, opts) {
    if (this.opened === false) await this.ready()
    if (this.closing === true) throw SESSION_CLOSED()

    if (byteOffset < this.indexedByteLength) {
      return this._source.seek(byteOffset, { activeRequests: this.activeRequests, ...opts })
    }

    const nodes = this._getNodes()
    const offset = nodes === this._source.nodes ? this._source._shifted : 0

    let start = offset
    let end = nodes === this._source.nodes ? nodes.length : this._snapshot.tipLength

    while (end - start > 1) {
      const mid = (start + end) >>> 1

      if (nodes[mid].byteOffset <= byteOffset) start = mid
      else end = mid
    }

    if (start >= end) return null

    const node = nodes[start]
    if (node.byteOffset + node.block.byteLength <= byteOffset) return null

    return [start - offset + this.indexedLength, byteOffset - node.byteOffset]
  }

  async get (index, opts) {
    if (this.opened === false) await this.ready()
    if (this.closing === true) throw SESSION_CLOSED()

    const onwait = autocoreOnWait.bind(this, opts && opts.onwait)

    opts = { activeRequests: this.activeRequests, valueEncoding: this.valueEncoding, ...opts, onwait }

    // check if we indexed this already
    if (index < this.indexedLength) {
      return this._source.get(index, opts)
    }

    // TODO: this should wait for the block to arrive if not a snap, per hypercore semantics...
    if (index >= this.length) {
      throw BLOCK_NOT_AVAILABLE()
    }

    const nodes = this._getNodes()

    if (nodes === this._source.nodes) {
      index -= this.indexedLength
      index += this._source._shifted
    } else {
      // nodes might have been indexed since we copied in the nodes, so calculate the indexedLength at that time
      index -= this._snapshot.length
      index += this._snapshot.tipLength
    }

    const blk = index >= 0 && index < nodes.length ? nodes[index].block : null
    const enc = (opts.valueEncoding && c.from(opts.valueEncoding)) || this.valueEncoding

    return enc ? c.decode(enc, blk) : blk
  }

  async truncate (newLength) {
    if (this.opened === false) await this.ready()

    throw new Error('Truncating an Autobased index explicitly is not currently supported')
  }

  async append (block) {
    if (this.opened === false) await this.ready()
    if (this.closing === true) throw SESSION_CLOSED()

    const blocks = Array.isArray(block) ? block : [block]
    const buffers = new Array(blocks.length)

    for (let i = 0; i < blocks.length; i++) {
      const blk = blocks[i]

      if (b4a.isBuffer(blk)) buffers[i] = blk
      else if (this.valueEncoding) buffers[i] = c.encode(this.valueEncoding, blk)
      else buffers[i] = b4a.from(blk)
    }

    return this._source._append(buffers)
  }

  async close () {
    this.closing = true
    if (this.opened === false) await this.ready()

    if (this.closed) return
    this.closed = true

    if (this._snapshot !== null) this._snapshot.clear()

    const top = this._source.sessions.pop()
    if (top !== this) this._source.sessions[top._index = this._index] = top

    const core = this.getBackingCore().session
    if (core.replicator) core.replicator.clearRequests(this.activeRequests)

    this.emit('close', false)
  }

  _getNodes () {
    return (this._snapshot === null || this._snapshot.tip === null) ? this._source.nodes : this._snapshot.tip
  }
}

module.exports = class Autocore extends ReadyResource {
  constructor (base, core, name, opts = {}) {
    super()

    // set in _open
    this.indexedLength = 0
    this.indexedByteLength = 0
    this.length = 0
    this.byteLength = 0

    this.fork = 0

    this.base = base
    this.name = name
    this.originalCore = core
    this.core = null
    this.wakeupExtension = null
    this.migrated = null

    this.opts = opts

    // managed by base
    this.appending = 0
    this.truncating = 0
    this.indexing = 0

    // managed by system
    this.systemIndex = -1
    this.checkpointer = 0

    this.sessions = []
    this.nodes = []

    this.signer = new Signer(base, this)

    this._shifted = 0
    this._pendingSnapshots = []
    this._lastCheckpoint = null

    this._queueFastForward = this.base.queueFastForward.bind(this.base)

    this.ready().catch(safetyCatch)
  }

  _isSystem () {
    return this.base.system.core._source === this
  }

  get id () {
    return this.originalCore.id
  }

  get key () {
    return this.originalCore.key
  }

  get discoveryKey () {
    return this.originalCore.discoveryKey
  }

  get latestKey () {
    return this.base._viewStore.deriveKey(this.name) || this.key
  }

  get pendingIndexedLength () {
    return this.indexedLength + this.indexing
  }

  _registerSystemCore () {
    this._registerWakeupExtension()
    this._registerFastForwardListener()
  }

  _registerWakeupExtension () {
    if (this.wakeupExtension && this.wakeupExtension.core === this.originalCore) return // no need to reset
    this.wakeupExtension = new WakeupExtension(this.base, this.originalCore)
  }

  _registerFastForwardListener () {
    this.originalCore.removeListener('append', this._queueFastForward)
    this.originalCore.on('append', this._queueFastForward)
  }

  async _ensureCore (key, length) {
    let swap = null

    if (!b4a.equals(this.originalCore.key, key)) {
      const encryptionKey = this.base._viewStore.getBlockKey(this.name)
      swap = this.base.store.get({ key, encryptionKey, isBlockKey: true, cache: !!this.originalCore.cache })
      await swap.ready()
    }

    const prevOriginalCore = this.originalCore
    this.originalCore = swap || this.originalCore

    // set handlers if we replaced core
    if (this._isSystem()) this._registerSystemCore()

    const core = this.originalCore.batch({ autoClose: false, session: true, checkout: length })
    await core.ready()

    // reset state
    if (this.core) await this._updateBatch(core)
    else this.core = core

    if (swap) await prevOriginalCore.close()

    await this._ensureUserData(this.core, false)
  }

  async reset (length) {
    let core = this.originalCore.batch({ clear: true, autoClose: false, session: true })
    await core.ready()
    if (core.length > length) {
      await core.close()
      core = this.originalCore.batch({ checkout: length, autoClose: false, session: true })
      await core.ready()
    }

    await this._updateBatch(core)
  }

  async _updateBatch (core) {
    const prevCore = this.core
    const length = this.length

    // detach all snaps
    for (let i = this._pendingSnapshots.length - 1; i >= 0; i--) {
      const snap = this._pendingSnapshots[i]
      const end = snap.length - this.indexedLength - this._shifted
      snap.detach(this.nodes, end)
    }

    this.core = core
    this.nodes = []
    this._shifted = 0

    this.indexing = 0
    this.appending = 0
    this.truncating = 0

    this._updateCoreState()

    if (this.length > length) this._emitAppend()

    await prevCore.close()
  }

  _updateCoreState () {
    this.length = this.core.length
    this.byteLength = this.core.byteLength
    this.indexedLength = this.core.length
    this.indexedByteLength = this.core.byteLength
  }

  async _open () {
    await Promise.resolve() // wait a tick so this doesn't run sync in the constructor...
    await this.base._presystem

    await this.originalCore.ready()

    if (this.base.encryptionKey && !this.originalCore.encryption) {
      await this.originalCore.setEncryptionKey(this.base._viewStore.getBlockKey(this.name), { isBlockKey: true })
    }

    const sys = this.base.system.opened ? this.base.system : this.base._initialSystem

    if (sys) {
      await sys.ready()

      for (let i = 0; i < this.base._initialViews.length; i++) {
        const { name, key, length } = this.base._initialViews[i]
        if (name !== this.name) continue

        this.systemIndex = i - 1
        await this._ensureCore(key, length)
        break
      }
    }

    // register handlers if needed
    if (this._isSystem()) this._registerSystemCore()

    if (!this.core) {
      this.core = this.originalCore.batch({ autoClose: false, session: true, checkout: 0 })
      await this.core.ready()
    }

    await this._ensureUserData(this.originalCore, false)

    this._updateCoreState()

    for (const snap of this._pendingSnapshots) snap.update()

    if (this.signer !== null) this.signer.open()
  }

  _close () {
    return this.core.close()
  }

  async _ensureUserData (core, force) {
    await core.setUserData('referrer', this.base.key)

    const buf = await core.getUserData('autobase/view')
    const record = (buf !== null && buf[0] === 0) ? c.decode(ViewRecord, buf) : { name: null, migrated: null, audits: 1 }

    if (record.audits === 0) {
      // old core, audit it real quick
      const corrections = await core.core.audit()
      if (corrections.blocks || corrections.tree) debugWarn('view', core.id, 'auto corrected itself', corrections)
    }

    const prev = (!force && record.name) ? record : null
    if (prev && !this.migrated) this.migrated = prev.migrated

    await core.setUserData('autobase/view', c.encode(ViewRecord, { name: this.name, migrated: prev ? prev.migrated : this.migrated, audits: 1 }))
  }

  createSession (valueEncoding, indexed) {
    return this._createSession(null, valueEncoding, indexed)
  }

  createSnapshot (valueEncoding) {
    return this._createSession(new Snapshot(this, this.opened), valueEncoding)
  }

  _createSession (snapshot, valueEncoding, indexed) {
    return new AutocoreSession(this, snapshot, indexed, valueEncoding ? c.from(valueEncoding) : null)
  }

  async seek (bytes, opts) {
    const core = this.core

    while (true) {
      try {
        return await core.seek(bytes, opts)
      } catch (err) {
        if (err.code === 'REQUEST_CANCELLED' || this.base.closing || core === this.core) throw err
        // retry
      }
    }
  }

  async get (index, opts) {
    const core = this.core

    while (true) {
      try {
        return await core.get(index, opts)
      } catch (err) {
        if (err.code === 'REQUEST_CANCELLED' || this.base.closing || core === this.core) throw err
        // retry
      }
    }
  }

  async setUserData (name, val, opts) {
    const core = this.core

    while (true) {
      try {
        return await core.setUserData(name, val, opts)
      } catch (err) {
        if (this.base.closing || core === this.core) throw err
        // retry
      }
    }
  }

  async getUserData (name) {
    const core = this.core

    while (true) {
      try {
        return await core.getUserData(name)
      } catch (err) {
        if (this.base.closing || core === this.core) throw err
        // retry
      }
    }
  }

  truncate (newLength) {
    this._truncateAndDetach(newLength)
    this.fork++

    for (const session of this.sessions) {
      if (session.snapshotted === false) session.emit('truncate', newLength, this.fork)
    }
  }

  async checkpoint () {
    return {
      checkpointer: this.indexing === 0 ? this.checkpointer : 0,
      checkpoint: (this.checkpointer && this.indexing === 0) ? null : await this._checkpoint()
    }
  }

  async _checkpoint () {
    if (!this._lastCheckpoint || this._lastCheckpoint.length < this.pendingIndexedLength) {
      await this._updateCheckpoint()
    }

    return this._lastCheckpoint
  }

  async _updateCheckpoint (migrated) {
    const blocks = this.indexBatch(0, this.indexing)
    const batch = await this.core.restoreBatch(this.pendingIndexedLength, { blocks, clone: false })

    const signable = batch.signable(this.core.key)
    const signature = this.base.local.core.crypto.sign(signable, this.base.local.keyPair.secretKey)

    // todo: signer should sign
    this._lastCheckpoint = {
      signature,
      length: batch.length
    }
  }

  update (opts) {
    if (this._isSystem()) return
    return this.base.update(opts)
  }

  indexBatch (start, end) {
    if (start >= end) return []
    const blocks = new Array(end - start)
    for (let i = 0; i < blocks.length; i++) {
      blocks[i] = this.nodes[this._shifted + start + i].block
    }
    return blocks
  }

  // called by autobase
  _onindex (added) {
    const head = this.nodes[this._shifted + added - 1]

    this.indexedLength += added
    this.indexedByteLength = head.byteOffset + head.block.byteLength

    this._shifted += added
    if (this._shifted >= BULK_SHIFT || this._shifted === this.nodes.length) this._gc()

    this.checkpointer = 0

    this._emitIndexedAppend()
  }

  // called by autobase
  _onundo (removed) {
    if (!removed) return
    const newLength = this.length - removed
    this.truncate(newLength)
  }

  _append (batch) {
    for (let i = 0; i < batch.length; i++) {
      const block = batch[i]
      this.nodes.push({ byteOffset: this.byteLength, block })
      this.byteLength += block.byteLength
    }

    this.length += batch.length
    this.base._onviewappend(this, batch.length)
    this._emitAppend()
  }

  _emitAppend () {
    for (const session of this.sessions) {
      if (session.snapshotted === false && session.indexed === false) session.emit('append')
    }
  }

  _emitIndexedAppend () {
    for (const session of this.sessions) {
      if (session.indexed) session.emit('append')
    }
  }

  isBootstrapped () {
    return !!(this.core && this.core.manifest && this.core.manifest.signers.length > 0)
  }

  async bootstrap () {
    if (this.isBootstrapped()) return true

    if (this.base.linearizer.indexers.length === 0) return false

    const [bootstrap] = this.base.linearizer.indexers
    if (!bootstrap.core.manifest) return false

    await this.migrateTo([bootstrap], 0)

    this.base.queueFastForward()
    return true
  }

  _shouldFlush () {
    if (this.indexing > 0) return true
    if (this.core.session.opened && this.core.indexedLength === this.core.length) return false
    return true
  }

  async flush () {
    if (!this.core.opened) await this.core.ready()

    if (!this.isBootstrapped() && !(await this.bootstrap())) {
      return false
    }

    if (!this._shouldFlush()) return true

    if (this.indexing) {
      const batch = this.indexBatch(0, this.indexing)
      await this.core.append(batch)
    }

    return this._flush()
  }

  async _flush () {
    let flushed = this.core.flushedLength === this.core.length

    const maxLength = this.core.length
    if (maxLength === 0) return flushed

    const maxFlushedLength = Math.min(maxLength, this.core.length)

    if (maxFlushedLength > this.core.indexedLength && this.core.flushedLength < this.core.length) {
      flushed = false
    }

    const indexers = this.base._viewStore._indexers
    const signableLength = await this.signer.getSignableLength(indexers)

    // current core can only flush up to first pending migrate
    const maxSignedlength = Math.min(maxLength, signableLength)

    if (maxSignedlength > this.core.indexedLength) {
      const signature = await this.signer.sign(indexers, maxSignedlength)
      if (!(await this.core.flush({ length: maxSignedlength, signature }))) return false
      flushed = true
    }

    return flushed
  }

  async getPrologue (length) {
    if (!length) return null

    const blocks = this.indexBatch(0, length - this.indexedLength)
    const batch = await this.core.restoreBatch(length, { blocks, clone: false })

    return { hash: batch.hash(), length }
  }

  async deriveKey (indexers, length) {
    const prologue = await this.getPrologue(length)
    return this.base.deriveKey(this.name, indexers, prologue)
  }

  async migrateTo (indexers, length) {
    if (!this.opened) await this.ready()

    const core = await this.base._viewStore.getCore(this, indexers, length, this.opts)
    await core.ready()

    // clone state from previous core
    const batch = await this._migrateCurrentCore(core, length, indexers)

    const old = this.core
    const oldOriginal = this.originalCore

    this.originalCore = core
    this.core = batch

    await old.close()
    await oldOriginal.close()

    if (this._isSystem()) this._registerSystemCore()

    for (const session of this.sessions) {
      if (!session.snapshotted) session.emit('migrate')
    }
  }

  async _migrateCurrentCore (next, length, indexers) {
    if (length > 0) {
      const sourceLength = this.core.indexedLength

      // copy state over
      const additional = []
      for (let i = sourceLength; i < length; i++) {
        additional.push(await this.core.get(i, { raw: true }))
      }

      if (this.core.session.core !== next.core) {
        await next.core.copyPrologue(this.core.session.core, { additional })
      }
    }

    // force update as we might have copied to old migrated pointer userdata
    this.migrated = this.core.key
    await this._ensureUserData(next, true)

    // todo: should core always be flushed to length?
    const batch = next.batch({ autoClose: false, session: true, checkout: length })
    await batch.ready()

    // handle remaining state
    if (batch.length < this.core.length) {
      const blocks = []
      while (batch.length + blocks.length < this.core.length) {
        blocks.push(await this.core.get(batch.length + blocks.length))
      }
      await batch.append(blocks)
    }

    return batch
  }

  async catchup ({ key, length, systemIndex }) {
    if (!this.opened) await this.ready()
    await this._ensureCore(key, length)
    if (systemIndex !== -1) this.systemIndex = systemIndex
  }

  _gc () {
    if (this._shifted === 0) return
    this.nodes = this.nodes.slice(this._shifted)
    this._shifted = 0
  }

  _truncateAndDetach (sharedLength) {
    assert(this.indexedLength <= sharedLength && sharedLength <= this.length, 'Invalid truncation')

    // if same len, nothing to do...
    if (sharedLength === this.length) return
    if (sharedLength === 0) this.base._viewStore._unindex(this)

    let maxSnap = 0
    for (const snap of this._pendingSnapshots) {
      if (snap.length > sharedLength && maxSnap < snap.length) {
        maxSnap = snap.length
      }
    }

    if (maxSnap <= sharedLength) {
      while (this.length > sharedLength) {
        const { block } = this.nodes.pop()
        this.length--
        this.byteLength -= block.byteLength
      }
      return
    }

    this._gc()

    for (let i = this._pendingSnapshots.length - 1; i >= 0; i--) {
      const snap = this._pendingSnapshots[i]
      const end = snap.length - this.indexedLength - this._shifted
      if (snap.length > sharedLength) snap.detach(this.nodes, end)
    }

    const firstRemovedIndex = sharedLength - this.indexedLength
    const firstRemoved = this.nodes[firstRemovedIndex]

    this.nodes = this.nodes.slice(0, firstRemovedIndex)
    this.length = sharedLength
    this.byteLength = firstRemoved.byteOffset
  }
}

function debugWarn (...msg) { // calls to this are ONLY allowed for soft assertions
  console.log('[autobase]', ...msg)
}

function autocoreOnWait (fn, index, core) {
  if (this.closing) throw REQUEST_CANCELLED()
  if (fn) return fn(index, this)
}

},{"./extension":90,"./messages":92,"./signer":94,"b4a":102,"compact-encoding":178,"events":258,"hypercore/errors":308,"nanoassert":390,"ready-resource":480,"safety-catch":486}],90:[function(require,module,exports){
const c = require('compact-encoding')
const b4a = require('b4a')
const { Wakeup } = require('./messages')

const VERSION = 1

module.exports = class WakeupExtension {
  constructor (base, core, passive) {
    this.base = base
    this.core = core

    this.extension = this.core.registerExtension('autobase', {
      onmessage: this._onmessage.bind(this)
    })

    const req = c.encode(Wakeup, { type: 0 })

    this.core.on('peer-add', (peer) => {
      this.extension.send(req, peer)
    })

    if (!passive) {
      for (const peer of this.core.peers) {
        this.extension.send(req, peer)
      }
    }
  }

  sendWakeup (key, target) {
    const m = this._encodeWakeup(VERSION)
    if (!m) return

    for (const peer of this.core.peers) {
      if (b4a.equals(peer.remotePublicKey, key)) {
        this.extension.send(m, peer)
        break
      }
    }
  }

  requestWakeup () {
    this.extension.broadcast(c.encode(Wakeup, { type: 0 }))
  }

  broadcastWakeup () {
    const m = this._encodeWakeup(VERSION)
    if (m) this.extension.broadcast(m)
  }

  _encodeWakeup (version) {
    const writers = []

    for (const w of this.base.activeWriters) {
      if (w.isActiveIndexer || w.flushed()) continue
      writers.push({ key: w.core.key, length: w.length })
    }

    if (!writers.length) return null

    return c.encode(Wakeup, { version, type: 1, writers })
  }

  _onmessage (buf, from) {
    if (!buf) return

    let value = null
    try {
      value = c.decode(Wakeup, buf)
    } catch {
      return
    }

    if (value.type === 0) {
      const m = this._encodeWakeup(value.version)
      if (m) this.extension.send(m, from)
      return
    }

    this.base.hintWakeup(value.writers)
  }
}

},{"./messages":92,"b4a":102,"compact-encoding":178}],91:[function(require,module,exports){
const b4a = require('b4a')
const assert = require('nanoassert')

const Clock = require('./clock')
const Consensus = require('./consensus')
const Topolist = require('./topolist')

class Node {
  constructor (writer, length, value, heads, batch, dependencies, version) {
    this.writer = writer
    this.length = length
    this.value = value
    this.heads = heads
    this.actualHeads = heads.slice(0) // TODO: we should remove this and just not mutate heads...

    this.dependents = new Set()
    this.dependencies = dependencies

    this.version = version

    this.batch = batch

    this.clock = new Clock()

    this.yielded = false
    this.yielding = false
  }

  clear () {
    this.clock = null
    this.dependencies = null
    this.dependents = null
    return this
  }

  reset () {
    this.yielded = false
    this.yielding = false
    for (const dep of this.dependents) dep.dependencies.add(this)
    this.dependents.clear()
  }

  active () {
    for (const dep of this.dependencies) {
      if (dep.yielded) {
        this.dependencies.delete(dep) // nodes might be yielded during buffering
      } else {
        dep.dependents.add(this)
        this.clock.add(dep.clock)
      }
    }

    if (this.writer.isActiveIndexer) this.clock.set(this.writer.core.key, this.length)
  }

  tieBreak (node) {
    return tieBreak(this, node)
  }

  hasDependency (dep) {
    for (const h of this.actualHeads) {
      if (sameNode(h, dep)) return true
    }
    return false
  }

  get ref () {
    return this.writer.core.key.toString('hex').slice(0, 2) + ':' + this.length
  }
}

module.exports = class Linearizer {
  constructor (indexers, { heads = [], writers = new Map() } = {}) {
    this.heads = new Set()
    this.tails = new Set()
    this.tip = new Topolist()
    this.size = 0 // useful for debugging
    this.updated = false
    this.indexersUpdated = false
    this.writers = writers

    this.consensus = new Consensus(indexers)
    this._initialHeads = heads.slice(0)
    this._strictlyAdded = null

    for (const { key, length } of heads) {
      this.consensus.removed.set(key, length)
    }
  }

  get indexers () {
    return this.consensus.indexers
  }

  static createNode (writer, length, value, heads, batch, dependencies, version) {
    return new Node(writer, length, value, heads, batch, dependencies, version)
  }

  // returns the global links of the dag, use this to link against the current state of the dag
  // TODO: rename to heads() and move the sets to _ props
  getHeads () {
    const heads = this._initialHeads.slice(0)
    for (const node of this.heads) heads.push({ key: node.writer.core.key, length: node.length })
    return heads
  }

  // TODO: might contain dups atm, nbd for how we use it, returns an array of writers you can "pull"
  // to get the full dag view at any time
  getBootstrapWriters () {
    const writers = []

    for (const head of this.heads) writers.push(head.writer)
    for (let i = 0; i < this.consensus.indexers.length; i++) writers.push(this.consensus.indexers[i])

    return writers
  }

  addHead (node) {
    node.active()

    // 99.99% of the time _initialHeads is empty...
    if (this._initialHeads.length > 0) this._updateInitialHeads(node)

    if (!node.dependencies.size) {
      this.tails.add(node)
    }

    for (const head of this.heads) {
      if (node.hasDependency(head)) {
        this.heads.delete(head)
      }
    }

    this.tip.add(node)
    if (node.writer.isActiveIndexer) this.consensus.addHead(node)

    this.size++
    this.heads.add(node)

    this.updated = true

    return node
  }

  update () {
    if (!this.updated) return null
    this.updated = false

    // get the indexed nodes
    const indexed = []
    while (true) {
      const nodes = this.consensus.shift()
      if (!nodes.length) break

      this._yield(nodes, indexed)
    }

    return this.tip.flush(indexed)
  }

  _updateInitialHeads (node) {
    for (const head of node.actualHeads) {
      for (let i = 0; i < this._initialHeads.length; i++) {
        const { key, length } = this._initialHeads[i]
        if (length !== head.length || !b4a.equals(key, head.key)) continue
        this._initialHeads.splice(i--, 1)
      }
    }
  }

  /* Ack methods */

  shouldAck (writer, pending = false) {
    if (!writer || !writer.isActiveIndexer) return false

    // all indexers have to flushed to the dag before we ack as a quick "debounce"
    for (const w of this.indexers) {
      if (w.length !== w.available) return false
    }

    let isHead = false

    // if ANY head is not an indexer ack
    for (const head of this.heads) {
      if (!head.writer.isActiveIndexer) return true
      if (head.writer === writer) isHead = true
    }

    if (this.heads.size === 1 && isHead) {
      return false // never self-ack!
    }

    const visited = new Set()

    // check if there is non-null value
    let valueCheck = false

    for (const tail of this.tails) {
      if (pending || this._nonNull(tail, visited)) {
        valueCheck = true
        break
      }
    }

    if (!valueCheck) return false

    if (this.consensus.shouldAck(writer)) return true

    return this._shouldAckHeads(writer, pending)
  }

  // check if there is any value above this node
  _nonNull (target, visited) {
    const stack = [target]

    while (stack.length) {
      const node = stack.pop()

      if (visited.has(node)) continue
      if (node.value !== null) return true

      visited.add(node)

      for (const dep of node.dependents) {
        stack.push(dep)
      }
    }

    return false
  }

  // ack if any head is closer to confirming a value
  _shouldAckHeads (writer, pending) {
    const prev = writer.head()

    for (const head of this.heads) {
      // only check other writers heads
      if (head.writer === writer) continue

      const stack = [head]
      const visited = new Set()

      while (stack.length) {
        const node = stack.pop()

        if (visited.has(node)) continue
        visited.add(node)

        if (pending || node.value !== null) {
          const acks = this.consensus.acksFromNode(node, head)
          const prevAcks = this.consensus.acksFromNode(node, prev)

          // head sees more acks
          if (acks.size > prevAcks.size) return true

          for (const idx of acks) {
            // head sees acks that writer does not
            if (!prevAcks.has(idx)) return true
          }

          // both seen, no point going any further down
          if (prevAcks.size && acks.size) continue
        }

        stack.push(...node.dependencies)
      }
    }

    return false
  }

  /* Full DAG methods */

  _yield (nodes, indexed = []) {
    const offset = indexed.length
    const tails = []

    // determine which nodes are yielded
    while (nodes.length) {
      const node = nodes.pop()

      if (node.yielding) continue
      node.yielding = true

      if (!node.dependencies.size) tails.push(node)

      nodes.push(...node.dependencies)
    }

    while (tails.length) {
      let tail = tails.pop()

      for (tail of this._removeBatch(tail)) {
        Topolist.add(tail, indexed, offset)
      }

      for (const dep of tail.dependents) {
        if (!dep.dependencies.size && dep.yielding) tails.push(dep)
      }
    }

    return indexed
  }

  _isTail (node) {
    // a tail has no unyielded dependencies
    for (const dep of node.dependencies) {
      if (!dep.yielded) return false
    }

    return true
  }

  _removeNode (node) {
    this.tails.delete(node)
    this.heads.delete(node)
    this.consensus.remove(node)

    // update the tailset
    for (const d of node.dependents) {
      d.dependencies.delete(node)
      if (this._isTail(d)) this.tails.add(d)
    }

    node.yielded = true
    this.size--

    if (this.heads.size === 0) {
      // in case of a single writer the dag might drain immediately...
      this._initialHeads.push({ key: node.writer.core.key, length: node.length })
    }

    return node
  }

  _removeBatch (node) {
    const batch = [this._removeNode(node)]

    while (node.batch !== 1) { // its a batch!
      if (node.dependents.size === 0) { // bad batch node, auto correct
        const next = node.writer.get(node.length)
        if (next && next.batch === node.batch - 1) node.dependents.add(next)
      }

      assert(node.dependents.size === 1, 'Batch is linked partially, which is not allowed')

      node = getFirst(node.dependents)
      batch.push(this._removeNode(node))
    }

    return batch
  }
}

function tieBreak (a, b) {
  return Topolist.compare(a, b) < 0 // lowest key wis
}

function getFirst (set) {
  return set[Symbol.iterator]().next().value
}

function sameNode (a, b) {
  return b4a.equals(a.key, b.writer.core.key) && a.length === b.length
}

},{"./clock":86,"./consensus":87,"./topolist":98,"b4a":102,"nanoassert":390}],92:[function(require,module,exports){
const c = require('compact-encoding')
const assert = require('nanoassert')

const Checkout = {
  preencode (state, m) {
    c.fixed32.preencode(state, m.key)
    c.uint.preencode(state, m.length)
  },
  encode (state, m) {
    c.fixed32.encode(state, m.key)
    c.uint.encode(state, m.length)
  },
  decode (state) {
    return {
      key: c.fixed32.decode(state),
      length: c.uint.decode(state)
    }
  }
}

const Clock = c.array(Checkout)

const IndexCheckpoint = {
  preencode (state, m) {
    c.fixed64.preencode(state, m.signature)
    c.uint.preencode(state, m.length)
  },
  encode (state, m) {
    c.fixed64.encode(state, m.signature)
    c.uint.encode(state, m.length)
  },
  decode (state) {
    return {
      signature: c.fixed64.decode(state),
      length: c.uint.decode(state)
    }
  }
}

const KeyV0 = {
  preencode (state, m) {
    c.fixed32.preencode(state, m.key)
  },
  encode (state, m) {
    c.fixed32.encode(state, m.key)
  },
  decode (state) {
    return {
      key: c.fixed32.decode(state),
      length: -1
    }
  }
}

const KeysV0 = c.array(KeyV0)

const WakeupV0 = {
  preencode (state, m) {
    c.uint.preencode(state, 0) // version
    c.uint.preencode(state, m.type)

    if (m.type === 1) {
      KeysV0.preencode(state, m.writers)
    }
  },
  encode (state, m) {
    c.uint.encode(state, 0) // version
    c.uint.encode(state, m.type)

    if (m.type === 1) {
      KeysV0.encode(state, m.writers)
    }
  },
  decode (state) {
    const v = c.uint.decode(state)
    if (v !== 0) throw new Error('Unsupported version: ' + v)

    const type = c.uint.decode(state)
    const m = { version: 0, type, writers: null }

    if (m.type === 1) {
      m.writers = KeysV0.decode(state)
    }

    return m
  }
}

const Wakeup = {
  preencode (state, m) {
    if (m.version === 0) return WakeupV0.preencode(state, m)

    c.uint.preencode(state, 1) // version
    c.uint.preencode(state, m.type)

    if (m.type === 1) {
      Clock.preencode(state, m.writers)
    }
  },
  encode (state, m) {
    if (m.version === 0) return WakeupV0.encode(state, m)

    c.uint.encode(state, 1) // version
    c.uint.encode(state, m.type)

    if (m.type === 1) {
      Clock.encode(state, m.writers)
    }
  },
  decode (state) {
    const start = state.start
    const v = c.uint.decode(state)

    if (v > 1) throw new Error('Unsupported version: ' + v)

    if (v === 0) {
      state.start = start
      return WakeupV0.decode(state)
    }

    const type = c.uint.decode(state)
    const m = { version: 1, type, writers: null }

    if (m.type === 1) {
      m.writers = Clock.decode(state)
    }

    return m
  }
}

const Views = c.array(c.string)

const BootRecord = {
  preencode (state, m) {
    c.uint.preencode(state, 0) // version
    Checkout.preencode(state, m.indexed)
    Clock.preencode(state, m.heads)
    Views.preencode(state, m.views)
  },
  encode (state, m) {
    c.uint.encode(state, 0) // version
    Checkout.encode(state, m.indexed)
    Clock.encode(state, m.heads)
    Views.encode(state, m.views)
  },
  decode (state) {
    const v = c.uint.decode(state)
    assert(v === 0, 'Unsupported version: ' + v)

    return {
      indexed: Checkout.decode(state),
      heads: Clock.decode(state),
      views: Views.decode(state)
    }
  }
}

const ViewRecord = {
  preencode (state, m) {
    c.uint.preencode(state, 0) // version
    c.string.preencode(state, m.name)
    c.uint.preencode(state, (m.migrated ? 1 : 0) | (m.audits ? 2 : 0))
    if (m.migrated) c.fixed32.preencode(state, m.migrated)
    if (m.audits) c.uint.preencode(state, m.audits)
  },
  encode (state, m) {
    c.uint.encode(state, 0) // version
    c.string.encode(state, m.name)
    c.uint.encode(state, (m.migrated ? 1 : 0) | (m.audits ? 2 : 0))
    if (m.migrated) c.fixed32.encode(state, m.migrated)
    if (m.audits) c.uint.encode(state, m.audits)
  },
  decode (state) {
    const v = c.uint.decode(state)
    assert(v === 0, 'Unsupported version: ' + v)

    const name = c.string.decode(state)
    const flags = c.uint.decode(state)
    const migrated = (flags & 1) ? c.fixed32.decode(state) : null
    const audits = (flags & 2) ? c.uint.decode(state) : 0

    return {
      name,
      migrated,
      audits
    }
  }
}

const Checkpoint = c.array({
  preencode (state, idx) {
    c.uint.preencode(state, idx.checkpointer)
    if (idx.checkpoint !== null) IndexCheckpoint.preencode(state, idx.checkpoint)
  },
  encode (state, idx) {
    c.uint.encode(state, idx.checkpointer)
    if (idx.checkpoint !== null) IndexCheckpoint.encode(state, idx.checkpoint)
  },
  decode (state) {
    const checkpointer = c.uint.decode(state)
    const checkpoint = checkpointer ? null : IndexCheckpoint.decode(state)

    return {
      checkpointer,
      checkpoint
    }
  }
})

const Indexer = {
  preencode (state, m) {
    c.uint.preencode(state, m.signature)
    c.fixed32.preencode(state, m.namespace)
    c.fixed32.preencode(state, m.publicKey)
  },
  encode (state, m) {
    c.uint.encode(state, m.signature)
    c.fixed32.encode(state, m.namespace)
    c.fixed32.encode(state, m.publicKey)
  },
  decode (state) {
    return {
      signature: c.uint.decode(state),
      namespace: c.fixed32.decode(state),
      publicKey: c.fixed32.decode(state)
    }
  }
}

const Indexers = c.array(Indexer)

const DigestV0 = {
  preencode (state, m) {
    c.uint.preencode(state, m.pointer)
    if (m.pointer === 0) {
      Indexers.preencode(state, m.indexers)
    }
  },
  encode (state, m) {
    c.uint.encode(state, m.pointer)
    if (m.pointer === 0) {
      Indexers.encode(state, m.indexers)
    }
  },
  decode (state) {
    const pointer = c.uint.decode(state)
    return {
      pointer,
      indexers: pointer === 0 ? Indexers.decode(state) : null
    }
  }
}

const Digest = {
  preencode (state, m) {
    c.uint.preencode(state, m.pointer)
    if (m.pointer === 0) {
      c.fixed32.preencode(state, m.key)
    }
  },
  encode (state, m) {
    c.uint.encode(state, m.pointer)
    if (m.pointer === 0) {
      c.fixed32.encode(state, m.key)
    }
  },
  decode (state) {
    const pointer = c.uint.decode(state)
    return {
      pointer,
      key: pointer === 0 ? c.fixed32.decode(state) : null
    }
  }
}

const Node = {
  preencode (state, m) {
    Clock.preencode(state, m.heads)
    c.uint.preencode(state, m.batch)
    c.buffer.preencode(state, m.value)
  },
  encode (state, m) {
    Clock.encode(state, m.heads)
    c.uint.encode(state, m.batch)
    c.buffer.encode(state, m.value)
  },
  decode (state, m) {
    return {
      heads: Clock.decode(state),
      batch: c.uint.decode(state),
      value: c.buffer.decode(state)
    }
  }
}

const Additional = {
  preencode (state, m) {
    c.uint.preencode(state, m.pointer)
    if (m.pointer === 0) {
      AdditionalData.preencode(state, m.data)
    }
  },
  encode (state, m) {
    c.uint.encode(state, m.pointer)
    if (m.pointer === 0) {
      AdditionalData.encode(state, m.data)
    }
  },
  decode (state) {
    const pointer = c.uint.decode(state)
    return {
      pointer,
      data: pointer === 0 ? AdditionalData.decode(state) : null
    }
  }
}

const AdditionalData = {
  preencode (state, m) {
    c.uint.preencode(state, 0)
  },
  encode (state, m) {
    c.uint.encode(state, 0) // empty for now, for the future
  },
  decode (state) {
    const flags = c.uint.decode(state)
    return {
      encryptionId: flags & 1 ? c.fixed32.decode(state) : null, // to help validate the encryption key used
      abi: flags & 2 ? c.uint.decode(state) : 0
    }
  }
}

const OplogMessage = {
  preencode (state, m) {
    c.uint.preencode(state, m.version)
    c.uint.preencode(state, m.maxSupportedVersion)

    const isCheckpointer = m.digest !== null && m.checkpoint !== null

    let flags = 0
    if (isCheckpointer) flags |= 1

    c.uint.preencode(state, flags)

    if (isCheckpointer) {
      Checkpoint.preencode(state, m.checkpoint)
      Digest.preencode(state, m.digest)
    }

    Node.preencode(state, m.node)
  },
  encode (state, m) {
    c.uint.encode(state, m.version)
    c.uint.encode(state, m.maxSupportedVersion)

    const isCheckpointer = m.digest !== null && m.checkpoint !== null

    let flags = 0
    if (isCheckpointer) flags |= 1

    c.uint.encode(state, flags)

    if (isCheckpointer) {
      Checkpoint.encode(state, m.checkpoint)
      Digest.encode(state, m.digest)
    }

    Node.encode(state, m.node)
  },
  decode (state) {
    const version = c.uint.decode(state)

    if (version === 0) {
      const m = OplogMessageV0.decode(state)

      return {
        version,
        maxSupportedVersion: m.maxSupportedVersion,
        digest: null,
        checkpoint: m.checkpoint,
        node: m.node
      }
    }

    const maxSupportedVersion = c.uint.decode(state)

    const flags = c.uint.decode(state)

    const isCheckpointer = (flags & 1) !== 0

    const checkpoint = isCheckpointer ? Checkpoint.decode(state) : null
    const digest = isCheckpointer ? Digest.decode(state) : null

    const node = Node.decode(state)

    return {
      version,
      maxSupportedVersion,
      digest,
      checkpoint,
      node
    }
  }
}

const OplogMessageV0 = {
  preencode (state, m) {
    const isCheckpointer = m.digest !== null && m.checkpoint !== null
    c.uint.preencode(state, isCheckpointer ? 1 : 0)

    if (isCheckpointer) {
      DigestV0.preencode(state, m.digest)
      Checkpoint.preencode(state, m.checkpoint)
    }

    Node.preencode(state, m.node)

    Additional.preencode(state, m.additional) // at the btm so it can be edited
    c.uint.preencode(state, m.maxSupportedVersion)
  },
  encode (state, m) {
    c.uint.encode(state, m.version)

    const isCheckpointer = m.digest !== null && m.checkpoint !== null
    c.uint.encode(state, isCheckpointer ? 1 : 0)

    if (isCheckpointer) {
      DigestV0.encode(state, m.digest)
      Checkpoint.encode(state, m.checkpoint)
    }

    Node.encode(state, m.node)

    Additional.encode(state, m.additional)
    c.uint.encode(state, m.maxSupportedVersion)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    const isCheckpointer = (flags & 1) !== 0

    const digest = isCheckpointer ? DigestV0.decode(state) : null
    const checkpoint = isCheckpointer ? Checkpoint.decode(state) : null
    const node = Node.decode(state)
    const additional = Additional.decode(state)
    const maxSupportedVersion = state.start < state.end ? c.uint.decode(state) : 0

    return {
      version: 0,
      digest,
      checkpoint,
      node,
      additional,
      maxSupportedVersion
    }
  }
}

const PendingIndexers = c.array(c.fixed32)

const Info = {
  preencode (state, m) {
    c.uint.preencode(state, m.version)
    c.uint.preencode(state, m.members)
    PendingIndexers.preencode(state, m.pendingIndexers)
    Clock.preencode(state, m.indexers)
    Clock.preencode(state, m.heads)
    Clock.preencode(state, m.views)
  },
  encode (state, m) {
    c.uint.encode(state, m.version)
    c.uint.encode(state, m.members)
    PendingIndexers.encode(state, m.pendingIndexers)
    Clock.encode(state, m.indexers)
    Clock.encode(state, m.heads)
    Clock.encode(state, m.views)
  },
  decode (state) {
    return {
      version: c.uint.decode(state),
      members: c.uint.decode(state),
      pendingIndexers: PendingIndexers.decode(state),
      indexers: Clock.decode(state),
      heads: Clock.decode(state),
      views: Clock.decode(state)
    }
  }
}

const Member = {
  preencode (state, m) {
    state.end++ // flags
    c.uint.preencode(state, m.length)
  },
  encode (state, m) {
    c.uint.encode(state, (m.isIndexer ? 1 : 0) | (m.isRemoved ? 2 : 0))
    c.uint.encode(state, m.length)
  },
  decode (state) {
    const flags = c.uint.decode(state)
    return {
      isIndexer: (flags & 1) !== 0,
      isRemoved: (flags & 2) !== 0,
      length: c.uint.decode(state)
    }
  }
}

module.exports = {
  Wakeup,
  Clock,
  Checkout,
  BootRecord,
  ViewRecord,
  OplogMessage,
  Checkpoint,
  Info,
  Member
}

},{"compact-encoding":178,"nanoassert":390}],93:[function(require,module,exports){
const DEFAULT_SIZE = 32

module.exports = class NodeBuffer {
  constructor (offset, hwm) {
    this.hwm = hwm || DEFAULT_SIZE
    this.defaultHwm = this.hwm
    this.mask = this.hwm - 1
    this.top = 0
    this.btm = 0
    this.buffer = new Array(this.hwm)
    this.offset = offset || 0
    this.length = this.offset
  }

  get size () {
    return this.length - this.offset
  }

  isEmpty () {
    return this.length === this.offset
  }

  isFull () {
    return this.size === this.buffer.length
  }

  grow () {
    this.hwm <<= 1

    const size = this.size
    const buffer = new Array(this.hwm)
    const mask = this.hwm - 1

    for (let i = 0; i < size; i++) {
      buffer[i] = this.buffer[(this.btm + i) & this.mask]
    }

    this.mask = mask
    this.top = size
    this.btm = 0
    this.buffer = buffer
  }

  push (data) {
    if (this.isFull()) this.grow()

    this.buffer[this.top] = data
    this.top = (this.top + 1) & this.mask

    return this.length++
  }

  shift () {
    if (this.isEmpty()) return null

    const last = this.buffer[this.btm]

    this.buffer[this.btm] = undefined
    this.btm = (this.btm + 1) & this.mask
    this.offset++

    // reset on empty
    if (this.isEmpty() && this.hwm !== this.defaultHwm) {
      this.buffer = new Array(this.defaultHwm)
      this.hwm = this.buffer.length
      this.mask = this.hwm - 1
      this.top = this.btm = 0
    }

    return last
  }

  get (seq) {
    if (seq < this.offset || seq >= this.length) return null
    return this.buffer[(this.btm + (seq - this.offset)) & this.mask]
  }
}

},{}],94:[function(require,module,exports){
const b4a = require('b4a')
const { partialSignature } = require('hypercore/lib/multisig.js')

module.exports = class Signer {
  constructor (base, core) {
    this.base = base
    this.core = core

    this.opened = false
    this.checkpoints = new Map()

    this.open()
  }

  async sign (indexers, length) {
    const signatures = await this.getSignatures(indexers, length)
    const tree = this.core.core.createTreeBatch()
    const p = await Promise.all(signatures.map(s => partialSignature(tree, s.signer, length, s.length, s.signature)))
    return this.core.core.session.core.verifier.assemble(p)
  }

  async _verify (length, signature, key) {
    if (!this.core.core || length > this.core.core.length) return false
    if (length < this.core.core.indexedLength) return true
    const batch = await this.core.core.restoreBatch(length)
    const { publicKey } = this.base.getNamespace(key, this.core)
    return batch.tree.crypto.verify(batch.signable(this.core.key), signature, publicKey)
  }

  open () {
    if (this.opened) return true
    if (!this.core.pendingIndexedLength) return false

    for (const idx of this.base.linearizer.indexers) {
      for (const checkpoint of idx.flushCheckpoints(this.core.systemIndex)) {
        this.addCheckpoint(idx.core.key, checkpoint)
      }
    }

    this.opened = true
    return true
  }

  addCheckpoint (key, checkpoint) {
    const hex = b4a.toString(key, 'hex')

    let checkpoints = this.checkpoints.get(hex)
    if (!checkpoints) {
      checkpoints = []
      this.checkpoints.set(hex, checkpoints)
    }

    if (checkpoints.length > 0 && checkpoint.length <= checkpoints[checkpoints.length - 1].length) return

    checkpoints.push(checkpoint)
  }

  bestCheckpoint (idx, gc = false) {
    const hex = b4a.toString(idx.core.key, 'hex')

    const checkpoints = this.checkpoints.get(hex)
    if (!checkpoints) return null

    const i = findBestCheckpoint(checkpoints, this.core.pendingIndexedLength)
    if (i === -1) return null

    const checkpoint = checkpoints[i]

    if (gc) {
      this.checkpoints.set(hex, checkpoints.slice(i))
    }

    return checkpoint
  }

  async getSignableLength (indexers) {
    if (!this.open()) return 0

    const signed = []
    const thres = (indexers.length >> 1) + 1

    for (const idx of indexers) {
      const checkpoint = this.bestCheckpoint(idx)
      if (!checkpoint) continue

      // signature is invalid
      if (!(await this._verify(checkpoint.length, checkpoint.signature, idx.core.key))) {
        continue
      }

      signed.push(checkpoint.length)
    }

    return signed.length < thres ? 0 : signed.sort(descendingOrder)[thres - 1]
  }

  async getSignatures (indexers, length) {
    const signatures = []
    const thres = (indexers.length >> 1) + 1

    for (let signer = 0; signer < indexers.length; signer++) {
      const idx = indexers[signer]
      const checkpoint = this.bestCheckpoint(idx, true)
      if (!checkpoint) continue

      // signature is invalid
      if (!(await this._verify(checkpoint.length, checkpoint.signature, idx.core.key))) {
        continue
      }

      const signature = {
        signature: checkpoint.signature,
        length: checkpoint.length,
        signer
      }

      if (checkpoint.length === length) {
        if (signatures.length >= thres) signatures.pop()
        signatures.push(signature)
      } else if (checkpoint.length > length && checkpoint.length <= this.core.core.length) {
        signatures.push(signature)
      }

      if (signatures.length >= thres) return signatures
    }

    return null
  }
}

function findBestCheckpoint (checkpoints, len) {
  if (!checkpoints.length || checkpoints[0].length > len) return -1

  let btm = 0
  let top = checkpoints.length

  while (true) {
    const mid = (btm + top) >> 1

    const c = checkpoints[mid]
    if (c.length === len) return mid

    if (c.length > len) top = mid
    else btm = mid + 1

    if (btm === top) {
      return c.length < len ? mid : mid - 1
    }
  }
}

function descendingOrder (a, b) {
  return a > b ? -1 : a < b ? 1 : 0
}

},{"b4a":102,"hypercore/lib/multisig.js":324}],95:[function(require,module,exports){
const b4a = require('b4a')
const c = require('compact-encoding')
const Hypercore = require('hypercore')
const crypto = require('hypercore-crypto')

const Autocore = require('./core')

const MANIFEST_VERSION = 1
const INDEX_VERSION = 1

const EMPTY = b4a.alloc(0)

const [NS_SIGNER_NAMESPACE, NS_VIEW_BLOCK_KEY] = crypto.namespace('autobase', 2)

module.exports = class AutoStore {
  constructor (base) {
    this.base = base
    this.opened = new Map()
    this.coresByKey = new Map()
    this.coresByIndex = new Map()
    this.waiting = []
  }

  async ready () {
    await this.base._presystem
  }

  get _indexers () {
    return this.base.linearizer && indexersWithManifest(this.base.linearizer.indexers.slice(0))
  }

  async migrate () {
    const sys = this.getSystemCore()
    const { indexers, views } = await this.base.system.getIndexedInfo()
    const nextIndexers = await this.getWriters(indexers)

    for (const ac of this.opened.values()) {
      const view = views[ac.systemIndex]
      const length = view ? view.length : ac._isSystem() ? sys.indexedLength : 0
      await ac.migrateTo(nextIndexers, length)
    }

    this.base.recouple()
  }

  get (opts, moreOpts) {
    if (typeof opts === 'string') opts = { name: opts }
    if (moreOpts) opts = { ...opts, ...moreOpts, compat: false }

    const name = opts.name
    const valueEncoding = opts.valueEncoding || null

    const core = this._indexers
      ? this.base.store.get(this._corePreload(this._indexers, name, null, opts.cache))
      : this.base.store.get({
        preload: async () => {
          await Promise.resolve()
          if (!this.base.opening) throw new Error('Autobase failed to open')

          await this.ready()
          return this._corePreload(this._indexers, name, null, opts.cache)
        }
      })

    const ac = new Autocore(this.base, core, name, opts)

    this.opened.set(name, ac)

    this.waiting.push(ac)

    return ac.createSession(valueEncoding)
  }

  _corePreload (indexers, name, prologue, cache) {
    return {
      manifest: this._createManifest(indexers, name, prologue),
      cache,
      exclusive: true,
      compat: false,
      encryptionKey: this.getBlockKey(name),
      isBlockKey: true
    }
  }

  close () {
    const closing = []
    for (const core of this.opened.values()) {
      closing.push(core.close())
    }

    return Promise.all(closing)
  }

  static getBlockKey (bootstrap, encryptionKey, name) {
    return getBlockKey(bootstrap, encryptionKey, name)
  }

  getBlockKey (name) {
    return getBlockKey(this.base.bootstrap, this.base.encryptionKey, name)
  }

  getSystemCore () {
    return this.base.system.core._source
  }

  async getWriters (keys) {
    // todo: should initial system entry have bootstrap as indexer?
    if (!keys.length) return this.base.linearizer.indexers.slice(0)

    return Promise.all(keys.map(({ key }) => this.base._getWriterByKey(key, -1, 0, false, false, null)))
  }

  async getCore (ac, indexers, length, opts = {}) {
    const prologue = await ac.getPrologue(length)
    return this.base.store.get(this._corePreload(indexers, ac.name, prologue, opts.cache))
  }

  getIndexedCores () {
    const cores = [this.getSystemCore()]

    for (let i = 0; i < this.base.system.views.length; i++) {
      const core = this.getByIndex(i)
      if (!core || !core.pendingIndexedLength) break
      cores.push(core)
    }

    return cores
  }

  indexedViewsByName () {
    const views = []

    for (let i = 0; i < this.base.system.views.length; i++) {
      const core = this.getByIndex(i)
      if (!core || !core.pendingIndexedLength) break
      views.push(core.name)
    }

    return views
  }

  async flush () {
    while (this.waiting.length) {
      const core = this.waiting.pop()
      await core.ready()
    }

    for (const view of this.opened.values()) {
      if (!view.isBootstrapped() && !(await view.bootstrap())) return false
    }

    return true
  }

  // called by autocore on truncate
  _unindex (ac) {
    this.coresByIndex.delete(ac.systemIndex)
    ac.systemIndex = -1
  }

  deriveNamespace (name, entropy) {
    const encryptionId = crypto.hash(this.base.encryptionKey || EMPTY)
    const version = c.encode(c.uint, INDEX_VERSION)
    const bootstrap = this.base.bootstrap

    return crypto.hash([
      NS_SIGNER_NAMESPACE,
      version,
      bootstrap,
      encryptionId,
      entropy,
      b4a.from(name)
    ])
  }

  getByKey (key, indexers = this.base.linearizer.indexers) {
    const hex = b4a.toString(key, 'hex')
    if (this.coresByKey.has(hex)) return this.coresByKey.get(hex)

    for (const core of this.opened.values()) {
      if (b4a.equals(key, core.key)) {
        this.coresByKey.set(hex, core)
        return core
      }
    }

    return null
  }

  getByIndex (index) {
    if (this.coresByIndex.has(index)) return this.coresByIndex.get(index)

    for (const core of this.opened.values()) {
      if (core.systemIndex !== index) continue
      this.coresByIndex.set(index, core)
      return core
    }

    return null
  }

  deriveKey (name, indexers = this.base.linearizer.indexers, prologue = null) {
    const pl = prologue && prologue.length ? prologue : null
    const manifest = this._createManifest(indexers, name, pl)
    return manifest && Hypercore.key(manifest)
  }

  _deriveStaticHash (name) {
    // key doesnt matter...
    return crypto.hash([this.base.bootstrap, b4a.from(name)])
  }

  _createManifest (indexers, name, prologue) {
    if (!indexers.length && !(prologue && prologue.length > 0)) {
      prologue = {
        hash: this._deriveStaticHash(name),
        length: 0
      }
    }

    for (const idx of indexers) {
      if (!idx.core.manifest) return null
    }

    const signers = indexers.map(idx => ({
      namespace: this.deriveNamespace(name, idx.core.manifest.signers[0].namespace),
      signature: 'ed25519',
      publicKey: idx.core.manifest.signers[0].publicKey
    }))

    return {
      version: MANIFEST_VERSION,
      hash: 'blake2b',
      prologue,
      allowPatch: true,
      quorum: Math.min(signers.length, (signers.length >> 1) + 1),
      signers
    }
  }
}

function getBlockKey (bootstrap, encryptionKey, name) {
  return encryptionKey && crypto.hash([NS_VIEW_BLOCK_KEY, bootstrap, encryptionKey, b4a.from(name)])
}

function indexersWithManifest (indexers) {
  if (indexers.length === 1 && !indexers[0].core.manifest) return []
  return indexers
}

},{"./core":89,"b4a":102,"compact-encoding":178,"hypercore":309,"hypercore-crypto":305}],96:[function(require,module,exports){
const Hyperbee = require('hyperbee')
const SubEncoder = require('sub-encoder')
const ReadyResource = require('ready-resource')
const b4a = require('b4a')
const c = require('compact-encoding')

const { Info, Member } = require('./messages')

const subs = new SubEncoder()

const DIGEST = subs.sub(b4a.from([0]))
const MEMBERS = subs.sub(b4a.from([1]))

module.exports = class SystemView extends ReadyResource {
  constructor (core, { checkout = 0 } = {}) {
    super()

    this.core = core

    // sessions is a workaround for batches not having sessions atm...
    this.db = new Hyperbee(core, { keyEncoding: 'binary', extension: false, checkout, sessions: typeof core.session === 'function' })

    this.version = -1 // set version in apply
    this.members = 0
    this.pendingIndexers = []
    this.indexers = []
    this.heads = []
    this.views = []

    this.indexerUpdate = false

    this._fork = 0
    this._length = 0
    this._indexerMap = new Map()
    this._clockUpdates = new Map()
    this._batch = null
  }

  static async getIndexedInfo (core, length) {
    const sys = new this(core.session())

    try {
      return await sys.getIndexedInfo(length)
    } finally {
      await sys.close()
    }
  }

  get bootstrapping () {
    return this.members === 0
  }

  sendWakeup (remotePublicKey) {
    if (this.core._source.wakeupExtension) {
      this.core._source.wakeupExtension.sendWakeup(remotePublicKey)
    }
  }

  requestWakeup () {
    if (this.core._source.wakeupExtension) {
      this.core._source.wakeupExtension.requestWakeup()
    }
  }

  broadcastWakeup () {
    if (this.core._source.wakeupExtension) {
      this.core._source.wakeupExtension.broadcastWakeup()
    }
  }

  async checkout (length) {
    const checkout = new SystemView(this.core.session(), {
      checkout: length
    })

    await checkout.ready()

    return checkout
  }

  async _open () {
    // this should NEVER fail, if so we have a bug elsewhere (should always be consistent)
    const info = await this.db.get('info', { valueEncoding: Info, keyEncoding: DIGEST, update: false, wait: false })
    await this._reset(info)
  }

  async _close () {
    await this.db.close()
  }

  async getIndexedInfo (length = this.core.indexedLength) {
    if (this.opened === false) await this.ready()

    if (length === this.core.length) {
      return { version: this.version, members: this.members, pendingIndexers: this.pendingIndexers, indexers: this.indexers, heads: this.heads, views: this.views }
    }

    const node = length === 0 ? null : await this.db.getBySeq(length - 1)
    if (node === null) return { version: 0, members: 0, pendingIndexers: [], indexers: [], heads: [], views: [] }

    return c.decode(Info, node.value)
  }

  sameIndexers (indexers) {
    if (this.indexers.length !== indexers.length) return false

    for (let i = 0; i < this.indexers.length; i++) {
      if (!b4a.equals(this.indexers[i].key, indexers[i].core.key)) return false
    }

    return true
  }

  async update () {
    if (this.opened === false) await this.ready()
    if (this._fork === this.core.fork && this._length === this.core.length) return false

    await this._reset(await this.db.get('info', { valueEncoding: Info, keyEncoding: DIGEST }))
    return true
  }

  async _reset (info) {
    this.version = info === null ? -1 : info.value.version
    this.members = info === null ? 0 : info.value.members
    this.pendingIndexers = info === null ? [] : info.value.pendingIndexers
    this.indexers = info === null ? [] : info.value.indexers
    this.heads = info === null ? [] : info.value.heads
    this.views = info === null ? [] : info.value.views

    this.indexerUpdate = false
    this._indexerMap.clear()
    this._clockUpdates.clear()
    this._length = this.core.length
    this._fork = this.core.fork

    for (const idx of this.indexers) {
      this._indexerMap.set(b4a.toString(idx.key, 'hex'), idx)
    }

    if (this._batch) await this._batch.close()
    this._batch = this.db.batch({ update: false })
  }

  _updateView (length, core, systemIndex, key) {
    if (systemIndex > -1 && systemIndex < this.views.length) {
      const v = this.views[systemIndex]
      if (v) {
        v.length = length
        if (key) v.key = key
        return systemIndex
      }
    }

    // store indexer count so we can derive the key on restart
    this.views.push({
      length,
      key
    })

    return this.views.length - 1
  }

  async flush (views) {
    for (const [hex, length] of this._clockUpdates) {
      const isIndexer = this._indexerMap.get(hex) !== undefined
      const key = b4a.from(hex, 'hex')

      const info = await this._batch.get(key, { valueEncoding: Member, keyEncoding: MEMBERS })
      const value = { isIndexer, isRemoved: info.value.isRemoved, length }

      await this._batch.put(key, value, { valueEncoding: Member, keyEncoding: MEMBERS })
    }

    this._clockUpdates.clear()

    for (const { view, key } of views) {
      view.systemIndex = this._updateView(
        view.length,
        view,
        view.systemIndex,
        key
      )
    }

    const info = {
      version: this.version,
      members: this.members,
      pendingIndexers: this.pendingIndexers,
      indexers: this.indexers,
      heads: this.heads,
      views: this.views
    }

    await this._batch.put('info', info, { valueEncoding: Info, keyEncoding: DIGEST })
    await this._batch.flush()

    this._length = this.core.length // should be ok
    this._batch = this.db.batch({ update: false })

    if (this.indexerUpdate) this.indexerUpdate = false
  }

  addHead (node) {
    const h = { key: node.writer.core.key, length: node.length }

    for (let i = 0; i < this.heads.length; i++) {
      const head = this.heads[i]

      if (!hasDependency(node, head)) {
        if (!b4a.equals(node.writer.core.key, head.key)) continue

        // todo: remove in next major because bug was fixed here:
        // https://github.com/holepunchto/autobase-next/pull/237

        // filter out any bad heads introduced by a bug to
        // prevent inconsistencies being written to the oplog
        if (head.length > h.length) return false
      }

      const popped = this.heads.pop()
      if (popped !== head) this.heads[i--] = popped
    }

    this.heads.push(h)

    const hex = b4a.toString(h.key, 'hex')

    this._clockUpdates.set(hex, h.length)

    if (this.pendingIndexers.length > 0) {
      for (let i = 0; i < this.pendingIndexers.length; i++) {
        if (!b4a.equals(this.pendingIndexers[i], h.key)) continue
        this._updateIndexer(h.key, h.length, true, i)
        return true
      }
    }

    const idx = this._indexerMap.get(hex)
    if (idx !== undefined) {
      idx.length = h.length
    }

    return false
  }

  _updateIndexer (key, length, isIndexer, i) {
    const hex = b4a.toString(key, 'hex')

    if (!isIndexer) {
      const existing = this._indexerMap.get(hex)
      if (existing) {
        this.indexerUpdate = true
        this.indexers.splice(this.indexers.indexOf(existing), 1)
        this._indexerMap.delete(hex)
      }
      return
    }

    for (; i < this.pendingIndexers.length; i++) {
      if (b4a.equals(this.pendingIndexers[i], key)) break
    }

    if (length === 0) {
      if (i >= this.pendingIndexers.length) this.pendingIndexers.push(key)
      return
    }

    if (i < this.pendingIndexers.length) {
      const top = this.pendingIndexers.pop()
      if (i < this.pendingIndexers.length) this.pendingIndexers[i] = top
    }

    const idx = this._indexerMap.get(hex)

    if (idx === undefined) {
      const newIdx = { key, length }
      this._indexerMap.set(hex, newIdx)
      this.indexers.push(newIdx)

      // bootstrap is "silently" added so that initial views have no prologue
      if (!this.bootstrapping) this.indexerUpdate = true
    } else {
      idx.length = length
    }
  }

  _seenLength (key) {
    return this._clockUpdates.get(b4a.toString(key, 'hex')) || 0
  }

  async add (key, { isIndexer = false, length = this._seenLength(key) } = {}) {
    let wasTracked = false
    let wasIndexer = false

    if (length === 0) { // a bit hacky atm due to cas limitations...
      const node = await this._batch.get(key, { valueEncoding: Member, keyEncoding: MEMBERS })
      if (node) length = node.value.length
    }

    await this._batch.put(key, {
      isIndexer,
      isRemoved: false,
      length
    }, {
      valueEncoding: Member,
      keyEncoding: MEMBERS,
      cas (older, newer) {
        if (older === null) return true

        const o = older.value
        const n = newer.value

        if (!o.isRemoved) wasTracked = true
        if (o.isIndexer) wasIndexer = true

        if (length === 0 && o.length) length = o.length

        return o.isRemoved !== n.isRemoved || o.isIndexer !== n.isIndexer || o.length !== n.length
      }
    })

    if (!wasTracked) this.members++

    if (wasIndexer || isIndexer) this._updateIndexer(key, length, isIndexer, 0)
  }

  async remove (key) {
    let isIndexer = false

    for (const idx of this.indexers) {
      isIndexer = b4a.equals(idx.key, key)
      if (isIndexer) break
    }

    if (isIndexer) this._updateIndexer(key, null, false, 0)

    let wasTracked = false

    const node = await this._batch.get(key, { valueEncoding: Member, keyEncoding: MEMBERS })
    const length = node ? node.value.length : 0

    await this._batch.put(key, {
      isIndexer: false,
      isRemoved: true,
      length
    }, {
      valueEncoding: Member,
      keyEncoding: MEMBERS,
      cas (older, newer) {
        if (older === null) return true

        wasTracked = !!older.value.isRemoved
        return !wasTracked
      }
    })

    if (!wasTracked) this.members--

    return isIndexer
  }

  async has (key, opts) {
    // could be optimised...
    return await this.get(key, opts) !== null
  }

  async get (key, opts = {}) {
    const node = await this._batch.get(key, { valueEncoding: Member, keyEncoding: MEMBERS })
    if (node === null) return null
    return (opts.onlyActive !== false || !node.value.isRemoved) ? node.value : null
  }

  async hasLocal (key) {
    try {
      const node = await this.db.get(key, { valueEncoding: Member, keyEncoding: MEMBERS, update: false, wait: false })
      return node !== null
    } catch {
      return false
    }
  }

  async getLocalLength (key) {
    try {
      const node = await this.db.get(key, { valueEncoding: Member, keyEncoding: MEMBERS, update: false, wait: false })
      return node === null ? 0 : node.value.length
    } catch {
      return 0
    }
  }

  list () {
    return this._batch.createReadStream({
      valueEncoding: Member,
      keyEncoding: MEMBERS
    })
  }

  async isIndexed (key, length) {
    const co = this.db.checkout(this.core.indexedLength)
    try {
      const node = await co.get(key, { valueEncoding: Member, keyEncoding: MEMBERS })
      return node !== null && node.value.length >= length
    } finally {
      await co.close()
    }
  }
}

function hasDependency (node, dep) {
  for (const h of node.actualHeads) {
    if (sameNode(h, dep)) return true
  }
  return false
}

function sameNode (a, b) {
  return b4a.equals(a.key, b.key) && a.length === b.length
}

},{"./messages":92,"b4a":102,"compact-encoding":178,"hyperbee":294,"ready-resource":480,"sub-encoder":580}],97:[function(require,module,exports){
const safetyCatch = require('safety-catch')

const MAX_WAIT = 2 * 60 * 1000
const DEFAULT_INTERVAL = 10 * 1000

module.exports = class Timer {
  constructor (handler, interval, opts = {}) {
    this.handler = handler || noop
    this.interval = interval || DEFAULT_INTERVAL
    this.limit = opts.limit || MAX_WAIT

    this._executing = null

    this._limit = random2over1(this.limit)
    this._timer = null
    this._resolve = null
    this._start = 0
    this._stopped = false
    this._asap = false
    this._standalone = new Set()

    this._unref = opts.unref !== false
    this._timerCallback = this._executeBackground.bind(this)
  }

  _executeBackground () {
    this._executing = this._execute()
    this._executing.catch(safetyCatch) // make sure it doesnt crash in the bg
  }

  async _execute () {
    this._asap = false
    await this.handler()
    this._start = 0
    this._executing = null
    this.bump()
  }

  bump () {
    if (this._stopped || this._executing || this._asap) return

    if (!this._start) this._start = Date.now()
    else if (Date.now() - this._start > this._limit) return

    const interval = random2over1(this.interval)

    clearTimeout(this._timer)
    this._timer = setTimeout(this._timerCallback, interval)
    if (this._unref && this._timer.unref) this._timer.unref()
  }

  async trigger () {
    if (this._stopped) return
    if (this._executing) await this._executing
    if (this._stopped) return

    clearTimeout(this._timer)
    this._timer = null

    this._executeBackground()
    await this._executing
  }

  async flush () {
    if (this._executing) await this._executing
  }

  // business-as-usual
  bau () {
    if (!this._asap) return
    this._asap = false
    this.bump()
  }

  asap () {
    if (this._asap) return
    this._asap = true

    const interval = Math.floor(Math.random() * this.interval / 3)
    clearTimeout(this._timer)
    this._timer = setTimeout(this._timerCallback, interval)
    if (this._unref && this._timer.unref) this._timer.unref()
  }

  stop () {
    if (this._timer) clearTimeout(this._timer)
    this._timer = null
    this._start = 0
    this._asap = false
    this._stopped = true

    for (const { timer, resolve } of this._standalone) {
      clearTimeout(timer)
      resolve()
    }

    this._standalone.clear()
  }

  asapStandalone () {
    const interval = Math.floor(Math.random() * this.interval / 3)
    return new Promise((resolve) => {
      const ref = { timer: null, resolve }
      ref.timer = setTimeout(resolveStandalone, interval, ref, this._standalone)
      if (ref.timer.unref) ref.timer.unref()
      this._standalone.add(ref)
    })
  }

  unref () {
    if (this._timer && this._timer.unref) this._timer.unref()
  }
}

function resolveStandalone (ref, set) {
  set.delete(ref)
  ref.resolve()
}

// random value x between n <= x < 2n
function random2over1 (n) {
  return Math.floor(n + Math.random() * n)
}

function noop () {}

},{"safety-catch":486}],98:[function(require,module,exports){
const b4a = require('b4a')
const assert = require('nanoassert')

module.exports = class TopoList {
  constructor () {
    this.tip = []
    this.undo = 0
    this.shared = 0
  }

  static compare (a, b) {
    return cmp(a, b)
  }

  static add (node, indexed, offset) {
    addSorted(node, indexed, offset)
  }

  mark () {
    this.shared = this.tip.length
    this.undo = 0
  }

  // todo: bump to new api that just tracks undo
  flush (indexed = []) {
    if (indexed.length) this._applyIndexed(indexed)

    const u = {
      shared: this.shared,
      undo: this.undo,
      length: indexed.length + this.tip.length,
      indexed,
      tip: this.tip
    }

    this.mark()

    return u
  }

  print () {
    return this.tip.map(n => n.writer.core.key.toString() + n.length)
  }

  _applyIndexed (nodes) {
    assert(nodes.length <= this.tip.length, 'Indexed batch cannot exceed tip')

    let shared = 0

    for (; shared < nodes.length; shared++) {
      if (this.tip[shared] !== nodes[shared]) break
    }

    // reordering
    if (shared < nodes.length) this._track(shared)

    let j = 0
    for (let i = shared; i < this.tip.length; i++) {
      const node = this.tip[i]
      if (node.yielded) continue

      this.tip[j++] = node
    }

    this.tip.splice(j, this.tip.length - j)
  }

  add (node) {
    const shared = addSorted(node, this.tip, 0)
    this._track(shared)
  }

  _track (shared) {
    if (shared < this.shared) {
      this.undo += this.shared - shared
      this.shared = shared
    }
  }
}

function addSorted (node, list, offset = 0) {
  list.push(node)

  let i = list.length - 1

  while (i >= offset + 1) {
    const prev = list[i - 1]
    if (links(node, prev)) break
    list[i] = prev
    list[--i] = node
  }

  while (i < list.length - 1) {
    const next = list[i + 1]
    const c = cmp(node, next)
    if (c <= 0) break
    list[i] = next
    list[++i] = node
  }

  return i
}

function links (a, b) {
  if (b.dependents.has(a)) return true
  return a.length > 0 && b.length === a.length - 1 && a.writer === b.writer
}

function cmp (a, b) {
  const c = b4a.compare(a.writer.core.key, b.writer.core.key)
  if (c !== 0 && a.version !== b.version) return b.version - a.version
  return c === 0 ? a.length < b.length ? -1 : 1 : c
}

},{"b4a":102,"nanoassert":390}],99:[function(require,module,exports){
const b4a = require('b4a')
const c = require('compact-encoding')
const ReadyResource = require('ready-resource')

const WakeupEntry = {
  preencode (state, m) {
    c.fixed32.preencode(state, m.key)
    c.uint.preencode(state, m.length)
  },
  encode (state, m) {
    c.fixed32.encode(state, m.key)
    c.uint.encode(state, m.length)
  },
  decode (state) {
    return {
      key: c.fixed32.decode(state),
      length: c.uint.decode(state)
    }
  }
}

module.exports = class AutoWakeup extends ReadyResource {
  constructor (base) {
    super()

    this.base = base
    this.flushing = null

    this._rootStore = getRootCorestore(this.base.store)
    this._addBound = this.add.bind(this)
    this._preupdateBound = this._preupdate.bind(this)
    this._needsFlush = false
    this._map = new Map()
  }

  [Symbol.iterator] () {
    return this._map.values()
  }

  async _preupdate (batch, key) {
    this.queue(key, batch.length)
    await this.flush()
    this.base._onwakeup()
  }

  async _save () {
    const slab = b4a.allocUnsafe(8 + this._map.size * 40) // 32 + 8
    const state = { start: 0, end: 0, buffer: slab }

    c.uint.encode(state, this._map.size)
    for (const m of this._map.values()) WakeupEntry.encode(state, m)

    await this.base.local.setUserData('autobase/wakeup', slab.subarray(0, state.start))
  }

  async _load () {
    const buffer = await this.base.local.getUserData('autobase/wakeup')
    if (!buffer) return

    const state = { start: 0, end: buffer.byteLength, buffer }

    let len = c.uint.decode(state)
    while (len-- > 0) {
      const m = WakeupEntry.decode(state)
      this._map.set(b4a.toString(m.key, 'hex'), m)
    }
  }

  async _open () {
    await this._load()

    this._rootStore.setMaxListeners(0)
    this._rootStore.on('core-open', this._addBound)

    for (const core of this._rootStore.cores.values()) {
      if (core.opened === false) await core.ready().catch(noop)
      if (!core.closing) this.add(core)
    }
  }

  async _close () {
    this._rootStore.removeListener('core-open', this._addBound)

    for (const core of this._rootStore.cores.values()) {
      if (core.opened && !core.closing) this.remove(core)
    }

    this._map.clear()

    while (this.flushing) {
      try {
        await this.flushing
      } catch {}
    }
  }

  queue (key, length) {
    const hex = b4a.toString(key, 'hex')
    const m = this._map.get(hex)

    if (m && m.length > length) {
      return false
    }

    this._needsFlush = true
    this._map.set(hex, { key, length })

    return true
  }

  unqueue (key, length) {
    const hex = b4a.toString(key, 'hex')
    const m = this._map.get(hex)

    if (!m) return true
    if (m.length > length) return false

    this._needsFlush = true
    this._map.delete(hex)

    return true
  }

  async flush () {
    if (this.closing) throw new Error('Closing')

    // wait for someone
    if (this.flushing) await this.flushing

    // if another still active they flushed us
    if (this.flushing) return this.flushing

    if (this._needsFlush === false) return
    this._needsFlush = false

    try {
      this.flushing = this._save()
      return await this.flushing
    } finally {
      this.flushing = null
    }
  }

  add (core) {
    if (core.writable || !core.opened) return // no need to track local cores...
    return this._add(core.core)
  }

  remove (core) {
    return this._remove(core.core)
  }

  _add (core) {
    const userData = core.header.userData // unsafe but sync so much less race-condition-ey
    let referrer = null

    for (const { key, value } of userData) {
      if (key === 'referrer') referrer = value
      else if (key === 'autobase/view') return false
    }

    if (referrer === null || !b4a.equals(referrer, this.base.key)) return false

    core.preupdate = this._preupdateBound

    return true
  }

  _remove (core) {
    if (core.preupdate !== this._preupdateBound) return false
    core.preupdate = null
    return true
  }
}

function getRootCorestore (store) {
  return store._root // TODO: make public
}

function noop () {}

},{"b4a":102,"compact-encoding":178,"ready-resource":480}],100:[function(require,module,exports){
const Linearizer = require('./linearizer')
const NodeBuffer = require('./node-buffer')
const c = require('compact-encoding')
const b4a = require('b4a')
const ReadyResource = require('ready-resource')
const safetyCatch = require('safety-catch')
const assert = require('nanoassert')
const SignalPromise = require('signal-promise')

const MAX_PRELOAD = 4

module.exports = class Writer extends ReadyResource {
  constructor (base, core, length, isRemoved) {
    super()

    this.base = base
    this.core = core
    this.isRemoved = isRemoved
    this.updated = false
    this.range = null
    this.nodes = new NodeBuffer(length)
    this.node = null
    this.isBootstrap = false // maintained by updateBootstrapWriters
    this.isActiveIndexer = false
    this.available = length
    this.length = length
    this.seenLength = 0
    this.recover = false

    this.system = null
    this.digestIndex = 0
    this.digestLength = 0

    this.pendingCheckpoints = []
    this.syncSignal = null
  }

  pause () {
    if (this.range) this.range.destroy()
    this.range = null
  }

  setBootstrap (bool) {
    this.isBootstrap = bool
    this.core.setActive(bool)
  }

  async isInSystem () {
    const bootstrapping = this.base.system.core.length === 0 && b4a.equals(this.core.key, this.base.key)

    if (!bootstrapping) {
      const record = await this.base.system.get(this.core.key, { onlyActive: true })
      if (record === null) return false
    }

    return true
  }

  resume () {
    if (this.range) return
    this.range = this.core.download({ start: this.nodes.length, end: -1, linear: true })
  }

  seen (length) {
    if (length > this.seenLength) this.seenLength = length
  }

  waitForSynced () {
    if (this.core.length === this.length) return Promise.resolve()
    if (this.syncSignal === null) this.syncSignal = new SignalPromise()
    return this.syncSignal.wait()
  }

  async _open () {
    await this.core.ready()
    await this.core.setUserData('referrer', this.base.key)

    // remove later
    this.recover = autoRecover(this.core)

    // add it again incase it wasn't readied before, only needed if this is the first time we set the referrer...
    this.base._wakeup.add(this.core)
  }

  // in case we are in the middle of a migration we might need to old sigs to reach threshold on the new cores
  inflateBackground () {
    this.inflateExistingCheckpoints().catch(safetyCatch)
  }

  async inflateExistingCheckpoints () {
    await this.ready()

    if (this.core.length === 0 || !this.isActiveIndexer || this.nodes.length === 0) {
      return
    }

    const seq = this.nodes.length - 1
    const { checkpoint } = await this.core.get(seq)
    if (!checkpoint) return

    for (let i = 0; i < checkpoint.length; i++) {
      const c = checkpoint[i]
      if (c.checkpointer === 0) {
        this._addCheckpoint(i, c.checkpoint)
        continue
      }
      const prev = await this.core.get(seq - c.checkpointer)
      this._addCheckpoint(i, prev.checkpoint[i].checkpoint)
    }
  }

  _close () {
    if (this.syncSignal !== null) this.syncSignal.notify()
    return this.core.close()
  }

  reset (length) {
    assert(length <= this.core.length || length <= this.length)

    this.pause()

    this.updated = false
    this.node = null
    this.nodes = new NodeBuffer(length)

    this.length = length
    this.available = length
    this.seenLength = length
  }

  get indexed () {
    return this.nodes.offset
  }

  idle () {
    return this.length === this.available && this.length === this.core.length && this.core.opened
  }

  flushed () { // TODO: prop a cleaner way to express this...
    return this.seenLength <= this.length && this.length === this.available && this.length === this.core.length &&
        this.shiftable() === false && !this.core.core.upgrading && this.core.opened
  }

  compare (writer) {
    return b4a.compare(this.core.key, writer.core.key)
  }

  head () {
    return this.nodes.get(this.length - 1)
  }

  advance () {
    if (this.syncSignal !== null && this.length + 1 === this.core.length) this.syncSignal.notify()
    return this.length < this.available ? this.nodes.get(this.length++) : null
  }

  shiftable () {
    return this.length > this.nodes.offset
  }

  shift () {
    if (this.shiftable() === false) return false

    let node = this._shiftAndClear()
    while (node.batch > 1) node = this._shiftAndClear()

    return true
  }

  deriveNamespace (name) {
    const { namespace } = this.core.manifest.signers[0]
    return this.base._viewStore.deriveNamespace(name, namespace)
  }

  get (seq) {
    return seq < this.length ? this.nodes.get(seq) : null
  }

  append (value, heads, batch, dependencies, version) {
    const node = Linearizer.createNode(this, this.nodes.length + 1, value, heads, batch, dependencies, version)

    node.actualHeads = node.heads.slice(0)

    this.nodes.push(node)
    this.available++
    this.length++

    return node
  }

  async update (force) {
    if (this.opened === false) await this.ready()

    while (this.available - this.length < MAX_PRELOAD) {
      // quick sanity check
      if (this.nodes.length === this.core.length || this.core.length === 0) break

      // load next node
      if (this.node === null && !(await this._loadNextNode())) break
      if (!(await this._ensureNodeDependencies())) break

      // TODO: need a proper solution for knowing if we should load node
      if (!force && this.length === 0 && !(await this.isInSystem()) && !this.recover) break
      if (this.recover) this.node.value = null

      this.nodes.push(this.node)
      if (this.node.batch === 1) this.available = this.nodes.length
      this.node = null
    }

    if (this.digestLength < this.core.length && this.isActiveIndexer) await this._checkDigest()

    return this.length < this.available
  }

  async _checkDigest () {
    const index = this.core.length - 1
    const node = await this.core.get(index, { wait: false })

    if (!node) {
      this.core.get(index).catch(safetyCatch)
      return
    }

    if (!node.digest) {
      this.digestLength = index + 1
      return
    }

    const seq = index - node.digest.pointer
    if (seq < 0 || seq === this.digestIndex) {
      this.digestLength = index + 1
      return
    }

    const digestNode = seq === index ? node : await this.core.get(seq, { wait: false })

    if (!digestNode) {
      this.core.get(seq).catch(safetyCatch)
      return
    }

    this.digestLength = index + 1
    this.digestIndex = seq
    this.system = digestNode.digest.key

    // signal that things have changed
    this.base._maybeStaticFastForward = true
  }

  async getVersion (length = this.core.length) {
    if (this.opened === false) await this.ready()

    if (length === 0) return -1

    const node = await this.core.get(length - 1)

    return node.maxSupportedVersion
  }

  async getDigest (length = this.core.length) {
    if (this.opened === false) await this.ready()

    if (length === 0) return null

    let node = await this.core.get(length - 1)

    if (node.digest === null) return null

    if (node.digest.pointer) {
      length -= node.digest.pointer
      node = await this.core.get(length - 1)
    }

    node.digest.pointer = this.core.length - (length - 1)

    return node.digest
  }

  async getCheckpoint (index, length = this.core.length) {
    if (this.opened === false) await this.ready()

    if (length === 0) return null

    let node = await this.core.get(length - 1)

    let target = node.checkpoint[index]
    if (!target) return null

    if (!target.checkpoint) {
      length -= target.checkpointer
      node = await this.core.get(length - 1)
      target = node.checkpoint[index]
    }

    return target.checkpoint
  }

  _shiftAndClear () {
    const node = this.nodes.shift()
    node.clear()
    return node
  }

  flushCheckpoints (systemIndex) {
    const index = systemIndex + 1 // view index is offset by 1
    if (index >= this.pendingCheckpoints.length) return []

    const pending = this.pendingCheckpoints[index]
    this.pendingCheckpoints[index] = null

    while (this.pendingCheckpoints.length > 0 && this.pendingCheckpoints[this.pendingCheckpoints.length - 1] === null) {
      this.pendingCheckpoints.pop()
    }

    return pending !== null ? pending : []
  }

  _addCheckpoints (checkpoints) {
    for (let i = 0; i < checkpoints.length; i++) {
      const { checkpoint, checkpointer } = checkpoints[i]
      if (checkpointer === 0) this._addCheckpoint(i, checkpoint)
    }
  }

  _upsertPendingCheckpoints (index) {
    while (index >= this.pendingCheckpoints.length) this.pendingCheckpoints.push(null)
    if (this.pendingCheckpoints[index]) return this.pendingCheckpoints[index]
    const p = this.pendingCheckpoints[index] = []
    return p
  }

  _addCheckpoint (index, checkpoint) {
    const core = this.base._viewStore.getByIndex(index - 1) // view index is offset by 1

    if (core) {
      core.signer.addCheckpoint(this.core.key, checkpoint)
      return
    }

    const p = this._upsertPendingCheckpoints(index)
    if (p.length > 0 && p[p.length - 1].length >= checkpoint.length) return
    p.push(checkpoint)
  }

  async _loadNextNode () {
    const seq = this.nodes.length
    if (!(await this.core.has(seq))) return false
    const { node, checkpoint, maxSupportedVersion } = await this.core.get(seq, { wait: false })

    if (this.isActiveIndexer && checkpoint) {
      this._addCheckpoints(checkpoint)
    }

    const value = node.value == null ? null : c.decode(this.base.valueEncoding, node.value)
    this.node = Linearizer.createNode(this, seq + 1, value, node.heads, node.batch, new Set(), maxSupportedVersion)
    return true
  }

  async _ensureNodeDependencies () {
    while (this.node.dependencies.size < this.node.heads.length) {
      const rawHead = this.node.heads[this.node.dependencies.size]

      const headWriter = await this.base._getWriterByKey(rawHead.key, -1, rawHead.length, true, false, null)

      if (headWriter !== this && (headWriter === null || headWriter.length < rawHead.length)) {
        this.base._ensureWakeup(headWriter)
        return false
      }

      let headNode = headWriter.nodes.get(rawHead.length - 1)

      // could be a stub node
      if (!headNode) {
        for (const node of this.base.linearizer.heads) {
          if (!compareHead(node, rawHead)) continue
          headNode = node
          break
        }
      }

      // TODO: generalise DAG validation and freeze the writer
      assert(!this.node.dependencies.has(headNode), 'Corrupted DAG')

      // TODO: better way to solve the stub check is to never mutate heads below
      if (headNode === null) { // already yielded
        popAndSwap(this.node.heads, this.node.dependencies.size)
        continue
      }

      this.node.dependencies.add(headNode)
    }

    // always link previous node if it's not indexed
    const offset = this.node.length - 1
    if (offset > this.indexed) {
      this.node.dependencies.add(this.nodes.get(offset - 1))
    }

    return true
  }
}

function popAndSwap (list, i) {
  const pop = list.pop()
  if (i >= list.length) return false
  list[i] = pop
  return true
}

function compareHead (node, head) {
  if (node.length !== head.length) return false
  return b4a.equals(node.writer.core.key, head.key)
}

// this is a list of peers we bugged in the btc and planb room.
// adding them here so migration can run, can be removed in a month or so from time of commit
// note, no security implications of this, we just null them out.

function autoRecover (core) {
  assert(core.opened)

  switch (core.id) {
    case 'ghrpexaboutdm46ombqho7mroxknassnntrxx3cubfux4qi6w6hy':
    case 'qoaanao71s4he1rcd197d336qepykk4467geo1uq8cwnzmpb786o':
    case 'fomhdxgn4j4tzjqy6y7iskhffimzokt7kraddyd8orcht3r8q61o':
    case 'd8f5taxxrit51apftoi38e5b86hb98cgfd7dfp3uo1uoh95qt49o':
    case 'objyf75uggsqpjcut69xdgj46ks8r71jjrq7oxdfsz95sstchkno':
      return true
  }

  return false
}

},{"./linearizer":91,"./node-buffer":93,"b4a":102,"compact-encoding":178,"nanoassert":390,"ready-resource":480,"safety-catch":486,"signal-promise":506}],101:[function(require,module,exports){
(function (global){(function (){
'use strict';

var possibleNames = require('possible-typed-array-names');

var g = typeof globalThis === 'undefined' ? global : globalThis;

/** @type {import('.')} */
module.exports = function availableTypedArrays() {
	var /** @type {ReturnType<typeof availableTypedArrays>} */ out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			// @ts-expect-error
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"possible-typed-array-names":435}],102:[function(require,module,exports){
(function (Buffer){(function (){
function isBuffer(value) {
  return Buffer.isBuffer(value) || value instanceof Uint8Array
}

function isEncoding(encoding) {
  return Buffer.isEncoding(encoding)
}

function alloc(size, fill, encoding) {
  return Buffer.alloc(size, fill, encoding)
}

function allocUnsafe(size) {
  return Buffer.allocUnsafe(size)
}

function allocUnsafeSlow(size) {
  return Buffer.allocUnsafeSlow(size)
}

function byteLength(string, encoding) {
  return Buffer.byteLength(string, encoding)
}

function compare(a, b) {
  return Buffer.compare(a, b)
}

function concat(buffers, totalLength) {
  return Buffer.concat(buffers, totalLength)
}

function copy(source, target, targetStart, start, end) {
  return toBuffer(source).copy(target, targetStart, start, end)
}

function equals(a, b) {
  return toBuffer(a).equals(b)
}

function fill(buffer, value, offset, end, encoding) {
  return toBuffer(buffer).fill(value, offset, end, encoding)
}

function from(value, encodingOrOffset, length) {
  return Buffer.from(value, encodingOrOffset, length)
}

function includes(buffer, value, byteOffset, encoding) {
  return toBuffer(buffer).includes(value, byteOffset, encoding)
}

function indexOf(buffer, value, byfeOffset, encoding) {
  return toBuffer(buffer).indexOf(value, byfeOffset, encoding)
}

function lastIndexOf(buffer, value, byteOffset, encoding) {
  return toBuffer(buffer).lastIndexOf(value, byteOffset, encoding)
}

function swap16(buffer) {
  return toBuffer(buffer).swap16()
}

function swap32(buffer) {
  return toBuffer(buffer).swap32()
}

function swap64(buffer) {
  return toBuffer(buffer).swap64()
}

function toBuffer(buffer) {
  if (Buffer.isBuffer(buffer)) return buffer
  return Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength)
}

function toString(buffer, encoding, start, end) {
  return toBuffer(buffer).toString(encoding, start, end)
}

function write(buffer, string, offset, length, encoding) {
  return toBuffer(buffer).write(string, offset, length, encoding)
}

function readDoubleBE(buffer, offset) {
  return toBuffer(buffer).readDoubleBE(offset)
}

function readDoubleLE(buffer, offset) {
  return toBuffer(buffer).readDoubleLE(offset)
}

function readFloatBE(buffer, offset) {
  return toBuffer(buffer).readFloatBE(offset)
}

function readFloatLE(buffer, offset) {
  return toBuffer(buffer).readFloatLE(offset)
}

function readInt32BE(buffer, offset) {
  return toBuffer(buffer).readInt32BE(offset)
}

function readInt32LE(buffer, offset) {
  return toBuffer(buffer).readInt32LE(offset)
}

function readUInt32BE(buffer, offset) {
  return toBuffer(buffer).readUInt32BE(offset)
}

function readUInt32LE(buffer, offset) {
  return toBuffer(buffer).readUInt32LE(offset)
}

function writeDoubleBE(buffer, value, offset) {
  return toBuffer(buffer).writeDoubleBE(value, offset)
}

function writeDoubleLE(buffer, value, offset) {
  return toBuffer(buffer).writeDoubleLE(value, offset)
}

function writeFloatBE(buffer, value, offset) {
  return toBuffer(buffer).writeFloatBE(value, offset)
}

function writeFloatLE(buffer, value, offset) {
  return toBuffer(buffer).writeFloatLE(value, offset)
}

function writeInt32BE(buffer, value, offset) {
  return toBuffer(buffer).writeInt32BE(value, offset)
}

function writeInt32LE(buffer, value, offset) {
  return toBuffer(buffer).writeInt32LE(value, offset)
}

function writeUInt32BE(buffer, value, offset) {
  return toBuffer(buffer).writeUInt32BE(value, offset)
}

function writeUInt32LE(buffer, value, offset) {
  return toBuffer(buffer).writeUInt32LE(value, offset)
}

module.exports = {
  isBuffer,
  isEncoding,
  alloc,
  allocUnsafe,
  allocUnsafeSlow,
  byteLength,
  compare,
  concat,
  copy,
  equals,
  fill,
  from,
  includes,
  indexOf,
  lastIndexOf,
  swap16,
  swap32,
  swap64,
  toBuffer,
  toString,
  write,
  readDoubleBE,
  readDoubleLE,
  readFloatBE,
  readFloatLE,
  readInt32BE,
  readInt32LE,
  readUInt32BE,
  readUInt32LE,
  writeDoubleBE,
  writeDoubleLE,
  writeFloatBE,
  writeFloatLE,
  writeInt32BE,
  writeInt32LE,
  writeUInt32BE,
  writeUInt32LE
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":164}],103:[function(require,module,exports){
const errors = require('./lib/errors')

class EventListener {
  constructor() {
    this.list = []
    this.count = 0
  }

  append(ctx, name, fn, once) {
    this.count++
    ctx.emit('newListener', name, fn) // Emit BEFORE adding
    this.list.push([fn, once])
  }

  prepend(ctx, name, fn, once) {
    this.count++
    ctx.emit('newListener', name, fn) // Emit BEFORE adding
    this.list.unshift([fn, once])
  }

  remove(ctx, name, fn) {
    for (let i = 0, n = this.list.length; i < n; i++) {
      const l = this.list[i]

      if (l[0] === fn) {
        this.list.splice(i, 1)

        if (this.count === 1) delete ctx._events[name]

        ctx.emit('removeListener', name, fn) // Emit AFTER removing

        this.count--
        return
      }
    }
  }

  removeAll(ctx, name) {
    const list = [...this.list]
    this.list = []

    if (this.count === list.length) delete ctx._events[name]

    for (let i = list.length - 1; i >= 0; i--) {
      ctx.emit('removeListener', name, list[i][0]) // Emit AFTER removing
    }

    this.count -= list.length
  }

  emit(ctx, name, ...args) {
    const list = [...this.list]

    for (let i = 0, n = list.length; i < n; i++) {
      const l = list[i]

      if (l[1] === true) this.remove(ctx, name, l[0])

      Reflect.apply(l[0], ctx, args)
    }

    return list.length > 0
  }
}

function appendListener(ctx, name, fn, once) {
  const e = ctx._events[name] || (ctx._events[name] = new EventListener())
  e.append(ctx, name, fn, once)
  return ctx
}

function prependListener(ctx, name, fn, once) {
  const e = ctx._events[name] || (ctx._events[name] = new EventListener())
  e.prepend(ctx, name, fn, once)
  return ctx
}

function removeListener(ctx, name, fn) {
  const e = ctx._events[name]
  if (e !== undefined) e.remove(ctx, name, fn)
  return ctx
}

function throwUnhandledError(...args) {
  let err

  if (args.length > 0) err = args[0]

  if (err instanceof Error === false) err = errors.UNHANDLED_ERROR(err)

  if (Error.captureStackTrace) {
    Error.captureStackTrace(err, exports.prototype.emit)
  }

  queueMicrotask(() => {
    throw err
  })
}

module.exports = exports = class EventEmitter {
  constructor() {
    this._events = Object.create(null)
  }

  addListener(name, fn) {
    return appendListener(this, name, fn, false)
  }

  addOnceListener(name, fn) {
    return appendListener(this, name, fn, true)
  }

  prependListener(name, fn) {
    return prependListener(this, name, fn, false)
  }

  prependOnceListener(name, fn) {
    return prependListener(this, name, fn, true)
  }

  removeListener(name, fn) {
    return removeListener(this, name, fn)
  }

  on(name, fn) {
    return appendListener(this, name, fn, false)
  }

  once(name, fn) {
    return appendListener(this, name, fn, true)
  }

  off(name, fn) {
    return removeListener(this, name, fn)
  }

  emit(name, ...args) {
    if (name === 'error' && this._events.error === undefined) {
      throwUnhandledError(...args)
    }

    const e = this._events[name]
    return e === undefined ? false : e.emit(this, name, ...args)
  }

  listeners(name) {
    const e = this._events[name]
    return e === undefined ? [] : [...e.list]
  }

  listenerCount(name) {
    const e = this._events[name]
    return e === undefined ? 0 : e.list.length
  }

  getMaxListeners() {
    return EventEmitter.defaultMaxListeners
  }

  setMaxListeners(n) {}

  removeAllListeners(name) {
    if (arguments.length === 0) {
      for (const key of Reflect.ownKeys(this._events)) {
        if (key === 'removeListener') continue
        this.removeAllListeners(key)
      }
      this.removeAllListeners('removeListener')
    } else {
      const e = this._events[name]
      if (e !== undefined) e.removeAll(this, name)
    }
    return this
  }
}

exports.EventEmitter = exports

exports.errors = errors

exports.defaultMaxListeners = 10

exports.on = function on(emitter, name, opts = {}) {
  const { signal } = opts

  if (signal && signal.aborted) {
    throw errors.OPERATION_ABORTED(signal.reason)
  }

  let error = null
  let done = false

  const events = []
  const promises = []

  emitter.on(name, onevent)

  if (name !== 'error') emitter.on('error', onerror)

  if (signal) signal.addEventListener('abort', onabort)

  return {
    next() {
      if (events.length) {
        return Promise.resolve({ value: events.shift(), done: false })
      }

      if (error) {
        const err = error

        error = null

        return Promise.reject(err)
      }

      if (done) return onclose()

      return new Promise((resolve, reject) =>
        promises.push({ resolve, reject })
      )
    },

    return() {
      return onclose()
    },

    throw(err) {
      return onerror(err)
    },

    [Symbol.asyncIterator]() {
      return this
    }
  }

  function onevent(...args) {
    if (promises.length) {
      promises.shift().resolve({ value: args, done: false })
    } else {
      events.push(args)
    }
  }

  function onerror(err) {
    if (promises.length) {
      promises.shift().reject(err)
    } else {
      error = err
    }

    return Promise.resolve({ done: true })
  }

  function onabort() {
    onerror(errors.OPERATION_ABORTED(signal.reason))
  }

  function onclose() {
    emitter.off(name, onevent)

    if (name !== 'error') emitter.off('error', onerror)

    if (signal) signal.removeEventListener('abort', onabort)

    done = true

    if (promises.length) promises.shift().resolve({ done: true })

    return Promise.resolve({ done: true })
  }
}

exports.once = function once(emitter, name, opts = {}) {
  const { signal } = opts

  if (signal && signal.aborted) {
    throw errors.OPERATION_ABORTED(signal.reason)
  }

  return new Promise((resolve, reject) => {
    if (name !== 'error') emitter.on('error', onerror)

    if (signal) signal.addEventListener('abort', onabort)

    emitter.once(name, (...args) => {
      if (name !== 'error') emitter.off('error', onerror)

      if (signal) signal.removeEventListener('abort', onabort)

      resolve(args)
    })

    function onerror(err) {
      emitter.off('error', onerror)

      reject(err)
    }

    function onabort() {
      signal.removeEventListener('abort', onabort)

      onerror(errors.OPERATION_ABORTED(signal.reason))
    }
  })
}

exports.forward = function forward(from, to, names, opts = {}) {
  if (typeof names === 'string') names = [names]

  const { emit = to.emit.bind(to) } = opts

  const listeners = names.map(
    (name) =>
      function onevent(...args) {
        emit(name, ...args)
      }
  )

  to.on('newListener', (name) => {
    const i = names.indexOf(name)

    if (i !== -1 && to.listenerCount(name) === 0) {
      from.on(name, listeners[i])
    }
  }).on('removeListener', (name) => {
    const i = names.indexOf(name)

    if (i !== -1 && to.listenerCount(name) === 0) {
      from.off(name, listeners[i])
    }
  })
}

exports.listenerCount = function listenerCount(emitter, name) {
  return emitter.listenerCount(name)
}

exports.getMaxListeners = function getMaxListeners(emitter) {
  if (typeof emitter.getMaxListeners === 'function') {
    return emitter.getMaxListeners()
  }

  return exports.defaultMaxListeners
}

exports.setMaxListeners = function setMaxListeners(n, ...emitters) {
  if (emitters.length === 0) exports.defaultMaxListeners = n
  else {
    for (const emitter of emitters) {
      if (typeof emitter.setMaxListeners === 'function') {
        emitter.setMaxListeners(n)
      }
    }
  }
}

},{"./lib/errors":104}],104:[function(require,module,exports){
module.exports = class EventEmitterError extends Error {
  constructor(msg, code, fn = EventEmitterError, opts) {
    super(`${code}: ${msg}`, opts)
    this.code = code

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, fn)
    }
  }

  get name() {
    return 'EventEmitterError'
  }

  static OPERATION_ABORTED(cause, msg = 'Operation aborted') {
    return new EventEmitterError(
      msg,
      'OPERATION_ABORTED',
      EventEmitterError.OPERATION_ABORTED,
      { cause }
    )
  }

  static UNHANDLED_ERROR(cause, msg = 'Unhandled error') {
    return new EventEmitterError(
      msg,
      'UNHANDLED_ERROR',
      EventEmitterError.UNHANDLED_ERROR,
      { cause }
    )
  }
}

},{}],105:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],106:[function(require,module,exports){
const FACTOR = new Uint16Array(8)

function factor4096 (i, n) {
  while (n > 0) {
    const f = i & 4095
    FACTOR[--n] = f
    i = (i - f) / 4096
  }
  return FACTOR
}

module.exports = class BigSparseArray {
  constructor () {
    this.tiny = new TinyArray()
    this.maxLength = 4096
    this.factor = 1
  }

  set (index, val) {
    if (val !== undefined) {
      while (index >= this.maxLength) {
        this.maxLength *= 4096
        this.factor++
        if (!this.tiny.isEmptyish()) {
          const t = new TinyArray()
          t.set(0, this.tiny)
          this.tiny = t
        }
      }
    }

    const f = factor4096(index, this.factor)
    const last = this.factor - 1

    let tiny = this.tiny
    for (let i = 0; i < last; i++) {
      const next = tiny.get(f[i])
      if (next === undefined) {
        if (val === undefined) return
        tiny = tiny.set(f[i], new TinyArray())
      } else {
        tiny = next
      }
    }

    return tiny.set(f[last], val)
  }

  get (index) {
    if (index >= this.maxLength) return

    const f = factor4096(index, this.factor)
    const last = this.factor - 1

    let tiny = this.tiny
    for (let i = 0; i < last; i++) {
      tiny = tiny.get(f[i])
      if (tiny === undefined) return
    }

    return tiny.get(f[last])
  }
}

class TinyArray {
  constructor () {
    this.s = 0
    this.b = new Array(1)
    this.f = new Uint16Array(1)
  }

  isEmptyish () {
    return this.b.length === 1 && this.b[0] === undefined
  }

  get (i) {
    if (this.s === 12) return this.b[i]
    const f = i >>> this.s
    const r = i & (this.b.length - 1)
    return this.f[r] === f ? this.b[r] : undefined
  }

  set (i, v) {
    while (this.s !== 12) {
      const f = i >>> this.s
      const r = i & (this.b.length - 1)
      const o = this.b[r]

      if (o === undefined || f === this.f[r]) {
        this.b[r] = v
        this.f[r] = f
        return v
      }

      this.grow()
    }

    this.b[i] = v
    return v
  }

  grow () {
    const os = this.s
    const ob = this.b
    const of = this.f

    this.s += 4
    this.b = new Array(this.b.length << 4)
    this.f = this.s === 12 ? null : new Uint8Array(this.b.length)

    const m = this.b.length - 1

    for (let or = 0; or < ob.length; or++) {
      if (ob[or] === undefined) continue

      const i = of[or] << os | or
      const f = i >>> this.s
      const r = i & m

      this.b[r] = ob[or]
      if (this.s !== 12) this.f[r] = f
    }
  }
}

},{}],107:[function(require,module,exports){
const b4a = require('b4a')

module.exports = function (a, b) {
  return new Promise((resolve, reject) => binaryEquals(a, b, resolve, reject))
}

function binaryEquals (a, b, resolve, reject) {
  let aBuf = null
  let aEnded = false

  let bBuf = null
  let bEnded = false

  let closed = 0
  let done = false
  let error = null
  let equals = false

  a.on('readable', tick)
  a.on('end', onend)
  a.on('error', onerror)
  a.on('close', onclose)

  b.on('readable', tick)
  b.on('end', onend)
  b.on('error', onerror)
  b.on('close', onclose)

  function onerror (err) {
    error = err
    a.destroy()
    b.destroy()
  }

  function onclose () {
    if (++closed !== 2) return
    if (error !== null && done === false) reject(error)
    else resolve(equals)
  }

  function ondone (eq) {
    if (done) return
    done = true

    equals = eq

    a.destroy()
    b.destroy()
  }

  function onend () {
    if (this === a) aEnded = true
    else bEnded = true
    tick()
  }

  function tick () {
    while (done === false) {
      if (aBuf === null) aBuf = a.read()
      if (bBuf === null) bBuf = b.read()

      if (aBuf === null && bBuf === null && aEnded && bEnded) {
        ondone(true)
        return
      }

      if (aBuf !== null && (bBuf === null && bEnded)) {
        ondone(false)
        return
      }

      if (bBuf !== null && (aBuf === null && aEnded)) {
        ondone(false)
        return
      }

      if (aBuf === null || bBuf === null) return // read pending

      if (aBuf.byteLength === bBuf.byteLength) {
        if (b4a.equals(aBuf, bBuf)) {
          aBuf = bBuf = null
          continue
        }

        ondone(false)
        return
      }

      const min = Math.min(aBuf.byteLength, bBuf.byteLength)

      if (b4a.equals(aBuf.subarray(0, min), bBuf.subarray(0, min))) {
        aBuf = aBuf.byteLength === min ? null : aBuf.subarray(min)
        bBuf = bBuf.byteLength === min ? null : bBuf.subarray(min)
        continue
      }

      ondone(false)
      return
    }
  }
}

},{"b4a":102}],108:[function(require,module,exports){
const sodium = require('../../src/node_modules/sodium')
const b4a = require('b4a')
const assert = require('nanoassert')
const { detectLanguage, loadWordlist } = require('./wordlist')

module.exports = {
  generateEntropy,
  generateMnemonic,
  normalizeMnemonic,
  validateMnemonic,
  mnemonicToEntropy,
  mnemonicToSeed,
  entropyToMnemonic
}

function generateMnemonic ({ entropy = generateEntropy(), language = 'english' } = {}) {
  const wordlist = loadWordlist(language)
  const extended = computeCheckSum(entropy)

  const words = []

  for (const index of uint11Reader(extended)) {
    words.push(wordlist[index])
  }

  const delimiter = language === 'japanese' ? '\u3000' : ' '

  return words.join(delimiter).trim()
}

function entropyToMnemonic (entropy, { language = 'english' } = {}) {
  return generateMnemonic({ entropy, language })
}

function mnemonicToEntropy (mnemonic) {
  const words = mnemonic.replace(/\u3000/g, ' ').trim().split(' ')
  const language = detectLanguage(words)

  if (!language) {
    throw new Error('Language not recognised')
  }

  if (words.length % 3 !== 0) {
    throw new Error('Invalid length')
  }

  const wordlist = loadWordlist(language)

  const indexes = []
  for (const word of words) {
    const index = wordlist.indexOf(word)
    if (index === -1) {
      throw new Error('Bad word')
    }

    indexes.push(index)
  }

  const bits = words.length * 11
  const len = (bits * 32 / 33) >> 3

  const extended = b4a.alloc(Math.ceil(bits / 8))
  const entropy = extended.subarray(0, len)

  uint11Writer(extended, indexes)

  if (!b4a.equals(extended, computeCheckSum(entropy))) {
    throw new Error('Invalid checksum')
  }

  return entropy
}

function normalizeMnemonic (mnemonic) {
  return mnemonic.trim().replace(/\u3000/, ' ').split(/\s+/).map(c => c.toLowerCase()).join(' ')
}

async function mnemonicToSeed (mnemonic, passphrase = '') {
  mnemonic = normalizeMnemonic(mnemonic)

  if (!validateMnemonic(mnemonic)) {
    throw new Error('Invalid mnemonic')
  }

  const input = b4a.from(mnemonic)
  const salt = b4a.from('mnemonic' + passphrase)

  const output = b4a.alloc(64)

  await sodium.extension_pbkdf2_sha512_async(
    output,
    input,
    salt,
    2048,
    64
  )

  return output
}

function validateMnemonic (mnemonic) {
  try {
    mnemonicToEntropy(mnemonic)
  } catch (e) {
    return false
  }
  return true
}

function sha256 (data, output = b4a.alloc(32)) {
  sodium.crypto_hash_sha256(output, data)
  return output
}

function computeCheckSum (seed) {
  assert((seed.byteLength & 4) === 0, 'seed must be a multiple of 4 bytes')

  const len = seed.byteLength
  const cklen = len >> 2 // cksum bits
  const total = len + Math.ceil(cklen / 8)

  const output = b4a.alloc(len + 32)
  output.set(seed)

  const entropy = output.subarray(0, len)
  const cksum = output.subarray(len)

  sha256(entropy, cksum)

  // only append cklen bits
  output[total - 1] &= (0xff ^ (0xff >> cklen))

  return output.subarray(0, total)
}

function generateEntropy (length = 32) {
  const seed = b4a.alloc(length)
  sodium.randombytes_buf(seed)

  return seed
}

function * uint11Reader (state) {
  yield * uintReader(state, 11)
}

function uint11Writer (buf, uints) {
  return uintWriter(buf, uints, 11)
}

function * uintReader (buffer, width) {
  const MASK = (2 << (width - 1)) - 1

  let pos = 0
  let value = 0

  while (true) {
    const offset = pos >> 3 // byte offset

    if (offset >= buffer.byteLength) {
      return value & MASK
    }

    const height = width - (pos % width)
    const leftover = (offset + 1) * 8 - pos

    value += shift(buffer[offset], height - leftover)

    pos += Math.min(height, leftover)
    if (pos % width) continue

    yield value & MASK

    value = 0
  }
}

function uintWriter (buffer, uints, width) {
  let pos = 0

  while (true) {
    const offset = pos >> 3 // byte offset

    const i = Math.floor(pos / width)
    if (i >= uints.length) break

    if (offset >= buffer.length) {
      throw new Error('Failed to encode uints')
    }

    const rem = 8 - pos % 8
    const height = (i + 1) * width - pos

    const value = shift(uints[i], rem - height)

    buffer[offset] += mask(value, rem)

    pos += Math.min(rem, height)
  }

  return buffer
}

// when n is positive, shift left n bits
// when n is negative, shift right -n bits
function shift (val, n) {
  if (n === 0) return val
  if (n > 0) return val << n

  return val >> (-1 * n)
}

function mask (val, bits) {
  if (bits < 32) return val & ((1 << bits) - 1)
  return val % (2 ** bits)
}

},{"../../src/node_modules/sodium":608,"./wordlist":114,"b4a":102,"nanoassert":390}],109:[function(require,module,exports){
module.exports=["的","一","是","在","不","了","有","和","人","这","中","大","为","上","个","国","我","以","要","他","时","来","用","们","生","到","作","地","于","出","就","分","对","成","会","可","主","发","年","动","同","工","也","能","下","过","子","说","产","种","面","而","方","后","多","定","行","学","法","所","民","得","经","十","三","之","进","着","等","部","度","家","电","力","里","如","水","化","高","自","二","理","起","小","物","现","实","加","量","都","两","体","制","机","当","使","点","从","业","本","去","把","性","好","应","开","它","合","还","因","由","其","些","然","前","外","天","政","四","日","那","社","义","事","平","形","相","全","表","间","样","与","关","各","重","新","线","内","数","正","心","反","你","明","看","原","又","么","利","比","或","但","质","气","第","向","道","命","此","变","条","只","没","结","解","问","意","建","月","公","无","系","军","很","情","者","最","立","代","想","已","通","并","提","直","题","党","程","展","五","果","料","象","员","革","位","入","常","文","总","次","品","式","活","设","及","管","特","件","长","求","老","头","基","资","边","流","路","级","少","图","山","统","接","知","较","将","组","见","计","别","她","手","角","期","根","论","运","农","指","几","九","区","强","放","决","西","被","干","做","必","战","先","回","则","任","取","据","处","队","南","给","色","光","门","即","保","治","北","造","百","规","热","领","七","海","口","东","导","器","压","志","世","金","增","争","济","阶","油","思","术","极","交","受","联","什","认","六","共","权","收","证","改","清","美","再","采","转","更","单","风","切","打","白","教","速","花","带","安","场","身","车","例","真","务","具","万","每","目","至","达","走","积","示","议","声","报","斗","完","类","八","离","华","名","确","才","科","张","信","马","节","话","米","整","空","元","况","今","集","温","传","土","许","步","群","广","石","记","需","段","研","界","拉","林","律","叫","且","究","观","越","织","装","影","算","低","持","音","众","书","布","复","容","儿","须","际","商","非","验","连","断","深","难","近","矿","千","周","委","素","技","备","半","办","青","省","列","习","响","约","支","般","史","感","劳","便","团","往","酸","历","市","克","何","除","消","构","府","称","太","准","精","值","号","率","族","维","划","选","标","写","存","候","毛","亲","快","效","斯","院","查","江","型","眼","王","按","格","养","易","置","派","层","片","始","却","专","状","育","厂","京","识","适","属","圆","包","火","住","调","满","县","局","照","参","红","细","引","听","该","铁","价","严","首","底","液","官","德","随","病","苏","失","尔","死","讲","配","女","黄","推","显","谈","罪","神","艺","呢","席","含","企","望","密","批","营","项","防","举","球","英","氧","势","告","李","台","落","木","帮","轮","破","亚","师","围","注","远","字","材","排","供","河","态","封","另","施","减","树","溶","怎","止","案","言","士","均","武","固","叶","鱼","波","视","仅","费","紧","爱","左","章","早","朝","害","续","轻","服","试","食","充","兵","源","判","护","司","足","某","练","差","致","板","田","降","黑","犯","负","击","范","继","兴","似","余","坚","曲","输","修","故","城","夫","够","送","笔","船","占","右","财","吃","富","春","职","觉","汉","画","功","巴","跟","虽","杂","飞","检","吸","助","升","阳","互","初","创","抗","考","投","坏","策","古","径","换","未","跑","留","钢","曾","端","责","站","简","述","钱","副","尽","帝","射","草","冲","承","独","令","限","阿","宣","环","双","请","超","微","让","控","州","良","轴","找","否","纪","益","依","优","顶","础","载","倒","房","突","坐","粉","敌","略","客","袁","冷","胜","绝","析","块","剂","测","丝","协","诉","念","陈","仍","罗","盐","友","洋","错","苦","夜","刑","移","频","逐","靠","混","母","短","皮","终","聚","汽","村","云","哪","既","距","卫","停","烈","央","察","烧","迅","境","若","印","洲","刻","括","激","孔","搞","甚","室","待","核","校","散","侵","吧","甲","游","久","菜","味","旧","模","湖","货","损","预","阻","毫","普","稳","乙","妈","植","息","扩","银","语","挥","酒","守","拿","序","纸","医","缺","雨","吗","针","刘","啊","急","唱","误","训","愿","审","附","获","茶","鲜","粮","斤","孩","脱","硫","肥","善","龙","演","父","渐","血","欢","械","掌","歌","沙","刚","攻","谓","盾","讨","晚","粒","乱","燃","矛","乎","杀","药","宁","鲁","贵","钟","煤","读","班","伯","香","介","迫","句","丰","培","握","兰","担","弦","蛋","沉","假","穿","执","答","乐","谁","顺","烟","缩","征","脸","喜","松","脚","困","异","免","背","星","福","买","染","井","概","慢","怕","磁","倍","祖","皇","促","静","补","评","翻","肉","践","尼","衣","宽","扬","棉","希","伤","操","垂","秋","宜","氢","套","督","振","架","亮","末","宪","庆","编","牛","触","映","雷","销","诗","座","居","抓","裂","胞","呼","娘","景","威","绿","晶","厚","盟","衡","鸡","孙","延","危","胶","屋","乡","临","陆","顾","掉","呀","灯","岁","措","束","耐","剧","玉","赵","跳","哥","季","课","凯","胡","额","款","绍","卷","齐","伟","蒸","殖","永","宗","苗","川","炉","岩","弱","零","杨","奏","沿","露","杆","探","滑","镇","饭","浓","航","怀","赶","库","夺","伊","灵","税","途","灭","赛","归","召","鼓","播","盘","裁","险","康","唯","录","菌","纯","借","糖","盖","横","符","私","努","堂","域","枪","润","幅","哈","竟","熟","虫","泽","脑","壤","碳","欧","遍","侧","寨","敢","彻","虑","斜","薄","庭","纳","弹","饲","伸","折","麦","湿","暗","荷","瓦","塞","床","筑","恶","户","访","塔","奇","透","梁","刀","旋","迹","卡","氯","遇","份","毒","泥","退","洗","摆","灰","彩","卖","耗","夏","择","忙","铜","献","硬","予","繁","圈","雪","函","亦","抽","篇","阵","阴","丁","尺","追","堆","雄","迎","泛","爸","楼","避","谋","吨","野","猪","旗","累","偏","典","馆","索","秦","脂","潮","爷","豆","忽","托","惊","塑","遗","愈","朱","替","纤","粗","倾","尚","痛","楚","谢","奋","购","磨","君","池","旁","碎","骨","监","捕","弟","暴","割","贯","殊","释","词","亡","壁","顿","宝","午","尘","闻","揭","炮","残","冬","桥","妇","警","综","招","吴","付","浮","遭","徐","您","摇","谷","赞","箱","隔","订","男","吹","园","纷","唐","败","宋","玻","巨","耕","坦","荣","闭","湾","键","凡","驻","锅","救","恩","剥","凝","碱","齿","截","炼","麻","纺","禁","废","盛","版","缓","净","睛","昌","婚","涉","筒","嘴","插","岸","朗","庄","街","藏","姑","贸","腐","奴","啦","惯","乘","伙","恢","匀","纱","扎","辩","耳","彪","臣","亿","璃","抵","脉","秀","萨","俄","网","舞","店","喷","纵","寸","汗","挂","洪","贺","闪","柬","爆","烯","津","稻","墙","软","勇","像","滚","厘","蒙","芳","肯","坡","柱","荡","腿","仪","旅","尾","轧","冰","贡","登","黎","削","钻","勒","逃","障","氨","郭","峰","币","港","伏","轨","亩","毕","擦","莫","刺","浪","秘","援","株","健","售","股","岛","甘","泡","睡","童","铸","汤","阀","休","汇","舍","牧","绕","炸","哲","磷","绩","朋","淡","尖","启","陷","柴","呈","徒","颜","泪","稍","忘","泵","蓝","拖","洞","授","镜","辛","壮","锋","贫","虚","弯","摩","泰","幼","廷","尊","窗","纲","弄","隶","疑","氏","宫","姐","震","瑞","怪","尤","琴","循","描","膜","违","夹","腰","缘","珠","穷","森","枝","竹","沟","催","绳","忆","邦","剩","幸","浆","栏","拥","牙","贮","礼","滤","钠","纹","罢","拍","咱","喊","袖","埃","勤","罚","焦","潜","伍","墨","欲","缝","姓","刊","饱","仿","奖","铝","鬼","丽","跨","默","挖","链","扫","喝","袋","炭","污","幕","诸","弧","励","梅","奶","洁","灾","舟","鉴","苯","讼","抱","毁","懂","寒","智","埔","寄","届","跃","渡","挑","丹","艰","贝","碰","拔","爹","戴","码","梦","芽","熔","赤","渔","哭","敬","颗","奔","铅","仲","虎","稀","妹","乏","珍","申","桌","遵","允","隆","螺","仓","魏","锐","晓","氮","兼","隐","碍","赫","拨","忠","肃","缸","牵","抢","博","巧","壳","兄","杜","讯","诚","碧","祥","柯","页","巡","矩","悲","灌","龄","伦","票","寻","桂","铺","圣","恐","恰","郑","趣","抬","荒","腾","贴","柔","滴","猛","阔","辆","妻","填","撤","储","签","闹","扰","紫","砂","递","戏","吊","陶","伐","喂","疗","瓶","婆","抚","臂","摸","忍","虾","蜡","邻","胸","巩","挤","偶","弃","槽","劲","乳","邓","吉","仁","烂","砖","租","乌","舰","伴","瓜","浅","丙","暂","燥","橡","柳","迷","暖","牌","秧","胆","详","簧","踏","瓷","谱","呆","宾","糊","洛","辉","愤","竞","隙","怒","粘","乃","绪","肩","籍","敏","涂","熙","皆","侦","悬","掘","享","纠","醒","狂","锁","淀","恨","牲","霸","爬","赏","逆","玩","陵","祝","秒","浙","貌","役","彼","悉","鸭","趋","凤","晨","畜","辈","秩","卵","署","梯","炎","滩","棋","驱","筛","峡","冒","啥","寿","译","浸","泉","帽","迟","硅","疆","贷","漏","稿","冠","嫩","胁","芯","牢","叛","蚀","奥","鸣","岭","羊","凭","串","塘","绘","酵","融","盆","锡","庙","筹","冻","辅","摄","袭","筋","拒","僚","旱","钾","鸟","漆","沈","眉","疏","添","棒","穗","硝","韩","逼","扭","侨","凉","挺","碗","栽","炒","杯","患","馏","劝","豪","辽","勃","鸿","旦","吏","拜","狗","埋","辊","掩","饮","搬","骂","辞","勾","扣","估","蒋","绒","雾","丈","朵","姆","拟","宇","辑","陕","雕","偿","蓄","崇","剪","倡","厅","咬","驶","薯","刷","斥","番","赋","奉","佛","浇","漫","曼","扇","钙","桃","扶","仔","返","俗","亏","腔","鞋","棱","覆","框","悄","叔","撞","骗","勘","旺","沸","孤","吐","孟","渠","屈","疾","妙","惜","仰","狠","胀","谐","抛","霉","桑","岗","嘛","衰","盗","渗","脏","赖","涌","甜","曹","阅","肌","哩","厉","烃","纬","毅","昨","伪","症","煮","叹","钉","搭","茎","笼","酷","偷","弓","锥","恒","杰","坑","鼻","翼","纶","叙","狱","逮","罐","络","棚","抑","膨","蔬","寺","骤","穆","冶","枯","册","尸","凸","绅","坯","牺","焰","轰","欣","晋","瘦","御","锭","锦","丧","旬","锻","垄","搜","扑","邀","亭","酯","迈","舒","脆","酶","闲","忧","酚","顽","羽","涨","卸","仗","陪","辟","惩","杭","姚","肚","捉","飘","漂","昆","欺","吾","郎","烷","汁","呵","饰","萧","雅","邮","迁","燕","撒","姻","赴","宴","烦","债","帐","斑","铃","旨","醇","董","饼","雏","姿","拌","傅","腹","妥","揉","贤","拆","歪","葡","胺","丢","浩","徽","昂","垫","挡","览","贪","慰","缴","汪","慌","冯","诺","姜","谊","凶","劣","诬","耀","昏","躺","盈","骑","乔","溪","丛","卢","抹","闷","咨","刮","驾","缆","悟","摘","铒","掷","颇","幻","柄","惠","惨","佳","仇","腊","窝","涤","剑","瞧","堡","泼","葱","罩","霍","捞","胎","苍","滨","俩","捅","湘","砍","霞","邵","萄","疯","淮","遂","熊","粪","烘","宿","档","戈","驳","嫂","裕","徙","箭","捐","肠","撑","晒","辨","殿","莲","摊","搅","酱","屏","疫","哀","蔡","堵","沫","皱","畅","叠","阁","莱","敲","辖","钩","痕","坝","巷","饿","祸","丘","玄","溜","曰","逻","彭","尝","卿","妨","艇","吞","韦","怨","矮","歇"]
},{}],110:[function(require,module,exports){
module.exports=["的","一","是","在","不","了","有","和","人","這","中","大","為","上","個","國","我","以","要","他","時","來","用","們","生","到","作","地","於","出","就","分","對","成","會","可","主","發","年","動","同","工","也","能","下","過","子","說","產","種","面","而","方","後","多","定","行","學","法","所","民","得","經","十","三","之","進","著","等","部","度","家","電","力","裡","如","水","化","高","自","二","理","起","小","物","現","實","加","量","都","兩","體","制","機","當","使","點","從","業","本","去","把","性","好","應","開","它","合","還","因","由","其","些","然","前","外","天","政","四","日","那","社","義","事","平","形","相","全","表","間","樣","與","關","各","重","新","線","內","數","正","心","反","你","明","看","原","又","麼","利","比","或","但","質","氣","第","向","道","命","此","變","條","只","沒","結","解","問","意","建","月","公","無","系","軍","很","情","者","最","立","代","想","已","通","並","提","直","題","黨","程","展","五","果","料","象","員","革","位","入","常","文","總","次","品","式","活","設","及","管","特","件","長","求","老","頭","基","資","邊","流","路","級","少","圖","山","統","接","知","較","將","組","見","計","別","她","手","角","期","根","論","運","農","指","幾","九","區","強","放","決","西","被","幹","做","必","戰","先","回","則","任","取","據","處","隊","南","給","色","光","門","即","保","治","北","造","百","規","熱","領","七","海","口","東","導","器","壓","志","世","金","增","爭","濟","階","油","思","術","極","交","受","聯","什","認","六","共","權","收","證","改","清","美","再","採","轉","更","單","風","切","打","白","教","速","花","帶","安","場","身","車","例","真","務","具","萬","每","目","至","達","走","積","示","議","聲","報","鬥","完","類","八","離","華","名","確","才","科","張","信","馬","節","話","米","整","空","元","況","今","集","溫","傳","土","許","步","群","廣","石","記","需","段","研","界","拉","林","律","叫","且","究","觀","越","織","裝","影","算","低","持","音","眾","書","布","复","容","兒","須","際","商","非","驗","連","斷","深","難","近","礦","千","週","委","素","技","備","半","辦","青","省","列","習","響","約","支","般","史","感","勞","便","團","往","酸","歷","市","克","何","除","消","構","府","稱","太","準","精","值","號","率","族","維","劃","選","標","寫","存","候","毛","親","快","效","斯","院","查","江","型","眼","王","按","格","養","易","置","派","層","片","始","卻","專","狀","育","廠","京","識","適","屬","圓","包","火","住","調","滿","縣","局","照","參","紅","細","引","聽","該","鐵","價","嚴","首","底","液","官","德","隨","病","蘇","失","爾","死","講","配","女","黃","推","顯","談","罪","神","藝","呢","席","含","企","望","密","批","營","項","防","舉","球","英","氧","勢","告","李","台","落","木","幫","輪","破","亞","師","圍","注","遠","字","材","排","供","河","態","封","另","施","減","樹","溶","怎","止","案","言","士","均","武","固","葉","魚","波","視","僅","費","緊","愛","左","章","早","朝","害","續","輕","服","試","食","充","兵","源","判","護","司","足","某","練","差","致","板","田","降","黑","犯","負","擊","范","繼","興","似","餘","堅","曲","輸","修","故","城","夫","夠","送","筆","船","佔","右","財","吃","富","春","職","覺","漢","畫","功","巴","跟","雖","雜","飛","檢","吸","助","昇","陽","互","初","創","抗","考","投","壞","策","古","徑","換","未","跑","留","鋼","曾","端","責","站","簡","述","錢","副","盡","帝","射","草","衝","承","獨","令","限","阿","宣","環","雙","請","超","微","讓","控","州","良","軸","找","否","紀","益","依","優","頂","礎","載","倒","房","突","坐","粉","敵","略","客","袁","冷","勝","絕","析","塊","劑","測","絲","協","訴","念","陳","仍","羅","鹽","友","洋","錯","苦","夜","刑","移","頻","逐","靠","混","母","短","皮","終","聚","汽","村","雲","哪","既","距","衛","停","烈","央","察","燒","迅","境","若","印","洲","刻","括","激","孔","搞","甚","室","待","核","校","散","侵","吧","甲","遊","久","菜","味","舊","模","湖","貨","損","預","阻","毫","普","穩","乙","媽","植","息","擴","銀","語","揮","酒","守","拿","序","紙","醫","缺","雨","嗎","針","劉","啊","急","唱","誤","訓","願","審","附","獲","茶","鮮","糧","斤","孩","脫","硫","肥","善","龍","演","父","漸","血","歡","械","掌","歌","沙","剛","攻","謂","盾","討","晚","粒","亂","燃","矛","乎","殺","藥","寧","魯","貴","鐘","煤","讀","班","伯","香","介","迫","句","豐","培","握","蘭","擔","弦","蛋","沉","假","穿","執","答","樂","誰","順","煙","縮","徵","臉","喜","松","腳","困","異","免","背","星","福","買","染","井","概","慢","怕","磁","倍","祖","皇","促","靜","補","評","翻","肉","踐","尼","衣","寬","揚","棉","希","傷","操","垂","秋","宜","氫","套","督","振","架","亮","末","憲","慶","編","牛","觸","映","雷","銷","詩","座","居","抓","裂","胞","呼","娘","景","威","綠","晶","厚","盟","衡","雞","孫","延","危","膠","屋","鄉","臨","陸","顧","掉","呀","燈","歲","措","束","耐","劇","玉","趙","跳","哥","季","課","凱","胡","額","款","紹","卷","齊","偉","蒸","殖","永","宗","苗","川","爐","岩","弱","零","楊","奏","沿","露","桿","探","滑","鎮","飯","濃","航","懷","趕","庫","奪","伊","靈","稅","途","滅","賽","歸","召","鼓","播","盤","裁","險","康","唯","錄","菌","純","借","糖","蓋","橫","符","私","努","堂","域","槍","潤","幅","哈","竟","熟","蟲","澤","腦","壤","碳","歐","遍","側","寨","敢","徹","慮","斜","薄","庭","納","彈","飼","伸","折","麥","濕","暗","荷","瓦","塞","床","築","惡","戶","訪","塔","奇","透","梁","刀","旋","跡","卡","氯","遇","份","毒","泥","退","洗","擺","灰","彩","賣","耗","夏","擇","忙","銅","獻","硬","予","繁","圈","雪","函","亦","抽","篇","陣","陰","丁","尺","追","堆","雄","迎","泛","爸","樓","避","謀","噸","野","豬","旗","累","偏","典","館","索","秦","脂","潮","爺","豆","忽","托","驚","塑","遺","愈","朱","替","纖","粗","傾","尚","痛","楚","謝","奮","購","磨","君","池","旁","碎","骨","監","捕","弟","暴","割","貫","殊","釋","詞","亡","壁","頓","寶","午","塵","聞","揭","炮","殘","冬","橋","婦","警","綜","招","吳","付","浮","遭","徐","您","搖","谷","贊","箱","隔","訂","男","吹","園","紛","唐","敗","宋","玻","巨","耕","坦","榮","閉","灣","鍵","凡","駐","鍋","救","恩","剝","凝","鹼","齒","截","煉","麻","紡","禁","廢","盛","版","緩","淨","睛","昌","婚","涉","筒","嘴","插","岸","朗","莊","街","藏","姑","貿","腐","奴","啦","慣","乘","夥","恢","勻","紗","扎","辯","耳","彪","臣","億","璃","抵","脈","秀","薩","俄","網","舞","店","噴","縱","寸","汗","掛","洪","賀","閃","柬","爆","烯","津","稻","牆","軟","勇","像","滾","厘","蒙","芳","肯","坡","柱","盪","腿","儀","旅","尾","軋","冰","貢","登","黎","削","鑽","勒","逃","障","氨","郭","峰","幣","港","伏","軌","畝","畢","擦","莫","刺","浪","秘","援","株","健","售","股","島","甘","泡","睡","童","鑄","湯","閥","休","匯","舍","牧","繞","炸","哲","磷","績","朋","淡","尖","啟","陷","柴","呈","徒","顏","淚","稍","忘","泵","藍","拖","洞","授","鏡","辛","壯","鋒","貧","虛","彎","摩","泰","幼","廷","尊","窗","綱","弄","隸","疑","氏","宮","姐","震","瑞","怪","尤","琴","循","描","膜","違","夾","腰","緣","珠","窮","森","枝","竹","溝","催","繩","憶","邦","剩","幸","漿","欄","擁","牙","貯","禮","濾","鈉","紋","罷","拍","咱","喊","袖","埃","勤","罰","焦","潛","伍","墨","欲","縫","姓","刊","飽","仿","獎","鋁","鬼","麗","跨","默","挖","鏈","掃","喝","袋","炭","污","幕","諸","弧","勵","梅","奶","潔","災","舟","鑑","苯","訟","抱","毀","懂","寒","智","埔","寄","屆","躍","渡","挑","丹","艱","貝","碰","拔","爹","戴","碼","夢","芽","熔","赤","漁","哭","敬","顆","奔","鉛","仲","虎","稀","妹","乏","珍","申","桌","遵","允","隆","螺","倉","魏","銳","曉","氮","兼","隱","礙","赫","撥","忠","肅","缸","牽","搶","博","巧","殼","兄","杜","訊","誠","碧","祥","柯","頁","巡","矩","悲","灌","齡","倫","票","尋","桂","鋪","聖","恐","恰","鄭","趣","抬","荒","騰","貼","柔","滴","猛","闊","輛","妻","填","撤","儲","簽","鬧","擾","紫","砂","遞","戲","吊","陶","伐","餵","療","瓶","婆","撫","臂","摸","忍","蝦","蠟","鄰","胸","鞏","擠","偶","棄","槽","勁","乳","鄧","吉","仁","爛","磚","租","烏","艦","伴","瓜","淺","丙","暫","燥","橡","柳","迷","暖","牌","秧","膽","詳","簧","踏","瓷","譜","呆","賓","糊","洛","輝","憤","競","隙","怒","粘","乃","緒","肩","籍","敏","塗","熙","皆","偵","懸","掘","享","糾","醒","狂","鎖","淀","恨","牲","霸","爬","賞","逆","玩","陵","祝","秒","浙","貌","役","彼","悉","鴨","趨","鳳","晨","畜","輩","秩","卵","署","梯","炎","灘","棋","驅","篩","峽","冒","啥","壽","譯","浸","泉","帽","遲","矽","疆","貸","漏","稿","冠","嫩","脅","芯","牢","叛","蝕","奧","鳴","嶺","羊","憑","串","塘","繪","酵","融","盆","錫","廟","籌","凍","輔","攝","襲","筋","拒","僚","旱","鉀","鳥","漆","沈","眉","疏","添","棒","穗","硝","韓","逼","扭","僑","涼","挺","碗","栽","炒","杯","患","餾","勸","豪","遼","勃","鴻","旦","吏","拜","狗","埋","輥","掩","飲","搬","罵","辭","勾","扣","估","蔣","絨","霧","丈","朵","姆","擬","宇","輯","陝","雕","償","蓄","崇","剪","倡","廳","咬","駛","薯","刷","斥","番","賦","奉","佛","澆","漫","曼","扇","鈣","桃","扶","仔","返","俗","虧","腔","鞋","棱","覆","框","悄","叔","撞","騙","勘","旺","沸","孤","吐","孟","渠","屈","疾","妙","惜","仰","狠","脹","諧","拋","黴","桑","崗","嘛","衰","盜","滲","臟","賴","湧","甜","曹","閱","肌","哩","厲","烴","緯","毅","昨","偽","症","煮","嘆","釘","搭","莖","籠","酷","偷","弓","錐","恆","傑","坑","鼻","翼","綸","敘","獄","逮","罐","絡","棚","抑","膨","蔬","寺","驟","穆","冶","枯","冊","屍","凸","紳","坯","犧","焰","轟","欣","晉","瘦","禦","錠","錦","喪","旬","鍛","壟","搜","撲","邀","亭","酯","邁","舒","脆","酶","閒","憂","酚","頑","羽","漲","卸","仗","陪","闢","懲","杭","姚","肚","捉","飄","漂","昆","欺","吾","郎","烷","汁","呵","飾","蕭","雅","郵","遷","燕","撒","姻","赴","宴","煩","債","帳","斑","鈴","旨","醇","董","餅","雛","姿","拌","傅","腹","妥","揉","賢","拆","歪","葡","胺","丟","浩","徽","昂","墊","擋","覽","貪","慰","繳","汪","慌","馮","諾","姜","誼","兇","劣","誣","耀","昏","躺","盈","騎","喬","溪","叢","盧","抹","悶","諮","刮","駕","纜","悟","摘","鉺","擲","頗","幻","柄","惠","慘","佳","仇","臘","窩","滌","劍","瞧","堡","潑","蔥","罩","霍","撈","胎","蒼","濱","倆","捅","湘","砍","霞","邵","萄","瘋","淮","遂","熊","糞","烘","宿","檔","戈","駁","嫂","裕","徙","箭","捐","腸","撐","曬","辨","殿","蓮","攤","攪","醬","屏","疫","哀","蔡","堵","沫","皺","暢","疊","閣","萊","敲","轄","鉤","痕","壩","巷","餓","禍","丘","玄","溜","曰","邏","彭","嘗","卿","妨","艇","吞","韋","怨","矮","歇"]
},{}],111:[function(require,module,exports){
module.exports=["abdikace","abeceda","adresa","agrese","akce","aktovka","alej","alkohol","amputace","ananas","andulka","anekdota","anketa","antika","anulovat","archa","arogance","asfalt","asistent","aspirace","astma","astronom","atlas","atletika","atol","autobus","azyl","babka","bachor","bacil","baculka","badatel","bageta","bagr","bahno","bakterie","balada","baletka","balkon","balonek","balvan","balza","bambus","bankomat","barbar","baret","barman","baroko","barva","baterka","batoh","bavlna","bazalka","bazilika","bazuka","bedna","beran","beseda","bestie","beton","bezinka","bezmoc","beztak","bicykl","bidlo","biftek","bikiny","bilance","biograf","biolog","bitva","bizon","blahobyt","blatouch","blecha","bledule","blesk","blikat","blizna","blokovat","bloudit","blud","bobek","bobr","bodlina","bodnout","bohatost","bojkot","bojovat","bokorys","bolest","borec","borovice","bota","boubel","bouchat","bouda","boule","bourat","boxer","bradavka","brambora","branka","bratr","brepta","briketa","brko","brloh","bronz","broskev","brunetka","brusinka","brzda","brzy","bublina","bubnovat","buchta","buditel","budka","budova","bufet","bujarost","bukvice","buldok","bulva","bunda","bunkr","burza","butik","buvol","buzola","bydlet","bylina","bytovka","bzukot","capart","carevna","cedr","cedule","cejch","cejn","cela","celer","celkem","celnice","cenina","cennost","cenovka","centrum","cenzor","cestopis","cetka","chalupa","chapadlo","charita","chata","chechtat","chemie","chichot","chirurg","chlad","chleba","chlubit","chmel","chmura","chobot","chochol","chodba","cholera","chomout","chopit","choroba","chov","chrapot","chrlit","chrt","chrup","chtivost","chudina","chutnat","chvat","chvilka","chvost","chyba","chystat","chytit","cibule","cigareta","cihelna","cihla","cinkot","cirkus","cisterna","citace","citrus","cizinec","cizost","clona","cokoliv","couvat","ctitel","ctnost","cudnost","cuketa","cukr","cupot","cvaknout","cval","cvik","cvrkot","cyklista","daleko","dareba","datel","datum","dcera","debata","dechovka","decibel","deficit","deflace","dekl","dekret","demokrat","deprese","derby","deska","detektiv","dikobraz","diktovat","dioda","diplom","disk","displej","divadlo","divoch","dlaha","dlouho","dluhopis","dnes","dobro","dobytek","docent","dochutit","dodnes","dohled","dohoda","dohra","dojem","dojnice","doklad","dokola","doktor","dokument","dolar","doleva","dolina","doma","dominant","domluvit","domov","donutit","dopad","dopis","doplnit","doposud","doprovod","dopustit","dorazit","dorost","dort","dosah","doslov","dostatek","dosud","dosyta","dotaz","dotek","dotknout","doufat","doutnat","dovozce","dozadu","doznat","dozorce","drahota","drak","dramatik","dravec","draze","drdol","drobnost","drogerie","drozd","drsnost","drtit","drzost","duben","duchovno","dudek","duha","duhovka","dusit","dusno","dutost","dvojice","dvorec","dynamit","ekolog","ekonomie","elektron","elipsa","email","emise","emoce","empatie","epizoda","epocha","epopej","epos","esej","esence","eskorta","eskymo","etiketa","euforie","evoluce","exekuce","exkurze","expedice","exploze","export","extrakt","facka","fajfka","fakulta","fanatik","fantazie","farmacie","favorit","fazole","federace","fejeton","fenka","fialka","figurant","filozof","filtr","finance","finta","fixace","fjord","flanel","flirt","flotila","fond","fosfor","fotbal","fotka","foton","frakce","freska","fronta","fukar","funkce","fyzika","galeje","garant","genetika","geolog","gilotina","glazura","glejt","golem","golfista","gotika","graf","gramofon","granule","grep","gril","grog","groteska","guma","hadice","hadr","hala","halenka","hanba","hanopis","harfa","harpuna","havran","hebkost","hejkal","hejno","hejtman","hektar","helma","hematom","herec","herna","heslo","hezky","historik","hladovka","hlasivky","hlava","hledat","hlen","hlodavec","hloh","hloupost","hltat","hlubina","hluchota","hmat","hmota","hmyz","hnis","hnojivo","hnout","hoblina","hoboj","hoch","hodiny","hodlat","hodnota","hodovat","hojnost","hokej","holinka","holka","holub","homole","honitba","honorace","horal","horda","horizont","horko","horlivec","hormon","hornina","horoskop","horstvo","hospoda","hostina","hotovost","houba","houf","houpat","houska","hovor","hradba","hranice","hravost","hrazda","hrbolek","hrdina","hrdlo","hrdost","hrnek","hrobka","hromada","hrot","hrouda","hrozen","hrstka","hrubost","hryzat","hubenost","hubnout","hudba","hukot","humr","husita","hustota","hvozd","hybnost","hydrant","hygiena","hymna","hysterik","idylka","ihned","ikona","iluze","imunita","infekce","inflace","inkaso","inovace","inspekce","internet","invalida","investor","inzerce","ironie","jablko","jachta","jahoda","jakmile","jakost","jalovec","jantar","jarmark","jaro","jasan","jasno","jatka","javor","jazyk","jedinec","jedle","jednatel","jehlan","jekot","jelen","jelito","jemnost","jenom","jepice","jeseter","jevit","jezdec","jezero","jinak","jindy","jinoch","jiskra","jistota","jitrnice","jizva","jmenovat","jogurt","jurta","kabaret","kabel","kabinet","kachna","kadet","kadidlo","kahan","kajak","kajuta","kakao","kaktus","kalamita","kalhoty","kalibr","kalnost","kamera","kamkoliv","kamna","kanibal","kanoe","kantor","kapalina","kapela","kapitola","kapka","kaple","kapota","kapr","kapusta","kapybara","karamel","karotka","karton","kasa","katalog","katedra","kauce","kauza","kavalec","kazajka","kazeta","kazivost","kdekoliv","kdesi","kedluben","kemp","keramika","kino","klacek","kladivo","klam","klapot","klasika","klaun","klec","klenba","klepat","klesnout","klid","klima","klisna","klobouk","klokan","klopa","kloub","klubovna","klusat","kluzkost","kmen","kmitat","kmotr","kniha","knot","koalice","koberec","kobka","kobliha","kobyla","kocour","kohout","kojenec","kokos","koktejl","kolaps","koleda","kolize","kolo","komando","kometa","komik","komnata","komora","kompas","komunita","konat","koncept","kondice","konec","konfese","kongres","konina","konkurs","kontakt","konzerva","kopanec","kopie","kopnout","koprovka","korbel","korektor","kormidlo","koroptev","korpus","koruna","koryto","korzet","kosatec","kostka","kotel","kotleta","kotoul","koukat","koupelna","kousek","kouzlo","kovboj","koza","kozoroh","krabice","krach","krajina","kralovat","krasopis","kravata","kredit","krejcar","kresba","kreveta","kriket","kritik","krize","krkavec","krmelec","krmivo","krocan","krok","kronika","kropit","kroupa","krovka","krtek","kruhadlo","krupice","krutost","krvinka","krychle","krypta","krystal","kryt","kudlanka","kufr","kujnost","kukla","kulajda","kulich","kulka","kulomet","kultura","kuna","kupodivu","kurt","kurzor","kutil","kvalita","kvasinka","kvestor","kynolog","kyselina","kytara","kytice","kytka","kytovec","kyvadlo","labrador","lachtan","ladnost","laik","lakomec","lamela","lampa","lanovka","lasice","laso","lastura","latinka","lavina","lebka","leckdy","leden","lednice","ledovka","ledvina","legenda","legie","legrace","lehce","lehkost","lehnout","lektvar","lenochod","lentilka","lepenka","lepidlo","letadlo","letec","letmo","letokruh","levhart","levitace","levobok","libra","lichotka","lidojed","lidskost","lihovina","lijavec","lilek","limetka","linie","linka","linoleum","listopad","litina","litovat","lobista","lodivod","logika","logoped","lokalita","loket","lomcovat","lopata","lopuch","lord","losos","lotr","loudal","louh","louka","louskat","lovec","lstivost","lucerna","lucifer","lump","lusk","lustrace","lvice","lyra","lyrika","lysina","madam","madlo","magistr","mahagon","majetek","majitel","majorita","makak","makovice","makrela","malba","malina","malovat","malvice","maminka","mandle","manko","marnost","masakr","maskot","masopust","matice","matrika","maturita","mazanec","mazivo","mazlit","mazurka","mdloba","mechanik","meditace","medovina","melasa","meloun","mentolka","metla","metoda","metr","mezera","migrace","mihnout","mihule","mikina","mikrofon","milenec","milimetr","milost","mimika","mincovna","minibar","minomet","minulost","miska","mistr","mixovat","mladost","mlha","mlhovina","mlok","mlsat","mluvit","mnich","mnohem","mobil","mocnost","modelka","modlitba","mohyla","mokro","molekula","momentka","monarcha","monokl","monstrum","montovat","monzun","mosaz","moskyt","most","motivace","motorka","motyka","moucha","moudrost","mozaika","mozek","mozol","mramor","mravenec","mrkev","mrtvola","mrzet","mrzutost","mstitel","mudrc","muflon","mulat","mumie","munice","muset","mutace","muzeum","muzikant","myslivec","mzda","nabourat","nachytat","nadace","nadbytek","nadhoz","nadobro","nadpis","nahlas","nahnat","nahodile","nahradit","naivita","najednou","najisto","najmout","naklonit","nakonec","nakrmit","nalevo","namazat","namluvit","nanometr","naoko","naopak","naostro","napadat","napevno","naplnit","napnout","naposled","naprosto","narodit","naruby","narychlo","nasadit","nasekat","naslepo","nastat","natolik","navenek","navrch","navzdory","nazvat","nebe","nechat","necky","nedaleko","nedbat","neduh","negace","nehet","nehoda","nejen","nejprve","neklid","nelibost","nemilost","nemoc","neochota","neonka","nepokoj","nerost","nerv","nesmysl","nesoulad","netvor","neuron","nevina","nezvykle","nicota","nijak","nikam","nikdy","nikl","nikterak","nitro","nocleh","nohavice","nominace","nora","norek","nositel","nosnost","nouze","noviny","novota","nozdra","nuda","nudle","nuget","nutit","nutnost","nutrie","nymfa","obal","obarvit","obava","obdiv","obec","obehnat","obejmout","obezita","obhajoba","obilnice","objasnit","objekt","obklopit","oblast","oblek","obliba","obloha","obluda","obnos","obohatit","obojek","obout","obrazec","obrna","obruba","obrys","obsah","obsluha","obstarat","obuv","obvaz","obvinit","obvod","obvykle","obyvatel","obzor","ocas","ocel","ocenit","ochladit","ochota","ochrana","ocitnout","odboj","odbyt","odchod","odcizit","odebrat","odeslat","odevzdat","odezva","odhadce","odhodit","odjet","odjinud","odkaz","odkoupit","odliv","odluka","odmlka","odolnost","odpad","odpis","odplout","odpor","odpustit","odpykat","odrazka","odsoudit","odstup","odsun","odtok","odtud","odvaha","odveta","odvolat","odvracet","odznak","ofina","ofsajd","ohlas","ohnisko","ohrada","ohrozit","ohryzek","okap","okenice","oklika","okno","okouzlit","okovy","okrasa","okres","okrsek","okruh","okupant","okurka","okusit","olejnina","olizovat","omak","omeleta","omezit","omladina","omlouvat","omluva","omyl","onehdy","opakovat","opasek","operace","opice","opilost","opisovat","opora","opozice","opravdu","oproti","orbital","orchestr","orgie","orlice","orloj","ortel","osada","oschnout","osika","osivo","oslava","oslepit","oslnit","oslovit","osnova","osoba","osolit","ospalec","osten","ostraha","ostuda","ostych","osvojit","oteplit","otisk","otop","otrhat","otrlost","otrok","otruby","otvor","ovanout","ovar","oves","ovlivnit","ovoce","oxid","ozdoba","pachatel","pacient","padouch","pahorek","pakt","palanda","palec","palivo","paluba","pamflet","pamlsek","panenka","panika","panna","panovat","panstvo","pantofle","paprika","parketa","parodie","parta","paruka","paryba","paseka","pasivita","pastelka","patent","patrona","pavouk","pazneht","pazourek","pecka","pedagog","pejsek","peklo","peloton","penalta","pendrek","penze","periskop","pero","pestrost","petarda","petice","petrolej","pevnina","pexeso","pianista","piha","pijavice","pikle","piknik","pilina","pilnost","pilulka","pinzeta","pipeta","pisatel","pistole","pitevna","pivnice","pivovar","placenta","plakat","plamen","planeta","plastika","platit","plavidlo","plaz","plech","plemeno","plenta","ples","pletivo","plevel","plivat","plnit","plno","plocha","plodina","plomba","plout","pluk","plyn","pobavit","pobyt","pochod","pocit","poctivec","podat","podcenit","podepsat","podhled","podivit","podklad","podmanit","podnik","podoba","podpora","podraz","podstata","podvod","podzim","poezie","pohanka","pohnutka","pohovor","pohroma","pohyb","pointa","pojistka","pojmout","pokazit","pokles","pokoj","pokrok","pokuta","pokyn","poledne","polibek","polknout","poloha","polynom","pomalu","pominout","pomlka","pomoc","pomsta","pomyslet","ponechat","ponorka","ponurost","popadat","popel","popisek","poplach","poprosit","popsat","popud","poradce","porce","porod","porucha","poryv","posadit","posed","posila","poskok","poslanec","posoudit","pospolu","postava","posudek","posyp","potah","potkan","potlesk","potomek","potrava","potupa","potvora","poukaz","pouto","pouzdro","povaha","povidla","povlak","povoz","povrch","povstat","povyk","povzdech","pozdrav","pozemek","poznatek","pozor","pozvat","pracovat","prahory","praktika","prales","praotec","praporek","prase","pravda","princip","prkno","probudit","procento","prodej","profese","prohra","projekt","prolomit","promile","pronikat","propad","prorok","prosba","proton","proutek","provaz","prskavka","prsten","prudkost","prut","prvek","prvohory","psanec","psovod","pstruh","ptactvo","puberta","puch","pudl","pukavec","puklina","pukrle","pult","pumpa","punc","pupen","pusa","pusinka","pustina","putovat","putyka","pyramida","pysk","pytel","racek","rachot","radiace","radnice","radon","raft","ragby","raketa","rakovina","rameno","rampouch","rande","rarach","rarita","rasovna","rastr","ratolest","razance","razidlo","reagovat","reakce","recept","redaktor","referent","reflex","rejnok","reklama","rekord","rekrut","rektor","reputace","revize","revma","revolver","rezerva","riskovat","riziko","robotika","rodokmen","rohovka","rokle","rokoko","romaneto","ropovod","ropucha","rorejs","rosol","rostlina","rotmistr","rotoped","rotunda","roubenka","roucho","roup","roura","rovina","rovnice","rozbor","rozchod","rozdat","rozeznat","rozhodce","rozinka","rozjezd","rozkaz","rozloha","rozmar","rozpad","rozruch","rozsah","roztok","rozum","rozvod","rubrika","ruchadlo","rukavice","rukopis","ryba","rybolov","rychlost","rydlo","rypadlo","rytina","ryzost","sadista","sahat","sako","samec","samizdat","samota","sanitka","sardinka","sasanka","satelit","sazba","sazenice","sbor","schovat","sebranka","secese","sedadlo","sediment","sedlo","sehnat","sejmout","sekera","sekta","sekunda","sekvoje","semeno","seno","servis","sesadit","seshora","seskok","seslat","sestra","sesuv","sesypat","setba","setina","setkat","setnout","setrvat","sever","seznam","shoda","shrnout","sifon","silnice","sirka","sirotek","sirup","situace","skafandr","skalisko","skanzen","skaut","skeptik","skica","skladba","sklenice","sklo","skluz","skoba","skokan","skoro","skripta","skrz","skupina","skvost","skvrna","slabika","sladidlo","slanina","slast","slavnost","sledovat","slepec","sleva","slezina","slib","slina","sliznice","slon","sloupek","slovo","sluch","sluha","slunce","slupka","slza","smaragd","smetana","smilstvo","smlouva","smog","smrad","smrk","smrtka","smutek","smysl","snad","snaha","snob","sobota","socha","sodovka","sokol","sopka","sotva","souboj","soucit","soudce","souhlas","soulad","soumrak","souprava","soused","soutok","souviset","spalovna","spasitel","spis","splav","spodek","spojenec","spolu","sponzor","spornost","spousta","sprcha","spustit","sranda","sraz","srdce","srna","srnec","srovnat","srpen","srst","srub","stanice","starosta","statika","stavba","stehno","stezka","stodola","stolek","stopa","storno","stoupat","strach","stres","strhnout","strom","struna","studna","stupnice","stvol","styk","subjekt","subtropy","suchar","sudost","sukno","sundat","sunout","surikata","surovina","svah","svalstvo","svetr","svatba","svazek","svisle","svitek","svoboda","svodidlo","svorka","svrab","sykavka","sykot","synek","synovec","sypat","sypkost","syrovost","sysel","sytost","tabletka","tabule","tahoun","tajemno","tajfun","tajga","tajit","tajnost","taktika","tamhle","tampon","tancovat","tanec","tanker","tapeta","tavenina","tazatel","technika","tehdy","tekutina","telefon","temnota","tendence","tenista","tenor","teplota","tepna","teprve","terapie","termoska","textil","ticho","tiskopis","titulek","tkadlec","tkanina","tlapka","tleskat","tlukot","tlupa","tmel","toaleta","topinka","topol","torzo","touha","toulec","tradice","traktor","tramp","trasa","traverza","trefit","trest","trezor","trhavina","trhlina","trochu","trojice","troska","trouba","trpce","trpitel","trpkost","trubec","truchlit","truhlice","trus","trvat","tudy","tuhnout","tuhost","tundra","turista","turnaj","tuzemsko","tvaroh","tvorba","tvrdost","tvrz","tygr","tykev","ubohost","uboze","ubrat","ubrousek","ubrus","ubytovna","ucho","uctivost","udivit","uhradit","ujednat","ujistit","ujmout","ukazatel","uklidnit","uklonit","ukotvit","ukrojit","ulice","ulita","ulovit","umyvadlo","unavit","uniforma","uniknout","upadnout","uplatnit","uplynout","upoutat","upravit","uran","urazit","usednout","usilovat","usmrtit","usnadnit","usnout","usoudit","ustlat","ustrnout","utahovat","utkat","utlumit","utonout","utopenec","utrousit","uvalit","uvolnit","uvozovka","uzdravit","uzel","uzenina","uzlina","uznat","vagon","valcha","valoun","vana","vandal","vanilka","varan","varhany","varovat","vcelku","vchod","vdova","vedro","vegetace","vejce","velbloud","veletrh","velitel","velmoc","velryba","venkov","veranda","verze","veselka","veskrze","vesnice","vespodu","vesta","veterina","veverka","vibrace","vichr","videohra","vidina","vidle","vila","vinice","viset","vitalita","vize","vizitka","vjezd","vklad","vkus","vlajka","vlak","vlasec","vlevo","vlhkost","vliv","vlnovka","vloupat","vnucovat","vnuk","voda","vodivost","vodoznak","vodstvo","vojensky","vojna","vojsko","volant","volba","volit","volno","voskovka","vozidlo","vozovna","vpravo","vrabec","vracet","vrah","vrata","vrba","vrcholek","vrhat","vrstva","vrtule","vsadit","vstoupit","vstup","vtip","vybavit","vybrat","vychovat","vydat","vydra","vyfotit","vyhledat","vyhnout","vyhodit","vyhradit","vyhubit","vyjasnit","vyjet","vyjmout","vyklopit","vykonat","vylekat","vymazat","vymezit","vymizet","vymyslet","vynechat","vynikat","vynutit","vypadat","vyplatit","vypravit","vypustit","vyrazit","vyrovnat","vyrvat","vyslovit","vysoko","vystavit","vysunout","vysypat","vytasit","vytesat","vytratit","vyvinout","vyvolat","vyvrhel","vyzdobit","vyznat","vzadu","vzbudit","vzchopit","vzdor","vzduch","vzdychat","vzestup","vzhledem","vzkaz","vzlykat","vznik","vzorek","vzpoura","vztah","vztek","xylofon","zabrat","zabydlet","zachovat","zadarmo","zadusit","zafoukat","zahltit","zahodit","zahrada","zahynout","zajatec","zajet","zajistit","zaklepat","zakoupit","zalepit","zamezit","zamotat","zamyslet","zanechat","zanikat","zaplatit","zapojit","zapsat","zarazit","zastavit","zasunout","zatajit","zatemnit","zatknout","zaujmout","zavalit","zavelet","zavinit","zavolat","zavrtat","zazvonit","zbavit","zbrusu","zbudovat","zbytek","zdaleka","zdarma","zdatnost","zdivo","zdobit","zdroj","zdvih","zdymadlo","zelenina","zeman","zemina","zeptat","zezadu","zezdola","zhatit","zhltnout","zhluboka","zhotovit","zhruba","zima","zimnice","zjemnit","zklamat","zkoumat","zkratka","zkumavka","zlato","zlehka","zloba","zlom","zlost","zlozvyk","zmapovat","zmar","zmatek","zmije","zmizet","zmocnit","zmodrat","zmrzlina","zmutovat","znak","znalost","znamenat","znovu","zobrazit","zotavit","zoubek","zoufale","zplodit","zpomalit","zprava","zprostit","zprudka","zprvu","zrada","zranit","zrcadlo","zrnitost","zrno","zrovna","zrychlit","zrzavost","zticha","ztratit","zubovina","zubr","zvednout","zvenku","zvesela","zvon","zvrat","zvukovod","zvyk"]
},{}],112:[function(require,module,exports){
module.exports=["abandon","ability","able","about","above","absent","absorb","abstract","absurd","abuse","access","accident","account","accuse","achieve","acid","acoustic","acquire","across","act","action","actor","actress","actual","adapt","add","addict","address","adjust","admit","adult","advance","advice","aerobic","affair","afford","afraid","again","age","agent","agree","ahead","aim","air","airport","aisle","alarm","album","alcohol","alert","alien","all","alley","allow","almost","alone","alpha","already","also","alter","always","amateur","amazing","among","amount","amused","analyst","anchor","ancient","anger","angle","angry","animal","ankle","announce","annual","another","answer","antenna","antique","anxiety","any","apart","apology","appear","apple","approve","april","arch","arctic","area","arena","argue","arm","armed","armor","army","around","arrange","arrest","arrive","arrow","art","artefact","artist","artwork","ask","aspect","assault","asset","assist","assume","asthma","athlete","atom","attack","attend","attitude","attract","auction","audit","august","aunt","author","auto","autumn","average","avocado","avoid","awake","aware","away","awesome","awful","awkward","axis","baby","bachelor","bacon","badge","bag","balance","balcony","ball","bamboo","banana","banner","bar","barely","bargain","barrel","base","basic","basket","battle","beach","bean","beauty","because","become","beef","before","begin","behave","behind","believe","below","belt","bench","benefit","best","betray","better","between","beyond","bicycle","bid","bike","bind","biology","bird","birth","bitter","black","blade","blame","blanket","blast","bleak","bless","blind","blood","blossom","blouse","blue","blur","blush","board","boat","body","boil","bomb","bone","bonus","book","boost","border","boring","borrow","boss","bottom","bounce","box","boy","bracket","brain","brand","brass","brave","bread","breeze","brick","bridge","brief","bright","bring","brisk","broccoli","broken","bronze","broom","brother","brown","brush","bubble","buddy","budget","buffalo","build","bulb","bulk","bullet","bundle","bunker","burden","burger","burst","bus","business","busy","butter","buyer","buzz","cabbage","cabin","cable","cactus","cage","cake","call","calm","camera","camp","can","canal","cancel","candy","cannon","canoe","canvas","canyon","capable","capital","captain","car","carbon","card","cargo","carpet","carry","cart","case","cash","casino","castle","casual","cat","catalog","catch","category","cattle","caught","cause","caution","cave","ceiling","celery","cement","census","century","cereal","certain","chair","chalk","champion","change","chaos","chapter","charge","chase","chat","cheap","check","cheese","chef","cherry","chest","chicken","chief","child","chimney","choice","choose","chronic","chuckle","chunk","churn","cigar","cinnamon","circle","citizen","city","civil","claim","clap","clarify","claw","clay","clean","clerk","clever","click","client","cliff","climb","clinic","clip","clock","clog","close","cloth","cloud","clown","club","clump","cluster","clutch","coach","coast","coconut","code","coffee","coil","coin","collect","color","column","combine","come","comfort","comic","common","company","concert","conduct","confirm","congress","connect","consider","control","convince","cook","cool","copper","copy","coral","core","corn","correct","cost","cotton","couch","country","couple","course","cousin","cover","coyote","crack","cradle","craft","cram","crane","crash","crater","crawl","crazy","cream","credit","creek","crew","cricket","crime","crisp","critic","crop","cross","crouch","crowd","crucial","cruel","cruise","crumble","crunch","crush","cry","crystal","cube","culture","cup","cupboard","curious","current","curtain","curve","cushion","custom","cute","cycle","dad","damage","damp","dance","danger","daring","dash","daughter","dawn","day","deal","debate","debris","decade","december","decide","decline","decorate","decrease","deer","defense","define","defy","degree","delay","deliver","demand","demise","denial","dentist","deny","depart","depend","deposit","depth","deputy","derive","describe","desert","design","desk","despair","destroy","detail","detect","develop","device","devote","diagram","dial","diamond","diary","dice","diesel","diet","differ","digital","dignity","dilemma","dinner","dinosaur","direct","dirt","disagree","discover","disease","dish","dismiss","disorder","display","distance","divert","divide","divorce","dizzy","doctor","document","dog","doll","dolphin","domain","donate","donkey","donor","door","dose","double","dove","draft","dragon","drama","drastic","draw","dream","dress","drift","drill","drink","drip","drive","drop","drum","dry","duck","dumb","dune","during","dust","dutch","duty","dwarf","dynamic","eager","eagle","early","earn","earth","easily","east","easy","echo","ecology","economy","edge","edit","educate","effort","egg","eight","either","elbow","elder","electric","elegant","element","elephant","elevator","elite","else","embark","embody","embrace","emerge","emotion","employ","empower","empty","enable","enact","end","endless","endorse","enemy","energy","enforce","engage","engine","enhance","enjoy","enlist","enough","enrich","enroll","ensure","enter","entire","entry","envelope","episode","equal","equip","era","erase","erode","erosion","error","erupt","escape","essay","essence","estate","eternal","ethics","evidence","evil","evoke","evolve","exact","example","excess","exchange","excite","exclude","excuse","execute","exercise","exhaust","exhibit","exile","exist","exit","exotic","expand","expect","expire","explain","expose","express","extend","extra","eye","eyebrow","fabric","face","faculty","fade","faint","faith","fall","false","fame","family","famous","fan","fancy","fantasy","farm","fashion","fat","fatal","father","fatigue","fault","favorite","feature","february","federal","fee","feed","feel","female","fence","festival","fetch","fever","few","fiber","fiction","field","figure","file","film","filter","final","find","fine","finger","finish","fire","firm","first","fiscal","fish","fit","fitness","fix","flag","flame","flash","flat","flavor","flee","flight","flip","float","flock","floor","flower","fluid","flush","fly","foam","focus","fog","foil","fold","follow","food","foot","force","forest","forget","fork","fortune","forum","forward","fossil","foster","found","fox","fragile","frame","frequent","fresh","friend","fringe","frog","front","frost","frown","frozen","fruit","fuel","fun","funny","furnace","fury","future","gadget","gain","galaxy","gallery","game","gap","garage","garbage","garden","garlic","garment","gas","gasp","gate","gather","gauge","gaze","general","genius","genre","gentle","genuine","gesture","ghost","giant","gift","giggle","ginger","giraffe","girl","give","glad","glance","glare","glass","glide","glimpse","globe","gloom","glory","glove","glow","glue","goat","goddess","gold","good","goose","gorilla","gospel","gossip","govern","gown","grab","grace","grain","grant","grape","grass","gravity","great","green","grid","grief","grit","grocery","group","grow","grunt","guard","guess","guide","guilt","guitar","gun","gym","habit","hair","half","hammer","hamster","hand","happy","harbor","hard","harsh","harvest","hat","have","hawk","hazard","head","health","heart","heavy","hedgehog","height","hello","helmet","help","hen","hero","hidden","high","hill","hint","hip","hire","history","hobby","hockey","hold","hole","holiday","hollow","home","honey","hood","hope","horn","horror","horse","hospital","host","hotel","hour","hover","hub","huge","human","humble","humor","hundred","hungry","hunt","hurdle","hurry","hurt","husband","hybrid","ice","icon","idea","identify","idle","ignore","ill","illegal","illness","image","imitate","immense","immune","impact","impose","improve","impulse","inch","include","income","increase","index","indicate","indoor","industry","infant","inflict","inform","inhale","inherit","initial","inject","injury","inmate","inner","innocent","input","inquiry","insane","insect","inside","inspire","install","intact","interest","into","invest","invite","involve","iron","island","isolate","issue","item","ivory","jacket","jaguar","jar","jazz","jealous","jeans","jelly","jewel","job","join","joke","journey","joy","judge","juice","jump","jungle","junior","junk","just","kangaroo","keen","keep","ketchup","key","kick","kid","kidney","kind","kingdom","kiss","kit","kitchen","kite","kitten","kiwi","knee","knife","knock","know","lab","label","labor","ladder","lady","lake","lamp","language","laptop","large","later","latin","laugh","laundry","lava","law","lawn","lawsuit","layer","lazy","leader","leaf","learn","leave","lecture","left","leg","legal","legend","leisure","lemon","lend","length","lens","leopard","lesson","letter","level","liar","liberty","library","license","life","lift","light","like","limb","limit","link","lion","liquid","list","little","live","lizard","load","loan","lobster","local","lock","logic","lonely","long","loop","lottery","loud","lounge","love","loyal","lucky","luggage","lumber","lunar","lunch","luxury","lyrics","machine","mad","magic","magnet","maid","mail","main","major","make","mammal","man","manage","mandate","mango","mansion","manual","maple","marble","march","margin","marine","market","marriage","mask","mass","master","match","material","math","matrix","matter","maximum","maze","meadow","mean","measure","meat","mechanic","medal","media","melody","melt","member","memory","mention","menu","mercy","merge","merit","merry","mesh","message","metal","method","middle","midnight","milk","million","mimic","mind","minimum","minor","minute","miracle","mirror","misery","miss","mistake","mix","mixed","mixture","mobile","model","modify","mom","moment","monitor","monkey","monster","month","moon","moral","more","morning","mosquito","mother","motion","motor","mountain","mouse","move","movie","much","muffin","mule","multiply","muscle","museum","mushroom","music","must","mutual","myself","mystery","myth","naive","name","napkin","narrow","nasty","nation","nature","near","neck","need","negative","neglect","neither","nephew","nerve","nest","net","network","neutral","never","news","next","nice","night","noble","noise","nominee","noodle","normal","north","nose","notable","note","nothing","notice","novel","now","nuclear","number","nurse","nut","oak","obey","object","oblige","obscure","observe","obtain","obvious","occur","ocean","october","odor","off","offer","office","often","oil","okay","old","olive","olympic","omit","once","one","onion","online","only","open","opera","opinion","oppose","option","orange","orbit","orchard","order","ordinary","organ","orient","original","orphan","ostrich","other","outdoor","outer","output","outside","oval","oven","over","own","owner","oxygen","oyster","ozone","pact","paddle","page","pair","palace","palm","panda","panel","panic","panther","paper","parade","parent","park","parrot","party","pass","patch","path","patient","patrol","pattern","pause","pave","payment","peace","peanut","pear","peasant","pelican","pen","penalty","pencil","people","pepper","perfect","permit","person","pet","phone","photo","phrase","physical","piano","picnic","picture","piece","pig","pigeon","pill","pilot","pink","pioneer","pipe","pistol","pitch","pizza","place","planet","plastic","plate","play","please","pledge","pluck","plug","plunge","poem","poet","point","polar","pole","police","pond","pony","pool","popular","portion","position","possible","post","potato","pottery","poverty","powder","power","practice","praise","predict","prefer","prepare","present","pretty","prevent","price","pride","primary","print","priority","prison","private","prize","problem","process","produce","profit","program","project","promote","proof","property","prosper","protect","proud","provide","public","pudding","pull","pulp","pulse","pumpkin","punch","pupil","puppy","purchase","purity","purpose","purse","push","put","puzzle","pyramid","quality","quantum","quarter","question","quick","quit","quiz","quote","rabbit","raccoon","race","rack","radar","radio","rail","rain","raise","rally","ramp","ranch","random","range","rapid","rare","rate","rather","raven","raw","razor","ready","real","reason","rebel","rebuild","recall","receive","recipe","record","recycle","reduce","reflect","reform","refuse","region","regret","regular","reject","relax","release","relief","rely","remain","remember","remind","remove","render","renew","rent","reopen","repair","repeat","replace","report","require","rescue","resemble","resist","resource","response","result","retire","retreat","return","reunion","reveal","review","reward","rhythm","rib","ribbon","rice","rich","ride","ridge","rifle","right","rigid","ring","riot","ripple","risk","ritual","rival","river","road","roast","robot","robust","rocket","romance","roof","rookie","room","rose","rotate","rough","round","route","royal","rubber","rude","rug","rule","run","runway","rural","sad","saddle","sadness","safe","sail","salad","salmon","salon","salt","salute","same","sample","sand","satisfy","satoshi","sauce","sausage","save","say","scale","scan","scare","scatter","scene","scheme","school","science","scissors","scorpion","scout","scrap","screen","script","scrub","sea","search","season","seat","second","secret","section","security","seed","seek","segment","select","sell","seminar","senior","sense","sentence","series","service","session","settle","setup","seven","shadow","shaft","shallow","share","shed","shell","sheriff","shield","shift","shine","ship","shiver","shock","shoe","shoot","shop","short","shoulder","shove","shrimp","shrug","shuffle","shy","sibling","sick","side","siege","sight","sign","silent","silk","silly","silver","similar","simple","since","sing","siren","sister","situate","six","size","skate","sketch","ski","skill","skin","skirt","skull","slab","slam","sleep","slender","slice","slide","slight","slim","slogan","slot","slow","slush","small","smart","smile","smoke","smooth","snack","snake","snap","sniff","snow","soap","soccer","social","sock","soda","soft","solar","soldier","solid","solution","solve","someone","song","soon","sorry","sort","soul","sound","soup","source","south","space","spare","spatial","spawn","speak","special","speed","spell","spend","sphere","spice","spider","spike","spin","spirit","split","spoil","sponsor","spoon","sport","spot","spray","spread","spring","spy","square","squeeze","squirrel","stable","stadium","staff","stage","stairs","stamp","stand","start","state","stay","steak","steel","stem","step","stereo","stick","still","sting","stock","stomach","stone","stool","story","stove","strategy","street","strike","strong","struggle","student","stuff","stumble","style","subject","submit","subway","success","such","sudden","suffer","sugar","suggest","suit","summer","sun","sunny","sunset","super","supply","supreme","sure","surface","surge","surprise","surround","survey","suspect","sustain","swallow","swamp","swap","swarm","swear","sweet","swift","swim","swing","switch","sword","symbol","symptom","syrup","system","table","tackle","tag","tail","talent","talk","tank","tape","target","task","taste","tattoo","taxi","teach","team","tell","ten","tenant","tennis","tent","term","test","text","thank","that","theme","then","theory","there","they","thing","this","thought","three","thrive","throw","thumb","thunder","ticket","tide","tiger","tilt","timber","time","tiny","tip","tired","tissue","title","toast","tobacco","today","toddler","toe","together","toilet","token","tomato","tomorrow","tone","tongue","tonight","tool","tooth","top","topic","topple","torch","tornado","tortoise","toss","total","tourist","toward","tower","town","toy","track","trade","traffic","tragic","train","transfer","trap","trash","travel","tray","treat","tree","trend","trial","tribe","trick","trigger","trim","trip","trophy","trouble","truck","true","truly","trumpet","trust","truth","try","tube","tuition","tumble","tuna","tunnel","turkey","turn","turtle","twelve","twenty","twice","twin","twist","two","type","typical","ugly","umbrella","unable","unaware","uncle","uncover","under","undo","unfair","unfold","unhappy","uniform","unique","unit","universe","unknown","unlock","until","unusual","unveil","update","upgrade","uphold","upon","upper","upset","urban","urge","usage","use","used","useful","useless","usual","utility","vacant","vacuum","vague","valid","valley","valve","van","vanish","vapor","various","vast","vault","vehicle","velvet","vendor","venture","venue","verb","verify","version","very","vessel","veteran","viable","vibrant","vicious","victory","video","view","village","vintage","violin","virtual","virus","visa","visit","visual","vital","vivid","vocal","voice","void","volcano","volume","vote","voyage","wage","wagon","wait","walk","wall","walnut","want","warfare","warm","warrior","wash","wasp","waste","water","wave","way","wealth","weapon","wear","weasel","weather","web","wedding","weekend","weird","welcome","west","wet","whale","what","wheat","wheel","when","where","whip","whisper","wide","width","wife","wild","will","win","window","wine","wing","wink","winner","winter","wire","wisdom","wise","wish","witness","wolf","woman","wonder","wood","wool","word","work","world","worry","worth","wrap","wreck","wrestle","wrist","write","wrong","yard","year","yellow","you","young","youth","zebra","zero","zone","zoo"]
},{}],113:[function(require,module,exports){
module.exports=["abaisser","abandon","abdiquer","abeille","abolir","aborder","aboutir","aboyer","abrasif","abreuver","abriter","abroger","abrupt","absence","absolu","absurde","abusif","abyssal","académie","acajou","acarien","accabler","accepter","acclamer","accolade","accroche","accuser","acerbe","achat","acheter","aciduler","acier","acompte","acquérir","acronyme","acteur","actif","actuel","adepte","adéquat","adhésif","adjectif","adjuger","admettre","admirer","adopter","adorer","adoucir","adresse","adroit","adulte","adverbe","aérer","aéronef","affaire","affecter","affiche","affreux","affubler","agacer","agencer","agile","agiter","agrafer","agréable","agrume","aider","aiguille","ailier","aimable","aisance","ajouter","ajuster","alarmer","alchimie","alerte","algèbre","algue","aliéner","aliment","alléger","alliage","allouer","allumer","alourdir","alpaga","altesse","alvéole","amateur","ambigu","ambre","aménager","amertume","amidon","amiral","amorcer","amour","amovible","amphibie","ampleur","amusant","analyse","anaphore","anarchie","anatomie","ancien","anéantir","angle","angoisse","anguleux","animal","annexer","annonce","annuel","anodin","anomalie","anonyme","anormal","antenne","antidote","anxieux","apaiser","apéritif","aplanir","apologie","appareil","appeler","apporter","appuyer","aquarium","aqueduc","arbitre","arbuste","ardeur","ardoise","argent","arlequin","armature","armement","armoire","armure","arpenter","arracher","arriver","arroser","arsenic","artériel","article","aspect","asphalte","aspirer","assaut","asservir","assiette","associer","assurer","asticot","astre","astuce","atelier","atome","atrium","atroce","attaque","attentif","attirer","attraper","aubaine","auberge","audace","audible","augurer","aurore","automne","autruche","avaler","avancer","avarice","avenir","averse","aveugle","aviateur","avide","avion","aviser","avoine","avouer","avril","axial","axiome","badge","bafouer","bagage","baguette","baignade","balancer","balcon","baleine","balisage","bambin","bancaire","bandage","banlieue","bannière","banquier","barbier","baril","baron","barque","barrage","bassin","bastion","bataille","bateau","batterie","baudrier","bavarder","belette","bélier","belote","bénéfice","berceau","berger","berline","bermuda","besace","besogne","bétail","beurre","biberon","bicycle","bidule","bijou","bilan","bilingue","billard","binaire","biologie","biopsie","biotype","biscuit","bison","bistouri","bitume","bizarre","blafard","blague","blanchir","blessant","blinder","blond","bloquer","blouson","bobard","bobine","boire","boiser","bolide","bonbon","bondir","bonheur","bonifier","bonus","bordure","borne","botte","boucle","boueux","bougie","boulon","bouquin","bourse","boussole","boutique","boxeur","branche","brasier","brave","brebis","brèche","breuvage","bricoler","brigade","brillant","brioche","brique","brochure","broder","bronzer","brousse","broyeur","brume","brusque","brutal","bruyant","buffle","buisson","bulletin","bureau","burin","bustier","butiner","butoir","buvable","buvette","cabanon","cabine","cachette","cadeau","cadre","caféine","caillou","caisson","calculer","calepin","calibre","calmer","calomnie","calvaire","camarade","caméra","camion","campagne","canal","caneton","canon","cantine","canular","capable","caporal","caprice","capsule","capter","capuche","carabine","carbone","caresser","caribou","carnage","carotte","carreau","carton","cascade","casier","casque","cassure","causer","caution","cavalier","caverne","caviar","cédille","ceinture","céleste","cellule","cendrier","censurer","central","cercle","cérébral","cerise","cerner","cerveau","cesser","chagrin","chaise","chaleur","chambre","chance","chapitre","charbon","chasseur","chaton","chausson","chavirer","chemise","chenille","chéquier","chercher","cheval","chien","chiffre","chignon","chimère","chiot","chlorure","chocolat","choisir","chose","chouette","chrome","chute","cigare","cigogne","cimenter","cinéma","cintrer","circuler","cirer","cirque","citerne","citoyen","citron","civil","clairon","clameur","claquer","classe","clavier","client","cligner","climat","clivage","cloche","clonage","cloporte","cobalt","cobra","cocasse","cocotier","coder","codifier","coffre","cogner","cohésion","coiffer","coincer","colère","colibri","colline","colmater","colonel","combat","comédie","commande","compact","concert","conduire","confier","congeler","connoter","consonne","contact","convexe","copain","copie","corail","corbeau","cordage","corniche","corpus","correct","cortège","cosmique","costume","coton","coude","coupure","courage","couteau","couvrir","coyote","crabe","crainte","cravate","crayon","créature","créditer","crémeux","creuser","crevette","cribler","crier","cristal","critère","croire","croquer","crotale","crucial","cruel","crypter","cubique","cueillir","cuillère","cuisine","cuivre","culminer","cultiver","cumuler","cupide","curatif","curseur","cyanure","cycle","cylindre","cynique","daigner","damier","danger","danseur","dauphin","débattre","débiter","déborder","débrider","débutant","décaler","décembre","déchirer","décider","déclarer","décorer","décrire","décupler","dédale","déductif","déesse","défensif","défiler","défrayer","dégager","dégivrer","déglutir","dégrafer","déjeuner","délice","déloger","demander","demeurer","démolir","dénicher","dénouer","dentelle","dénuder","départ","dépenser","déphaser","déplacer","déposer","déranger","dérober","désastre","descente","désert","désigner","désobéir","dessiner","destrier","détacher","détester","détourer","détresse","devancer","devenir","deviner","devoir","diable","dialogue","diamant","dicter","différer","digérer","digital","digne","diluer","dimanche","diminuer","dioxyde","directif","diriger","discuter","disposer","dissiper","distance","divertir","diviser","docile","docteur","dogme","doigt","domaine","domicile","dompter","donateur","donjon","donner","dopamine","dortoir","dorure","dosage","doseur","dossier","dotation","douanier","double","douceur","douter","doyen","dragon","draper","dresser","dribbler","droiture","duperie","duplexe","durable","durcir","dynastie","éblouir","écarter","écharpe","échelle","éclairer","éclipse","éclore","écluse","école","économie","écorce","écouter","écraser","écrémer","écrivain","écrou","écume","écureuil","édifier","éduquer","effacer","effectif","effigie","effort","effrayer","effusion","égaliser","égarer","éjecter","élaborer","élargir","électron","élégant","éléphant","élève","éligible","élitisme","éloge","élucider","éluder","emballer","embellir","embryon","émeraude","émission","emmener","émotion","émouvoir","empereur","employer","emporter","emprise","émulsion","encadrer","enchère","enclave","encoche","endiguer","endosser","endroit","enduire","énergie","enfance","enfermer","enfouir","engager","engin","englober","énigme","enjamber","enjeu","enlever","ennemi","ennuyeux","enrichir","enrobage","enseigne","entasser","entendre","entier","entourer","entraver","énumérer","envahir","enviable","envoyer","enzyme","éolien","épaissir","épargne","épatant","épaule","épicerie","épidémie","épier","épilogue","épine","épisode","épitaphe","époque","épreuve","éprouver","épuisant","équerre","équipe","ériger","érosion","erreur","éruption","escalier","espadon","espèce","espiègle","espoir","esprit","esquiver","essayer","essence","essieu","essorer","estime","estomac","estrade","étagère","étaler","étanche","étatique","éteindre","étendoir","éternel","éthanol","éthique","ethnie","étirer","étoffer","étoile","étonnant","étourdir","étrange","étroit","étude","euphorie","évaluer","évasion","éventail","évidence","éviter","évolutif","évoquer","exact","exagérer","exaucer","exceller","excitant","exclusif","excuse","exécuter","exemple","exercer","exhaler","exhorter","exigence","exiler","exister","exotique","expédier","explorer","exposer","exprimer","exquis","extensif","extraire","exulter","fable","fabuleux","facette","facile","facture","faiblir","falaise","fameux","famille","farceur","farfelu","farine","farouche","fasciner","fatal","fatigue","faucon","fautif","faveur","favori","fébrile","féconder","fédérer","félin","femme","fémur","fendoir","féodal","fermer","féroce","ferveur","festival","feuille","feutre","février","fiasco","ficeler","fictif","fidèle","figure","filature","filetage","filière","filleul","filmer","filou","filtrer","financer","finir","fiole","firme","fissure","fixer","flairer","flamme","flasque","flatteur","fléau","flèche","fleur","flexion","flocon","flore","fluctuer","fluide","fluvial","folie","fonderie","fongible","fontaine","forcer","forgeron","formuler","fortune","fossile","foudre","fougère","fouiller","foulure","fourmi","fragile","fraise","franchir","frapper","frayeur","frégate","freiner","frelon","frémir","frénésie","frère","friable","friction","frisson","frivole","froid","fromage","frontal","frotter","fruit","fugitif","fuite","fureur","furieux","furtif","fusion","futur","gagner","galaxie","galerie","gambader","garantir","gardien","garnir","garrigue","gazelle","gazon","géant","gélatine","gélule","gendarme","général","génie","genou","gentil","géologie","géomètre","géranium","germe","gestuel","geyser","gibier","gicler","girafe","givre","glace","glaive","glisser","globe","gloire","glorieux","golfeur","gomme","gonfler","gorge","gorille","goudron","gouffre","goulot","goupille","gourmand","goutte","graduel","graffiti","graine","grand","grappin","gratuit","gravir","grenat","griffure","griller","grimper","grogner","gronder","grotte","groupe","gruger","grutier","gruyère","guépard","guerrier","guide","guimauve","guitare","gustatif","gymnaste","gyrostat","habitude","hachoir","halte","hameau","hangar","hanneton","haricot","harmonie","harpon","hasard","hélium","hématome","herbe","hérisson","hermine","héron","hésiter","heureux","hiberner","hibou","hilarant","histoire","hiver","homard","hommage","homogène","honneur","honorer","honteux","horde","horizon","horloge","hormone","horrible","houleux","housse","hublot","huileux","humain","humble","humide","humour","hurler","hydromel","hygiène","hymne","hypnose","idylle","ignorer","iguane","illicite","illusion","image","imbiber","imiter","immense","immobile","immuable","impact","impérial","implorer","imposer","imprimer","imputer","incarner","incendie","incident","incliner","incolore","indexer","indice","inductif","inédit","ineptie","inexact","infini","infliger","informer","infusion","ingérer","inhaler","inhiber","injecter","injure","innocent","inoculer","inonder","inscrire","insecte","insigne","insolite","inspirer","instinct","insulter","intact","intense","intime","intrigue","intuitif","inutile","invasion","inventer","inviter","invoquer","ironique","irradier","irréel","irriter","isoler","ivoire","ivresse","jaguar","jaillir","jambe","janvier","jardin","jauger","jaune","javelot","jetable","jeton","jeudi","jeunesse","joindre","joncher","jongler","joueur","jouissif","journal","jovial","joyau","joyeux","jubiler","jugement","junior","jupon","juriste","justice","juteux","juvénile","kayak","kimono","kiosque","label","labial","labourer","lacérer","lactose","lagune","laine","laisser","laitier","lambeau","lamelle","lampe","lanceur","langage","lanterne","lapin","largeur","larme","laurier","lavabo","lavoir","lecture","légal","léger","légume","lessive","lettre","levier","lexique","lézard","liasse","libérer","libre","licence","licorne","liège","lièvre","ligature","ligoter","ligue","limer","limite","limonade","limpide","linéaire","lingot","lionceau","liquide","lisière","lister","lithium","litige","littoral","livreur","logique","lointain","loisir","lombric","loterie","louer","lourd","loutre","louve","loyal","lubie","lucide","lucratif","lueur","lugubre","luisant","lumière","lunaire","lundi","luron","lutter","luxueux","machine","magasin","magenta","magique","maigre","maillon","maintien","mairie","maison","majorer","malaxer","maléfice","malheur","malice","mallette","mammouth","mandater","maniable","manquant","manteau","manuel","marathon","marbre","marchand","mardi","maritime","marqueur","marron","marteler","mascotte","massif","matériel","matière","matraque","maudire","maussade","mauve","maximal","méchant","méconnu","médaille","médecin","méditer","méduse","meilleur","mélange","mélodie","membre","mémoire","menacer","mener","menhir","mensonge","mentor","mercredi","mérite","merle","messager","mesure","métal","météore","méthode","métier","meuble","miauler","microbe","miette","mignon","migrer","milieu","million","mimique","mince","minéral","minimal","minorer","minute","miracle","miroiter","missile","mixte","mobile","moderne","moelleux","mondial","moniteur","monnaie","monotone","monstre","montagne","monument","moqueur","morceau","morsure","mortier","moteur","motif","mouche","moufle","moulin","mousson","mouton","mouvant","multiple","munition","muraille","murène","murmure","muscle","muséum","musicien","mutation","muter","mutuel","myriade","myrtille","mystère","mythique","nageur","nappe","narquois","narrer","natation","nation","nature","naufrage","nautique","navire","nébuleux","nectar","néfaste","négation","négliger","négocier","neige","nerveux","nettoyer","neurone","neutron","neveu","niche","nickel","nitrate","niveau","noble","nocif","nocturne","noirceur","noisette","nomade","nombreux","nommer","normatif","notable","notifier","notoire","nourrir","nouveau","novateur","novembre","novice","nuage","nuancer","nuire","nuisible","numéro","nuptial","nuque","nutritif","obéir","objectif","obliger","obscur","observer","obstacle","obtenir","obturer","occasion","occuper","océan","octobre","octroyer","octupler","oculaire","odeur","odorant","offenser","officier","offrir","ogive","oiseau","oisillon","olfactif","olivier","ombrage","omettre","onctueux","onduler","onéreux","onirique","opale","opaque","opérer","opinion","opportun","opprimer","opter","optique","orageux","orange","orbite","ordonner","oreille","organe","orgueil","orifice","ornement","orque","ortie","osciller","osmose","ossature","otarie","ouragan","ourson","outil","outrager","ouvrage","ovation","oxyde","oxygène","ozone","paisible","palace","palmarès","palourde","palper","panache","panda","pangolin","paniquer","panneau","panorama","pantalon","papaye","papier","papoter","papyrus","paradoxe","parcelle","paresse","parfumer","parler","parole","parrain","parsemer","partager","parure","parvenir","passion","pastèque","paternel","patience","patron","pavillon","pavoiser","payer","paysage","peigne","peintre","pelage","pélican","pelle","pelouse","peluche","pendule","pénétrer","pénible","pensif","pénurie","pépite","péplum","perdrix","perforer","période","permuter","perplexe","persil","perte","peser","pétale","petit","pétrir","peuple","pharaon","phobie","phoque","photon","phrase","physique","piano","pictural","pièce","pierre","pieuvre","pilote","pinceau","pipette","piquer","pirogue","piscine","piston","pivoter","pixel","pizza","placard","plafond","plaisir","planer","plaque","plastron","plateau","pleurer","plexus","pliage","plomb","plonger","pluie","plumage","pochette","poésie","poète","pointe","poirier","poisson","poivre","polaire","policier","pollen","polygone","pommade","pompier","ponctuel","pondérer","poney","portique","position","posséder","posture","potager","poteau","potion","pouce","poulain","poumon","pourpre","poussin","pouvoir","prairie","pratique","précieux","prédire","préfixe","prélude","prénom","présence","prétexte","prévoir","primitif","prince","prison","priver","problème","procéder","prodige","profond","progrès","proie","projeter","prologue","promener","propre","prospère","protéger","prouesse","proverbe","prudence","pruneau","psychose","public","puceron","puiser","pulpe","pulsar","punaise","punitif","pupitre","purifier","puzzle","pyramide","quasar","querelle","question","quiétude","quitter","quotient","racine","raconter","radieux","ragondin","raideur","raisin","ralentir","rallonge","ramasser","rapide","rasage","ratisser","ravager","ravin","rayonner","réactif","réagir","réaliser","réanimer","recevoir","réciter","réclamer","récolter","recruter","reculer","recycler","rédiger","redouter","refaire","réflexe","réformer","refrain","refuge","régalien","région","réglage","régulier","réitérer","rejeter","rejouer","relatif","relever","relief","remarque","remède","remise","remonter","remplir","remuer","renard","renfort","renifler","renoncer","rentrer","renvoi","replier","reporter","reprise","reptile","requin","réserve","résineux","résoudre","respect","rester","résultat","rétablir","retenir","réticule","retomber","retracer","réunion","réussir","revanche","revivre","révolte","révulsif","richesse","rideau","rieur","rigide","rigoler","rincer","riposter","risible","risque","rituel","rival","rivière","rocheux","romance","rompre","ronce","rondin","roseau","rosier","rotatif","rotor","rotule","rouge","rouille","rouleau","routine","royaume","ruban","rubis","ruche","ruelle","rugueux","ruiner","ruisseau","ruser","rustique","rythme","sabler","saboter","sabre","sacoche","safari","sagesse","saisir","salade","salive","salon","saluer","samedi","sanction","sanglier","sarcasme","sardine","saturer","saugrenu","saumon","sauter","sauvage","savant","savonner","scalpel","scandale","scélérat","scénario","sceptre","schéma","science","scinder","score","scrutin","sculpter","séance","sécable","sécher","secouer","sécréter","sédatif","séduire","seigneur","séjour","sélectif","semaine","sembler","semence","séminal","sénateur","sensible","sentence","séparer","séquence","serein","sergent","sérieux","serrure","sérum","service","sésame","sévir","sevrage","sextuple","sidéral","siècle","siéger","siffler","sigle","signal","silence","silicium","simple","sincère","sinistre","siphon","sirop","sismique","situer","skier","social","socle","sodium","soigneux","soldat","soleil","solitude","soluble","sombre","sommeil","somnoler","sonde","songeur","sonnette","sonore","sorcier","sortir","sosie","sottise","soucieux","soudure","souffle","soulever","soupape","source","soutirer","souvenir","spacieux","spatial","spécial","sphère","spiral","stable","station","sternum","stimulus","stipuler","strict","studieux","stupeur","styliste","sublime","substrat","subtil","subvenir","succès","sucre","suffixe","suggérer","suiveur","sulfate","superbe","supplier","surface","suricate","surmener","surprise","sursaut","survie","suspect","syllabe","symbole","symétrie","synapse","syntaxe","système","tabac","tablier","tactile","tailler","talent","talisman","talonner","tambour","tamiser","tangible","tapis","taquiner","tarder","tarif","tartine","tasse","tatami","tatouage","taupe","taureau","taxer","témoin","temporel","tenaille","tendre","teneur","tenir","tension","terminer","terne","terrible","tétine","texte","thème","théorie","thérapie","thorax","tibia","tiède","timide","tirelire","tiroir","tissu","titane","titre","tituber","toboggan","tolérant","tomate","tonique","tonneau","toponyme","torche","tordre","tornade","torpille","torrent","torse","tortue","totem","toucher","tournage","tousser","toxine","traction","trafic","tragique","trahir","train","trancher","travail","trèfle","tremper","trésor","treuil","triage","tribunal","tricoter","trilogie","triomphe","tripler","triturer","trivial","trombone","tronc","tropical","troupeau","tuile","tulipe","tumulte","tunnel","turbine","tuteur","tutoyer","tuyau","tympan","typhon","typique","tyran","ubuesque","ultime","ultrason","unanime","unifier","union","unique","unitaire","univers","uranium","urbain","urticant","usage","usine","usuel","usure","utile","utopie","vacarme","vaccin","vagabond","vague","vaillant","vaincre","vaisseau","valable","valise","vallon","valve","vampire","vanille","vapeur","varier","vaseux","vassal","vaste","vecteur","vedette","végétal","véhicule","veinard","véloce","vendredi","vénérer","venger","venimeux","ventouse","verdure","vérin","vernir","verrou","verser","vertu","veston","vétéran","vétuste","vexant","vexer","viaduc","viande","victoire","vidange","vidéo","vignette","vigueur","vilain","village","vinaigre","violon","vipère","virement","virtuose","virus","visage","viseur","vision","visqueux","visuel","vital","vitesse","viticole","vitrine","vivace","vivipare","vocation","voguer","voile","voisin","voiture","volaille","volcan","voltiger","volume","vorace","vortex","voter","vouloir","voyage","voyelle","wagon","xénon","yacht","zèbre","zénith","zeste","zoologie"]
},{}],114:[function(require,module,exports){
// note all JSON files in this folder are generated with npm run generate-wordlist
const lookup = require('./lookup.json')

module.exports = {
  loadWordlist,
  detectLanguage
}

function loadWordlist (language) {
  switch (language) {
    case 'chinese_simplified': return require('./chinese_simplified.json')
    case 'chinese_traditional': return require('./chinese_traditional.json')
    case 'czech': return require('./czech.json')
    case 'english': return require('./english.json')
    case 'french': return require('./french.json')
    case 'italian': return require('./italian.json')
    case 'japanese': return require('./japanese.json')
    case 'korean': return require('./korean.json')
    case 'portuguese': return require('./portuguese.json')
    case 'russian': return require('./russian.json')
    case 'spanish': return require('./spanish.json')
    case 'turkish': return require('./turkish.json')
  }

  throw new Error('Unknown language: ' + language)
}

function detectLanguage (words) {
  let candidate = null

  for (const word of words) {
    const languages = lookup[word]
    if (!languages) return null

    if (languages.length === 1) return languages[0]

    if (!candidate) {
      candidate = languages
      continue
    }

    const intersect = candidate.filter(l => languages.includes(l))
    if (intersect.length === 1) return intersect[0]
  }

  return candidate[0]
}

},{"./chinese_simplified.json":109,"./chinese_traditional.json":110,"./czech.json":111,"./english.json":112,"./french.json":113,"./italian.json":115,"./japanese.json":116,"./korean.json":117,"./lookup.json":118,"./portuguese.json":119,"./russian.json":120,"./spanish.json":121,"./turkish.json":122}],115:[function(require,module,exports){
module.exports=["abaco","abbaglio","abbinato","abete","abisso","abolire","abrasivo","abrogato","accadere","accenno","accusato","acetone","achille","acido","acqua","acre","acrilico","acrobata","acuto","adagio","addebito","addome","adeguato","aderire","adipe","adottare","adulare","affabile","affetto","affisso","affranto","aforisma","afoso","africano","agave","agente","agevole","aggancio","agire","agitare","agonismo","agricolo","agrumeto","aguzzo","alabarda","alato","albatro","alberato","albo","albume","alce","alcolico","alettone","alfa","algebra","aliante","alibi","alimento","allagato","allegro","allievo","allodola","allusivo","almeno","alogeno","alpaca","alpestre","altalena","alterno","alticcio","altrove","alunno","alveolo","alzare","amalgama","amanita","amarena","ambito","ambrato","ameba","america","ametista","amico","ammasso","ammenda","ammirare","ammonito","amore","ampio","ampliare","amuleto","anacardo","anagrafe","analista","anarchia","anatra","anca","ancella","ancora","andare","andrea","anello","angelo","angolare","angusto","anima","annegare","annidato","anno","annuncio","anonimo","anticipo","anzi","apatico","apertura","apode","apparire","appetito","appoggio","approdo","appunto","aprile","arabica","arachide","aragosta","araldica","arancio","aratura","arazzo","arbitro","archivio","ardito","arenile","argento","argine","arguto","aria","armonia","arnese","arredato","arringa","arrosto","arsenico","arso","artefice","arzillo","asciutto","ascolto","asepsi","asettico","asfalto","asino","asola","aspirato","aspro","assaggio","asse","assoluto","assurdo","asta","astenuto","astice","astratto","atavico","ateismo","atomico","atono","attesa","attivare","attorno","attrito","attuale","ausilio","austria","autista","autonomo","autunno","avanzato","avere","avvenire","avviso","avvolgere","azione","azoto","azzimo","azzurro","babele","baccano","bacino","baco","badessa","badilata","bagnato","baita","balcone","baldo","balena","ballata","balzano","bambino","bandire","baraonda","barbaro","barca","baritono","barlume","barocco","basilico","basso","batosta","battuto","baule","bava","bavosa","becco","beffa","belgio","belva","benda","benevole","benigno","benzina","bere","berlina","beta","bibita","bici","bidone","bifido","biga","bilancia","bimbo","binocolo","biologo","bipede","bipolare","birbante","birra","biscotto","bisesto","bisnonno","bisonte","bisturi","bizzarro","blando","blatta","bollito","bonifico","bordo","bosco","botanico","bottino","bozzolo","braccio","bradipo","brama","branca","bravura","bretella","brevetto","brezza","briglia","brillante","brindare","broccolo","brodo","bronzina","brullo","bruno","bubbone","buca","budino","buffone","buio","bulbo","buono","burlone","burrasca","bussola","busta","cadetto","caduco","calamaro","calcolo","calesse","calibro","calmo","caloria","cambusa","camerata","camicia","cammino","camola","campale","canapa","candela","cane","canino","canotto","cantina","capace","capello","capitolo","capogiro","cappero","capra","capsula","carapace","carcassa","cardo","carisma","carovana","carretto","cartolina","casaccio","cascata","caserma","caso","cassone","castello","casuale","catasta","catena","catrame","cauto","cavillo","cedibile","cedrata","cefalo","celebre","cellulare","cena","cenone","centesimo","ceramica","cercare","certo","cerume","cervello","cesoia","cespo","ceto","chela","chiaro","chicca","chiedere","chimera","china","chirurgo","chitarra","ciao","ciclismo","cifrare","cigno","cilindro","ciottolo","circa","cirrosi","citrico","cittadino","ciuffo","civetta","civile","classico","clinica","cloro","cocco","codardo","codice","coerente","cognome","collare","colmato","colore","colposo","coltivato","colza","coma","cometa","commando","comodo","computer","comune","conciso","condurre","conferma","congelare","coniuge","connesso","conoscere","consumo","continuo","convegno","coperto","copione","coppia","copricapo","corazza","cordata","coricato","cornice","corolla","corpo","corredo","corsia","cortese","cosmico","costante","cottura","covato","cratere","cravatta","creato","credere","cremoso","crescita","creta","criceto","crinale","crisi","critico","croce","cronaca","crostata","cruciale","crusca","cucire","cuculo","cugino","cullato","cupola","curatore","cursore","curvo","cuscino","custode","dado","daino","dalmata","damerino","daniela","dannoso","danzare","datato","davanti","davvero","debutto","decennio","deciso","declino","decollo","decreto","dedicato","definito","deforme","degno","delegare","delfino","delirio","delta","demenza","denotato","dentro","deposito","derapata","derivare","deroga","descritto","deserto","desiderio","desumere","detersivo","devoto","diametro","dicembre","diedro","difeso","diffuso","digerire","digitale","diluvio","dinamico","dinnanzi","dipinto","diploma","dipolo","diradare","dire","dirotto","dirupo","disagio","discreto","disfare","disgelo","disposto","distanza","disumano","dito","divano","divelto","dividere","divorato","doblone","docente","doganale","dogma","dolce","domato","domenica","dominare","dondolo","dono","dormire","dote","dottore","dovuto","dozzina","drago","druido","dubbio","dubitare","ducale","duna","duomo","duplice","duraturo","ebano","eccesso","ecco","eclissi","economia","edera","edicola","edile","editoria","educare","egemonia","egli","egoismo","egregio","elaborato","elargire","elegante","elencato","eletto","elevare","elfico","elica","elmo","elsa","eluso","emanato","emblema","emesso","emiro","emotivo","emozione","empirico","emulo","endemico","enduro","energia","enfasi","enoteca","entrare","enzima","epatite","epilogo","episodio","epocale","eppure","equatore","erario","erba","erboso","erede","eremita","erigere","ermetico","eroe","erosivo","errante","esagono","esame","esanime","esaudire","esca","esempio","esercito","esibito","esigente","esistere","esito","esofago","esortato","esoso","espanso","espresso","essenza","esso","esteso","estimare","estonia","estroso","esultare","etilico","etnico","etrusco","etto","euclideo","europa","evaso","evidenza","evitato","evoluto","evviva","fabbrica","faccenda","fachiro","falco","famiglia","fanale","fanfara","fango","fantasma","fare","farfalla","farinoso","farmaco","fascia","fastoso","fasullo","faticare","fato","favoloso","febbre","fecola","fede","fegato","felpa","feltro","femmina","fendere","fenomeno","fermento","ferro","fertile","fessura","festivo","fetta","feudo","fiaba","fiducia","fifa","figurato","filo","finanza","finestra","finire","fiore","fiscale","fisico","fiume","flacone","flamenco","flebo","flemma","florido","fluente","fluoro","fobico","focaccia","focoso","foderato","foglio","folata","folclore","folgore","fondente","fonetico","fonia","fontana","forbito","forchetta","foresta","formica","fornaio","foro","fortezza","forzare","fosfato","fosso","fracasso","frana","frassino","fratello","freccetta","frenata","fresco","frigo","frollino","fronde","frugale","frutta","fucilata","fucsia","fuggente","fulmine","fulvo","fumante","fumetto","fumoso","fune","funzione","fuoco","furbo","furgone","furore","fuso","futile","gabbiano","gaffe","galateo","gallina","galoppo","gambero","gamma","garanzia","garbo","garofano","garzone","gasdotto","gasolio","gastrico","gatto","gaudio","gazebo","gazzella","geco","gelatina","gelso","gemello","gemmato","gene","genitore","gennaio","genotipo","gergo","ghepardo","ghiaccio","ghisa","giallo","gilda","ginepro","giocare","gioiello","giorno","giove","girato","girone","gittata","giudizio","giurato","giusto","globulo","glutine","gnomo","gobba","golf","gomito","gommone","gonfio","gonna","governo","gracile","grado","grafico","grammo","grande","grattare","gravoso","grazia","greca","gregge","grifone","grigio","grinza","grotta","gruppo","guadagno","guaio","guanto","guardare","gufo","guidare","ibernato","icona","identico","idillio","idolo","idra","idrico","idrogeno","igiene","ignaro","ignorato","ilare","illeso","illogico","illudere","imballo","imbevuto","imbocco","imbuto","immane","immerso","immolato","impacco","impeto","impiego","importo","impronta","inalare","inarcare","inattivo","incanto","incendio","inchino","incisivo","incluso","incontro","incrocio","incubo","indagine","india","indole","inedito","infatti","infilare","inflitto","ingaggio","ingegno","inglese","ingordo","ingrosso","innesco","inodore","inoltrare","inondato","insano","insetto","insieme","insonnia","insulina","intasato","intero","intonaco","intuito","inumidire","invalido","invece","invito","iperbole","ipnotico","ipotesi","ippica","iride","irlanda","ironico","irrigato","irrorare","isolato","isotopo","isterico","istituto","istrice","italia","iterare","labbro","labirinto","lacca","lacerato","lacrima","lacuna","laddove","lago","lampo","lancetta","lanterna","lardoso","larga","laringe","lastra","latenza","latino","lattuga","lavagna","lavoro","legale","leggero","lembo","lentezza","lenza","leone","lepre","lesivo","lessato","lesto","letterale","leva","levigato","libero","lido","lievito","lilla","limatura","limitare","limpido","lineare","lingua","liquido","lira","lirica","lisca","lite","litigio","livrea","locanda","lode","logica","lombare","londra","longevo","loquace","lorenzo","loto","lotteria","luce","lucidato","lumaca","luminoso","lungo","lupo","luppolo","lusinga","lusso","lutto","macabro","macchina","macero","macinato","madama","magico","maglia","magnete","magro","maiolica","malafede","malgrado","malinteso","malsano","malto","malumore","mana","mancia","mandorla","mangiare","manifesto","mannaro","manovra","mansarda","mantide","manubrio","mappa","maratona","marcire","maretta","marmo","marsupio","maschera","massaia","mastino","materasso","matricola","mattone","maturo","mazurca","meandro","meccanico","mecenate","medesimo","meditare","mega","melassa","melis","melodia","meninge","meno","mensola","mercurio","merenda","merlo","meschino","mese","messere","mestolo","metallo","metodo","mettere","miagolare","mica","micelio","michele","microbo","midollo","miele","migliore","milano","milite","mimosa","minerale","mini","minore","mirino","mirtillo","miscela","missiva","misto","misurare","mitezza","mitigare","mitra","mittente","mnemonico","modello","modifica","modulo","mogano","mogio","mole","molosso","monastero","monco","mondina","monetario","monile","monotono","monsone","montato","monviso","mora","mordere","morsicato","mostro","motivato","motosega","motto","movenza","movimento","mozzo","mucca","mucosa","muffa","mughetto","mugnaio","mulatto","mulinello","multiplo","mummia","munto","muovere","murale","musa","muscolo","musica","mutevole","muto","nababbo","nafta","nanometro","narciso","narice","narrato","nascere","nastrare","naturale","nautica","naviglio","nebulosa","necrosi","negativo","negozio","nemmeno","neofita","neretto","nervo","nessuno","nettuno","neutrale","neve","nevrotico","nicchia","ninfa","nitido","nobile","nocivo","nodo","nome","nomina","nordico","normale","norvegese","nostrano","notare","notizia","notturno","novella","nucleo","nulla","numero","nuovo","nutrire","nuvola","nuziale","oasi","obbedire","obbligo","obelisco","oblio","obolo","obsoleto","occasione","occhio","occidente","occorrere","occultare","ocra","oculato","odierno","odorare","offerta","offrire","offuscato","oggetto","oggi","ognuno","olandese","olfatto","oliato","oliva","ologramma","oltre","omaggio","ombelico","ombra","omega","omissione","ondoso","onere","onice","onnivoro","onorevole","onta","operato","opinione","opposto","oracolo","orafo","ordine","orecchino","orefice","orfano","organico","origine","orizzonte","orma","ormeggio","ornativo","orologio","orrendo","orribile","ortensia","ortica","orzata","orzo","osare","oscurare","osmosi","ospedale","ospite","ossa","ossidare","ostacolo","oste","otite","otre","ottagono","ottimo","ottobre","ovale","ovest","ovino","oviparo","ovocito","ovunque","ovviare","ozio","pacchetto","pace","pacifico","padella","padrone","paese","paga","pagina","palazzina","palesare","pallido","palo","palude","pandoro","pannello","paolo","paonazzo","paprica","parabola","parcella","parere","pargolo","pari","parlato","parola","partire","parvenza","parziale","passivo","pasticca","patacca","patologia","pattume","pavone","peccato","pedalare","pedonale","peggio","peloso","penare","pendice","penisola","pennuto","penombra","pensare","pentola","pepe","pepita","perbene","percorso","perdonato","perforare","pergamena","periodo","permesso","perno","perplesso","persuaso","pertugio","pervaso","pesatore","pesista","peso","pestifero","petalo","pettine","petulante","pezzo","piacere","pianta","piattino","piccino","picozza","piega","pietra","piffero","pigiama","pigolio","pigro","pila","pilifero","pillola","pilota","pimpante","pineta","pinna","pinolo","pioggia","piombo","piramide","piretico","pirite","pirolisi","pitone","pizzico","placebo","planare","plasma","platano","plenario","pochezza","poderoso","podismo","poesia","poggiare","polenta","poligono","pollice","polmonite","polpetta","polso","poltrona","polvere","pomice","pomodoro","ponte","popoloso","porfido","poroso","porpora","porre","portata","posa","positivo","possesso","postulato","potassio","potere","pranzo","prassi","pratica","precluso","predica","prefisso","pregiato","prelievo","premere","prenotare","preparato","presenza","pretesto","prevalso","prima","principe","privato","problema","procura","produrre","profumo","progetto","prolunga","promessa","pronome","proposta","proroga","proteso","prova","prudente","prugna","prurito","psiche","pubblico","pudica","pugilato","pugno","pulce","pulito","pulsante","puntare","pupazzo","pupilla","puro","quadro","qualcosa","quasi","querela","quota","raccolto","raddoppio","radicale","radunato","raffica","ragazzo","ragione","ragno","ramarro","ramingo","ramo","randagio","rantolare","rapato","rapina","rappreso","rasatura","raschiato","rasente","rassegna","rastrello","rata","ravveduto","reale","recepire","recinto","recluta","recondito","recupero","reddito","redimere","regalato","registro","regola","regresso","relazione","remare","remoto","renna","replica","reprimere","reputare","resa","residente","responso","restauro","rete","retina","retorica","rettifica","revocato","riassunto","ribadire","ribelle","ribrezzo","ricarica","ricco","ricevere","riciclato","ricordo","ricreduto","ridicolo","ridurre","rifasare","riflesso","riforma","rifugio","rigare","rigettato","righello","rilassato","rilevato","rimanere","rimbalzo","rimedio","rimorchio","rinascita","rincaro","rinforzo","rinnovo","rinomato","rinsavito","rintocco","rinuncia","rinvenire","riparato","ripetuto","ripieno","riportare","ripresa","ripulire","risata","rischio","riserva","risibile","riso","rispetto","ristoro","risultato","risvolto","ritardo","ritegno","ritmico","ritrovo","riunione","riva","riverso","rivincita","rivolto","rizoma","roba","robotico","robusto","roccia","roco","rodaggio","rodere","roditore","rogito","rollio","romantico","rompere","ronzio","rosolare","rospo","rotante","rotondo","rotula","rovescio","rubizzo","rubrica","ruga","rullino","rumine","rumoroso","ruolo","rupe","russare","rustico","sabato","sabbiare","sabotato","sagoma","salasso","saldatura","salgemma","salivare","salmone","salone","saltare","saluto","salvo","sapere","sapido","saporito","saraceno","sarcasmo","sarto","sassoso","satellite","satira","satollo","saturno","savana","savio","saziato","sbadiglio","sbalzo","sbancato","sbarra","sbattere","sbavare","sbendare","sbirciare","sbloccato","sbocciato","sbrinare","sbruffone","sbuffare","scabroso","scadenza","scala","scambiare","scandalo","scapola","scarso","scatenare","scavato","scelto","scenico","scettro","scheda","schiena","sciarpa","scienza","scindere","scippo","sciroppo","scivolo","sclerare","scodella","scolpito","scomparto","sconforto","scoprire","scorta","scossone","scozzese","scriba","scrollare","scrutinio","scuderia","scultore","scuola","scuro","scusare","sdebitare","sdoganare","seccatura","secondo","sedano","seggiola","segnalato","segregato","seguito","selciato","selettivo","sella","selvaggio","semaforo","sembrare","seme","seminato","sempre","senso","sentire","sepolto","sequenza","serata","serbato","sereno","serio","serpente","serraglio","servire","sestina","setola","settimana","sfacelo","sfaldare","sfamato","sfarzoso","sfaticato","sfera","sfida","sfilato","sfinge","sfocato","sfoderare","sfogo","sfoltire","sforzato","sfratto","sfruttato","sfuggito","sfumare","sfuso","sgabello","sgarbato","sgonfiare","sgorbio","sgrassato","sguardo","sibilo","siccome","sierra","sigla","signore","silenzio","sillaba","simbolo","simpatico","simulato","sinfonia","singolo","sinistro","sino","sintesi","sinusoide","sipario","sisma","sistole","situato","slitta","slogatura","sloveno","smarrito","smemorato","smentito","smeraldo","smilzo","smontare","smottato","smussato","snellire","snervato","snodo","sobbalzo","sobrio","soccorso","sociale","sodale","soffitto","sogno","soldato","solenne","solido","sollazzo","solo","solubile","solvente","somatico","somma","sonda","sonetto","sonnifero","sopire","soppeso","sopra","sorgere","sorpasso","sorriso","sorso","sorteggio","sorvolato","sospiro","sosta","sottile","spada","spalla","spargere","spatola","spavento","spazzola","specie","spedire","spegnere","spelatura","speranza","spessore","spettrale","spezzato","spia","spigoloso","spillato","spinoso","spirale","splendido","sportivo","sposo","spranga","sprecare","spronato","spruzzo","spuntino","squillo","sradicare","srotolato","stabile","stacco","staffa","stagnare","stampato","stantio","starnuto","stasera","statuto","stelo","steppa","sterzo","stiletto","stima","stirpe","stivale","stizzoso","stonato","storico","strappo","stregato","stridulo","strozzare","strutto","stuccare","stufo","stupendo","subentro","succoso","sudore","suggerito","sugo","sultano","suonare","superbo","supporto","surgelato","surrogato","sussurro","sutura","svagare","svedese","sveglio","svelare","svenuto","svezia","sviluppo","svista","svizzera","svolta","svuotare","tabacco","tabulato","tacciare","taciturno","tale","talismano","tampone","tannino","tara","tardivo","targato","tariffa","tarpare","tartaruga","tasto","tattico","taverna","tavolata","tazza","teca","tecnico","telefono","temerario","tempo","temuto","tendone","tenero","tensione","tentacolo","teorema","terme","terrazzo","terzetto","tesi","tesserato","testato","tetro","tettoia","tifare","tigella","timbro","tinto","tipico","tipografo","tiraggio","tiro","titanio","titolo","titubante","tizio","tizzone","toccare","tollerare","tolto","tombola","tomo","tonfo","tonsilla","topazio","topologia","toppa","torba","tornare","torrone","tortora","toscano","tossire","tostatura","totano","trabocco","trachea","trafila","tragedia","tralcio","tramonto","transito","trapano","trarre","trasloco","trattato","trave","treccia","tremolio","trespolo","tributo","tricheco","trifoglio","trillo","trincea","trio","tristezza","triturato","trivella","tromba","trono","troppo","trottola","trovare","truccato","tubatura","tuffato","tulipano","tumulto","tunisia","turbare","turchino","tuta","tutela","ubicato","uccello","uccisore","udire","uditivo","uffa","ufficio","uguale","ulisse","ultimato","umano","umile","umorismo","uncinetto","ungere","ungherese","unicorno","unificato","unisono","unitario","unte","uovo","upupa","uragano","urgenza","urlo","usanza","usato","uscito","usignolo","usuraio","utensile","utilizzo","utopia","vacante","vaccinato","vagabondo","vagliato","valanga","valgo","valico","valletta","valoroso","valutare","valvola","vampata","vangare","vanitoso","vano","vantaggio","vanvera","vapore","varano","varcato","variante","vasca","vedetta","vedova","veduto","vegetale","veicolo","velcro","velina","velluto","veloce","venato","vendemmia","vento","verace","verbale","vergogna","verifica","vero","verruca","verticale","vescica","vessillo","vestale","veterano","vetrina","vetusto","viandante","vibrante","vicenda","vichingo","vicinanza","vidimare","vigilia","vigneto","vigore","vile","villano","vimini","vincitore","viola","vipera","virgola","virologo","virulento","viscoso","visione","vispo","vissuto","visura","vita","vitello","vittima","vivanda","vivido","viziare","voce","voga","volatile","volere","volpe","voragine","vulcano","zampogna","zanna","zappato","zattera","zavorra","zefiro","zelante","zelo","zenzero","zerbino","zibetto","zinco","zircone","zitto","zolla","zotico","zucchero","zufolo","zulu","zuppa"]
},{}],116:[function(require,module,exports){
module.exports=["あいこくしん","あいさつ","あいだ","あおぞら","あかちゃん","あきる","あけがた","あける","あこがれる","あさい","あさひ","あしあと","あじわう","あずかる","あずき","あそぶ","あたえる","あたためる","あたりまえ","あたる","あつい","あつかう","あっしゅく","あつまり","あつめる","あてな","あてはまる","あひる","あぶら","あぶる","あふれる","あまい","あまど","あまやかす","あまり","あみもの","あめりか","あやまる","あゆむ","あらいぐま","あらし","あらすじ","あらためる","あらゆる","あらわす","ありがとう","あわせる","あわてる","あんい","あんがい","あんこ","あんぜん","あんてい","あんない","あんまり","いいだす","いおん","いがい","いがく","いきおい","いきなり","いきもの","いきる","いくじ","いくぶん","いけばな","いけん","いこう","いこく","いこつ","いさましい","いさん","いしき","いじゅう","いじょう","いじわる","いずみ","いずれ","いせい","いせえび","いせかい","いせき","いぜん","いそうろう","いそがしい","いだい","いだく","いたずら","いたみ","いたりあ","いちおう","いちじ","いちど","いちば","いちぶ","いちりゅう","いつか","いっしゅん","いっせい","いっそう","いったん","いっち","いってい","いっぽう","いてざ","いてん","いどう","いとこ","いない","いなか","いねむり","いのち","いのる","いはつ","いばる","いはん","いびき","いひん","いふく","いへん","いほう","いみん","いもうと","いもたれ","いもり","いやがる","いやす","いよかん","いよく","いらい","いらすと","いりぐち","いりょう","いれい","いれもの","いれる","いろえんぴつ","いわい","いわう","いわかん","いわば","いわゆる","いんげんまめ","いんさつ","いんしょう","いんよう","うえき","うえる","うおざ","うがい","うかぶ","うかべる","うきわ","うくらいな","うくれれ","うけたまわる","うけつけ","うけとる","うけもつ","うける","うごかす","うごく","うこん","うさぎ","うしなう","うしろがみ","うすい","うすぎ","うすぐらい","うすめる","うせつ","うちあわせ","うちがわ","うちき","うちゅう","うっかり","うつくしい","うったえる","うつる","うどん","うなぎ","うなじ","うなずく","うなる","うねる","うのう","うぶげ","うぶごえ","うまれる","うめる","うもう","うやまう","うよく","うらがえす","うらぐち","うらない","うりあげ","うりきれ","うるさい","うれしい","うれゆき","うれる","うろこ","うわき","うわさ","うんこう","うんちん","うんてん","うんどう","えいえん","えいが","えいきょう","えいご","えいせい","えいぶん","えいよう","えいわ","えおり","えがお","えがく","えきたい","えくせる","えしゃく","えすて","えつらん","えのぐ","えほうまき","えほん","えまき","えもじ","えもの","えらい","えらぶ","えりあ","えんえん","えんかい","えんぎ","えんげき","えんしゅう","えんぜつ","えんそく","えんちょう","えんとつ","おいかける","おいこす","おいしい","おいつく","おうえん","おうさま","おうじ","おうせつ","おうたい","おうふく","おうべい","おうよう","おえる","おおい","おおう","おおどおり","おおや","おおよそ","おかえり","おかず","おがむ","おかわり","おぎなう","おきる","おくさま","おくじょう","おくりがな","おくる","おくれる","おこす","おこなう","おこる","おさえる","おさない","おさめる","おしいれ","おしえる","おじぎ","おじさん","おしゃれ","おそらく","おそわる","おたがい","おたく","おだやか","おちつく","おっと","おつり","おでかけ","おとしもの","おとなしい","おどり","おどろかす","おばさん","おまいり","おめでとう","おもいで","おもう","おもたい","おもちゃ","おやつ","おやゆび","およぼす","おらんだ","おろす","おんがく","おんけい","おんしゃ","おんせん","おんだん","おんちゅう","おんどけい","かあつ","かいが","がいき","がいけん","がいこう","かいさつ","かいしゃ","かいすいよく","かいぜん","かいぞうど","かいつう","かいてん","かいとう","かいふく","がいへき","かいほう","かいよう","がいらい","かいわ","かえる","かおり","かかえる","かがく","かがし","かがみ","かくご","かくとく","かざる","がぞう","かたい","かたち","がちょう","がっきゅう","がっこう","がっさん","がっしょう","かなざわし","かのう","がはく","かぶか","かほう","かほご","かまう","かまぼこ","かめれおん","かゆい","かようび","からい","かるい","かろう","かわく","かわら","がんか","かんけい","かんこう","かんしゃ","かんそう","かんたん","かんち","がんばる","きあい","きあつ","きいろ","ぎいん","きうい","きうん","きえる","きおう","きおく","きおち","きおん","きかい","きかく","きかんしゃ","ききて","きくばり","きくらげ","きけんせい","きこう","きこえる","きこく","きさい","きさく","きさま","きさらぎ","ぎじかがく","ぎしき","ぎじたいけん","ぎじにってい","ぎじゅつしゃ","きすう","きせい","きせき","きせつ","きそう","きぞく","きぞん","きたえる","きちょう","きつえん","ぎっちり","きつつき","きつね","きてい","きどう","きどく","きない","きなが","きなこ","きぬごし","きねん","きのう","きのした","きはく","きびしい","きひん","きふく","きぶん","きぼう","きほん","きまる","きみつ","きむずかしい","きめる","きもだめし","きもち","きもの","きゃく","きやく","ぎゅうにく","きよう","きょうりゅう","きらい","きらく","きりん","きれい","きれつ","きろく","ぎろん","きわめる","ぎんいろ","きんかくじ","きんじょ","きんようび","ぐあい","くいず","くうかん","くうき","くうぐん","くうこう","ぐうせい","くうそう","ぐうたら","くうふく","くうぼ","くかん","くきょう","くげん","ぐこう","くさい","くさき","くさばな","くさる","くしゃみ","くしょう","くすのき","くすりゆび","くせげ","くせん","ぐたいてき","くださる","くたびれる","くちこみ","くちさき","くつした","ぐっすり","くつろぐ","くとうてん","くどく","くなん","くねくね","くのう","くふう","くみあわせ","くみたてる","くめる","くやくしょ","くらす","くらべる","くるま","くれる","くろう","くわしい","ぐんかん","ぐんしょく","ぐんたい","ぐんて","けあな","けいかく","けいけん","けいこ","けいさつ","げいじゅつ","けいたい","げいのうじん","けいれき","けいろ","けおとす","けおりもの","げきか","げきげん","げきだん","げきちん","げきとつ","げきは","げきやく","げこう","げこくじょう","げざい","けさき","げざん","けしき","けしごむ","けしょう","げすと","けたば","けちゃっぷ","けちらす","けつあつ","けつい","けつえき","けっこん","けつじょ","けっせき","けってい","けつまつ","げつようび","げつれい","けつろん","げどく","けとばす","けとる","けなげ","けなす","けなみ","けぬき","げねつ","けねん","けはい","げひん","けぶかい","げぼく","けまり","けみかる","けむし","けむり","けもの","けらい","けろけろ","けわしい","けんい","けんえつ","けんお","けんか","げんき","けんげん","けんこう","けんさく","けんしゅう","けんすう","げんそう","けんちく","けんてい","けんとう","けんない","けんにん","げんぶつ","けんま","けんみん","けんめい","けんらん","けんり","こあくま","こいぬ","こいびと","ごうい","こうえん","こうおん","こうかん","ごうきゅう","ごうけい","こうこう","こうさい","こうじ","こうすい","ごうせい","こうそく","こうたい","こうちゃ","こうつう","こうてい","こうどう","こうない","こうはい","ごうほう","ごうまん","こうもく","こうりつ","こえる","こおり","ごかい","ごがつ","ごかん","こくご","こくさい","こくとう","こくない","こくはく","こぐま","こけい","こける","ここのか","こころ","こさめ","こしつ","こすう","こせい","こせき","こぜん","こそだて","こたい","こたえる","こたつ","こちょう","こっか","こつこつ","こつばん","こつぶ","こてい","こてん","ことがら","ことし","ことば","ことり","こなごな","こねこね","このまま","このみ","このよ","ごはん","こひつじ","こふう","こふん","こぼれる","ごまあぶら","こまかい","ごますり","こまつな","こまる","こむぎこ","こもじ","こもち","こもの","こもん","こやく","こやま","こゆう","こゆび","こよい","こよう","こりる","これくしょん","ころっけ","こわもて","こわれる","こんいん","こんかい","こんき","こんしゅう","こんすい","こんだて","こんとん","こんなん","こんびに","こんぽん","こんまけ","こんや","こんれい","こんわく","ざいえき","さいかい","さいきん","ざいげん","ざいこ","さいしょ","さいせい","ざいたく","ざいちゅう","さいてき","ざいりょう","さうな","さかいし","さがす","さかな","さかみち","さがる","さぎょう","さくし","さくひん","さくら","さこく","さこつ","さずかる","ざせき","さたん","さつえい","ざつおん","ざっか","ざつがく","さっきょく","ざっし","さつじん","ざっそう","さつたば","さつまいも","さてい","さといも","さとう","さとおや","さとし","さとる","さのう","さばく","さびしい","さべつ","さほう","さほど","さます","さみしい","さみだれ","さむけ","さめる","さやえんどう","さゆう","さよう","さよく","さらだ","ざるそば","さわやか","さわる","さんいん","さんか","さんきゃく","さんこう","さんさい","ざんしょ","さんすう","さんせい","さんそ","さんち","さんま","さんみ","さんらん","しあい","しあげ","しあさって","しあわせ","しいく","しいん","しうち","しえい","しおけ","しかい","しかく","じかん","しごと","しすう","じだい","したうけ","したぎ","したて","したみ","しちょう","しちりん","しっかり","しつじ","しつもん","してい","してき","してつ","じてん","じどう","しなぎれ","しなもの","しなん","しねま","しねん","しのぐ","しのぶ","しはい","しばかり","しはつ","しはらい","しはん","しひょう","しふく","じぶん","しへい","しほう","しほん","しまう","しまる","しみん","しむける","じむしょ","しめい","しめる","しもん","しゃいん","しゃうん","しゃおん","じゃがいも","しやくしょ","しゃくほう","しゃけん","しゃこ","しゃざい","しゃしん","しゃせん","しゃそう","しゃたい","しゃちょう","しゃっきん","じゃま","しゃりん","しゃれい","じゆう","じゅうしょ","しゅくはく","じゅしん","しゅっせき","しゅみ","しゅらば","じゅんばん","しょうかい","しょくたく","しょっけん","しょどう","しょもつ","しらせる","しらべる","しんか","しんこう","じんじゃ","しんせいじ","しんちく","しんりん","すあげ","すあし","すあな","ずあん","すいえい","すいか","すいとう","ずいぶん","すいようび","すうがく","すうじつ","すうせん","すおどり","すきま","すくう","すくない","すける","すごい","すこし","ずさん","すずしい","すすむ","すすめる","すっかり","ずっしり","ずっと","すてき","すてる","すねる","すのこ","すはだ","すばらしい","ずひょう","ずぶぬれ","すぶり","すふれ","すべて","すべる","ずほう","すぼん","すまい","すめし","すもう","すやき","すらすら","するめ","すれちがう","すろっと","すわる","すんぜん","すんぽう","せあぶら","せいかつ","せいげん","せいじ","せいよう","せおう","せかいかん","せきにん","せきむ","せきゆ","せきらんうん","せけん","せこう","せすじ","せたい","せたけ","せっかく","せっきゃく","ぜっく","せっけん","せっこつ","せっさたくま","せつぞく","せつだん","せつでん","せっぱん","せつび","せつぶん","せつめい","せつりつ","せなか","せのび","せはば","せびろ","せぼね","せまい","せまる","せめる","せもたれ","せりふ","ぜんあく","せんい","せんえい","せんか","せんきょ","せんく","せんげん","ぜんご","せんさい","せんしゅ","せんすい","せんせい","せんぞ","せんたく","せんちょう","せんてい","せんとう","せんぬき","せんねん","せんぱい","ぜんぶ","ぜんぽう","せんむ","せんめんじょ","せんもん","せんやく","せんゆう","せんよう","ぜんら","ぜんりゃく","せんれい","せんろ","そあく","そいとげる","そいね","そうがんきょう","そうき","そうご","そうしん","そうだん","そうなん","そうび","そうめん","そうり","そえもの","そえん","そがい","そげき","そこう","そこそこ","そざい","そしな","そせい","そせん","そそぐ","そだてる","そつう","そつえん","そっかん","そつぎょう","そっけつ","そっこう","そっせん","そっと","そとがわ","そとづら","そなえる","そなた","そふぼ","そぼく","そぼろ","そまつ","そまる","そむく","そむりえ","そめる","そもそも","そよかぜ","そらまめ","そろう","そんかい","そんけい","そんざい","そんしつ","そんぞく","そんちょう","ぞんび","ぞんぶん","そんみん","たあい","たいいん","たいうん","たいえき","たいおう","だいがく","たいき","たいぐう","たいけん","たいこ","たいざい","だいじょうぶ","だいすき","たいせつ","たいそう","だいたい","たいちょう","たいてい","だいどころ","たいない","たいねつ","たいのう","たいはん","だいひょう","たいふう","たいへん","たいほ","たいまつばな","たいみんぐ","たいむ","たいめん","たいやき","たいよう","たいら","たいりょく","たいる","たいわん","たうえ","たえる","たおす","たおる","たおれる","たかい","たかね","たきび","たくさん","たこく","たこやき","たさい","たしざん","だじゃれ","たすける","たずさわる","たそがれ","たたかう","たたく","ただしい","たたみ","たちばな","だっかい","だっきゃく","だっこ","だっしゅつ","だったい","たてる","たとえる","たなばた","たにん","たぬき","たのしみ","たはつ","たぶん","たべる","たぼう","たまご","たまる","だむる","ためいき","ためす","ためる","たもつ","たやすい","たよる","たらす","たりきほんがん","たりょう","たりる","たると","たれる","たれんと","たろっと","たわむれる","だんあつ","たんい","たんおん","たんか","たんき","たんけん","たんご","たんさん","たんじょうび","だんせい","たんそく","たんたい","だんち","たんてい","たんとう","だんな","たんにん","だんねつ","たんのう","たんぴん","だんぼう","たんまつ","たんめい","だんれつ","だんろ","だんわ","ちあい","ちあん","ちいき","ちいさい","ちえん","ちかい","ちから","ちきゅう","ちきん","ちけいず","ちけん","ちこく","ちさい","ちしき","ちしりょう","ちせい","ちそう","ちたい","ちたん","ちちおや","ちつじょ","ちてき","ちてん","ちぬき","ちぬり","ちのう","ちひょう","ちへいせん","ちほう","ちまた","ちみつ","ちみどろ","ちめいど","ちゃんこなべ","ちゅうい","ちゆりょく","ちょうし","ちょさくけん","ちらし","ちらみ","ちりがみ","ちりょう","ちるど","ちわわ","ちんたい","ちんもく","ついか","ついたち","つうか","つうじょう","つうはん","つうわ","つかう","つかれる","つくね","つくる","つけね","つける","つごう","つたえる","つづく","つつじ","つつむ","つとめる","つながる","つなみ","つねづね","つのる","つぶす","つまらない","つまる","つみき","つめたい","つもり","つもる","つよい","つるぼ","つるみく","つわもの","つわり","てあし","てあて","てあみ","ていおん","ていか","ていき","ていけい","ていこく","ていさつ","ていし","ていせい","ていたい","ていど","ていねい","ていひょう","ていへん","ていぼう","てうち","ておくれ","てきとう","てくび","でこぼこ","てさぎょう","てさげ","てすり","てそう","てちがい","てちょう","てつがく","てつづき","でっぱ","てつぼう","てつや","でぬかえ","てぬき","てぬぐい","てのひら","てはい","てぶくろ","てふだ","てほどき","てほん","てまえ","てまきずし","てみじか","てみやげ","てらす","てれび","てわけ","てわたし","でんあつ","てんいん","てんかい","てんき","てんぐ","てんけん","てんごく","てんさい","てんし","てんすう","でんち","てんてき","てんとう","てんない","てんぷら","てんぼうだい","てんめつ","てんらんかい","でんりょく","でんわ","どあい","といれ","どうかん","とうきゅう","どうぐ","とうし","とうむぎ","とおい","とおか","とおく","とおす","とおる","とかい","とかす","ときおり","ときどき","とくい","とくしゅう","とくてん","とくに","とくべつ","とけい","とける","とこや","とさか","としょかん","とそう","とたん","とちゅう","とっきゅう","とっくん","とつぜん","とつにゅう","とどける","ととのえる","とない","となえる","となり","とのさま","とばす","どぶがわ","とほう","とまる","とめる","ともだち","ともる","どようび","とらえる","とんかつ","どんぶり","ないかく","ないこう","ないしょ","ないす","ないせん","ないそう","なおす","ながい","なくす","なげる","なこうど","なさけ","なたでここ","なっとう","なつやすみ","ななおし","なにごと","なにもの","なにわ","なのか","なふだ","なまいき","なまえ","なまみ","なみだ","なめらか","なめる","なやむ","ならう","ならび","ならぶ","なれる","なわとび","なわばり","にあう","にいがた","にうけ","におい","にかい","にがて","にきび","にくしみ","にくまん","にげる","にさんかたんそ","にしき","にせもの","にちじょう","にちようび","にっか","にっき","にっけい","にっこう","にっさん","にっしょく","にっすう","にっせき","にってい","になう","にほん","にまめ","にもつ","にやり","にゅういん","にりんしゃ","にわとり","にんい","にんか","にんき","にんげん","にんしき","にんずう","にんそう","にんたい","にんち","にんてい","にんにく","にんぷ","にんまり","にんむ","にんめい","にんよう","ぬいくぎ","ぬかす","ぬぐいとる","ぬぐう","ぬくもり","ぬすむ","ぬまえび","ぬめり","ぬらす","ぬんちゃく","ねあげ","ねいき","ねいる","ねいろ","ねぐせ","ねくたい","ねくら","ねこぜ","ねこむ","ねさげ","ねすごす","ねそべる","ねだん","ねつい","ねっしん","ねつぞう","ねったいぎょ","ねぶそく","ねふだ","ねぼう","ねほりはほり","ねまき","ねまわし","ねみみ","ねむい","ねむたい","ねもと","ねらう","ねわざ","ねんいり","ねんおし","ねんかん","ねんきん","ねんぐ","ねんざ","ねんし","ねんちゃく","ねんど","ねんぴ","ねんぶつ","ねんまつ","ねんりょう","ねんれい","のいず","のおづま","のがす","のきなみ","のこぎり","のこす","のこる","のせる","のぞく","のぞむ","のたまう","のちほど","のっく","のばす","のはら","のべる","のぼる","のみもの","のやま","のらいぬ","のらねこ","のりもの","のりゆき","のれん","のんき","ばあい","はあく","ばあさん","ばいか","ばいく","はいけん","はいご","はいしん","はいすい","はいせん","はいそう","はいち","ばいばい","はいれつ","はえる","はおる","はかい","ばかり","はかる","はくしゅ","はけん","はこぶ","はさみ","はさん","はしご","ばしょ","はしる","はせる","ぱそこん","はそん","はたん","はちみつ","はつおん","はっかく","はづき","はっきり","はっくつ","はっけん","はっこう","はっさん","はっしん","はったつ","はっちゅう","はってん","はっぴょう","はっぽう","はなす","はなび","はにかむ","はぶらし","はみがき","はむかう","はめつ","はやい","はやし","はらう","はろうぃん","はわい","はんい","はんえい","はんおん","はんかく","はんきょう","ばんぐみ","はんこ","はんしゃ","はんすう","はんだん","ぱんち","ぱんつ","はんてい","はんとし","はんのう","はんぱ","はんぶん","はんぺん","はんぼうき","はんめい","はんらん","はんろん","ひいき","ひうん","ひえる","ひかく","ひかり","ひかる","ひかん","ひくい","ひけつ","ひこうき","ひこく","ひさい","ひさしぶり","ひさん","びじゅつかん","ひしょ","ひそか","ひそむ","ひたむき","ひだり","ひたる","ひつぎ","ひっこし","ひっし","ひつじゅひん","ひっす","ひつぜん","ぴったり","ぴっちり","ひつよう","ひてい","ひとごみ","ひなまつり","ひなん","ひねる","ひはん","ひびく","ひひょう","ひほう","ひまわり","ひまん","ひみつ","ひめい","ひめじし","ひやけ","ひやす","ひよう","びょうき","ひらがな","ひらく","ひりつ","ひりょう","ひるま","ひるやすみ","ひれい","ひろい","ひろう","ひろき","ひろゆき","ひんかく","ひんけつ","ひんこん","ひんしゅ","ひんそう","ぴんち","ひんぱん","びんぼう","ふあん","ふいうち","ふうけい","ふうせん","ぷうたろう","ふうとう","ふうふ","ふえる","ふおん","ふかい","ふきん","ふくざつ","ふくぶくろ","ふこう","ふさい","ふしぎ","ふじみ","ふすま","ふせい","ふせぐ","ふそく","ぶたにく","ふたん","ふちょう","ふつう","ふつか","ふっかつ","ふっき","ふっこく","ぶどう","ふとる","ふとん","ふのう","ふはい","ふひょう","ふへん","ふまん","ふみん","ふめつ","ふめん","ふよう","ふりこ","ふりる","ふるい","ふんいき","ぶんがく","ぶんぐ","ふんしつ","ぶんせき","ふんそう","ぶんぽう","へいあん","へいおん","へいがい","へいき","へいげん","へいこう","へいさ","へいしゃ","へいせつ","へいそ","へいたく","へいてん","へいねつ","へいわ","へきが","へこむ","べにいろ","べにしょうが","へらす","へんかん","べんきょう","べんごし","へんさい","へんたい","べんり","ほあん","ほいく","ぼうぎょ","ほうこく","ほうそう","ほうほう","ほうもん","ほうりつ","ほえる","ほおん","ほかん","ほきょう","ぼきん","ほくろ","ほけつ","ほけん","ほこう","ほこる","ほしい","ほしつ","ほしゅ","ほしょう","ほせい","ほそい","ほそく","ほたて","ほたる","ぽちぶくろ","ほっきょく","ほっさ","ほったん","ほとんど","ほめる","ほんい","ほんき","ほんけ","ほんしつ","ほんやく","まいにち","まかい","まかせる","まがる","まける","まこと","まさつ","まじめ","ますく","まぜる","まつり","まとめ","まなぶ","まぬけ","まねく","まほう","まもる","まゆげ","まよう","まろやか","まわす","まわり","まわる","まんが","まんきつ","まんぞく","まんなか","みいら","みうち","みえる","みがく","みかた","みかん","みけん","みこん","みじかい","みすい","みすえる","みせる","みっか","みつかる","みつける","みてい","みとめる","みなと","みなみかさい","みねらる","みのう","みのがす","みほん","みもと","みやげ","みらい","みりょく","みわく","みんか","みんぞく","むいか","むえき","むえん","むかい","むかう","むかえ","むかし","むぎちゃ","むける","むげん","むさぼる","むしあつい","むしば","むじゅん","むしろ","むすう","むすこ","むすぶ","むすめ","むせる","むせん","むちゅう","むなしい","むのう","むやみ","むよう","むらさき","むりょう","むろん","めいあん","めいうん","めいえん","めいかく","めいきょく","めいさい","めいし","めいそう","めいぶつ","めいれい","めいわく","めぐまれる","めざす","めした","めずらしい","めだつ","めまい","めやす","めんきょ","めんせき","めんどう","もうしあげる","もうどうけん","もえる","もくし","もくてき","もくようび","もちろん","もどる","もらう","もんく","もんだい","やおや","やける","やさい","やさしい","やすい","やすたろう","やすみ","やせる","やそう","やたい","やちん","やっと","やっぱり","やぶる","やめる","ややこしい","やよい","やわらかい","ゆうき","ゆうびんきょく","ゆうべ","ゆうめい","ゆけつ","ゆしゅつ","ゆせん","ゆそう","ゆたか","ゆちゃく","ゆでる","ゆにゅう","ゆびわ","ゆらい","ゆれる","ようい","ようか","ようきゅう","ようじ","ようす","ようちえん","よかぜ","よかん","よきん","よくせい","よくぼう","よけい","よごれる","よさん","よしゅう","よそう","よそく","よっか","よてい","よどがわく","よねつ","よやく","よゆう","よろこぶ","よろしい","らいう","らくがき","らくご","らくさつ","らくだ","らしんばん","らせん","らぞく","らたい","らっか","られつ","りえき","りかい","りきさく","りきせつ","りくぐん","りくつ","りけん","りこう","りせい","りそう","りそく","りてん","りねん","りゆう","りゅうがく","りよう","りょうり","りょかん","りょくちゃ","りょこう","りりく","りれき","りろん","りんご","るいけい","るいさい","るいじ","るいせき","るすばん","るりがわら","れいかん","れいぎ","れいせい","れいぞうこ","れいとう","れいぼう","れきし","れきだい","れんあい","れんけい","れんこん","れんさい","れんしゅう","れんぞく","れんらく","ろうか","ろうご","ろうじん","ろうそく","ろくが","ろこつ","ろじうら","ろしゅつ","ろせん","ろてん","ろめん","ろれつ","ろんぎ","ろんぱ","ろんぶん","ろんり","わかす","わかめ","わかやま","わかれる","わしつ","わじまし","わすれもの","わらう","われる"]
},{}],117:[function(require,module,exports){
module.exports=["가격","가끔","가난","가능","가득","가르침","가뭄","가방","가상","가슴","가운데","가을","가이드","가입","가장","가정","가족","가죽","각오","각자","간격","간부","간섭","간장","간접","간판","갈등","갈비","갈색","갈증","감각","감기","감소","감수성","감자","감정","갑자기","강남","강당","강도","강력히","강변","강북","강사","강수량","강아지","강원도","강의","강제","강조","같이","개구리","개나리","개방","개별","개선","개성","개인","객관적","거실","거액","거울","거짓","거품","걱정","건강","건물","건설","건조","건축","걸음","검사","검토","게시판","게임","겨울","견해","결과","결국","결론","결석","결승","결심","결정","결혼","경계","경고","경기","경력","경복궁","경비","경상도","경영","경우","경쟁","경제","경주","경찰","경치","경향","경험","계곡","계단","계란","계산","계속","계약","계절","계층","계획","고객","고구려","고궁","고급","고등학생","고무신","고민","고양이","고장","고전","고집","고춧가루","고통","고향","곡식","골목","골짜기","골프","공간","공개","공격","공군","공급","공기","공동","공무원","공부","공사","공식","공업","공연","공원","공장","공짜","공책","공통","공포","공항","공휴일","과목","과일","과장","과정","과학","관객","관계","관광","관념","관람","관련","관리","관습","관심","관점","관찰","광경","광고","광장","광주","괴로움","굉장히","교과서","교문","교복","교실","교양","교육","교장","교직","교통","교환","교훈","구경","구름","구멍","구별","구분","구석","구성","구속","구역","구입","구청","구체적","국가","국기","국내","국립","국물","국민","국수","국어","국왕","국적","국제","국회","군대","군사","군인","궁극적","권리","권위","권투","귀국","귀신","규정","규칙","균형","그날","그냥","그늘","그러나","그룹","그릇","그림","그제서야","그토록","극복","극히","근거","근교","근래","근로","근무","근본","근원","근육","근처","글씨","글자","금강산","금고","금년","금메달","금액","금연","금요일","금지","긍정적","기간","기관","기념","기능","기독교","기둥","기록","기름","기법","기본","기분","기쁨","기숙사","기술","기억","기업","기온","기운","기원","기적","기준","기침","기혼","기획","긴급","긴장","길이","김밥","김치","김포공항","깍두기","깜빡","깨달음","깨소금","껍질","꼭대기","꽃잎","나들이","나란히","나머지","나물","나침반","나흘","낙엽","난방","날개","날씨","날짜","남녀","남대문","남매","남산","남자","남편","남학생","낭비","낱말","내년","내용","내일","냄비","냄새","냇물","냉동","냉면","냉방","냉장고","넥타이","넷째","노동","노란색","노력","노인","녹음","녹차","녹화","논리","논문","논쟁","놀이","농구","농담","농민","농부","농업","농장","농촌","높이","눈동자","눈물","눈썹","뉴욕","느낌","늑대","능동적","능력","다방","다양성","다음","다이어트","다행","단계","단골","단독","단맛","단순","단어","단위","단점","단체","단추","단편","단풍","달걀","달러","달력","달리","닭고기","담당","담배","담요","담임","답변","답장","당근","당분간","당연히","당장","대규모","대낮","대단히","대답","대도시","대략","대량","대륙","대문","대부분","대신","대응","대장","대전","대접","대중","대책","대출","대충","대통령","대학","대한민국","대합실","대형","덩어리","데이트","도대체","도덕","도둑","도망","도서관","도심","도움","도입","도자기","도저히","도전","도중","도착","독감","독립","독서","독일","독창적","동화책","뒷모습","뒷산","딸아이","마누라","마늘","마당","마라톤","마련","마무리","마사지","마약","마요네즈","마을","마음","마이크","마중","마지막","마찬가지","마찰","마흔","막걸리","막내","막상","만남","만두","만세","만약","만일","만점","만족","만화","많이","말기","말씀","말투","맘대로","망원경","매년","매달","매력","매번","매스컴","매일","매장","맥주","먹이","먼저","먼지","멀리","메일","며느리","며칠","면담","멸치","명단","명령","명예","명의","명절","명칭","명함","모금","모니터","모델","모든","모범","모습","모양","모임","모조리","모집","모퉁이","목걸이","목록","목사","목소리","목숨","목적","목표","몰래","몸매","몸무게","몸살","몸속","몸짓","몸통","몹시","무관심","무궁화","무더위","무덤","무릎","무슨","무엇","무역","무용","무조건","무지개","무척","문구","문득","문법","문서","문제","문학","문화","물가","물건","물결","물고기","물론","물리학","물음","물질","물체","미국","미디어","미사일","미술","미역","미용실","미움","미인","미팅","미혼","민간","민족","민주","믿음","밀가루","밀리미터","밑바닥","바가지","바구니","바나나","바늘","바닥","바닷가","바람","바이러스","바탕","박물관","박사","박수","반대","반드시","반말","반발","반성","반응","반장","반죽","반지","반찬","받침","발가락","발걸음","발견","발달","발레","발목","발바닥","발생","발음","발자국","발전","발톱","발표","밤하늘","밥그릇","밥맛","밥상","밥솥","방금","방면","방문","방바닥","방법","방송","방식","방안","방울","방지","방학","방해","방향","배경","배꼽","배달","배드민턴","백두산","백색","백성","백인","백제","백화점","버릇","버섯","버튼","번개","번역","번지","번호","벌금","벌레","벌써","범위","범인","범죄","법률","법원","법적","법칙","베이징","벨트","변경","변동","변명","변신","변호사","변화","별도","별명","별일","병실","병아리","병원","보관","보너스","보라색","보람","보름","보상","보안","보자기","보장","보전","보존","보통","보편적","보험","복도","복사","복숭아","복습","볶음","본격적","본래","본부","본사","본성","본인","본질","볼펜","봉사","봉지","봉투","부근","부끄러움","부담","부동산","부문","부분","부산","부상","부엌","부인","부작용","부장","부정","부족","부지런히","부친","부탁","부품","부회장","북부","북한","분노","분량","분리","분명","분석","분야","분위기","분필","분홍색","불고기","불과","불교","불꽃","불만","불법","불빛","불안","불이익","불행","브랜드","비극","비난","비닐","비둘기","비디오","비로소","비만","비명","비밀","비바람","비빔밥","비상","비용","비율","비중","비타민","비판","빌딩","빗물","빗방울","빗줄기","빛깔","빨간색","빨래","빨리","사건","사계절","사나이","사냥","사람","사랑","사립","사모님","사물","사방","사상","사생활","사설","사슴","사실","사업","사용","사월","사장","사전","사진","사촌","사춘기","사탕","사투리","사흘","산길","산부인과","산업","산책","살림","살인","살짝","삼계탕","삼국","삼십","삼월","삼촌","상관","상금","상대","상류","상반기","상상","상식","상업","상인","상자","상점","상처","상추","상태","상표","상품","상황","새벽","색깔","색연필","생각","생명","생물","생방송","생산","생선","생신","생일","생활","서랍","서른","서명","서민","서비스","서양","서울","서적","서점","서쪽","서클","석사","석유","선거","선물","선배","선생","선수","선원","선장","선전","선택","선풍기","설거지","설날","설렁탕","설명","설문","설사","설악산","설치","설탕","섭씨","성공","성당","성명","성별","성인","성장","성적","성질","성함","세금","세미나","세상","세월","세종대왕","세탁","센터","센티미터","셋째","소규모","소극적","소금","소나기","소년","소득","소망","소문","소설","소속","소아과","소용","소원","소음","소중히","소지품","소질","소풍","소형","속담","속도","속옷","손가락","손길","손녀","손님","손등","손목","손뼉","손실","손질","손톱","손해","솔직히","솜씨","송아지","송이","송편","쇠고기","쇼핑","수건","수년","수단","수돗물","수동적","수면","수명","수박","수상","수석","수술","수시로","수업","수염","수영","수입","수준","수집","수출","수컷","수필","수학","수험생","수화기","숙녀","숙소","숙제","순간","순서","순수","순식간","순위","숟가락","술병","술집","숫자","스님","스물","스스로","스승","스웨터","스위치","스케이트","스튜디오","스트레스","스포츠","슬쩍","슬픔","습관","습기","승객","승리","승부","승용차","승진","시각","시간","시골","시금치","시나리오","시댁","시리즈","시멘트","시민","시부모","시선","시설","시스템","시아버지","시어머니","시월","시인","시일","시작","시장","시절","시점","시중","시즌","시집","시청","시합","시험","식구","식기","식당","식량","식료품","식물","식빵","식사","식생활","식초","식탁","식품","신고","신규","신념","신문","신발","신비","신사","신세","신용","신제품","신청","신체","신화","실감","실내","실력","실례","실망","실수","실습","실시","실장","실정","실질적","실천","실체","실컷","실태","실패","실험","실현","심리","심부름","심사","심장","심정","심판","쌍둥이","씨름","씨앗","아가씨","아나운서","아드님","아들","아쉬움","아스팔트","아시아","아울러","아저씨","아줌마","아직","아침","아파트","아프리카","아픔","아홉","아흔","악기","악몽","악수","안개","안경","안과","안내","안녕","안동","안방","안부","안주","알루미늄","알코올","암시","암컷","압력","앞날","앞문","애인","애정","액수","앨범","야간","야단","야옹","약간","약국","약속","약수","약점","약품","약혼녀","양념","양력","양말","양배추","양주","양파","어둠","어려움","어른","어젯밤","어쨌든","어쩌다가","어쩐지","언니","언덕","언론","언어","얼굴","얼른","얼음","얼핏","엄마","업무","업종","업체","엉덩이","엉망","엉터리","엊그제","에너지","에어컨","엔진","여건","여고생","여관","여군","여권","여대생","여덟","여동생","여든","여론","여름","여섯","여성","여왕","여인","여전히","여직원","여학생","여행","역사","역시","역할","연결","연구","연극","연기","연락","연설","연세","연속","연습","연애","연예인","연인","연장","연주","연출","연필","연합","연휴","열기","열매","열쇠","열심히","열정","열차","열흘","염려","엽서","영국","영남","영상","영양","영역","영웅","영원히","영하","영향","영혼","영화","옆구리","옆방","옆집","예감","예금","예방","예산","예상","예선","예술","예습","예식장","예약","예전","예절","예정","예컨대","옛날","오늘","오락","오랫동안","오렌지","오로지","오른발","오븐","오십","오염","오월","오전","오직","오징어","오페라","오피스텔","오히려","옥상","옥수수","온갖","온라인","온몸","온종일","온통","올가을","올림픽","올해","옷차림","와이셔츠","와인","완성","완전","왕비","왕자","왜냐하면","왠지","외갓집","외국","외로움","외삼촌","외출","외침","외할머니","왼발","왼손","왼쪽","요금","요일","요즘","요청","용기","용서","용어","우산","우선","우승","우연히","우정","우체국","우편","운동","운명","운반","운전","운행","울산","울음","움직임","웃어른","웃음","워낙","원고","원래","원서","원숭이","원인","원장","원피스","월급","월드컵","월세","월요일","웨이터","위반","위법","위성","위원","위험","위협","윗사람","유난히","유럽","유명","유물","유산","유적","유치원","유학","유행","유형","육군","육상","육십","육체","은행","음력","음료","음반","음성","음식","음악","음주","의견","의논","의문","의복","의식","의심","의외로","의욕","의원","의학","이것","이곳","이념","이놈","이달","이대로","이동","이렇게","이력서","이론적","이름","이민","이발소","이별","이불","이빨","이상","이성","이슬","이야기","이용","이웃","이월","이윽고","이익","이전","이중","이튿날","이틀","이혼","인간","인격","인공","인구","인근","인기","인도","인류","인물","인생","인쇄","인연","인원","인재","인종","인천","인체","인터넷","인하","인형","일곱","일기","일단","일대","일등","일반","일본","일부","일상","일생","일손","일요일","일월","일정","일종","일주일","일찍","일체","일치","일행","일회용","임금","임무","입대","입력","입맛","입사","입술","입시","입원","입장","입학","자가용","자격","자극","자동","자랑","자부심","자식","자신","자연","자원","자율","자전거","자정","자존심","자판","작가","작년","작성","작업","작용","작은딸","작품","잔디","잔뜩","잔치","잘못","잠깐","잠수함","잠시","잠옷","잠자리","잡지","장관","장군","장기간","장래","장례","장르","장마","장면","장모","장미","장비","장사","장소","장식","장애인","장인","장점","장차","장학금","재능","재빨리","재산","재생","재작년","재정","재채기","재판","재학","재활용","저것","저고리","저곳","저녁","저런","저렇게","저번","저울","저절로","저축","적극","적당히","적성","적용","적응","전개","전공","전기","전달","전라도","전망","전문","전반","전부","전세","전시","전용","전자","전쟁","전주","전철","전체","전통","전혀","전후","절대","절망","절반","절약","절차","점검","점수","점심","점원","점점","점차","접근","접시","접촉","젓가락","정거장","정도","정류장","정리","정말","정면","정문","정반대","정보","정부","정비","정상","정성","정오","정원","정장","정지","정치","정확히","제공","제과점","제대로","제목","제발","제법","제삿날","제안","제일","제작","제주도","제출","제품","제한","조각","조건","조금","조깅","조명","조미료","조상","조선","조용히","조절","조정","조직","존댓말","존재","졸업","졸음","종교","종로","종류","종소리","종업원","종종","종합","좌석","죄인","주관적","주름","주말","주머니","주먹","주문","주민","주방","주변","주식","주인","주일","주장","주전자","주택","준비","줄거리","줄기","줄무늬","중간","중계방송","중국","중년","중단","중독","중반","중부","중세","중소기업","중순","중앙","중요","중학교","즉석","즉시","즐거움","증가","증거","증권","증상","증세","지각","지갑","지경","지극히","지금","지급","지능","지름길","지리산","지방","지붕","지식","지역","지우개","지원","지적","지점","지진","지출","직선","직업","직원","직장","진급","진동","진로","진료","진리","진짜","진찰","진출","진통","진행","질문","질병","질서","짐작","집단","집안","집중","짜증","찌꺼기","차남","차라리","차량","차림","차별","차선","차츰","착각","찬물","찬성","참가","참기름","참새","참석","참여","참외","참조","찻잔","창가","창고","창구","창문","창밖","창작","창조","채널","채점","책가방","책방","책상","책임","챔피언","처벌","처음","천국","천둥","천장","천재","천천히","철도","철저히","철학","첫날","첫째","청년","청바지","청소","청춘","체계","체력","체온","체육","체중","체험","초등학생","초반","초밥","초상화","초순","초여름","초원","초저녁","초점","초청","초콜릿","촛불","총각","총리","총장","촬영","최근","최상","최선","최신","최악","최종","추석","추억","추진","추천","추측","축구","축소","축제","축하","출근","출발","출산","출신","출연","출입","출장","출판","충격","충고","충돌","충분히","충청도","취업","취직","취향","치약","친구","친척","칠십","칠월","칠판","침대","침묵","침실","칫솔","칭찬","카메라","카운터","칼국수","캐릭터","캠퍼스","캠페인","커튼","컨디션","컬러","컴퓨터","코끼리","코미디","콘서트","콜라","콤플렉스","콩나물","쾌감","쿠데타","크림","큰길","큰딸","큰소리","큰아들","큰어머니","큰일","큰절","클래식","클럽","킬로","타입","타자기","탁구","탁자","탄생","태권도","태양","태풍","택시","탤런트","터널","터미널","테니스","테스트","테이블","텔레비전","토론","토마토","토요일","통계","통과","통로","통신","통역","통일","통장","통제","통증","통합","통화","퇴근","퇴원","퇴직금","튀김","트럭","특급","특별","특성","특수","특징","특히","튼튼히","티셔츠","파란색","파일","파출소","판결","판단","판매","판사","팔십","팔월","팝송","패션","팩스","팩시밀리","팬티","퍼센트","페인트","편견","편의","편지","편히","평가","평균","평생","평소","평양","평일","평화","포스터","포인트","포장","포함","표면","표정","표준","표현","품목","품질","풍경","풍속","풍습","프랑스","프린터","플라스틱","피곤","피망","피아노","필름","필수","필요","필자","필통","핑계","하느님","하늘","하드웨어","하룻밤","하반기","하숙집","하순","하여튼","하지만","하천","하품","하필","학과","학교","학급","학기","학년","학력","학번","학부모","학비","학생","학술","학습","학용품","학원","학위","학자","학점","한계","한글","한꺼번에","한낮","한눈","한동안","한때","한라산","한마디","한문","한번","한복","한식","한여름","한쪽","할머니","할아버지","할인","함께","함부로","합격","합리적","항공","항구","항상","항의","해결","해군","해답","해당","해물","해석","해설","해수욕장","해안","핵심","핸드백","햄버거","햇볕","햇살","행동","행복","행사","행운","행위","향기","향상","향수","허락","허용","헬기","현관","현금","현대","현상","현실","현장","현재","현지","혈액","협력","형부","형사","형수","형식","형제","형태","형편","혜택","호기심","호남","호랑이","호박","호텔","호흡","혹시","홀로","홈페이지","홍보","홍수","홍차","화면","화분","화살","화요일","화장","화학","확보","확인","확장","확정","환갑","환경","환영","환율","환자","활기","활동","활발히","활용","활짝","회견","회관","회복","회색","회원","회장","회전","횟수","횡단보도","효율적","후반","후춧가루","훈련","훨씬","휴식","휴일","흉내","흐름","흑백","흑인","흔적","흔히","흥미","흥분","희곡","희망","희생","흰색","힘껏"]
},{}],118:[function(require,module,exports){
module.exports={"的":["chinese_simplified","chinese_traditional"],"一":["chinese_simplified","chinese_traditional"],"是":["chinese_simplified","chinese_traditional"],"在":["chinese_simplified","chinese_traditional"],"不":["chinese_simplified","chinese_traditional"],"了":["chinese_simplified","chinese_traditional"],"有":["chinese_simplified","chinese_traditional"],"和":["chinese_simplified","chinese_traditional"],"人":["chinese_simplified","chinese_traditional"],"这":["chinese_simplified"],"中":["chinese_simplified","chinese_traditional"],"大":["chinese_simplified","chinese_traditional"],"为":["chinese_simplified"],"上":["chinese_simplified","chinese_traditional"],"个":["chinese_simplified"],"国":["chinese_simplified"],"我":["chinese_simplified","chinese_traditional"],"以":["chinese_simplified","chinese_traditional"],"要":["chinese_simplified","chinese_traditional"],"他":["chinese_simplified","chinese_traditional"],"时":["chinese_simplified"],"来":["chinese_simplified"],"用":["chinese_simplified","chinese_traditional"],"们":["chinese_simplified"],"生":["chinese_simplified","chinese_traditional"],"到":["chinese_simplified","chinese_traditional"],"作":["chinese_simplified","chinese_traditional"],"地":["chinese_simplified","chinese_traditional"],"于":["chinese_simplified"],"出":["chinese_simplified","chinese_traditional"],"就":["chinese_simplified","chinese_traditional"],"分":["chinese_simplified","chinese_traditional"],"对":["chinese_simplified"],"成":["chinese_simplified","chinese_traditional"],"会":["chinese_simplified"],"可":["chinese_simplified","chinese_traditional"],"主":["chinese_simplified","chinese_traditional"],"发":["chinese_simplified"],"年":["chinese_simplified","chinese_traditional"],"动":["chinese_simplified"],"同":["chinese_simplified","chinese_traditional"],"工":["chinese_simplified","chinese_traditional"],"也":["chinese_simplified","chinese_traditional"],"能":["chinese_simplified","chinese_traditional"],"下":["chinese_simplified","chinese_traditional"],"过":["chinese_simplified"],"子":["chinese_simplified","chinese_traditional"],"说":["chinese_simplified"],"产":["chinese_simplified"],"种":["chinese_simplified"],"面":["chinese_simplified","chinese_traditional"],"而":["chinese_simplified","chinese_traditional"],"方":["chinese_simplified","chinese_traditional"],"后":["chinese_simplified"],"多":["chinese_simplified","chinese_traditional"],"定":["chinese_simplified","chinese_traditional"],"行":["chinese_simplified","chinese_traditional"],"学":["chinese_simplified"],"法":["chinese_simplified","chinese_traditional"],"所":["chinese_simplified","chinese_traditional"],"民":["chinese_simplified","chinese_traditional"],"得":["chinese_simplified","chinese_traditional"],"经":["chinese_simplified"],"十":["chinese_simplified","chinese_traditional"],"三":["chinese_simplified","chinese_traditional"],"之":["chinese_simplified","chinese_traditional"],"进":["chinese_simplified"],"着":["chinese_simplified"],"等":["chinese_simplified","chinese_traditional"],"部":["chinese_simplified","chinese_traditional"],"度":["chinese_simplified","chinese_traditional"],"家":["chinese_simplified","chinese_traditional"],"电":["chinese_simplified"],"力":["chinese_simplified","chinese_traditional"],"里":["chinese_simplified"],"如":["chinese_simplified","chinese_traditional"],"水":["chinese_simplified","chinese_traditional"],"化":["chinese_simplified","chinese_traditional"],"高":["chinese_simplified","chinese_traditional"],"自":["chinese_simplified","chinese_traditional"],"二":["chinese_simplified","chinese_traditional"],"理":["chinese_simplified","chinese_traditional"],"起":["chinese_simplified","chinese_traditional"],"小":["chinese_simplified","chinese_traditional"],"物":["chinese_simplified","chinese_traditional"],"现":["chinese_simplified"],"实":["chinese_simplified"],"加":["chinese_simplified","chinese_traditional"],"量":["chinese_simplified","chinese_traditional"],"都":["chinese_simplified","chinese_traditional"],"两":["chinese_simplified"],"体":["chinese_simplified"],"制":["chinese_simplified","chinese_traditional"],"机":["chinese_simplified"],"当":["chinese_simplified"],"使":["chinese_simplified","chinese_traditional"],"点":["chinese_simplified"],"从":["chinese_simplified"],"业":["chinese_simplified"],"本":["chinese_simplified","chinese_traditional"],"去":["chinese_simplified","chinese_traditional"],"把":["chinese_simplified","chinese_traditional"],"性":["chinese_simplified","chinese_traditional"],"好":["chinese_simplified","chinese_traditional"],"应":["chinese_simplified"],"开":["chinese_simplified"],"它":["chinese_simplified","chinese_traditional"],"合":["chinese_simplified","chinese_traditional"],"还":["chinese_simplified"],"因":["chinese_simplified","chinese_traditional"],"由":["chinese_simplified","chinese_traditional"],"其":["chinese_simplified","chinese_traditional"],"些":["chinese_simplified","chinese_traditional"],"然":["chinese_simplified","chinese_traditional"],"前":["chinese_simplified","chinese_traditional"],"外":["chinese_simplified","chinese_traditional"],"天":["chinese_simplified","chinese_traditional"],"政":["chinese_simplified","chinese_traditional"],"四":["chinese_simplified","chinese_traditional"],"日":["chinese_simplified","chinese_traditional"],"那":["chinese_simplified","chinese_traditional"],"社":["chinese_simplified","chinese_traditional"],"义":["chinese_simplified"],"事":["chinese_simplified","chinese_traditional"],"平":["chinese_simplified","chinese_traditional"],"形":["chinese_simplified","chinese_traditional"],"相":["chinese_simplified","chinese_traditional"],"全":["chinese_simplified","chinese_traditional"],"表":["chinese_simplified","chinese_traditional"],"间":["chinese_simplified"],"样":["chinese_simplified"],"与":["chinese_simplified"],"关":["chinese_simplified"],"各":["chinese_simplified","chinese_traditional"],"重":["chinese_simplified","chinese_traditional"],"新":["chinese_simplified","chinese_traditional"],"线":["chinese_simplified"],"内":["chinese_simplified"],"数":["chinese_simplified"],"正":["chinese_simplified","chinese_traditional"],"心":["chinese_simplified","chinese_traditional"],"反":["chinese_simplified","chinese_traditional"],"你":["chinese_simplified","chinese_traditional"],"明":["chinese_simplified","chinese_traditional"],"看":["chinese_simplified","chinese_traditional"],"原":["chinese_simplified","chinese_traditional"],"又":["chinese_simplified","chinese_traditional"],"么":["chinese_simplified"],"利":["chinese_simplified","chinese_traditional"],"比":["chinese_simplified","chinese_traditional"],"或":["chinese_simplified","chinese_traditional"],"但":["chinese_simplified","chinese_traditional"],"质":["chinese_simplified"],"气":["chinese_simplified"],"第":["chinese_simplified","chinese_traditional"],"向":["chinese_simplified","chinese_traditional"],"道":["chinese_simplified","chinese_traditional"],"命":["chinese_simplified","chinese_traditional"],"此":["chinese_simplified","chinese_traditional"],"变":["chinese_simplified"],"条":["chinese_simplified"],"只":["chinese_simplified","chinese_traditional"],"没":["chinese_simplified"],"结":["chinese_simplified"],"解":["chinese_simplified","chinese_traditional"],"问":["chinese_simplified"],"意":["chinese_simplified","chinese_traditional"],"建":["chinese_simplified","chinese_traditional"],"月":["chinese_simplified","chinese_traditional"],"公":["chinese_simplified","chinese_traditional"],"无":["chinese_simplified"],"系":["chinese_simplified","chinese_traditional"],"军":["chinese_simplified"],"很":["chinese_simplified","chinese_traditional"],"情":["chinese_simplified","chinese_traditional"],"者":["chinese_simplified","chinese_traditional"],"最":["chinese_simplified","chinese_traditional"],"立":["chinese_simplified","chinese_traditional"],"代":["chinese_simplified","chinese_traditional"],"想":["chinese_simplified","chinese_traditional"],"已":["chinese_simplified","chinese_traditional"],"通":["chinese_simplified","chinese_traditional"],"并":["chinese_simplified"],"提":["chinese_simplified","chinese_traditional"],"直":["chinese_simplified","chinese_traditional"],"题":["chinese_simplified"],"党":["chinese_simplified"],"程":["chinese_simplified","chinese_traditional"],"展":["chinese_simplified","chinese_traditional"],"五":["chinese_simplified","chinese_traditional"],"果":["chinese_simplified","chinese_traditional"],"料":["chinese_simplified","chinese_traditional"],"象":["chinese_simplified","chinese_traditional"],"员":["chinese_simplified"],"革":["chinese_simplified","chinese_traditional"],"位":["chinese_simplified","chinese_traditional"],"入":["chinese_simplified","chinese_traditional"],"常":["chinese_simplified","chinese_traditional"],"文":["chinese_simplified","chinese_traditional"],"总":["chinese_simplified"],"次":["chinese_simplified","chinese_traditional"],"品":["chinese_simplified","chinese_traditional"],"式":["chinese_simplified","chinese_traditional"],"活":["chinese_simplified","chinese_traditional"],"设":["chinese_simplified"],"及":["chinese_simplified","chinese_traditional"],"管":["chinese_simplified","chinese_traditional"],"特":["chinese_simplified","chinese_traditional"],"件":["chinese_simplified","chinese_traditional"],"长":["chinese_simplified"],"求":["chinese_simplified","chinese_traditional"],"老":["chinese_simplified","chinese_traditional"],"头":["chinese_simplified"],"基":["chinese_simplified","chinese_traditional"],"资":["chinese_simplified"],"边":["chinese_simplified"],"流":["chinese_simplified","chinese_traditional"],"路":["chinese_simplified","chinese_traditional"],"级":["chinese_simplified"],"少":["chinese_simplified","chinese_traditional"],"图":["chinese_simplified"],"山":["chinese_simplified","chinese_traditional"],"统":["chinese_simplified"],"接":["chinese_simplified","chinese_traditional"],"知":["chinese_simplified","chinese_traditional"],"较":["chinese_simplified"],"将":["chinese_simplified"],"组":["chinese_simplified"],"见":["chinese_simplified"],"计":["chinese_simplified"],"别":["chinese_simplified"],"她":["chinese_simplified","chinese_traditional"],"手":["chinese_simplified","chinese_traditional"],"角":["chinese_simplified","chinese_traditional"],"期":["chinese_simplified","chinese_traditional"],"根":["chinese_simplified","chinese_traditional"],"论":["chinese_simplified"],"运":["chinese_simplified"],"农":["chinese_simplified"],"指":["chinese_simplified","chinese_traditional"],"几":["chinese_simplified"],"九":["chinese_simplified","chinese_traditional"],"区":["chinese_simplified"],"强":["chinese_simplified"],"放":["chinese_simplified","chinese_traditional"],"决":["chinese_simplified"],"西":["chinese_simplified","chinese_traditional"],"被":["chinese_simplified","chinese_traditional"],"干":["chinese_simplified"],"做":["chinese_simplified","chinese_traditional"],"必":["chinese_simplified","chinese_traditional"],"战":["chinese_simplified"],"先":["chinese_simplified","chinese_traditional"],"回":["chinese_simplified","chinese_traditional"],"则":["chinese_simplified"],"任":["chinese_simplified","chinese_traditional"],"取":["chinese_simplified","chinese_traditional"],"据":["chinese_simplified"],"处":["chinese_simplified"],"队":["chinese_simplified"],"南":["chinese_simplified","chinese_traditional"],"给":["chinese_simplified"],"色":["chinese_simplified","chinese_traditional"],"光":["chinese_simplified","chinese_traditional"],"门":["chinese_simplified"],"即":["chinese_simplified","chinese_traditional"],"保":["chinese_simplified","chinese_traditional"],"治":["chinese_simplified","chinese_traditional"],"北":["chinese_simplified","chinese_traditional"],"造":["chinese_simplified","chinese_traditional"],"百":["chinese_simplified","chinese_traditional"],"规":["chinese_simplified"],"热":["chinese_simplified"],"领":["chinese_simplified"],"七":["chinese_simplified","chinese_traditional"],"海":["chinese_simplified","chinese_traditional"],"口":["chinese_simplified","chinese_traditional"],"东":["chinese_simplified"],"导":["chinese_simplified"],"器":["chinese_simplified","chinese_traditional"],"压":["chinese_simplified"],"志":["chinese_simplified","chinese_traditional"],"世":["chinese_simplified","chinese_traditional"],"金":["chinese_simplified","chinese_traditional"],"增":["chinese_simplified","chinese_traditional"],"争":["chinese_simplified"],"济":["chinese_simplified"],"阶":["chinese_simplified"],"油":["chinese_simplified","chinese_traditional"],"思":["chinese_simplified","chinese_traditional"],"术":["chinese_simplified"],"极":["chinese_simplified"],"交":["chinese_simplified","chinese_traditional"],"受":["chinese_simplified","chinese_traditional"],"联":["chinese_simplified"],"什":["chinese_simplified","chinese_traditional"],"认":["chinese_simplified"],"六":["chinese_simplified","chinese_traditional"],"共":["chinese_simplified","chinese_traditional"],"权":["chinese_simplified"],"收":["chinese_simplified","chinese_traditional"],"证":["chinese_simplified"],"改":["chinese_simplified","chinese_traditional"],"清":["chinese_simplified","chinese_traditional"],"美":["chinese_simplified","chinese_traditional"],"再":["chinese_simplified","chinese_traditional"],"采":["chinese_simplified"],"转":["chinese_simplified"],"更":["chinese_simplified","chinese_traditional"],"单":["chinese_simplified"],"风":["chinese_simplified"],"切":["chinese_simplified","chinese_traditional"],"打":["chinese_simplified","chinese_traditional"],"白":["chinese_simplified","chinese_traditional"],"教":["chinese_simplified","chinese_traditional"],"速":["chinese_simplified","chinese_traditional"],"花":["chinese_simplified","chinese_traditional"],"带":["chinese_simplified"],"安":["chinese_simplified","chinese_traditional"],"场":["chinese_simplified"],"身":["chinese_simplified","chinese_traditional"],"车":["chinese_simplified"],"例":["chinese_simplified","chinese_traditional"],"真":["chinese_simplified","chinese_traditional"],"务":["chinese_simplified"],"具":["chinese_simplified","chinese_traditional"],"万":["chinese_simplified"],"每":["chinese_simplified","chinese_traditional"],"目":["chinese_simplified","chinese_traditional"],"至":["chinese_simplified","chinese_traditional"],"达":["chinese_simplified"],"走":["chinese_simplified","chinese_traditional"],"积":["chinese_simplified"],"示":["chinese_simplified","chinese_traditional"],"议":["chinese_simplified"],"声":["chinese_simplified"],"报":["chinese_simplified"],"斗":["chinese_simplified"],"完":["chinese_simplified","chinese_traditional"],"类":["chinese_simplified"],"八":["chinese_simplified","chinese_traditional"],"离":["chinese_simplified"],"华":["chinese_simplified"],"名":["chinese_simplified","chinese_traditional"],"确":["chinese_simplified"],"才":["chinese_simplified","chinese_traditional"],"科":["chinese_simplified","chinese_traditional"],"张":["chinese_simplified"],"信":["chinese_simplified","chinese_traditional"],"马":["chinese_simplified"],"节":["chinese_simplified"],"话":["chinese_simplified"],"米":["chinese_simplified","chinese_traditional"],"整":["chinese_simplified","chinese_traditional"],"空":["chinese_simplified","chinese_traditional"],"元":["chinese_simplified","chinese_traditional"],"况":["chinese_simplified"],"今":["chinese_simplified","chinese_traditional"],"集":["chinese_simplified","chinese_traditional"],"温":["chinese_simplified"],"传":["chinese_simplified"],"土":["chinese_simplified","chinese_traditional"],"许":["chinese_simplified"],"步":["chinese_simplified","chinese_traditional"],"群":["chinese_simplified","chinese_traditional"],"广":["chinese_simplified"],"石":["chinese_simplified","chinese_traditional"],"记":["chinese_simplified"],"需":["chinese_simplified","chinese_traditional"],"段":["chinese_simplified","chinese_traditional"],"研":["chinese_simplified","chinese_traditional"],"界":["chinese_simplified","chinese_traditional"],"拉":["chinese_simplified","chinese_traditional"],"林":["chinese_simplified","chinese_traditional"],"律":["chinese_simplified","chinese_traditional"],"叫":["chinese_simplified","chinese_traditional"],"且":["chinese_simplified","chinese_traditional"],"究":["chinese_simplified","chinese_traditional"],"观":["chinese_simplified"],"越":["chinese_simplified","chinese_traditional"],"织":["chinese_simplified"],"装":["chinese_simplified"],"影":["chinese_simplified","chinese_traditional"],"算":["chinese_simplified","chinese_traditional"],"低":["chinese_simplified","chinese_traditional"],"持":["chinese_simplified","chinese_traditional"],"音":["chinese_simplified","chinese_traditional"],"众":["chinese_simplified"],"书":["chinese_simplified"],"布":["chinese_simplified","chinese_traditional"],"复":["chinese_simplified","chinese_traditional"],"容":["chinese_simplified","chinese_traditional"],"儿":["chinese_simplified"],"须":["chinese_simplified"],"际":["chinese_simplified"],"商":["chinese_simplified","chinese_traditional"],"非":["chinese_simplified","chinese_traditional"],"验":["chinese_simplified"],"连":["chinese_simplified"],"断":["chinese_simplified"],"深":["chinese_simplified","chinese_traditional"],"难":["chinese_simplified"],"近":["chinese_simplified","chinese_traditional"],"矿":["chinese_simplified"],"千":["chinese_simplified","chinese_traditional"],"周":["chinese_simplified"],"委":["chinese_simplified","chinese_traditional"],"素":["chinese_simplified","chinese_traditional"],"技":["chinese_simplified","chinese_traditional"],"备":["chinese_simplified"],"半":["chinese_simplified","chinese_traditional"],"办":["chinese_simplified"],"青":["chinese_simplified","chinese_traditional"],"省":["chinese_simplified","chinese_traditional"],"列":["chinese_simplified","chinese_traditional"],"习":["chinese_simplified"],"响":["chinese_simplified"],"约":["chinese_simplified"],"支":["chinese_simplified","chinese_traditional"],"般":["chinese_simplified","chinese_traditional"],"史":["chinese_simplified","chinese_traditional"],"感":["chinese_simplified","chinese_traditional"],"劳":["chinese_simplified"],"便":["chinese_simplified","chinese_traditional"],"团":["chinese_simplified"],"往":["chinese_simplified","chinese_traditional"],"酸":["chinese_simplified","chinese_traditional"],"历":["chinese_simplified"],"市":["chinese_simplified","chinese_traditional"],"克":["chinese_simplified","chinese_traditional"],"何":["chinese_simplified","chinese_traditional"],"除":["chinese_simplified","chinese_traditional"],"消":["chinese_simplified","chinese_traditional"],"构":["chinese_simplified"],"府":["chinese_simplified","chinese_traditional"],"称":["chinese_simplified"],"太":["chinese_simplified","chinese_traditional"],"准":["chinese_simplified"],"精":["chinese_simplified","chinese_traditional"],"值":["chinese_simplified","chinese_traditional"],"号":["chinese_simplified"],"率":["chinese_simplified","chinese_traditional"],"族":["chinese_simplified","chinese_traditional"],"维":["chinese_simplified"],"划":["chinese_simplified"],"选":["chinese_simplified"],"标":["chinese_simplified"],"写":["chinese_simplified"],"存":["chinese_simplified","chinese_traditional"],"候":["chinese_simplified","chinese_traditional"],"毛":["chinese_simplified","chinese_traditional"],"亲":["chinese_simplified"],"快":["chinese_simplified","chinese_traditional"],"效":["chinese_simplified","chinese_traditional"],"斯":["chinese_simplified","chinese_traditional"],"院":["chinese_simplified","chinese_traditional"],"查":["chinese_simplified","chinese_traditional"],"江":["chinese_simplified","chinese_traditional"],"型":["chinese_simplified","chinese_traditional"],"眼":["chinese_simplified","chinese_traditional"],"王":["chinese_simplified","chinese_traditional"],"按":["chinese_simplified","chinese_traditional"],"格":["chinese_simplified","chinese_traditional"],"养":["chinese_simplified"],"易":["chinese_simplified","chinese_traditional"],"置":["chinese_simplified","chinese_traditional"],"派":["chinese_simplified","chinese_traditional"],"层":["chinese_simplified"],"片":["chinese_simplified","chinese_traditional"],"始":["chinese_simplified","chinese_traditional"],"却":["chinese_simplified"],"专":["chinese_simplified"],"状":["chinese_simplified"],"育":["chinese_simplified","chinese_traditional"],"厂":["chinese_simplified"],"京":["chinese_simplified","chinese_traditional"],"识":["chinese_simplified"],"适":["chinese_simplified"],"属":["chinese_simplified"],"圆":["chinese_simplified"],"包":["chinese_simplified","chinese_traditional"],"火":["chinese_simplified","chinese_traditional"],"住":["chinese_simplified","chinese_traditional"],"调":["chinese_simplified"],"满":["chinese_simplified"],"县":["chinese_simplified"],"局":["chinese_simplified","chinese_traditional"],"照":["chinese_simplified","chinese_traditional"],"参":["chinese_simplified"],"红":["chinese_simplified"],"细":["chinese_simplified"],"引":["chinese_simplified","chinese_traditional"],"听":["chinese_simplified"],"该":["chinese_simplified"],"铁":["chinese_simplified"],"价":["chinese_simplified"],"严":["chinese_simplified"],"首":["chinese_simplified","chinese_traditional"],"底":["chinese_simplified","chinese_traditional"],"液":["chinese_simplified","chinese_traditional"],"官":["chinese_simplified","chinese_traditional"],"德":["chinese_simplified","chinese_traditional"],"随":["chinese_simplified"],"病":["chinese_simplified","chinese_traditional"],"苏":["chinese_simplified"],"失":["chinese_simplified","chinese_traditional"],"尔":["chinese_simplified"],"死":["chinese_simplified","chinese_traditional"],"讲":["chinese_simplified"],"配":["chinese_simplified","chinese_traditional"],"女":["chinese_simplified","chinese_traditional"],"黄":["chinese_simplified"],"推":["chinese_simplified","chinese_traditional"],"显":["chinese_simplified"],"谈":["chinese_simplified"],"罪":["chinese_simplified","chinese_traditional"],"神":["chinese_simplified","chinese_traditional"],"艺":["chinese_simplified"],"呢":["chinese_simplified","chinese_traditional"],"席":["chinese_simplified","chinese_traditional"],"含":["chinese_simplified","chinese_traditional"],"企":["chinese_simplified","chinese_traditional"],"望":["chinese_simplified","chinese_traditional"],"密":["chinese_simplified","chinese_traditional"],"批":["chinese_simplified","chinese_traditional"],"营":["chinese_simplified"],"项":["chinese_simplified"],"防":["chinese_simplified","chinese_traditional"],"举":["chinese_simplified"],"球":["chinese_simplified","chinese_traditional"],"英":["chinese_simplified","chinese_traditional"],"氧":["chinese_simplified","chinese_traditional"],"势":["chinese_simplified"],"告":["chinese_simplified","chinese_traditional"],"李":["chinese_simplified","chinese_traditional"],"台":["chinese_simplified","chinese_traditional"],"落":["chinese_simplified","chinese_traditional"],"木":["chinese_simplified","chinese_traditional"],"帮":["chinese_simplified"],"轮":["chinese_simplified"],"破":["chinese_simplified","chinese_traditional"],"亚":["chinese_simplified"],"师":["chinese_simplified"],"围":["chinese_simplified"],"注":["chinese_simplified","chinese_traditional"],"远":["chinese_simplified"],"字":["chinese_simplified","chinese_traditional"],"材":["chinese_simplified","chinese_traditional"],"排":["chinese_simplified","chinese_traditional"],"供":["chinese_simplified","chinese_traditional"],"河":["chinese_simplified","chinese_traditional"],"态":["chinese_simplified"],"封":["chinese_simplified","chinese_traditional"],"另":["chinese_simplified","chinese_traditional"],"施":["chinese_simplified","chinese_traditional"],"减":["chinese_simplified"],"树":["chinese_simplified"],"溶":["chinese_simplified","chinese_traditional"],"怎":["chinese_simplified","chinese_traditional"],"止":["chinese_simplified","chinese_traditional"],"案":["chinese_simplified","chinese_traditional"],"言":["chinese_simplified","chinese_traditional"],"士":["chinese_simplified","chinese_traditional"],"均":["chinese_simplified","chinese_traditional"],"武":["chinese_simplified","chinese_traditional"],"固":["chinese_simplified","chinese_traditional"],"叶":["chinese_simplified"],"鱼":["chinese_simplified"],"波":["chinese_simplified","chinese_traditional"],"视":["chinese_simplified"],"仅":["chinese_simplified"],"费":["chinese_simplified"],"紧":["chinese_simplified"],"爱":["chinese_simplified"],"左":["chinese_simplified","chinese_traditional"],"章":["chinese_simplified","chinese_traditional"],"早":["chinese_simplified","chinese_traditional"],"朝":["chinese_simplified","chinese_traditional"],"害":["chinese_simplified","chinese_traditional"],"续":["chinese_simplified"],"轻":["chinese_simplified"],"服":["chinese_simplified","chinese_traditional"],"试":["chinese_simplified"],"食":["chinese_simplified","chinese_traditional"],"充":["chinese_simplified","chinese_traditional"],"兵":["chinese_simplified","chinese_traditional"],"源":["chinese_simplified","chinese_traditional"],"判":["chinese_simplified","chinese_traditional"],"护":["chinese_simplified"],"司":["chinese_simplified","chinese_traditional"],"足":["chinese_simplified","chinese_traditional"],"某":["chinese_simplified","chinese_traditional"],"练":["chinese_simplified"],"差":["chinese_simplified","chinese_traditional"],"致":["chinese_simplified","chinese_traditional"],"板":["chinese_simplified","chinese_traditional"],"田":["chinese_simplified","chinese_traditional"],"降":["chinese_simplified","chinese_traditional"],"黑":["chinese_simplified","chinese_traditional"],"犯":["chinese_simplified","chinese_traditional"],"负":["chinese_simplified"],"击":["chinese_simplified"],"范":["chinese_simplified","chinese_traditional"],"继":["chinese_simplified"],"兴":["chinese_simplified"],"似":["chinese_simplified","chinese_traditional"],"余":["chinese_simplified"],"坚":["chinese_simplified"],"曲":["chinese_simplified","chinese_traditional"],"输":["chinese_simplified"],"修":["chinese_simplified","chinese_traditional"],"故":["chinese_simplified","chinese_traditional"],"城":["chinese_simplified","chinese_traditional"],"夫":["chinese_simplified","chinese_traditional"],"够":["chinese_simplified"],"送":["chinese_simplified","chinese_traditional"],"笔":["chinese_simplified"],"船":["chinese_simplified","chinese_traditional"],"占":["chinese_simplified"],"右":["chinese_simplified","chinese_traditional"],"财":["chinese_simplified"],"吃":["chinese_simplified","chinese_traditional"],"富":["chinese_simplified","chinese_traditional"],"春":["chinese_simplified","chinese_traditional"],"职":["chinese_simplified"],"觉":["chinese_simplified"],"汉":["chinese_simplified"],"画":["chinese_simplified"],"功":["chinese_simplified","chinese_traditional"],"巴":["chinese_simplified","chinese_traditional"],"跟":["chinese_simplified","chinese_traditional"],"虽":["chinese_simplified"],"杂":["chinese_simplified"],"飞":["chinese_simplified"],"检":["chinese_simplified"],"吸":["chinese_simplified","chinese_traditional"],"助":["chinese_simplified","chinese_traditional"],"升":["chinese_simplified"],"阳":["chinese_simplified"],"互":["chinese_simplified","chinese_traditional"],"初":["chinese_simplified","chinese_traditional"],"创":["chinese_simplified"],"抗":["chinese_simplified","chinese_traditional"],"考":["chinese_simplified","chinese_traditional"],"投":["chinese_simplified","chinese_traditional"],"坏":["chinese_simplified"],"策":["chinese_simplified","chinese_traditional"],"古":["chinese_simplified","chinese_traditional"],"径":["chinese_simplified"],"换":["chinese_simplified"],"未":["chinese_simplified","chinese_traditional"],"跑":["chinese_simplified","chinese_traditional"],"留":["chinese_simplified","chinese_traditional"],"钢":["chinese_simplified"],"曾":["chinese_simplified","chinese_traditional"],"端":["chinese_simplified","chinese_traditional"],"责":["chinese_simplified"],"站":["chinese_simplified","chinese_traditional"],"简":["chinese_simplified"],"述":["chinese_simplified","chinese_traditional"],"钱":["chinese_simplified"],"副":["chinese_simplified","chinese_traditional"],"尽":["chinese_simplified"],"帝":["chinese_simplified","chinese_traditional"],"射":["chinese_simplified","chinese_traditional"],"草":["chinese_simplified","chinese_traditional"],"冲":["chinese_simplified"],"承":["chinese_simplified","chinese_traditional"],"独":["chinese_simplified"],"令":["chinese_simplified","chinese_traditional"],"限":["chinese_simplified","chinese_traditional"],"阿":["chinese_simplified","chinese_traditional"],"宣":["chinese_simplified","chinese_traditional"],"环":["chinese_simplified"],"双":["chinese_simplified"],"请":["chinese_simplified"],"超":["chinese_simplified","chinese_traditional"],"微":["chinese_simplified","chinese_traditional"],"让":["chinese_simplified"],"控":["chinese_simplified","chinese_traditional"],"州":["chinese_simplified","chinese_traditional"],"良":["chinese_simplified","chinese_traditional"],"轴":["chinese_simplified"],"找":["chinese_simplified","chinese_traditional"],"否":["chinese_simplified","chinese_traditional"],"纪":["chinese_simplified"],"益":["chinese_simplified","chinese_traditional"],"依":["chinese_simplified","chinese_traditional"],"优":["chinese_simplified"],"顶":["chinese_simplified"],"础":["chinese_simplified"],"载":["chinese_simplified"],"倒":["chinese_simplified","chinese_traditional"],"房":["chinese_simplified","chinese_traditional"],"突":["chinese_simplified","chinese_traditional"],"坐":["chinese_simplified","chinese_traditional"],"粉":["chinese_simplified","chinese_traditional"],"敌":["chinese_simplified"],"略":["chinese_simplified","chinese_traditional"],"客":["chinese_simplified","chinese_traditional"],"袁":["chinese_simplified","chinese_traditional"],"冷":["chinese_simplified","chinese_traditional"],"胜":["chinese_simplified"],"绝":["chinese_simplified"],"析":["chinese_simplified","chinese_traditional"],"块":["chinese_simplified"],"剂":["chinese_simplified"],"测":["chinese_simplified"],"丝":["chinese_simplified"],"协":["chinese_simplified"],"诉":["chinese_simplified"],"念":["chinese_simplified","chinese_traditional"],"陈":["chinese_simplified"],"仍":["chinese_simplified","chinese_traditional"],"罗":["chinese_simplified"],"盐":["chinese_simplified"],"友":["chinese_simplified","chinese_traditional"],"洋":["chinese_simplified","chinese_traditional"],"错":["chinese_simplified"],"苦":["chinese_simplified","chinese_traditional"],"夜":["chinese_simplified","chinese_traditional"],"刑":["chinese_simplified","chinese_traditional"],"移":["chinese_simplified","chinese_traditional"],"频":["chinese_simplified"],"逐":["chinese_simplified","chinese_traditional"],"靠":["chinese_simplified","chinese_traditional"],"混":["chinese_simplified","chinese_traditional"],"母":["chinese_simplified","chinese_traditional"],"短":["chinese_simplified","chinese_traditional"],"皮":["chinese_simplified","chinese_traditional"],"终":["chinese_simplified"],"聚":["chinese_simplified","chinese_traditional"],"汽":["chinese_simplified","chinese_traditional"],"村":["chinese_simplified","chinese_traditional"],"云":["chinese_simplified"],"哪":["chinese_simplified","chinese_traditional"],"既":["chinese_simplified","chinese_traditional"],"距":["chinese_simplified","chinese_traditional"],"卫":["chinese_simplified"],"停":["chinese_simplified","chinese_traditional"],"烈":["chinese_simplified","chinese_traditional"],"央":["chinese_simplified","chinese_traditional"],"察":["chinese_simplified","chinese_traditional"],"烧":["chinese_simplified"],"迅":["chinese_simplified","chinese_traditional"],"境":["chinese_simplified","chinese_traditional"],"若":["chinese_simplified","chinese_traditional"],"印":["chinese_simplified","chinese_traditional"],"洲":["chinese_simplified","chinese_traditional"],"刻":["chinese_simplified","chinese_traditional"],"括":["chinese_simplified","chinese_traditional"],"激":["chinese_simplified","chinese_traditional"],"孔":["chinese_simplified","chinese_traditional"],"搞":["chinese_simplified","chinese_traditional"],"甚":["chinese_simplified","chinese_traditional"],"室":["chinese_simplified","chinese_traditional"],"待":["chinese_simplified","chinese_traditional"],"核":["chinese_simplified","chinese_traditional"],"校":["chinese_simplified","chinese_traditional"],"散":["chinese_simplified","chinese_traditional"],"侵":["chinese_simplified","chinese_traditional"],"吧":["chinese_simplified","chinese_traditional"],"甲":["chinese_simplified","chinese_traditional"],"游":["chinese_simplified"],"久":["chinese_simplified","chinese_traditional"],"菜":["chinese_simplified","chinese_traditional"],"味":["chinese_simplified","chinese_traditional"],"旧":["chinese_simplified"],"模":["chinese_simplified","chinese_traditional"],"湖":["chinese_simplified","chinese_traditional"],"货":["chinese_simplified"],"损":["chinese_simplified"],"预":["chinese_simplified"],"阻":["chinese_simplified","chinese_traditional"],"毫":["chinese_simplified","chinese_traditional"],"普":["chinese_simplified","chinese_traditional"],"稳":["chinese_simplified"],"乙":["chinese_simplified","chinese_traditional"],"妈":["chinese_simplified"],"植":["chinese_simplified","chinese_traditional"],"息":["chinese_simplified","chinese_traditional"],"扩":["chinese_simplified"],"银":["chinese_simplified"],"语":["chinese_simplified"],"挥":["chinese_simplified"],"酒":["chinese_simplified","chinese_traditional"],"守":["chinese_simplified","chinese_traditional"],"拿":["chinese_simplified","chinese_traditional"],"序":["chinese_simplified","chinese_traditional"],"纸":["chinese_simplified"],"医":["chinese_simplified"],"缺":["chinese_simplified","chinese_traditional"],"雨":["chinese_simplified","chinese_traditional"],"吗":["chinese_simplified"],"针":["chinese_simplified"],"刘":["chinese_simplified"],"啊":["chinese_simplified","chinese_traditional"],"急":["chinese_simplified","chinese_traditional"],"唱":["chinese_simplified","chinese_traditional"],"误":["chinese_simplified"],"训":["chinese_simplified"],"愿":["chinese_simplified"],"审":["chinese_simplified"],"附":["chinese_simplified","chinese_traditional"],"获":["chinese_simplified"],"茶":["chinese_simplified","chinese_traditional"],"鲜":["chinese_simplified"],"粮":["chinese_simplified"],"斤":["chinese_simplified","chinese_traditional"],"孩":["chinese_simplified","chinese_traditional"],"脱":["chinese_simplified"],"硫":["chinese_simplified","chinese_traditional"],"肥":["chinese_simplified","chinese_traditional"],"善":["chinese_simplified","chinese_traditional"],"龙":["chinese_simplified"],"演":["chinese_simplified","chinese_traditional"],"父":["chinese_simplified","chinese_traditional"],"渐":["chinese_simplified"],"血":["chinese_simplified","chinese_traditional"],"欢":["chinese_simplified"],"械":["chinese_simplified","chinese_traditional"],"掌":["chinese_simplified","chinese_traditional"],"歌":["chinese_simplified","chinese_traditional"],"沙":["chinese_simplified","chinese_traditional"],"刚":["chinese_simplified"],"攻":["chinese_simplified","chinese_traditional"],"谓":["chinese_simplified"],"盾":["chinese_simplified","chinese_traditional"],"讨":["chinese_simplified"],"晚":["chinese_simplified","chinese_traditional"],"粒":["chinese_simplified","chinese_traditional"],"乱":["chinese_simplified"],"燃":["chinese_simplified","chinese_traditional"],"矛":["chinese_simplified","chinese_traditional"],"乎":["chinese_simplified","chinese_traditional"],"杀":["chinese_simplified"],"药":["chinese_simplified"],"宁":["chinese_simplified"],"鲁":["chinese_simplified"],"贵":["chinese_simplified"],"钟":["chinese_simplified"],"煤":["chinese_simplified","chinese_traditional"],"读":["chinese_simplified"],"班":["chinese_simplified","chinese_traditional"],"伯":["chinese_simplified","chinese_traditional"],"香":["chinese_simplified","chinese_traditional"],"介":["chinese_simplified","chinese_traditional"],"迫":["chinese_simplified","chinese_traditional"],"句":["chinese_simplified","chinese_traditional"],"丰":["chinese_simplified"],"培":["chinese_simplified","chinese_traditional"],"握":["chinese_simplified","chinese_traditional"],"兰":["chinese_simplified"],"担":["chinese_simplified"],"弦":["chinese_simplified","chinese_traditional"],"蛋":["chinese_simplified","chinese_traditional"],"沉":["chinese_simplified","chinese_traditional"],"假":["chinese_simplified","chinese_traditional"],"穿":["chinese_simplified","chinese_traditional"],"执":["chinese_simplified"],"答":["chinese_simplified","chinese_traditional"],"乐":["chinese_simplified"],"谁":["chinese_simplified"],"顺":["chinese_simplified"],"烟":["chinese_simplified"],"缩":["chinese_simplified"],"征":["chinese_simplified"],"脸":["chinese_simplified"],"喜":["chinese_simplified","chinese_traditional"],"松":["chinese_simplified","chinese_traditional"],"脚":["chinese_simplified"],"困":["chinese_simplified","chinese_traditional"],"异":["chinese_simplified"],"免":["chinese_simplified","chinese_traditional"],"背":["chinese_simplified","chinese_traditional"],"星":["chinese_simplified","chinese_traditional"],"福":["chinese_simplified","chinese_traditional"],"买":["chinese_simplified"],"染":["chinese_simplified","chinese_traditional"],"井":["chinese_simplified","chinese_traditional"],"概":["chinese_simplified","chinese_traditional"],"慢":["chinese_simplified","chinese_traditional"],"怕":["chinese_simplified","chinese_traditional"],"磁":["chinese_simplified","chinese_traditional"],"倍":["chinese_simplified","chinese_traditional"],"祖":["chinese_simplified","chinese_traditional"],"皇":["chinese_simplified","chinese_traditional"],"促":["chinese_simplified","chinese_traditional"],"静":["chinese_simplified"],"补":["chinese_simplified"],"评":["chinese_simplified"],"翻":["chinese_simplified","chinese_traditional"],"肉":["chinese_simplified","chinese_traditional"],"践":["chinese_simplified"],"尼":["chinese_simplified","chinese_traditional"],"衣":["chinese_simplified","chinese_traditional"],"宽":["chinese_simplified"],"扬":["chinese_simplified"],"棉":["chinese_simplified","chinese_traditional"],"希":["chinese_simplified","chinese_traditional"],"伤":["chinese_simplified"],"操":["chinese_simplified","chinese_traditional"],"垂":["chinese_simplified","chinese_traditional"],"秋":["chinese_simplified","chinese_traditional"],"宜":["chinese_simplified","chinese_traditional"],"氢":["chinese_simplified"],"套":["chinese_simplified","chinese_traditional"],"督":["chinese_simplified","chinese_traditional"],"振":["chinese_simplified","chinese_traditional"],"架":["chinese_simplified","chinese_traditional"],"亮":["chinese_simplified","chinese_traditional"],"末":["chinese_simplified","chinese_traditional"],"宪":["chinese_simplified"],"庆":["chinese_simplified"],"编":["chinese_simplified"],"牛":["chinese_simplified","chinese_traditional"],"触":["chinese_simplified"],"映":["chinese_simplified","chinese_traditional"],"雷":["chinese_simplified","chinese_traditional"],"销":["chinese_simplified"],"诗":["chinese_simplified"],"座":["chinese_simplified","chinese_traditional"],"居":["chinese_simplified","chinese_traditional"],"抓":["chinese_simplified","chinese_traditional"],"裂":["chinese_simplified","chinese_traditional"],"胞":["chinese_simplified","chinese_traditional"],"呼":["chinese_simplified","chinese_traditional"],"娘":["chinese_simplified","chinese_traditional"],"景":["chinese_simplified","chinese_traditional"],"威":["chinese_simplified","chinese_traditional"],"绿":["chinese_simplified"],"晶":["chinese_simplified","chinese_traditional"],"厚":["chinese_simplified","chinese_traditional"],"盟":["chinese_simplified","chinese_traditional"],"衡":["chinese_simplified","chinese_traditional"],"鸡":["chinese_simplified"],"孙":["chinese_simplified"],"延":["chinese_simplified","chinese_traditional"],"危":["chinese_simplified","chinese_traditional"],"胶":["chinese_simplified"],"屋":["chinese_simplified","chinese_traditional"],"乡":["chinese_simplified"],"临":["chinese_simplified"],"陆":["chinese_simplified"],"顾":["chinese_simplified"],"掉":["chinese_simplified","chinese_traditional"],"呀":["chinese_simplified","chinese_traditional"],"灯":["chinese_simplified"],"岁":["chinese_simplified"],"措":["chinese_simplified","chinese_traditional"],"束":["chinese_simplified","chinese_traditional"],"耐":["chinese_simplified","chinese_traditional"],"剧":["chinese_simplified"],"玉":["chinese_simplified","chinese_traditional"],"赵":["chinese_simplified"],"跳":["chinese_simplified","chinese_traditional"],"哥":["chinese_simplified","chinese_traditional"],"季":["chinese_simplified","chinese_traditional"],"课":["chinese_simplified"],"凯":["chinese_simplified"],"胡":["chinese_simplified","chinese_traditional"],"额":["chinese_simplified"],"款":["chinese_simplified","chinese_traditional"],"绍":["chinese_simplified"],"卷":["chinese_simplified","chinese_traditional"],"齐":["chinese_simplified"],"伟":["chinese_simplified"],"蒸":["chinese_simplified","chinese_traditional"],"殖":["chinese_simplified","chinese_traditional"],"永":["chinese_simplified","chinese_traditional"],"宗":["chinese_simplified","chinese_traditional"],"苗":["chinese_simplified","chinese_traditional"],"川":["chinese_simplified","chinese_traditional"],"炉":["chinese_simplified"],"岩":["chinese_simplified","chinese_traditional"],"弱":["chinese_simplified","chinese_traditional"],"零":["chinese_simplified","chinese_traditional"],"杨":["chinese_simplified"],"奏":["chinese_simplified","chinese_traditional"],"沿":["chinese_simplified","chinese_traditional"],"露":["chinese_simplified","chinese_traditional"],"杆":["chinese_simplified"],"探":["chinese_simplified","chinese_traditional"],"滑":["chinese_simplified","chinese_traditional"],"镇":["chinese_simplified"],"饭":["chinese_simplified"],"浓":["chinese_simplified"],"航":["chinese_simplified","chinese_traditional"],"怀":["chinese_simplified"],"赶":["chinese_simplified"],"库":["chinese_simplified"],"夺":["chinese_simplified"],"伊":["chinese_simplified","chinese_traditional"],"灵":["chinese_simplified"],"税":["chinese_simplified"],"途":["chinese_simplified","chinese_traditional"],"灭":["chinese_simplified"],"赛":["chinese_simplified"],"归":["chinese_simplified"],"召":["chinese_simplified","chinese_traditional"],"鼓":["chinese_simplified","chinese_traditional"],"播":["chinese_simplified","chinese_traditional"],"盘":["chinese_simplified"],"裁":["chinese_simplified","chinese_traditional"],"险":["chinese_simplified"],"康":["chinese_simplified","chinese_traditional"],"唯":["chinese_simplified","chinese_traditional"],"录":["chinese_simplified"],"菌":["chinese_simplified","chinese_traditional"],"纯":["chinese_simplified"],"借":["chinese_simplified","chinese_traditional"],"糖":["chinese_simplified","chinese_traditional"],"盖":["chinese_simplified"],"横":["chinese_simplified"],"符":["chinese_simplified","chinese_traditional"],"私":["chinese_simplified","chinese_traditional"],"努":["chinese_simplified","chinese_traditional"],"堂":["chinese_simplified","chinese_traditional"],"域":["chinese_simplified","chinese_traditional"],"枪":["chinese_simplified"],"润":["chinese_simplified"],"幅":["chinese_simplified","chinese_traditional"],"哈":["chinese_simplified","chinese_traditional"],"竟":["chinese_simplified","chinese_traditional"],"熟":["chinese_simplified","chinese_traditional"],"虫":["chinese_simplified"],"泽":["chinese_simplified"],"脑":["chinese_simplified"],"壤":["chinese_simplified","chinese_traditional"],"碳":["chinese_simplified","chinese_traditional"],"欧":["chinese_simplified"],"遍":["chinese_simplified","chinese_traditional"],"侧":["chinese_simplified"],"寨":["chinese_simplified","chinese_traditional"],"敢":["chinese_simplified","chinese_traditional"],"彻":["chinese_simplified"],"虑":["chinese_simplified"],"斜":["chinese_simplified","chinese_traditional"],"薄":["chinese_simplified","chinese_traditional"],"庭":["chinese_simplified","chinese_traditional"],"纳":["chinese_simplified"],"弹":["chinese_simplified"],"饲":["chinese_simplified"],"伸":["chinese_simplified","chinese_traditional"],"折":["chinese_simplified","chinese_traditional"],"麦":["chinese_simplified"],"湿":["chinese_simplified"],"暗":["chinese_simplified","chinese_traditional"],"荷":["chinese_simplified","chinese_traditional"],"瓦":["chinese_simplified","chinese_traditional"],"塞":["chinese_simplified","chinese_traditional"],"床":["chinese_simplified","chinese_traditional"],"筑":["chinese_simplified"],"恶":["chinese_simplified"],"户":["chinese_simplified"],"访":["chinese_simplified"],"塔":["chinese_simplified","chinese_traditional"],"奇":["chinese_simplified","chinese_traditional"],"透":["chinese_simplified","chinese_traditional"],"梁":["chinese_simplified","chinese_traditional"],"刀":["chinese_simplified","chinese_traditional"],"旋":["chinese_simplified","chinese_traditional"],"迹":["chinese_simplified"],"卡":["chinese_simplified","chinese_traditional"],"氯":["chinese_simplified","chinese_traditional"],"遇":["chinese_simplified","chinese_traditional"],"份":["chinese_simplified","chinese_traditional"],"毒":["chinese_simplified","chinese_traditional"],"泥":["chinese_simplified","chinese_traditional"],"退":["chinese_simplified","chinese_traditional"],"洗":["chinese_simplified","chinese_traditional"],"摆":["chinese_simplified"],"灰":["chinese_simplified","chinese_traditional"],"彩":["chinese_simplified","chinese_traditional"],"卖":["chinese_simplified"],"耗":["chinese_simplified","chinese_traditional"],"夏":["chinese_simplified","chinese_traditional"],"择":["chinese_simplified"],"忙":["chinese_simplified","chinese_traditional"],"铜":["chinese_simplified"],"献":["chinese_simplified"],"硬":["chinese_simplified","chinese_traditional"],"予":["chinese_simplified","chinese_traditional"],"繁":["chinese_simplified","chinese_traditional"],"圈":["chinese_simplified","chinese_traditional"],"雪":["chinese_simplified","chinese_traditional"],"函":["chinese_simplified","chinese_traditional"],"亦":["chinese_simplified","chinese_traditional"],"抽":["chinese_simplified","chinese_traditional"],"篇":["chinese_simplified","chinese_traditional"],"阵":["chinese_simplified"],"阴":["chinese_simplified"],"丁":["chinese_simplified","chinese_traditional"],"尺":["chinese_simplified","chinese_traditional"],"追":["chinese_simplified","chinese_traditional"],"堆":["chinese_simplified","chinese_traditional"],"雄":["chinese_simplified","chinese_traditional"],"迎":["chinese_simplified","chinese_traditional"],"泛":["chinese_simplified","chinese_traditional"],"爸":["chinese_simplified","chinese_traditional"],"楼":["chinese_simplified"],"避":["chinese_simplified","chinese_traditional"],"谋":["chinese_simplified"],"吨":["chinese_simplified"],"野":["chinese_simplified","chinese_traditional"],"猪":["chinese_simplified"],"旗":["chinese_simplified","chinese_traditional"],"累":["chinese_simplified","chinese_traditional"],"偏":["chinese_simplified","chinese_traditional"],"典":["chinese_simplified","chinese_traditional"],"馆":["chinese_simplified"],"索":["chinese_simplified","chinese_traditional"],"秦":["chinese_simplified","chinese_traditional"],"脂":["chinese_simplified","chinese_traditional"],"潮":["chinese_simplified","chinese_traditional"],"爷":["chinese_simplified"],"豆":["chinese_simplified","chinese_traditional"],"忽":["chinese_simplified","chinese_traditional"],"托":["chinese_simplified","chinese_traditional"],"惊":["chinese_simplified"],"塑":["chinese_simplified","chinese_traditional"],"遗":["chinese_simplified"],"愈":["chinese_simplified","chinese_traditional"],"朱":["chinese_simplified","chinese_traditional"],"替":["chinese_simplified","chinese_traditional"],"纤":["chinese_simplified"],"粗":["chinese_simplified","chinese_traditional"],"倾":["chinese_simplified"],"尚":["chinese_simplified","chinese_traditional"],"痛":["chinese_simplified","chinese_traditional"],"楚":["chinese_simplified","chinese_traditional"],"谢":["chinese_simplified"],"奋":["chinese_simplified"],"购":["chinese_simplified"],"磨":["chinese_simplified","chinese_traditional"],"君":["chinese_simplified","chinese_traditional"],"池":["chinese_simplified","chinese_traditional"],"旁":["chinese_simplified","chinese_traditional"],"碎":["chinese_simplified","chinese_traditional"],"骨":["chinese_simplified","chinese_traditional"],"监":["chinese_simplified"],"捕":["chinese_simplified","chinese_traditional"],"弟":["chinese_simplified","chinese_traditional"],"暴":["chinese_simplified","chinese_traditional"],"割":["chinese_simplified","chinese_traditional"],"贯":["chinese_simplified"],"殊":["chinese_simplified","chinese_traditional"],"释":["chinese_simplified"],"词":["chinese_simplified"],"亡":["chinese_simplified","chinese_traditional"],"壁":["chinese_simplified","chinese_traditional"],"顿":["chinese_simplified"],"宝":["chinese_simplified"],"午":["chinese_simplified","chinese_traditional"],"尘":["chinese_simplified"],"闻":["chinese_simplified"],"揭":["chinese_simplified","chinese_traditional"],"炮":["chinese_simplified","chinese_traditional"],"残":["chinese_simplified"],"冬":["chinese_simplified","chinese_traditional"],"桥":["chinese_simplified"],"妇":["chinese_simplified"],"警":["chinese_simplified","chinese_traditional"],"综":["chinese_simplified"],"招":["chinese_simplified","chinese_traditional"],"吴":["chinese_simplified"],"付":["chinese_simplified","chinese_traditional"],"浮":["chinese_simplified","chinese_traditional"],"遭":["chinese_simplified","chinese_traditional"],"徐":["chinese_simplified","chinese_traditional"],"您":["chinese_simplified","chinese_traditional"],"摇":["chinese_simplified"],"谷":["chinese_simplified","chinese_traditional"],"赞":["chinese_simplified"],"箱":["chinese_simplified","chinese_traditional"],"隔":["chinese_simplified","chinese_traditional"],"订":["chinese_simplified"],"男":["chinese_simplified","chinese_traditional"],"吹":["chinese_simplified","chinese_traditional"],"园":["chinese_simplified"],"纷":["chinese_simplified"],"唐":["chinese_simplified","chinese_traditional"],"败":["chinese_simplified"],"宋":["chinese_simplified","chinese_traditional"],"玻":["chinese_simplified","chinese_traditional"],"巨":["chinese_simplified","chinese_traditional"],"耕":["chinese_simplified","chinese_traditional"],"坦":["chinese_simplified","chinese_traditional"],"荣":["chinese_simplified"],"闭":["chinese_simplified"],"湾":["chinese_simplified"],"键":["chinese_simplified"],"凡":["chinese_simplified","chinese_traditional"],"驻":["chinese_simplified"],"锅":["chinese_simplified"],"救":["chinese_simplified","chinese_traditional"],"恩":["chinese_simplified","chinese_traditional"],"剥":["chinese_simplified"],"凝":["chinese_simplified","chinese_traditional"],"碱":["chinese_simplified"],"齿":["chinese_simplified"],"截":["chinese_simplified","chinese_traditional"],"炼":["chinese_simplified"],"麻":["chinese_simplified","chinese_traditional"],"纺":["chinese_simplified"],"禁":["chinese_simplified","chinese_traditional"],"废":["chinese_simplified"],"盛":["chinese_simplified","chinese_traditional"],"版":["chinese_simplified","chinese_traditional"],"缓":["chinese_simplified"],"净":["chinese_simplified"],"睛":["chinese_simplified","chinese_traditional"],"昌":["chinese_simplified","chinese_traditional"],"婚":["chinese_simplified","chinese_traditional"],"涉":["chinese_simplified","chinese_traditional"],"筒":["chinese_simplified","chinese_traditional"],"嘴":["chinese_simplified","chinese_traditional"],"插":["chinese_simplified","chinese_traditional"],"岸":["chinese_simplified","chinese_traditional"],"朗":["chinese_simplified","chinese_traditional"],"庄":["chinese_simplified"],"街":["chinese_simplified","chinese_traditional"],"藏":["chinese_simplified","chinese_traditional"],"姑":["chinese_simplified","chinese_traditional"],"贸":["chinese_simplified"],"腐":["chinese_simplified","chinese_traditional"],"奴":["chinese_simplified","chinese_traditional"],"啦":["chinese_simplified","chinese_traditional"],"惯":["chinese_simplified"],"乘":["chinese_simplified","chinese_traditional"],"伙":["chinese_simplified"],"恢":["chinese_simplified","chinese_traditional"],"匀":["chinese_simplified"],"纱":["chinese_simplified"],"扎":["chinese_simplified","chinese_traditional"],"辩":["chinese_simplified"],"耳":["chinese_simplified","chinese_traditional"],"彪":["chinese_simplified","chinese_traditional"],"臣":["chinese_simplified","chinese_traditional"],"亿":["chinese_simplified"],"璃":["chinese_simplified","chinese_traditional"],"抵":["chinese_simplified","chinese_traditional"],"脉":["chinese_simplified"],"秀":["chinese_simplified","chinese_traditional"],"萨":["chinese_simplified"],"俄":["chinese_simplified","chinese_traditional"],"网":["chinese_simplified"],"舞":["chinese_simplified","chinese_traditional"],"店":["chinese_simplified","chinese_traditional"],"喷":["chinese_simplified"],"纵":["chinese_simplified"],"寸":["chinese_simplified","chinese_traditional"],"汗":["chinese_simplified","chinese_traditional"],"挂":["chinese_simplified"],"洪":["chinese_simplified","chinese_traditional"],"贺":["chinese_simplified"],"闪":["chinese_simplified"],"柬":["chinese_simplified","chinese_traditional"],"爆":["chinese_simplified","chinese_traditional"],"烯":["chinese_simplified","chinese_traditional"],"津":["chinese_simplified","chinese_traditional"],"稻":["chinese_simplified","chinese_traditional"],"墙":["chinese_simplified"],"软":["chinese_simplified"],"勇":["chinese_simplified","chinese_traditional"],"像":["chinese_simplified","chinese_traditional"],"滚":["chinese_simplified"],"厘":["chinese_simplified","chinese_traditional"],"蒙":["chinese_simplified","chinese_traditional"],"芳":["chinese_simplified","chinese_traditional"],"肯":["chinese_simplified","chinese_traditional"],"坡":["chinese_simplified","chinese_traditional"],"柱":["chinese_simplified","chinese_traditional"],"荡":["chinese_simplified"],"腿":["chinese_simplified","chinese_traditional"],"仪":["chinese_simplified"],"旅":["chinese_simplified","chinese_traditional"],"尾":["chinese_simplified","chinese_traditional"],"轧":["chinese_simplified"],"冰":["chinese_simplified","chinese_traditional"],"贡":["chinese_simplified"],"登":["chinese_simplified","chinese_traditional"],"黎":["chinese_simplified","chinese_traditional"],"削":["chinese_simplified","chinese_traditional"],"钻":["chinese_simplified"],"勒":["chinese_simplified","chinese_traditional"],"逃":["chinese_simplified","chinese_traditional"],"障":["chinese_simplified","chinese_traditional"],"氨":["chinese_simplified","chinese_traditional"],"郭":["chinese_simplified","chinese_traditional"],"峰":["chinese_simplified","chinese_traditional"],"币":["chinese_simplified"],"港":["chinese_simplified","chinese_traditional"],"伏":["chinese_simplified","chinese_traditional"],"轨":["chinese_simplified"],"亩":["chinese_simplified"],"毕":["chinese_simplified"],"擦":["chinese_simplified","chinese_traditional"],"莫":["chinese_simplified","chinese_traditional"],"刺":["chinese_simplified","chinese_traditional"],"浪":["chinese_simplified","chinese_traditional"],"秘":["chinese_simplified","chinese_traditional"],"援":["chinese_simplified","chinese_traditional"],"株":["chinese_simplified","chinese_traditional"],"健":["chinese_simplified","chinese_traditional"],"售":["chinese_simplified","chinese_traditional"],"股":["chinese_simplified","chinese_traditional"],"岛":["chinese_simplified"],"甘":["chinese_simplified","chinese_traditional"],"泡":["chinese_simplified","chinese_traditional"],"睡":["chinese_simplified","chinese_traditional"],"童":["chinese_simplified","chinese_traditional"],"铸":["chinese_simplified"],"汤":["chinese_simplified"],"阀":["chinese_simplified"],"休":["chinese_simplified","chinese_traditional"],"汇":["chinese_simplified"],"舍":["chinese_simplified","chinese_traditional"],"牧":["chinese_simplified","chinese_traditional"],"绕":["chinese_simplified"],"炸":["chinese_simplified","chinese_traditional"],"哲":["chinese_simplified","chinese_traditional"],"磷":["chinese_simplified","chinese_traditional"],"绩":["chinese_simplified"],"朋":["chinese_simplified","chinese_traditional"],"淡":["chinese_simplified","chinese_traditional"],"尖":["chinese_simplified","chinese_traditional"],"启":["chinese_simplified"],"陷":["chinese_simplified","chinese_traditional"],"柴":["chinese_simplified","chinese_traditional"],"呈":["chinese_simplified","chinese_traditional"],"徒":["chinese_simplified","chinese_traditional"],"颜":["chinese_simplified"],"泪":["chinese_simplified"],"稍":["chinese_simplified","chinese_traditional"],"忘":["chinese_simplified","chinese_traditional"],"泵":["chinese_simplified","chinese_traditional"],"蓝":["chinese_simplified"],"拖":["chinese_simplified","chinese_traditional"],"洞":["chinese_simplified","chinese_traditional"],"授":["chinese_simplified","chinese_traditional"],"镜":["chinese_simplified"],"辛":["chinese_simplified","chinese_traditional"],"壮":["chinese_simplified"],"锋":["chinese_simplified"],"贫":["chinese_simplified"],"虚":["chinese_simplified"],"弯":["chinese_simplified"],"摩":["chinese_simplified","chinese_traditional"],"泰":["chinese_simplified","chinese_traditional"],"幼":["chinese_simplified","chinese_traditional"],"廷":["chinese_simplified","chinese_traditional"],"尊":["chinese_simplified","chinese_traditional"],"窗":["chinese_simplified","chinese_traditional"],"纲":["chinese_simplified"],"弄":["chinese_simplified","chinese_traditional"],"隶":["chinese_simplified"],"疑":["chinese_simplified","chinese_traditional"],"氏":["chinese_simplified","chinese_traditional"],"宫":["chinese_simplified"],"姐":["chinese_simplified","chinese_traditional"],"震":["chinese_simplified","chinese_traditional"],"瑞":["chinese_simplified","chinese_traditional"],"怪":["chinese_simplified","chinese_traditional"],"尤":["chinese_simplified","chinese_traditional"],"琴":["chinese_simplified","chinese_traditional"],"循":["chinese_simplified","chinese_traditional"],"描":["chinese_simplified","chinese_traditional"],"膜":["chinese_simplified","chinese_traditional"],"违":["chinese_simplified"],"夹":["chinese_simplified"],"腰":["chinese_simplified","chinese_traditional"],"缘":["chinese_simplified"],"珠":["chinese_simplified","chinese_traditional"],"穷":["chinese_simplified"],"森":["chinese_simplified","chinese_traditional"],"枝":["chinese_simplified","chinese_traditional"],"竹":["chinese_simplified","chinese_traditional"],"沟":["chinese_simplified"],"催":["chinese_simplified","chinese_traditional"],"绳":["chinese_simplified"],"忆":["chinese_simplified"],"邦":["chinese_simplified","chinese_traditional"],"剩":["chinese_simplified","chinese_traditional"],"幸":["chinese_simplified","chinese_traditional"],"浆":["chinese_simplified"],"栏":["chinese_simplified"],"拥":["chinese_simplified"],"牙":["chinese_simplified","chinese_traditional"],"贮":["chinese_simplified"],"礼":["chinese_simplified"],"滤":["chinese_simplified"],"钠":["chinese_simplified"],"纹":["chinese_simplified"],"罢":["chinese_simplified"],"拍":["chinese_simplified","chinese_traditional"],"咱":["chinese_simplified","chinese_traditional"],"喊":["chinese_simplified","chinese_traditional"],"袖":["chinese_simplified","chinese_traditional"],"埃":["chinese_simplified","chinese_traditional"],"勤":["chinese_simplified","chinese_traditional"],"罚":["chinese_simplified"],"焦":["chinese_simplified","chinese_traditional"],"潜":["chinese_simplified"],"伍":["chinese_simplified","chinese_traditional"],"墨":["chinese_simplified","chinese_traditional"],"欲":["chinese_simplified","chinese_traditional"],"缝":["chinese_simplified"],"姓":["chinese_simplified","chinese_traditional"],"刊":["chinese_simplified","chinese_traditional"],"饱":["chinese_simplified"],"仿":["chinese_simplified","chinese_traditional"],"奖":["chinese_simplified"],"铝":["chinese_simplified"],"鬼":["chinese_simplified","chinese_traditional"],"丽":["chinese_simplified"],"跨":["chinese_simplified","chinese_traditional"],"默":["chinese_simplified","chinese_traditional"],"挖":["chinese_simplified","chinese_traditional"],"链":["chinese_simplified"],"扫":["chinese_simplified"],"喝":["chinese_simplified","chinese_traditional"],"袋":["chinese_simplified","chinese_traditional"],"炭":["chinese_simplified","chinese_traditional"],"污":["chinese_simplified","chinese_traditional"],"幕":["chinese_simplified","chinese_traditional"],"诸":["chinese_simplified"],"弧":["chinese_simplified","chinese_traditional"],"励":["chinese_simplified"],"梅":["chinese_simplified","chinese_traditional"],"奶":["chinese_simplified","chinese_traditional"],"洁":["chinese_simplified"],"灾":["chinese_simplified"],"舟":["chinese_simplified","chinese_traditional"],"鉴":["chinese_simplified"],"苯":["chinese_simplified","chinese_traditional"],"讼":["chinese_simplified"],"抱":["chinese_simplified","chinese_traditional"],"毁":["chinese_simplified"],"懂":["chinese_simplified","chinese_traditional"],"寒":["chinese_simplified","chinese_traditional"],"智":["chinese_simplified","chinese_traditional"],"埔":["chinese_simplified","chinese_traditional"],"寄":["chinese_simplified","chinese_traditional"],"届":["chinese_simplified"],"跃":["chinese_simplified"],"渡":["chinese_simplified","chinese_traditional"],"挑":["chinese_simplified","chinese_traditional"],"丹":["chinese_simplified","chinese_traditional"],"艰":["chinese_simplified"],"贝":["chinese_simplified"],"碰":["chinese_simplified","chinese_traditional"],"拔":["chinese_simplified","chinese_traditional"],"爹":["chinese_simplified","chinese_traditional"],"戴":["chinese_simplified","chinese_traditional"],"码":["chinese_simplified"],"梦":["chinese_simplified"],"芽":["chinese_simplified","chinese_traditional"],"熔":["chinese_simplified","chinese_traditional"],"赤":["chinese_simplified","chinese_traditional"],"渔":["chinese_simplified"],"哭":["chinese_simplified","chinese_traditional"],"敬":["chinese_simplified","chinese_traditional"],"颗":["chinese_simplified"],"奔":["chinese_simplified","chinese_traditional"],"铅":["chinese_simplified"],"仲":["chinese_simplified","chinese_traditional"],"虎":["chinese_simplified","chinese_traditional"],"稀":["chinese_simplified","chinese_traditional"],"妹":["chinese_simplified","chinese_traditional"],"乏":["chinese_simplified","chinese_traditional"],"珍":["chinese_simplified","chinese_traditional"],"申":["chinese_simplified","chinese_traditional"],"桌":["chinese_simplified","chinese_traditional"],"遵":["chinese_simplified","chinese_traditional"],"允":["chinese_simplified","chinese_traditional"],"隆":["chinese_simplified","chinese_traditional"],"螺":["chinese_simplified","chinese_traditional"],"仓":["chinese_simplified"],"魏":["chinese_simplified","chinese_traditional"],"锐":["chinese_simplified"],"晓":["chinese_simplified"],"氮":["chinese_simplified","chinese_traditional"],"兼":["chinese_simplified","chinese_traditional"],"隐":["chinese_simplified"],"碍":["chinese_simplified"],"赫":["chinese_simplified","chinese_traditional"],"拨":["chinese_simplified"],"忠":["chinese_simplified","chinese_traditional"],"肃":["chinese_simplified"],"缸":["chinese_simplified","chinese_traditional"],"牵":["chinese_simplified"],"抢":["chinese_simplified"],"博":["chinese_simplified","chinese_traditional"],"巧":["chinese_simplified","chinese_traditional"],"壳":["chinese_simplified"],"兄":["chinese_simplified","chinese_traditional"],"杜":["chinese_simplified","chinese_traditional"],"讯":["chinese_simplified"],"诚":["chinese_simplified"],"碧":["chinese_simplified","chinese_traditional"],"祥":["chinese_simplified","chinese_traditional"],"柯":["chinese_simplified","chinese_traditional"],"页":["chinese_simplified"],"巡":["chinese_simplified","chinese_traditional"],"矩":["chinese_simplified","chinese_traditional"],"悲":["chinese_simplified","chinese_traditional"],"灌":["chinese_simplified","chinese_traditional"],"龄":["chinese_simplified"],"伦":["chinese_simplified"],"票":["chinese_simplified","chinese_traditional"],"寻":["chinese_simplified"],"桂":["chinese_simplified","chinese_traditional"],"铺":["chinese_simplified"],"圣":["chinese_simplified"],"恐":["chinese_simplified","chinese_traditional"],"恰":["chinese_simplified","chinese_traditional"],"郑":["chinese_simplified"],"趣":["chinese_simplified","chinese_traditional"],"抬":["chinese_simplified","chinese_traditional"],"荒":["chinese_simplified","chinese_traditional"],"腾":["chinese_simplified"],"贴":["chinese_simplified"],"柔":["chinese_simplified","chinese_traditional"],"滴":["chinese_simplified","chinese_traditional"],"猛":["chinese_simplified","chinese_traditional"],"阔":["chinese_simplified"],"辆":["chinese_simplified"],"妻":["chinese_simplified","chinese_traditional"],"填":["chinese_simplified","chinese_traditional"],"撤":["chinese_simplified","chinese_traditional"],"储":["chinese_simplified"],"签":["chinese_simplified"],"闹":["chinese_simplified"],"扰":["chinese_simplified"],"紫":["chinese_simplified","chinese_traditional"],"砂":["chinese_simplified","chinese_traditional"],"递":["chinese_simplified"],"戏":["chinese_simplified"],"吊":["chinese_simplified","chinese_traditional"],"陶":["chinese_simplified","chinese_traditional"],"伐":["chinese_simplified","chinese_traditional"],"喂":["chinese_simplified"],"疗":["chinese_simplified"],"瓶":["chinese_simplified","chinese_traditional"],"婆":["chinese_simplified","chinese_traditional"],"抚":["chinese_simplified"],"臂":["chinese_simplified","chinese_traditional"],"摸":["chinese_simplified","chinese_traditional"],"忍":["chinese_simplified","chinese_traditional"],"虾":["chinese_simplified"],"蜡":["chinese_simplified"],"邻":["chinese_simplified"],"胸":["chinese_simplified","chinese_traditional"],"巩":["chinese_simplified"],"挤":["chinese_simplified"],"偶":["chinese_simplified","chinese_traditional"],"弃":["chinese_simplified"],"槽":["chinese_simplified","chinese_traditional"],"劲":["chinese_simplified"],"乳":["chinese_simplified","chinese_traditional"],"邓":["chinese_simplified"],"吉":["chinese_simplified","chinese_traditional"],"仁":["chinese_simplified","chinese_traditional"],"烂":["chinese_simplified"],"砖":["chinese_simplified"],"租":["chinese_simplified","chinese_traditional"],"乌":["chinese_simplified"],"舰":["chinese_simplified"],"伴":["chinese_simplified","chinese_traditional"],"瓜":["chinese_simplified","chinese_traditional"],"浅":["chinese_simplified"],"丙":["chinese_simplified","chinese_traditional"],"暂":["chinese_simplified"],"燥":["chinese_simplified","chinese_traditional"],"橡":["chinese_simplified","chinese_traditional"],"柳":["chinese_simplified","chinese_traditional"],"迷":["chinese_simplified","chinese_traditional"],"暖":["chinese_simplified","chinese_traditional"],"牌":["chinese_simplified","chinese_traditional"],"秧":["chinese_simplified","chinese_traditional"],"胆":["chinese_simplified"],"详":["chinese_simplified"],"簧":["chinese_simplified","chinese_traditional"],"踏":["chinese_simplified","chinese_traditional"],"瓷":["chinese_simplified","chinese_traditional"],"谱":["chinese_simplified"],"呆":["chinese_simplified","chinese_traditional"],"宾":["chinese_simplified"],"糊":["chinese_simplified","chinese_traditional"],"洛":["chinese_simplified","chinese_traditional"],"辉":["chinese_simplified"],"愤":["chinese_simplified"],"竞":["chinese_simplified"],"隙":["chinese_simplified","chinese_traditional"],"怒":["chinese_simplified","chinese_traditional"],"粘":["chinese_simplified","chinese_traditional"],"乃":["chinese_simplified","chinese_traditional"],"绪":["chinese_simplified"],"肩":["chinese_simplified","chinese_traditional"],"籍":["chinese_simplified","chinese_traditional"],"敏":["chinese_simplified","chinese_traditional"],"涂":["chinese_simplified"],"熙":["chinese_simplified","chinese_traditional"],"皆":["chinese_simplified","chinese_traditional"],"侦":["chinese_simplified"],"悬":["chinese_simplified"],"掘":["chinese_simplified","chinese_traditional"],"享":["chinese_simplified","chinese_traditional"],"纠":["chinese_simplified"],"醒":["chinese_simplified","chinese_traditional"],"狂":["chinese_simplified","chinese_traditional"],"锁":["chinese_simplified"],"淀":["chinese_simplified","chinese_traditional"],"恨":["chinese_simplified","chinese_traditional"],"牲":["chinese_simplified","chinese_traditional"],"霸":["chinese_simplified","chinese_traditional"],"爬":["chinese_simplified","chinese_traditional"],"赏":["chinese_simplified"],"逆":["chinese_simplified","chinese_traditional"],"玩":["chinese_simplified","chinese_traditional"],"陵":["chinese_simplified","chinese_traditional"],"祝":["chinese_simplified","chinese_traditional"],"秒":["chinese_simplified","chinese_traditional"],"浙":["chinese_simplified","chinese_traditional"],"貌":["chinese_simplified","chinese_traditional"],"役":["chinese_simplified","chinese_traditional"],"彼":["chinese_simplified","chinese_traditional"],"悉":["chinese_simplified","chinese_traditional"],"鸭":["chinese_simplified"],"趋":["chinese_simplified"],"凤":["chinese_simplified"],"晨":["chinese_simplified","chinese_traditional"],"畜":["chinese_simplified","chinese_traditional"],"辈":["chinese_simplified"],"秩":["chinese_simplified","chinese_traditional"],"卵":["chinese_simplified","chinese_traditional"],"署":["chinese_simplified","chinese_traditional"],"梯":["chinese_simplified","chinese_traditional"],"炎":["chinese_simplified","chinese_traditional"],"滩":["chinese_simplified"],"棋":["chinese_simplified","chinese_traditional"],"驱":["chinese_simplified"],"筛":["chinese_simplified"],"峡":["chinese_simplified"],"冒":["chinese_simplified","chinese_traditional"],"啥":["chinese_simplified","chinese_traditional"],"寿":["chinese_simplified"],"译":["chinese_simplified"],"浸":["chinese_simplified","chinese_traditional"],"泉":["chinese_simplified","chinese_traditional"],"帽":["chinese_simplified","chinese_traditional"],"迟":["chinese_simplified"],"硅":["chinese_simplified"],"疆":["chinese_simplified","chinese_traditional"],"贷":["chinese_simplified"],"漏":["chinese_simplified","chinese_traditional"],"稿":["chinese_simplified","chinese_traditional"],"冠":["chinese_simplified","chinese_traditional"],"嫩":["chinese_simplified","chinese_traditional"],"胁":["chinese_simplified"],"芯":["chinese_simplified","chinese_traditional"],"牢":["chinese_simplified","chinese_traditional"],"叛":["chinese_simplified","chinese_traditional"],"蚀":["chinese_simplified"],"奥":["chinese_simplified"],"鸣":["chinese_simplified"],"岭":["chinese_simplified"],"羊":["chinese_simplified","chinese_traditional"],"凭":["chinese_simplified"],"串":["chinese_simplified","chinese_traditional"],"塘":["chinese_simplified","chinese_traditional"],"绘":["chinese_simplified"],"酵":["chinese_simplified","chinese_traditional"],"融":["chinese_simplified","chinese_traditional"],"盆":["chinese_simplified","chinese_traditional"],"锡":["chinese_simplified"],"庙":["chinese_simplified"],"筹":["chinese_simplified"],"冻":["chinese_simplified"],"辅":["chinese_simplified"],"摄":["chinese_simplified"],"袭":["chinese_simplified"],"筋":["chinese_simplified","chinese_traditional"],"拒":["chinese_simplified","chinese_traditional"],"僚":["chinese_simplified","chinese_traditional"],"旱":["chinese_simplified","chinese_traditional"],"钾":["chinese_simplified"],"鸟":["chinese_simplified"],"漆":["chinese_simplified","chinese_traditional"],"沈":["chinese_simplified","chinese_traditional"],"眉":["chinese_simplified","chinese_traditional"],"疏":["chinese_simplified","chinese_traditional"],"添":["chinese_simplified","chinese_traditional"],"棒":["chinese_simplified","chinese_traditional"],"穗":["chinese_simplified","chinese_traditional"],"硝":["chinese_simplified","chinese_traditional"],"韩":["chinese_simplified"],"逼":["chinese_simplified","chinese_traditional"],"扭":["chinese_simplified","chinese_traditional"],"侨":["chinese_simplified"],"凉":["chinese_simplified"],"挺":["chinese_simplified","chinese_traditional"],"碗":["chinese_simplified","chinese_traditional"],"栽":["chinese_simplified","chinese_traditional"],"炒":["chinese_simplified","chinese_traditional"],"杯":["chinese_simplified","chinese_traditional"],"患":["chinese_simplified","chinese_traditional"],"馏":["chinese_simplified"],"劝":["chinese_simplified"],"豪":["chinese_simplified","chinese_traditional"],"辽":["chinese_simplified"],"勃":["chinese_simplified","chinese_traditional"],"鸿":["chinese_simplified"],"旦":["chinese_simplified","chinese_traditional"],"吏":["chinese_simplified","chinese_traditional"],"拜":["chinese_simplified","chinese_traditional"],"狗":["chinese_simplified","chinese_traditional"],"埋":["chinese_simplified","chinese_traditional"],"辊":["chinese_simplified"],"掩":["chinese_simplified","chinese_traditional"],"饮":["chinese_simplified"],"搬":["chinese_simplified","chinese_traditional"],"骂":["chinese_simplified"],"辞":["chinese_simplified"],"勾":["chinese_simplified","chinese_traditional"],"扣":["chinese_simplified","chinese_traditional"],"估":["chinese_simplified","chinese_traditional"],"蒋":["chinese_simplified"],"绒":["chinese_simplified"],"雾":["chinese_simplified"],"丈":["chinese_simplified","chinese_traditional"],"朵":["chinese_simplified","chinese_traditional"],"姆":["chinese_simplified","chinese_traditional"],"拟":["chinese_simplified"],"宇":["chinese_simplified","chinese_traditional"],"辑":["chinese_simplified"],"陕":["chinese_simplified"],"雕":["chinese_simplified","chinese_traditional"],"偿":["chinese_simplified"],"蓄":["chinese_simplified","chinese_traditional"],"崇":["chinese_simplified","chinese_traditional"],"剪":["chinese_simplified","chinese_traditional"],"倡":["chinese_simplified","chinese_traditional"],"厅":["chinese_simplified"],"咬":["chinese_simplified","chinese_traditional"],"驶":["chinese_simplified"],"薯":["chinese_simplified","chinese_traditional"],"刷":["chinese_simplified","chinese_traditional"],"斥":["chinese_simplified","chinese_traditional"],"番":["chinese_simplified","chinese_traditional"],"赋":["chinese_simplified"],"奉":["chinese_simplified","chinese_traditional"],"佛":["chinese_simplified","chinese_traditional"],"浇":["chinese_simplified"],"漫":["chinese_simplified","chinese_traditional"],"曼":["chinese_simplified","chinese_traditional"],"扇":["chinese_simplified","chinese_traditional"],"钙":["chinese_simplified"],"桃":["chinese_simplified","chinese_traditional"],"扶":["chinese_simplified","chinese_traditional"],"仔":["chinese_simplified","chinese_traditional"],"返":["chinese_simplified","chinese_traditional"],"俗":["chinese_simplified","chinese_traditional"],"亏":["chinese_simplified"],"腔":["chinese_simplified","chinese_traditional"],"鞋":["chinese_simplified","chinese_traditional"],"棱":["chinese_simplified","chinese_traditional"],"覆":["chinese_simplified","chinese_traditional"],"框":["chinese_simplified","chinese_traditional"],"悄":["chinese_simplified","chinese_traditional"],"叔":["chinese_simplified","chinese_traditional"],"撞":["chinese_simplified","chinese_traditional"],"骗":["chinese_simplified"],"勘":["chinese_simplified","chinese_traditional"],"旺":["chinese_simplified","chinese_traditional"],"沸":["chinese_simplified","chinese_traditional"],"孤":["chinese_simplified","chinese_traditional"],"吐":["chinese_simplified","chinese_traditional"],"孟":["chinese_simplified","chinese_traditional"],"渠":["chinese_simplified","chinese_traditional"],"屈":["chinese_simplified","chinese_traditional"],"疾":["chinese_simplified","chinese_traditional"],"妙":["chinese_simplified","chinese_traditional"],"惜":["chinese_simplified","chinese_traditional"],"仰":["chinese_simplified","chinese_traditional"],"狠":["chinese_simplified","chinese_traditional"],"胀":["chinese_simplified"],"谐":["chinese_simplified"],"抛":["chinese_simplified"],"霉":["chinese_simplified"],"桑":["chinese_simplified","chinese_traditional"],"岗":["chinese_simplified"],"嘛":["chinese_simplified","chinese_traditional"],"衰":["chinese_simplified","chinese_traditional"],"盗":["chinese_simplified"],"渗":["chinese_simplified"],"脏":["chinese_simplified"],"赖":["chinese_simplified"],"涌":["chinese_simplified"],"甜":["chinese_simplified","chinese_traditional"],"曹":["chinese_simplified","chinese_traditional"],"阅":["chinese_simplified"],"肌":["chinese_simplified","chinese_traditional"],"哩":["chinese_simplified","chinese_traditional"],"厉":["chinese_simplified"],"烃":["chinese_simplified"],"纬":["chinese_simplified"],"毅":["chinese_simplified","chinese_traditional"],"昨":["chinese_simplified","chinese_traditional"],"伪":["chinese_simplified"],"症":["chinese_simplified","chinese_traditional"],"煮":["chinese_simplified","chinese_traditional"],"叹":["chinese_simplified"],"钉":["chinese_simplified"],"搭":["chinese_simplified","chinese_traditional"],"茎":["chinese_simplified"],"笼":["chinese_simplified"],"酷":["chinese_simplified","chinese_traditional"],"偷":["chinese_simplified","chinese_traditional"],"弓":["chinese_simplified","chinese_traditional"],"锥":["chinese_simplified"],"恒":["chinese_simplified"],"杰":["chinese_simplified"],"坑":["chinese_simplified","chinese_traditional"],"鼻":["chinese_simplified","chinese_traditional"],"翼":["chinese_simplified","chinese_traditional"],"纶":["chinese_simplified"],"叙":["chinese_simplified"],"狱":["chinese_simplified"],"逮":["chinese_simplified","chinese_traditional"],"罐":["chinese_simplified","chinese_traditional"],"络":["chinese_simplified"],"棚":["chinese_simplified","chinese_traditional"],"抑":["chinese_simplified","chinese_traditional"],"膨":["chinese_simplified","chinese_traditional"],"蔬":["chinese_simplified","chinese_traditional"],"寺":["chinese_simplified","chinese_traditional"],"骤":["chinese_simplified"],"穆":["chinese_simplified","chinese_traditional"],"冶":["chinese_simplified","chinese_traditional"],"枯":["chinese_simplified","chinese_traditional"],"册":["chinese_simplified"],"尸":["chinese_simplified"],"凸":["chinese_simplified","chinese_traditional"],"绅":["chinese_simplified"],"坯":["chinese_simplified","chinese_traditional"],"牺":["chinese_simplified"],"焰":["chinese_simplified","chinese_traditional"],"轰":["chinese_simplified"],"欣":["chinese_simplified","chinese_traditional"],"晋":["chinese_simplified"],"瘦":["chinese_simplified","chinese_traditional"],"御":["chinese_simplified"],"锭":["chinese_simplified"],"锦":["chinese_simplified"],"丧":["chinese_simplified"],"旬":["chinese_simplified","chinese_traditional"],"锻":["chinese_simplified"],"垄":["chinese_simplified"],"搜":["chinese_simplified","chinese_traditional"],"扑":["chinese_simplified"],"邀":["chinese_simplified","chinese_traditional"],"亭":["chinese_simplified","chinese_traditional"],"酯":["chinese_simplified","chinese_traditional"],"迈":["chinese_simplified"],"舒":["chinese_simplified","chinese_traditional"],"脆":["chinese_simplified","chinese_traditional"],"酶":["chinese_simplified","chinese_traditional"],"闲":["chinese_simplified"],"忧":["chinese_simplified"],"酚":["chinese_simplified","chinese_traditional"],"顽":["chinese_simplified"],"羽":["chinese_simplified","chinese_traditional"],"涨":["chinese_simplified"],"卸":["chinese_simplified","chinese_traditional"],"仗":["chinese_simplified","chinese_traditional"],"陪":["chinese_simplified","chinese_traditional"],"辟":["chinese_simplified"],"惩":["chinese_simplified"],"杭":["chinese_simplified","chinese_traditional"],"姚":["chinese_simplified","chinese_traditional"],"肚":["chinese_simplified","chinese_traditional"],"捉":["chinese_simplified","chinese_traditional"],"飘":["chinese_simplified"],"漂":["chinese_simplified","chinese_traditional"],"昆":["chinese_simplified","chinese_traditional"],"欺":["chinese_simplified","chinese_traditional"],"吾":["chinese_simplified","chinese_traditional"],"郎":["chinese_simplified","chinese_traditional"],"烷":["chinese_simplified","chinese_traditional"],"汁":["chinese_simplified","chinese_traditional"],"呵":["chinese_simplified","chinese_traditional"],"饰":["chinese_simplified"],"萧":["chinese_simplified"],"雅":["chinese_simplified","chinese_traditional"],"邮":["chinese_simplified"],"迁":["chinese_simplified"],"燕":["chinese_simplified","chinese_traditional"],"撒":["chinese_simplified","chinese_traditional"],"姻":["chinese_simplified","chinese_traditional"],"赴":["chinese_simplified","chinese_traditional"],"宴":["chinese_simplified","chinese_traditional"],"烦":["chinese_simplified"],"债":["chinese_simplified"],"帐":["chinese_simplified"],"斑":["chinese_simplified","chinese_traditional"],"铃":["chinese_simplified"],"旨":["chinese_simplified","chinese_traditional"],"醇":["chinese_simplified","chinese_traditional"],"董":["chinese_simplified","chinese_traditional"],"饼":["chinese_simplified"],"雏":["chinese_simplified"],"姿":["chinese_simplified","chinese_traditional"],"拌":["chinese_simplified","chinese_traditional"],"傅":["chinese_simplified","chinese_traditional"],"腹":["chinese_simplified","chinese_traditional"],"妥":["chinese_simplified","chinese_traditional"],"揉":["chinese_simplified","chinese_traditional"],"贤":["chinese_simplified"],"拆":["chinese_simplified","chinese_traditional"],"歪":["chinese_simplified","chinese_traditional"],"葡":["chinese_simplified","chinese_traditional"],"胺":["chinese_simplified","chinese_traditional"],"丢":["chinese_simplified"],"浩":["chinese_simplified","chinese_traditional"],"徽":["chinese_simplified","chinese_traditional"],"昂":["chinese_simplified","chinese_traditional"],"垫":["chinese_simplified"],"挡":["chinese_simplified"],"览":["chinese_simplified"],"贪":["chinese_simplified"],"慰":["chinese_simplified","chinese_traditional"],"缴":["chinese_simplified"],"汪":["chinese_simplified","chinese_traditional"],"慌":["chinese_simplified","chinese_traditional"],"冯":["chinese_simplified"],"诺":["chinese_simplified"],"姜":["chinese_simplified","chinese_traditional"],"谊":["chinese_simplified"],"凶":["chinese_simplified"],"劣":["chinese_simplified","chinese_traditional"],"诬":["chinese_simplified"],"耀":["chinese_simplified","chinese_traditional"],"昏":["chinese_simplified","chinese_traditional"],"躺":["chinese_simplified","chinese_traditional"],"盈":["chinese_simplified","chinese_traditional"],"骑":["chinese_simplified"],"乔":["chinese_simplified"],"溪":["chinese_simplified","chinese_traditional"],"丛":["chinese_simplified"],"卢":["chinese_simplified"],"抹":["chinese_simplified","chinese_traditional"],"闷":["chinese_simplified"],"咨":["chinese_simplified"],"刮":["chinese_simplified","chinese_traditional"],"驾":["chinese_simplified"],"缆":["chinese_simplified"],"悟":["chinese_simplified","chinese_traditional"],"摘":["chinese_simplified","chinese_traditional"],"铒":["chinese_simplified"],"掷":["chinese_simplified"],"颇":["chinese_simplified"],"幻":["chinese_simplified","chinese_traditional"],"柄":["chinese_simplified","chinese_traditional"],"惠":["chinese_simplified","chinese_traditional"],"惨":["chinese_simplified"],"佳":["chinese_simplified","chinese_traditional"],"仇":["chinese_simplified","chinese_traditional"],"腊":["chinese_simplified"],"窝":["chinese_simplified"],"涤":["chinese_simplified"],"剑":["chinese_simplified"],"瞧":["chinese_simplified","chinese_traditional"],"堡":["chinese_simplified","chinese_traditional"],"泼":["chinese_simplified"],"葱":["chinese_simplified"],"罩":["chinese_simplified","chinese_traditional"],"霍":["chinese_simplified","chinese_traditional"],"捞":["chinese_simplified"],"胎":["chinese_simplified","chinese_traditional"],"苍":["chinese_simplified"],"滨":["chinese_simplified"],"俩":["chinese_simplified"],"捅":["chinese_simplified","chinese_traditional"],"湘":["chinese_simplified","chinese_traditional"],"砍":["chinese_simplified","chinese_traditional"],"霞":["chinese_simplified","chinese_traditional"],"邵":["chinese_simplified","chinese_traditional"],"萄":["chinese_simplified","chinese_traditional"],"疯":["chinese_simplified"],"淮":["chinese_simplified","chinese_traditional"],"遂":["chinese_simplified","chinese_traditional"],"熊":["chinese_simplified","chinese_traditional"],"粪":["chinese_simplified"],"烘":["chinese_simplified","chinese_traditional"],"宿":["chinese_simplified","chinese_traditional"],"档":["chinese_simplified"],"戈":["chinese_simplified","chinese_traditional"],"驳":["chinese_simplified"],"嫂":["chinese_simplified","chinese_traditional"],"裕":["chinese_simplified","chinese_traditional"],"徙":["chinese_simplified","chinese_traditional"],"箭":["chinese_simplified","chinese_traditional"],"捐":["chinese_simplified","chinese_traditional"],"肠":["chinese_simplified"],"撑":["chinese_simplified"],"晒":["chinese_simplified"],"辨":["chinese_simplified","chinese_traditional"],"殿":["chinese_simplified","chinese_traditional"],"莲":["chinese_simplified"],"摊":["chinese_simplified"],"搅":["chinese_simplified"],"酱":["chinese_simplified"],"屏":["chinese_simplified","chinese_traditional"],"疫":["chinese_simplified","chinese_traditional"],"哀":["chinese_simplified","chinese_traditional"],"蔡":["chinese_simplified","chinese_traditional"],"堵":["chinese_simplified","chinese_traditional"],"沫":["chinese_simplified","chinese_traditional"],"皱":["chinese_simplified"],"畅":["chinese_simplified"],"叠":["chinese_simplified"],"阁":["chinese_simplified"],"莱":["chinese_simplified"],"敲":["chinese_simplified","chinese_traditional"],"辖":["chinese_simplified"],"钩":["chinese_simplified"],"痕":["chinese_simplified","chinese_traditional"],"坝":["chinese_simplified"],"巷":["chinese_simplified","chinese_traditional"],"饿":["chinese_simplified"],"祸":["chinese_simplified"],"丘":["chinese_simplified","chinese_traditional"],"玄":["chinese_simplified","chinese_traditional"],"溜":["chinese_simplified","chinese_traditional"],"曰":["chinese_simplified","chinese_traditional"],"逻":["chinese_simplified"],"彭":["chinese_simplified","chinese_traditional"],"尝":["chinese_simplified"],"卿":["chinese_simplified","chinese_traditional"],"妨":["chinese_simplified","chinese_traditional"],"艇":["chinese_simplified","chinese_traditional"],"吞":["chinese_simplified","chinese_traditional"],"韦":["chinese_simplified"],"怨":["chinese_simplified","chinese_traditional"],"矮":["chinese_simplified","chinese_traditional"],"歇":["chinese_simplified","chinese_traditional"],"這":["chinese_traditional"],"為":["chinese_traditional"],"個":["chinese_traditional"],"國":["chinese_traditional"],"時":["chinese_traditional"],"來":["chinese_traditional"],"們":["chinese_traditional"],"於":["chinese_traditional"],"對":["chinese_traditional"],"會":["chinese_traditional"],"發":["chinese_traditional"],"動":["chinese_traditional"],"過":["chinese_traditional"],"說":["chinese_traditional"],"產":["chinese_traditional"],"種":["chinese_traditional"],"後":["chinese_traditional"],"學":["chinese_traditional"],"經":["chinese_traditional"],"進":["chinese_traditional"],"著":["chinese_traditional"],"電":["chinese_traditional"],"裡":["chinese_traditional"],"現":["chinese_traditional"],"實":["chinese_traditional"],"兩":["chinese_traditional"],"體":["chinese_traditional"],"機":["chinese_traditional"],"當":["chinese_traditional"],"點":["chinese_traditional"],"從":["chinese_traditional"],"業":["chinese_traditional"],"應":["chinese_traditional"],"開":["chinese_traditional"],"還":["chinese_traditional"],"義":["chinese_traditional"],"間":["chinese_traditional"],"樣":["chinese_traditional"],"與":["chinese_traditional"],"關":["chinese_traditional"],"線":["chinese_traditional"],"內":["chinese_traditional"],"數":["chinese_traditional"],"麼":["chinese_traditional"],"質":["chinese_traditional"],"氣":["chinese_traditional"],"變":["chinese_traditional"],"條":["chinese_traditional"],"沒":["chinese_traditional"],"結":["chinese_traditional"],"問":["chinese_traditional"],"無":["chinese_traditional"],"軍":["chinese_traditional"],"並":["chinese_traditional"],"題":["chinese_traditional"],"黨":["chinese_traditional"],"員":["chinese_traditional"],"總":["chinese_traditional"],"設":["chinese_traditional"],"長":["chinese_traditional"],"頭":["chinese_traditional"],"資":["chinese_traditional"],"邊":["chinese_traditional"],"級":["chinese_traditional"],"圖":["chinese_traditional"],"統":["chinese_traditional"],"較":["chinese_traditional"],"將":["chinese_traditional"],"組":["chinese_traditional"],"見":["chinese_traditional"],"計":["chinese_traditional"],"別":["chinese_traditional"],"論":["chinese_traditional"],"運":["chinese_traditional"],"農":["chinese_traditional"],"幾":["chinese_traditional"],"區":["chinese_traditional"],"強":["chinese_traditional"],"決":["chinese_traditional"],"幹":["chinese_traditional"],"戰":["chinese_traditional"],"則":["chinese_traditional"],"據":["chinese_traditional"],"處":["chinese_traditional"],"隊":["chinese_traditional"],"給":["chinese_traditional"],"門":["chinese_traditional"],"規":["chinese_traditional"],"熱":["chinese_traditional"],"領":["chinese_traditional"],"東":["chinese_traditional"],"導":["chinese_traditional"],"壓":["chinese_traditional"],"爭":["chinese_traditional"],"濟":["chinese_traditional"],"階":["chinese_traditional"],"術":["chinese_traditional"],"極":["chinese_traditional"],"聯":["chinese_traditional"],"認":["chinese_traditional"],"權":["chinese_traditional"],"證":["chinese_traditional"],"採":["chinese_traditional"],"轉":["chinese_traditional"],"單":["chinese_traditional"],"風":["chinese_traditional"],"帶":["chinese_traditional"],"場":["chinese_traditional"],"車":["chinese_traditional"],"務":["chinese_traditional"],"萬":["chinese_traditional"],"達":["chinese_traditional"],"積":["chinese_traditional"],"議":["chinese_traditional"],"聲":["chinese_traditional"],"報":["chinese_traditional"],"鬥":["chinese_traditional"],"類":["chinese_traditional"],"離":["chinese_traditional"],"華":["chinese_traditional"],"確":["chinese_traditional"],"張":["chinese_traditional"],"馬":["chinese_traditional"],"節":["chinese_traditional"],"話":["chinese_traditional"],"況":["chinese_traditional"],"溫":["chinese_traditional"],"傳":["chinese_traditional"],"許":["chinese_traditional"],"廣":["chinese_traditional"],"記":["chinese_traditional"],"觀":["chinese_traditional"],"織":["chinese_traditional"],"裝":["chinese_traditional"],"眾":["chinese_traditional"],"書":["chinese_traditional"],"兒":["chinese_traditional"],"須":["chinese_traditional"],"際":["chinese_traditional"],"驗":["chinese_traditional"],"連":["chinese_traditional"],"斷":["chinese_traditional"],"難":["chinese_traditional"],"礦":["chinese_traditional"],"週":["chinese_traditional"],"備":["chinese_traditional"],"辦":["chinese_traditional"],"習":["chinese_traditional"],"響":["chinese_traditional"],"約":["chinese_traditional"],"勞":["chinese_traditional"],"團":["chinese_traditional"],"歷":["chinese_traditional"],"構":["chinese_traditional"],"稱":["chinese_traditional"],"準":["chinese_traditional"],"號":["chinese_traditional"],"維":["chinese_traditional"],"劃":["chinese_traditional"],"選":["chinese_traditional"],"標":["chinese_traditional"],"寫":["chinese_traditional"],"親":["chinese_traditional"],"養":["chinese_traditional"],"層":["chinese_traditional"],"卻":["chinese_traditional"],"專":["chinese_traditional"],"狀":["chinese_traditional"],"廠":["chinese_traditional"],"識":["chinese_traditional"],"適":["chinese_traditional"],"屬":["chinese_traditional"],"圓":["chinese_traditional"],"調":["chinese_traditional"],"滿":["chinese_traditional"],"縣":["chinese_traditional"],"參":["chinese_traditional"],"紅":["chinese_traditional"],"細":["chinese_traditional"],"聽":["chinese_traditional"],"該":["chinese_traditional"],"鐵":["chinese_traditional"],"價":["chinese_traditional"],"嚴":["chinese_traditional"],"隨":["chinese_traditional"],"蘇":["chinese_traditional"],"爾":["chinese_traditional"],"講":["chinese_traditional"],"黃":["chinese_traditional"],"顯":["chinese_traditional"],"談":["chinese_traditional"],"藝":["chinese_traditional"],"營":["chinese_traditional"],"項":["chinese_traditional"],"舉":["chinese_traditional"],"勢":["chinese_traditional"],"幫":["chinese_traditional"],"輪":["chinese_traditional"],"亞":["chinese_traditional"],"師":["chinese_traditional"],"圍":["chinese_traditional"],"遠":["chinese_traditional"],"態":["chinese_traditional"],"減":["chinese_traditional"],"樹":["chinese_traditional"],"葉":["chinese_traditional"],"魚":["chinese_traditional"],"視":["chinese_traditional"],"僅":["chinese_traditional"],"費":["chinese_traditional"],"緊":["chinese_traditional"],"愛":["chinese_traditional"],"續":["chinese_traditional"],"輕":["chinese_traditional"],"試":["chinese_traditional"],"護":["chinese_traditional"],"練":["chinese_traditional"],"負":["chinese_traditional"],"擊":["chinese_traditional"],"繼":["chinese_traditional"],"興":["chinese_traditional"],"餘":["chinese_traditional"],"堅":["chinese_traditional"],"輸":["chinese_traditional"],"夠":["chinese_traditional"],"筆":["chinese_traditional"],"佔":["chinese_traditional"],"財":["chinese_traditional"],"職":["chinese_traditional"],"覺":["chinese_traditional"],"漢":["chinese_traditional"],"畫":["chinese_traditional"],"雖":["chinese_traditional"],"雜":["chinese_traditional"],"飛":["chinese_traditional"],"檢":["chinese_traditional"],"昇":["chinese_traditional"],"陽":["chinese_traditional"],"創":["chinese_traditional"],"壞":["chinese_traditional"],"徑":["chinese_traditional"],"換":["chinese_traditional"],"鋼":["chinese_traditional"],"責":["chinese_traditional"],"簡":["chinese_traditional"],"錢":["chinese_traditional"],"盡":["chinese_traditional"],"衝":["chinese_traditional"],"獨":["chinese_traditional"],"環":["chinese_traditional"],"雙":["chinese_traditional"],"請":["chinese_traditional"],"讓":["chinese_traditional"],"軸":["chinese_traditional"],"紀":["chinese_traditional"],"優":["chinese_traditional"],"頂":["chinese_traditional"],"礎":["chinese_traditional"],"載":["chinese_traditional"],"敵":["chinese_traditional"],"勝":["chinese_traditional"],"絕":["chinese_traditional"],"塊":["chinese_traditional"],"劑":["chinese_traditional"],"測":["chinese_traditional"],"絲":["chinese_traditional"],"協":["chinese_traditional"],"訴":["chinese_traditional"],"陳":["chinese_traditional"],"羅":["chinese_traditional"],"鹽":["chinese_traditional"],"錯":["chinese_traditional"],"頻":["chinese_traditional"],"終":["chinese_traditional"],"雲":["chinese_traditional"],"衛":["chinese_traditional"],"燒":["chinese_traditional"],"遊":["chinese_traditional"],"舊":["chinese_traditional"],"貨":["chinese_traditional"],"損":["chinese_traditional"],"預":["chinese_traditional"],"穩":["chinese_traditional"],"媽":["chinese_traditional"],"擴":["chinese_traditional"],"銀":["chinese_traditional"],"語":["chinese_traditional"],"揮":["chinese_traditional"],"紙":["chinese_traditional"],"醫":["chinese_traditional"],"嗎":["chinese_traditional"],"針":["chinese_traditional"],"劉":["chinese_traditional"],"誤":["chinese_traditional"],"訓":["chinese_traditional"],"願":["chinese_traditional"],"審":["chinese_traditional"],"獲":["chinese_traditional"],"鮮":["chinese_traditional"],"糧":["chinese_traditional"],"脫":["chinese_traditional"],"龍":["chinese_traditional"],"漸":["chinese_traditional"],"歡":["chinese_traditional"],"剛":["chinese_traditional"],"謂":["chinese_traditional"],"討":["chinese_traditional"],"亂":["chinese_traditional"],"殺":["chinese_traditional"],"藥":["chinese_traditional"],"寧":["chinese_traditional"],"魯":["chinese_traditional"],"貴":["chinese_traditional"],"鐘":["chinese_traditional"],"讀":["chinese_traditional"],"豐":["chinese_traditional"],"蘭":["chinese_traditional"],"擔":["chinese_traditional"],"執":["chinese_traditional"],"樂":["chinese_traditional"],"誰":["chinese_traditional"],"順":["chinese_traditional"],"煙":["chinese_traditional"],"縮":["chinese_traditional"],"徵":["chinese_traditional"],"臉":["chinese_traditional"],"腳":["chinese_traditional"],"異":["chinese_traditional"],"買":["chinese_traditional"],"靜":["chinese_traditional"],"補":["chinese_traditional"],"評":["chinese_traditional"],"踐":["chinese_traditional"],"寬":["chinese_traditional"],"揚":["chinese_traditional"],"傷":["chinese_traditional"],"氫":["chinese_traditional"],"憲":["chinese_traditional"],"慶":["chinese_traditional"],"編":["chinese_traditional"],"觸":["chinese_traditional"],"銷":["chinese_traditional"],"詩":["chinese_traditional"],"綠":["chinese_traditional"],"雞":["chinese_traditional"],"孫":["chinese_traditional"],"膠":["chinese_traditional"],"鄉":["chinese_traditional"],"臨":["chinese_traditional"],"陸":["chinese_traditional"],"顧":["chinese_traditional"],"燈":["chinese_traditional"],"歲":["chinese_traditional"],"劇":["chinese_traditional"],"趙":["chinese_traditional"],"課":["chinese_traditional"],"凱":["chinese_traditional"],"額":["chinese_traditional"],"紹":["chinese_traditional"],"齊":["chinese_traditional"],"偉":["chinese_traditional"],"爐":["chinese_traditional"],"楊":["chinese_traditional"],"桿":["chinese_traditional"],"鎮":["chinese_traditional"],"飯":["chinese_traditional"],"濃":["chinese_traditional"],"懷":["chinese_traditional"],"趕":["chinese_traditional"],"庫":["chinese_traditional"],"奪":["chinese_traditional"],"靈":["chinese_traditional"],"稅":["chinese_traditional"],"滅":["chinese_traditional"],"賽":["chinese_traditional"],"歸":["chinese_traditional"],"盤":["chinese_traditional"],"險":["chinese_traditional"],"錄":["chinese_traditional"],"純":["chinese_traditional"],"蓋":["chinese_traditional"],"橫":["chinese_traditional"],"槍":["chinese_traditional"],"潤":["chinese_traditional"],"蟲":["chinese_traditional"],"澤":["chinese_traditional"],"腦":["chinese_traditional"],"歐":["chinese_traditional"],"側":["chinese_traditional"],"徹":["chinese_traditional"],"慮":["chinese_traditional"],"納":["chinese_traditional"],"彈":["chinese_traditional"],"飼":["chinese_traditional"],"麥":["chinese_traditional"],"濕":["chinese_traditional"],"築":["chinese_traditional"],"惡":["chinese_traditional"],"戶":["chinese_traditional"],"訪":["chinese_traditional"],"跡":["chinese_traditional"],"擺":["chinese_traditional"],"賣":["chinese_traditional"],"擇":["chinese_traditional"],"銅":["chinese_traditional"],"獻":["chinese_traditional"],"陣":["chinese_traditional"],"陰":["chinese_traditional"],"樓":["chinese_traditional"],"謀":["chinese_traditional"],"噸":["chinese_traditional"],"豬":["chinese_traditional"],"館":["chinese_traditional"],"爺":["chinese_traditional"],"驚":["chinese_traditional"],"遺":["chinese_traditional"],"纖":["chinese_traditional"],"傾":["chinese_traditional"],"謝":["chinese_traditional"],"奮":["chinese_traditional"],"購":["chinese_traditional"],"監":["chinese_traditional"],"貫":["chinese_traditional"],"釋":["chinese_traditional"],"詞":["chinese_traditional"],"頓":["chinese_traditional"],"寶":["chinese_traditional"],"塵":["chinese_traditional"],"聞":["chinese_traditional"],"殘":["chinese_traditional"],"橋":["chinese_traditional"],"婦":["chinese_traditional"],"綜":["chinese_traditional"],"吳":["chinese_traditional"],"搖":["chinese_traditional"],"贊":["chinese_traditional"],"訂":["chinese_traditional"],"園":["chinese_traditional"],"紛":["chinese_traditional"],"敗":["chinese_traditional"],"榮":["chinese_traditional"],"閉":["chinese_traditional"],"灣":["chinese_traditional"],"鍵":["chinese_traditional"],"駐":["chinese_traditional"],"鍋":["chinese_traditional"],"剝":["chinese_traditional"],"鹼":["chinese_traditional"],"齒":["chinese_traditional"],"煉":["chinese_traditional"],"紡":["chinese_traditional"],"廢":["chinese_traditional"],"緩":["chinese_traditional"],"淨":["chinese_traditional"],"莊":["chinese_traditional"],"貿":["chinese_traditional"],"慣":["chinese_traditional"],"夥":["chinese_traditional"],"勻":["chinese_traditional"],"紗":["chinese_traditional"],"辯":["chinese_traditional"],"億":["chinese_traditional"],"脈":["chinese_traditional"],"薩":["chinese_traditional"],"網":["chinese_traditional"],"噴":["chinese_traditional"],"縱":["chinese_traditional"],"掛":["chinese_traditional"],"賀":["chinese_traditional"],"閃":["chinese_traditional"],"牆":["chinese_traditional"],"軟":["chinese_traditional"],"滾":["chinese_traditional"],"盪":["chinese_traditional"],"儀":["chinese_traditional"],"軋":["chinese_traditional"],"貢":["chinese_traditional"],"鑽":["chinese_traditional"],"幣":["chinese_traditional"],"軌":["chinese_traditional"],"畝":["chinese_traditional"],"畢":["chinese_traditional"],"島":["chinese_traditional"],"鑄":["chinese_traditional"],"湯":["chinese_traditional"],"閥":["chinese_traditional"],"匯":["chinese_traditional"],"繞":["chinese_traditional"],"績":["chinese_traditional"],"啟":["chinese_traditional"],"顏":["chinese_traditional"],"淚":["chinese_traditional"],"藍":["chinese_traditional"],"鏡":["chinese_traditional"],"壯":["chinese_traditional"],"鋒":["chinese_traditional"],"貧":["chinese_traditional"],"虛":["chinese_traditional"],"彎":["chinese_traditional"],"綱":["chinese_traditional"],"隸":["chinese_traditional"],"宮":["chinese_traditional"],"違":["chinese_traditional"],"夾":["chinese_traditional"],"緣":["chinese_traditional"],"窮":["chinese_traditional"],"溝":["chinese_traditional"],"繩":["chinese_traditional"],"憶":["chinese_traditional"],"漿":["chinese_traditional"],"欄":["chinese_traditional"],"擁":["chinese_traditional"],"貯":["chinese_traditional"],"禮":["chinese_traditional"],"濾":["chinese_traditional"],"鈉":["chinese_traditional"],"紋":["chinese_traditional"],"罷":["chinese_traditional"],"罰":["chinese_traditional"],"潛":["chinese_traditional"],"縫":["chinese_traditional"],"飽":["chinese_traditional"],"獎":["chinese_traditional"],"鋁":["chinese_traditional"],"麗":["chinese_traditional"],"鏈":["chinese_traditional"],"掃":["chinese_traditional"],"諸":["chinese_traditional"],"勵":["chinese_traditional"],"潔":["chinese_traditional"],"災":["chinese_traditional"],"鑑":["chinese_traditional"],"訟":["chinese_traditional"],"毀":["chinese_traditional"],"屆":["chinese_traditional"],"躍":["chinese_traditional"],"艱":["chinese_traditional"],"貝":["chinese_traditional"],"碼":["chinese_traditional"],"夢":["chinese_traditional"],"漁":["chinese_traditional"],"顆":["chinese_traditional"],"鉛":["chinese_traditional"],"倉":["chinese_traditional"],"銳":["chinese_traditional"],"曉":["chinese_traditional"],"隱":["chinese_traditional"],"礙":["chinese_traditional"],"撥":["chinese_traditional"],"肅":["chinese_traditional"],"牽":["chinese_traditional"],"搶":["chinese_traditional"],"殼":["chinese_traditional"],"訊":["chinese_traditional"],"誠":["chinese_traditional"],"頁":["chinese_traditional"],"齡":["chinese_traditional"],"倫":["chinese_traditional"],"尋":["chinese_traditional"],"鋪":["chinese_traditional"],"聖":["chinese_traditional"],"鄭":["chinese_traditional"],"騰":["chinese_traditional"],"貼":["chinese_traditional"],"闊":["chinese_traditional"],"輛":["chinese_traditional"],"儲":["chinese_traditional"],"簽":["chinese_traditional"],"鬧":["chinese_traditional"],"擾":["chinese_traditional"],"遞":["chinese_traditional"],"戲":["chinese_traditional"],"餵":["chinese_traditional"],"療":["chinese_traditional"],"撫":["chinese_traditional"],"蝦":["chinese_traditional"],"蠟":["chinese_traditional"],"鄰":["chinese_traditional"],"鞏":["chinese_traditional"],"擠":["chinese_traditional"],"棄":["chinese_traditional"],"勁":["chinese_traditional"],"鄧":["chinese_traditional"],"爛":["chinese_traditional"],"磚":["chinese_traditional"],"烏":["chinese_traditional"],"艦":["chinese_traditional"],"淺":["chinese_traditional"],"暫":["chinese_traditional"],"膽":["chinese_traditional"],"詳":["chinese_traditional"],"譜":["chinese_traditional"],"賓":["chinese_traditional"],"輝":["chinese_traditional"],"憤":["chinese_traditional"],"競":["chinese_traditional"],"緒":["chinese_traditional"],"塗":["chinese_traditional"],"偵":["chinese_traditional"],"懸":["chinese_traditional"],"糾":["chinese_traditional"],"鎖":["chinese_traditional"],"賞":["chinese_traditional"],"鴨":["chinese_traditional"],"趨":["chinese_traditional"],"鳳":["chinese_traditional"],"輩":["chinese_traditional"],"灘":["chinese_traditional"],"驅":["chinese_traditional"],"篩":["chinese_traditional"],"峽":["chinese_traditional"],"壽":["chinese_traditional"],"譯":["chinese_traditional"],"遲":["chinese_traditional"],"矽":["chinese_traditional"],"貸":["chinese_traditional"],"脅":["chinese_traditional"],"蝕":["chinese_traditional"],"奧":["chinese_traditional"],"鳴":["chinese_traditional"],"嶺":["chinese_traditional"],"憑":["chinese_traditional"],"繪":["chinese_traditional"],"錫":["chinese_traditional"],"廟":["chinese_traditional"],"籌":["chinese_traditional"],"凍":["chinese_traditional"],"輔":["chinese_traditional"],"攝":["chinese_traditional"],"襲":["chinese_traditional"],"鉀":["chinese_traditional"],"鳥":["chinese_traditional"],"韓":["chinese_traditional"],"僑":["chinese_traditional"],"涼":["chinese_traditional"],"餾":["chinese_traditional"],"勸":["chinese_traditional"],"遼":["chinese_traditional"],"鴻":["chinese_traditional"],"輥":["chinese_traditional"],"飲":["chinese_traditional"],"罵":["chinese_traditional"],"辭":["chinese_traditional"],"蔣":["chinese_traditional"],"絨":["chinese_traditional"],"霧":["chinese_traditional"],"擬":["chinese_traditional"],"輯":["chinese_traditional"],"陝":["chinese_traditional"],"償":["chinese_traditional"],"廳":["chinese_traditional"],"駛":["chinese_traditional"],"賦":["chinese_traditional"],"澆":["chinese_traditional"],"鈣":["chinese_traditional"],"虧":["chinese_traditional"],"騙":["chinese_traditional"],"脹":["chinese_traditional"],"諧":["chinese_traditional"],"拋":["chinese_traditional"],"黴":["chinese_traditional"],"崗":["chinese_traditional"],"盜":["chinese_traditional"],"滲":["chinese_traditional"],"臟":["chinese_traditional"],"賴":["chinese_traditional"],"湧":["chinese_traditional"],"閱":["chinese_traditional"],"厲":["chinese_traditional"],"烴":["chinese_traditional"],"緯":["chinese_traditional"],"偽":["chinese_traditional"],"嘆":["chinese_traditional"],"釘":["chinese_traditional"],"莖":["chinese_traditional"],"籠":["chinese_traditional"],"錐":["chinese_traditional"],"恆":["chinese_traditional"],"傑":["chinese_traditional"],"綸":["chinese_traditional"],"敘":["chinese_traditional"],"獄":["chinese_traditional"],"絡":["chinese_traditional"],"驟":["chinese_traditional"],"冊":["chinese_traditional"],"屍":["chinese_traditional"],"紳":["chinese_traditional"],"犧":["chinese_traditional"],"轟":["chinese_traditional"],"晉":["chinese_traditional"],"禦":["chinese_traditional"],"錠":["chinese_traditional"],"錦":["chinese_traditional"],"喪":["chinese_traditional"],"鍛":["chinese_traditional"],"壟":["chinese_traditional"],"撲":["chinese_traditional"],"邁":["chinese_traditional"],"閒":["chinese_traditional"],"憂":["chinese_traditional"],"頑":["chinese_traditional"],"漲":["chinese_traditional"],"闢":["chinese_traditional"],"懲":["chinese_traditional"],"飄":["chinese_traditional"],"飾":["chinese_traditional"],"蕭":["chinese_traditional"],"郵":["chinese_traditional"],"遷":["chinese_traditional"],"煩":["chinese_traditional"],"債":["chinese_traditional"],"帳":["chinese_traditional"],"鈴":["chinese_traditional"],"餅":["chinese_traditional"],"雛":["chinese_traditional"],"賢":["chinese_traditional"],"丟":["chinese_traditional"],"墊":["chinese_traditional"],"擋":["chinese_traditional"],"覽":["chinese_traditional"],"貪":["chinese_traditional"],"繳":["chinese_traditional"],"馮":["chinese_traditional"],"諾":["chinese_traditional"],"誼":["chinese_traditional"],"兇":["chinese_traditional"],"誣":["chinese_traditional"],"騎":["chinese_traditional"],"喬":["chinese_traditional"],"叢":["chinese_traditional"],"盧":["chinese_traditional"],"悶":["chinese_traditional"],"諮":["chinese_traditional"],"駕":["chinese_traditional"],"纜":["chinese_traditional"],"鉺":["chinese_traditional"],"擲":["chinese_traditional"],"頗":["chinese_traditional"],"慘":["chinese_traditional"],"臘":["chinese_traditional"],"窩":["chinese_traditional"],"滌":["chinese_traditional"],"劍":["chinese_traditional"],"潑":["chinese_traditional"],"蔥":["chinese_traditional"],"撈":["chinese_traditional"],"蒼":["chinese_traditional"],"濱":["chinese_traditional"],"倆":["chinese_traditional"],"瘋":["chinese_traditional"],"糞":["chinese_traditional"],"檔":["chinese_traditional"],"駁":["chinese_traditional"],"腸":["chinese_traditional"],"撐":["chinese_traditional"],"曬":["chinese_traditional"],"蓮":["chinese_traditional"],"攤":["chinese_traditional"],"攪":["chinese_traditional"],"醬":["chinese_traditional"],"皺":["chinese_traditional"],"暢":["chinese_traditional"],"疊":["chinese_traditional"],"閣":["chinese_traditional"],"萊":["chinese_traditional"],"轄":["chinese_traditional"],"鉤":["chinese_traditional"],"壩":["chinese_traditional"],"餓":["chinese_traditional"],"禍":["chinese_traditional"],"邏":["chinese_traditional"],"嘗":["chinese_traditional"],"韋":["chinese_traditional"],"abdikace":["czech"],"abeceda":["czech"],"adresa":["czech"],"agrese":["czech"],"akce":["czech"],"aktovka":["czech"],"alej":["czech"],"alkohol":["czech"],"amputace":["czech"],"ananas":["czech"],"andulka":["czech"],"anekdota":["czech"],"anketa":["czech"],"antika":["czech"],"anulovat":["czech"],"archa":["czech"],"arogance":["czech"],"asfalt":["czech","turkish"],"asistent":["czech"],"aspirace":["czech"],"astma":["czech"],"astronom":["czech"],"atlas":["czech"],"atletika":["czech"],"atol":["czech"],"autobus":["czech"],"azyl":["czech"],"babka":["czech"],"bachor":["czech"],"bacil":["czech"],"baculka":["czech"],"badatel":["czech"],"bageta":["czech"],"bagr":["czech"],"bahno":["czech"],"bakterie":["czech"],"balada":["czech"],"baletka":["czech"],"balkon":["czech"],"balonek":["czech"],"balvan":["czech"],"balza":["czech"],"bambus":["czech"],"bankomat":["czech"],"barbar":["czech"],"baret":["czech"],"barman":["czech"],"baroko":["czech"],"barva":["czech"],"baterka":["czech"],"batoh":["czech"],"bavlna":["czech"],"bazalka":["czech"],"bazilika":["czech"],"bazuka":["czech"],"bedna":["czech"],"beran":["czech"],"beseda":["czech"],"bestie":["czech"],"beton":["czech","turkish"],"bezinka":["czech"],"bezmoc":["czech"],"beztak":["czech"],"bicykl":["czech"],"bidlo":["czech"],"biftek":["czech","turkish"],"bikiny":["czech"],"bilance":["czech"],"biograf":["czech"],"biolog":["czech"],"bitva":["czech"],"bizon":["czech"],"blahobyt":["czech"],"blatouch":["czech"],"blecha":["czech"],"bledule":["czech"],"blesk":["czech"],"blikat":["czech"],"blizna":["czech"],"blokovat":["czech"],"bloudit":["czech"],"blud":["czech"],"bobek":["czech"],"bobr":["czech"],"bodlina":["czech"],"bodnout":["czech"],"bohatost":["czech"],"bojkot":["czech"],"bojovat":["czech"],"bokorys":["czech"],"bolest":["czech"],"borec":["czech"],"borovice":["czech"],"bota":["czech"],"boubel":["czech"],"bouchat":["czech"],"bouda":["czech"],"boule":["czech"],"bourat":["czech"],"boxer":["czech"],"bradavka":["czech"],"brambora":["czech"],"branka":["czech"],"bratr":["czech"],"brepta":["czech"],"briketa":["czech"],"brko":["czech"],"brloh":["czech"],"bronz":["czech"],"broskev":["czech"],"brunetka":["czech"],"brusinka":["czech"],"brzda":["czech"],"brzy":["czech"],"bublina":["czech"],"bubnovat":["czech"],"buchta":["czech"],"buditel":["czech"],"budka":["czech"],"budova":["czech"],"bufet":["czech"],"bujarost":["czech"],"bukvice":["czech"],"buldok":["czech"],"bulva":["czech"],"bunda":["czech"],"bunkr":["czech"],"burza":["czech"],"butik":["czech","turkish"],"buvol":["czech"],"buzola":["czech"],"bydlet":["czech"],"bylina":["czech"],"bytovka":["czech"],"bzukot":["czech"],"capart":["czech"],"carevna":["czech"],"cedr":["czech"],"cedule":["czech"],"cejch":["czech"],"cejn":["czech"],"cela":["czech"],"celer":["czech"],"celkem":["czech"],"celnice":["czech"],"cenina":["czech"],"cennost":["czech"],"cenovka":["czech"],"centrum":["czech"],"cenzor":["czech"],"cestopis":["czech"],"cetka":["czech"],"chalupa":["czech"],"chapadlo":["czech"],"charita":["czech"],"chata":["czech"],"chechtat":["czech"],"chemie":["czech"],"chichot":["czech"],"chirurg":["czech"],"chlad":["czech"],"chleba":["czech"],"chlubit":["czech"],"chmel":["czech"],"chmura":["czech"],"chobot":["czech"],"chochol":["czech"],"chodba":["czech"],"cholera":["czech"],"chomout":["czech"],"chopit":["czech"],"choroba":["czech"],"chov":["czech"],"chrapot":["czech"],"chrlit":["czech"],"chrt":["czech"],"chrup":["czech"],"chtivost":["czech"],"chudina":["czech"],"chutnat":["czech"],"chvat":["czech"],"chvilka":["czech"],"chvost":["czech"],"chyba":["czech"],"chystat":["czech"],"chytit":["czech"],"cibule":["czech"],"cigareta":["czech"],"cihelna":["czech"],"cihla":["czech"],"cinkot":["czech"],"cirkus":["czech"],"cisterna":["czech"],"citace":["czech"],"citrus":["czech"],"cizinec":["czech"],"cizost":["czech"],"clona":["czech"],"cokoliv":["czech"],"couvat":["czech"],"ctitel":["czech"],"ctnost":["czech"],"cudnost":["czech"],"cuketa":["czech"],"cukr":["czech"],"cupot":["czech"],"cvaknout":["czech"],"cval":["czech"],"cvik":["czech"],"cvrkot":["czech"],"cyklista":["czech"],"daleko":["czech"],"dareba":["czech"],"datel":["czech"],"datum":["czech"],"dcera":["czech"],"debata":["czech"],"dechovka":["czech"],"decibel":["czech"],"deficit":["czech"],"deflace":["czech"],"dekl":["czech"],"dekret":["czech"],"demokrat":["czech"],"deprese":["czech"],"derby":["czech"],"deska":["czech"],"detektiv":["czech"],"dikobraz":["czech"],"diktovat":["czech"],"dioda":["czech"],"diplom":["czech"],"disk":["czech","turkish"],"displej":["czech"],"divadlo":["czech"],"divoch":["czech"],"dlaha":["czech"],"dlouho":["czech"],"dluhopis":["czech"],"dnes":["czech"],"dobro":["czech"],"dobytek":["czech"],"docent":["czech"],"dochutit":["czech"],"dodnes":["czech"],"dohled":["czech"],"dohoda":["czech"],"dohra":["czech"],"dojem":["czech"],"dojnice":["czech"],"doklad":["czech"],"dokola":["czech"],"doktor":["czech","turkish"],"dokument":["czech"],"dolar":["czech"],"doleva":["czech"],"dolina":["czech"],"doma":["czech"],"dominant":["czech"],"domluvit":["czech"],"domov":["czech"],"donutit":["czech"],"dopad":["czech"],"dopis":["czech"],"doplnit":["czech"],"doposud":["czech"],"doprovod":["czech"],"dopustit":["czech"],"dorazit":["czech"],"dorost":["czech"],"dort":["czech"],"dosah":["czech"],"doslov":["czech"],"dostatek":["czech"],"dosud":["czech"],"dosyta":["czech"],"dotaz":["czech"],"dotek":["czech"],"dotknout":["czech"],"doufat":["czech"],"doutnat":["czech"],"dovozce":["czech"],"dozadu":["czech"],"doznat":["czech"],"dozorce":["czech"],"drahota":["czech"],"drak":["czech"],"dramatik":["czech"],"dravec":["czech"],"draze":["czech"],"drdol":["czech"],"drobnost":["czech"],"drogerie":["czech"],"drozd":["czech"],"drsnost":["czech"],"drtit":["czech"],"drzost":["czech"],"duben":["czech"],"duchovno":["czech"],"dudek":["czech"],"duha":["czech"],"duhovka":["czech"],"dusit":["czech"],"dusno":["czech"],"dutost":["czech"],"dvojice":["czech"],"dvorec":["czech"],"dynamit":["czech"],"ekolog":["czech"],"ekonomie":["czech"],"elektron":["czech"],"elipsa":["czech"],"email":["czech"],"emise":["czech"],"emoce":["czech"],"empatie":["czech"],"epizoda":["czech"],"epocha":["czech"],"epopej":["czech"],"epos":["czech"],"esej":["czech"],"esence":["czech"],"eskorta":["czech"],"eskymo":["czech"],"etiketa":["czech"],"euforie":["czech"],"evoluce":["czech"],"exekuce":["czech"],"exkurze":["czech"],"expedice":["czech"],"exploze":["czech"],"export":["czech"],"extrakt":["czech"],"facka":["czech"],"fajfka":["czech"],"fakulta":["czech"],"fanatik":["czech","turkish"],"fantazie":["czech"],"farmacie":["czech"],"favorit":["czech"],"fazole":["czech"],"federace":["czech"],"fejeton":["czech"],"fenka":["czech"],"fialka":["czech"],"figurant":["czech"],"filozof":["czech"],"filtr":["czech"],"finance":["czech"],"finta":["czech"],"fixace":["czech"],"fjord":["czech"],"flanel":["czech"],"flirt":["czech"],"flotila":["czech"],"fond":["czech"],"fosfor":["czech"],"fotbal":["czech"],"fotka":["czech"],"foton":["czech"],"frakce":["czech"],"freska":["czech"],"fronta":["czech"],"fukar":["czech"],"funkce":["czech"],"fyzika":["czech"],"galeje":["czech"],"garant":["czech"],"genetika":["czech"],"geolog":["czech"],"gilotina":["czech"],"glazura":["czech"],"glejt":["czech"],"golem":["czech"],"golfista":["czech"],"gotika":["czech"],"graf":["czech"],"gramofon":["czech"],"granule":["czech"],"grep":["czech"],"gril":["czech"],"grog":["czech"],"groteska":["czech"],"guma":["czech"],"hadice":["czech"],"hadr":["czech"],"hala":["czech"],"halenka":["czech"],"hanba":["czech"],"hanopis":["czech"],"harfa":["czech"],"harpuna":["czech"],"havran":["czech"],"hebkost":["czech"],"hejkal":["czech"],"hejno":["czech"],"hejtman":["czech"],"hektar":["czech","turkish"],"helma":["czech"],"hematom":["czech"],"herec":["czech"],"herna":["czech"],"heslo":["czech"],"hezky":["czech"],"historik":["czech"],"hladovka":["czech"],"hlasivky":["czech"],"hlava":["czech"],"hledat":["czech"],"hlen":["czech"],"hlodavec":["czech"],"hloh":["czech"],"hloupost":["czech"],"hltat":["czech"],"hlubina":["czech"],"hluchota":["czech"],"hmat":["czech"],"hmota":["czech"],"hmyz":["czech"],"hnis":["czech"],"hnojivo":["czech"],"hnout":["czech"],"hoblina":["czech"],"hoboj":["czech"],"hoch":["czech"],"hodiny":["czech"],"hodlat":["czech"],"hodnota":["czech"],"hodovat":["czech"],"hojnost":["czech"],"hokej":["czech"],"holinka":["czech"],"holka":["czech"],"holub":["czech"],"homole":["czech"],"honitba":["czech"],"honorace":["czech"],"horal":["czech"],"horda":["czech"],"horizont":["czech"],"horko":["czech"],"horlivec":["czech"],"hormon":["czech","turkish"],"hornina":["czech"],"horoskop":["czech"],"horstvo":["czech"],"hospoda":["czech"],"hostina":["czech"],"hotovost":["czech"],"houba":["czech"],"houf":["czech"],"houpat":["czech"],"houska":["czech"],"hovor":["czech"],"hradba":["czech"],"hranice":["czech"],"hravost":["czech"],"hrazda":["czech"],"hrbolek":["czech"],"hrdina":["czech"],"hrdlo":["czech"],"hrdost":["czech"],"hrnek":["czech"],"hrobka":["czech"],"hromada":["czech"],"hrot":["czech"],"hrouda":["czech"],"hrozen":["czech"],"hrstka":["czech"],"hrubost":["czech"],"hryzat":["czech"],"hubenost":["czech"],"hubnout":["czech"],"hudba":["czech"],"hukot":["czech"],"humr":["czech"],"husita":["czech"],"hustota":["czech"],"hvozd":["czech"],"hybnost":["czech"],"hydrant":["czech"],"hygiena":["czech"],"hymna":["czech"],"hysterik":["czech"],"idylka":["czech"],"ihned":["czech"],"ikona":["czech"],"iluze":["czech"],"imunita":["czech"],"infekce":["czech"],"inflace":["czech"],"inkaso":["czech"],"inovace":["czech"],"inspekce":["czech"],"internet":["czech"],"invalida":["czech"],"investor":["czech"],"inzerce":["czech"],"ironie":["czech"],"jablko":["czech"],"jachta":["czech"],"jahoda":["czech"],"jakmile":["czech"],"jakost":["czech"],"jalovec":["czech"],"jantar":["czech"],"jarmark":["czech"],"jaro":["czech"],"jasan":["czech"],"jasno":["czech"],"jatka":["czech"],"javor":["czech"],"jazyk":["czech"],"jedinec":["czech"],"jedle":["czech"],"jednatel":["czech"],"jehlan":["czech"],"jekot":["czech"],"jelen":["czech"],"jelito":["czech"],"jemnost":["czech"],"jenom":["czech"],"jepice":["czech"],"jeseter":["czech"],"jevit":["czech"],"jezdec":["czech"],"jezero":["czech"],"jinak":["czech"],"jindy":["czech"],"jinoch":["czech"],"jiskra":["czech"],"jistota":["czech"],"jitrnice":["czech"],"jizva":["czech"],"jmenovat":["czech"],"jogurt":["czech"],"jurta":["czech"],"kabaret":["czech"],"kabel":["czech"],"kabinet":["czech"],"kachna":["czech"],"kadet":["czech"],"kadidlo":["czech"],"kahan":["czech"],"kajak":["czech"],"kajuta":["czech"],"kakao":["czech"],"kaktus":["czech"],"kalamita":["czech"],"kalhoty":["czech"],"kalibr":["czech"],"kalnost":["czech"],"kamera":["czech"],"kamkoliv":["czech"],"kamna":["czech"],"kanibal":["czech"],"kanoe":["czech"],"kantor":["czech"],"kapalina":["czech"],"kapela":["czech"],"kapitola":["czech"],"kapka":["czech"],"kaple":["czech"],"kapota":["czech"],"kapr":["czech"],"kapusta":["czech"],"kapybara":["czech"],"karamel":["czech"],"karotka":["czech"],"karton":["czech"],"kasa":["czech"],"katalog":["czech"],"katedra":["czech"],"kauce":["czech"],"kauza":["czech"],"kavalec":["czech"],"kazajka":["czech"],"kazeta":["czech"],"kazivost":["czech"],"kdekoliv":["czech"],"kdesi":["czech"],"kedluben":["czech"],"kemp":["czech"],"keramika":["czech"],"kino":["czech"],"klacek":["czech"],"kladivo":["czech"],"klam":["czech"],"klapot":["czech"],"klasika":["czech"],"klaun":["czech"],"klec":["czech"],"klenba":["czech"],"klepat":["czech"],"klesnout":["czech"],"klid":["czech"],"klima":["czech"],"klisna":["czech"],"klobouk":["czech"],"klokan":["czech"],"klopa":["czech"],"kloub":["czech"],"klubovna":["czech"],"klusat":["czech"],"kluzkost":["czech"],"kmen":["czech"],"kmitat":["czech"],"kmotr":["czech"],"kniha":["czech"],"knot":["czech"],"koalice":["czech"],"koberec":["czech"],"kobka":["czech"],"kobliha":["czech"],"kobyla":["czech"],"kocour":["czech"],"kohout":["czech"],"kojenec":["czech"],"kokos":["czech"],"koktejl":["czech"],"kolaps":["czech"],"koleda":["czech"],"kolize":["czech"],"kolo":["czech"],"komando":["czech"],"kometa":["czech"],"komik":["czech"],"komnata":["czech"],"komora":["czech"],"kompas":["czech"],"komunita":["czech"],"konat":["czech"],"koncept":["czech"],"kondice":["czech"],"konec":["czech"],"konfese":["czech"],"kongres":["czech"],"konina":["czech"],"konkurs":["czech"],"kontakt":["czech"],"konzerva":["czech"],"kopanec":["czech"],"kopie":["czech"],"kopnout":["czech"],"koprovka":["czech"],"korbel":["czech"],"korektor":["czech"],"kormidlo":["czech"],"koroptev":["czech"],"korpus":["czech"],"koruna":["czech"],"koryto":["czech"],"korzet":["czech"],"kosatec":["czech"],"kostka":["czech"],"kotel":["czech"],"kotleta":["czech"],"kotoul":["czech"],"koukat":["czech"],"koupelna":["czech"],"kousek":["czech"],"kouzlo":["czech"],"kovboj":["czech"],"koza":["czech"],"kozoroh":["czech"],"krabice":["czech"],"krach":["czech"],"krajina":["czech"],"kralovat":["czech"],"krasopis":["czech"],"kravata":["czech"],"kredit":["czech"],"krejcar":["czech"],"kresba":["czech"],"kreveta":["czech"],"kriket":["czech"],"kritik":["czech"],"krize":["czech"],"krkavec":["czech"],"krmelec":["czech"],"krmivo":["czech"],"krocan":["czech"],"krok":["czech"],"kronika":["czech"],"kropit":["czech"],"kroupa":["czech"],"krovka":["czech"],"krtek":["czech"],"kruhadlo":["czech"],"krupice":["czech"],"krutost":["czech"],"krvinka":["czech"],"krychle":["czech"],"krypta":["czech"],"krystal":["czech"],"kryt":["czech"],"kudlanka":["czech"],"kufr":["czech"],"kujnost":["czech"],"kukla":["czech"],"kulajda":["czech"],"kulich":["czech"],"kulka":["czech"],"kulomet":["czech"],"kultura":["czech"],"kuna":["czech"],"kupodivu":["czech"],"kurt":["czech"],"kurzor":["czech"],"kutil":["czech"],"kvalita":["czech"],"kvasinka":["czech"],"kvestor":["czech"],"kynolog":["czech"],"kyselina":["czech"],"kytara":["czech"],"kytice":["czech"],"kytka":["czech"],"kytovec":["czech"],"kyvadlo":["czech"],"labrador":["czech"],"lachtan":["czech"],"ladnost":["czech"],"laik":["czech"],"lakomec":["czech"],"lamela":["czech"],"lampa":["czech"],"lanovka":["czech"],"lasice":["czech"],"laso":["czech"],"lastura":["czech"],"latinka":["czech"],"lavina":["czech"],"lebka":["czech"],"leckdy":["czech"],"leden":["czech"],"lednice":["czech"],"ledovka":["czech"],"ledvina":["czech"],"legenda":["czech"],"legie":["czech"],"legrace":["czech"],"lehce":["czech"],"lehkost":["czech"],"lehnout":["czech"],"lektvar":["czech"],"lenochod":["czech"],"lentilka":["czech"],"lepenka":["czech"],"lepidlo":["czech"],"letadlo":["czech"],"letec":["czech"],"letmo":["czech"],"letokruh":["czech"],"levhart":["czech"],"levitace":["czech"],"levobok":["czech"],"libra":["czech"],"lichotka":["czech"],"lidojed":["czech"],"lidskost":["czech"],"lihovina":["czech"],"lijavec":["czech"],"lilek":["czech"],"limetka":["czech"],"linie":["czech"],"linka":["czech"],"linoleum":["czech"],"listopad":["czech"],"litina":["czech"],"litovat":["czech"],"lobista":["czech"],"lodivod":["czech"],"logika":["czech"],"logoped":["czech"],"lokalita":["czech"],"loket":["czech"],"lomcovat":["czech"],"lopata":["czech"],"lopuch":["czech"],"lord":["czech"],"losos":["czech"],"lotr":["czech"],"loudal":["czech"],"louh":["czech"],"louka":["czech"],"louskat":["czech"],"lovec":["czech"],"lstivost":["czech"],"lucerna":["czech"],"lucifer":["czech"],"lump":["czech"],"lusk":["czech"],"lustrace":["czech"],"lvice":["czech"],"lyra":["czech"],"lyrika":["czech"],"lysina":["czech"],"madam":["czech"],"madlo":["czech"],"magistr":["czech"],"mahagon":["czech"],"majetek":["czech"],"majitel":["czech"],"majorita":["czech"],"makak":["czech"],"makovice":["czech"],"makrela":["czech"],"malba":["czech"],"malina":["czech"],"malovat":["czech"],"malvice":["czech"],"maminka":["czech"],"mandle":["czech"],"manko":["czech"],"marnost":["czech"],"masakr":["czech"],"maskot":["czech"],"masopust":["czech"],"matice":["czech"],"matrika":["czech"],"maturita":["czech"],"mazanec":["czech"],"mazivo":["czech"],"mazlit":["czech"],"mazurka":["czech"],"mdloba":["czech"],"mechanik":["czech"],"meditace":["czech"],"medovina":["czech"],"melasa":["czech"],"meloun":["czech"],"mentolka":["czech"],"metla":["czech"],"metoda":["czech"],"metr":["czech"],"mezera":["czech"],"migrace":["czech"],"mihnout":["czech"],"mihule":["czech"],"mikina":["czech"],"mikrofon":["czech","turkish"],"milenec":["czech"],"milimetr":["czech"],"milost":["czech"],"mimika":["czech"],"mincovna":["czech"],"minibar":["czech"],"minomet":["czech"],"minulost":["czech"],"miska":["czech"],"mistr":["czech"],"mixovat":["czech"],"mladost":["czech"],"mlha":["czech"],"mlhovina":["czech"],"mlok":["czech"],"mlsat":["czech"],"mluvit":["czech"],"mnich":["czech"],"mnohem":["czech"],"mobil":["czech"],"mocnost":["czech"],"modelka":["czech"],"modlitba":["czech"],"mohyla":["czech"],"mokro":["czech"],"molekula":["czech"],"momentka":["czech"],"monarcha":["czech"],"monokl":["czech"],"monstrum":["czech"],"montovat":["czech"],"monzun":["czech"],"mosaz":["czech"],"moskyt":["czech"],"most":["czech"],"motivace":["czech"],"motorka":["czech"],"motyka":["czech"],"moucha":["czech"],"moudrost":["czech"],"mozaika":["czech"],"mozek":["czech"],"mozol":["czech"],"mramor":["czech"],"mravenec":["czech"],"mrkev":["czech"],"mrtvola":["czech"],"mrzet":["czech"],"mrzutost":["czech"],"mstitel":["czech"],"mudrc":["czech"],"muflon":["czech"],"mulat":["czech"],"mumie":["czech"],"munice":["czech"],"muset":["czech"],"mutace":["czech"],"muzeum":["czech"],"muzikant":["czech"],"myslivec":["czech"],"mzda":["czech"],"nabourat":["czech"],"nachytat":["czech"],"nadace":["czech"],"nadbytek":["czech"],"nadhoz":["czech"],"nadobro":["czech"],"nadpis":["czech"],"nahlas":["czech"],"nahnat":["czech"],"nahodile":["czech"],"nahradit":["czech"],"naivita":["czech"],"najednou":["czech"],"najisto":["czech"],"najmout":["czech"],"naklonit":["czech"],"nakonec":["czech"],"nakrmit":["czech"],"nalevo":["czech"],"namazat":["czech"],"namluvit":["czech"],"nanometr":["czech"],"naoko":["czech"],"naopak":["czech"],"naostro":["czech"],"napadat":["czech"],"napevno":["czech"],"naplnit":["czech"],"napnout":["czech"],"naposled":["czech"],"naprosto":["czech"],"narodit":["czech"],"naruby":["czech"],"narychlo":["czech"],"nasadit":["czech"],"nasekat":["czech"],"naslepo":["czech"],"nastat":["czech"],"natolik":["czech"],"navenek":["czech"],"navrch":["czech"],"navzdory":["czech"],"nazvat":["czech"],"nebe":["czech"],"nechat":["czech"],"necky":["czech"],"nedaleko":["czech"],"nedbat":["czech"],"neduh":["czech"],"negace":["czech"],"nehet":["czech"],"nehoda":["czech"],"nejen":["czech"],"nejprve":["czech"],"neklid":["czech"],"nelibost":["czech"],"nemilost":["czech"],"nemoc":["czech"],"neochota":["czech"],"neonka":["czech"],"nepokoj":["czech"],"nerost":["czech"],"nerv":["czech"],"nesmysl":["czech"],"nesoulad":["czech"],"netvor":["czech"],"neuron":["czech"],"nevina":["czech"],"nezvykle":["czech"],"nicota":["czech"],"nijak":["czech"],"nikam":["czech"],"nikdy":["czech"],"nikl":["czech"],"nikterak":["czech"],"nitro":["czech"],"nocleh":["czech"],"nohavice":["czech"],"nominace":["czech"],"nora":["czech"],"norek":["czech"],"nositel":["czech"],"nosnost":["czech"],"nouze":["czech"],"noviny":["czech"],"novota":["czech"],"nozdra":["czech"],"nuda":["czech"],"nudle":["czech"],"nuget":["czech"],"nutit":["czech"],"nutnost":["czech"],"nutrie":["czech"],"nymfa":["czech"],"obal":["czech"],"obarvit":["czech"],"obava":["czech"],"obdiv":["czech"],"obec":["czech"],"obehnat":["czech"],"obejmout":["czech"],"obezita":["czech"],"obhajoba":["czech"],"obilnice":["czech"],"objasnit":["czech"],"objekt":["czech"],"obklopit":["czech"],"oblast":["czech"],"oblek":["czech"],"obliba":["czech"],"obloha":["czech"],"obluda":["czech"],"obnos":["czech"],"obohatit":["czech"],"obojek":["czech"],"obout":["czech"],"obrazec":["czech"],"obrna":["czech"],"obruba":["czech"],"obrys":["czech"],"obsah":["czech"],"obsluha":["czech"],"obstarat":["czech"],"obuv":["czech"],"obvaz":["czech"],"obvinit":["czech"],"obvod":["czech"],"obvykle":["czech"],"obyvatel":["czech"],"obzor":["czech"],"ocas":["czech"],"ocel":["czech"],"ocenit":["czech"],"ochladit":["czech"],"ochota":["czech"],"ochrana":["czech"],"ocitnout":["czech"],"odboj":["czech"],"odbyt":["czech"],"odchod":["czech"],"odcizit":["czech"],"odebrat":["czech"],"odeslat":["czech"],"odevzdat":["czech"],"odezva":["czech"],"odhadce":["czech"],"odhodit":["czech"],"odjet":["czech"],"odjinud":["czech"],"odkaz":["czech"],"odkoupit":["czech"],"odliv":["czech"],"odluka":["czech"],"odmlka":["czech"],"odolnost":["czech"],"odpad":["czech"],"odpis":["czech"],"odplout":["czech"],"odpor":["czech"],"odpustit":["czech"],"odpykat":["czech"],"odrazka":["czech"],"odsoudit":["czech"],"odstup":["czech"],"odsun":["czech"],"odtok":["czech"],"odtud":["czech"],"odvaha":["czech"],"odveta":["czech"],"odvolat":["czech"],"odvracet":["czech"],"odznak":["czech"],"ofina":["czech"],"ofsajd":["czech"],"ohlas":["czech"],"ohnisko":["czech"],"ohrada":["czech"],"ohrozit":["czech"],"ohryzek":["czech"],"okap":["czech"],"okenice":["czech"],"oklika":["czech"],"okno":["czech"],"okouzlit":["czech"],"okovy":["czech"],"okrasa":["czech"],"okres":["czech"],"okrsek":["czech"],"okruh":["czech"],"okupant":["czech"],"okurka":["czech"],"okusit":["czech"],"olejnina":["czech"],"olizovat":["czech"],"omak":["czech"],"omeleta":["czech"],"omezit":["czech"],"omladina":["czech"],"omlouvat":["czech"],"omluva":["czech"],"omyl":["czech"],"onehdy":["czech"],"opakovat":["czech"],"opasek":["czech"],"operace":["czech"],"opice":["czech"],"opilost":["czech"],"opisovat":["czech"],"opora":["czech"],"opozice":["czech"],"opravdu":["czech"],"oproti":["czech"],"orbital":["czech"],"orchestr":["czech"],"orgie":["czech"],"orlice":["czech"],"orloj":["czech"],"ortel":["czech"],"osada":["czech"],"oschnout":["czech"],"osika":["czech"],"osivo":["czech"],"oslava":["czech"],"oslepit":["czech"],"oslnit":["czech"],"oslovit":["czech"],"osnova":["czech"],"osoba":["czech"],"osolit":["czech"],"ospalec":["czech"],"osten":["czech"],"ostraha":["czech"],"ostuda":["czech"],"ostych":["czech"],"osvojit":["czech"],"oteplit":["czech"],"otisk":["czech"],"otop":["czech"],"otrhat":["czech"],"otrlost":["czech"],"otrok":["czech"],"otruby":["czech"],"otvor":["czech"],"ovanout":["czech"],"ovar":["czech"],"oves":["czech"],"ovlivnit":["czech"],"ovoce":["czech"],"oxid":["czech"],"ozdoba":["czech"],"pachatel":["czech"],"pacient":["czech"],"padouch":["czech"],"pahorek":["czech"],"pakt":["czech"],"palanda":["czech"],"palec":["czech"],"palivo":["czech"],"paluba":["czech"],"pamflet":["czech"],"pamlsek":["czech"],"panenka":["czech"],"panika":["czech"],"panna":["czech"],"panovat":["czech"],"panstvo":["czech"],"pantofle":["czech"],"paprika":["czech"],"parketa":["czech"],"parodie":["czech"],"parta":["czech"],"paruka":["czech"],"paryba":["czech"],"paseka":["czech"],"pasivita":["czech"],"pastelka":["czech"],"patent":["czech"],"patrona":["czech"],"pavouk":["czech"],"pazneht":["czech"],"pazourek":["czech"],"pecka":["czech"],"pedagog":["czech"],"pejsek":["czech"],"peklo":["czech"],"peloton":["czech"],"penalta":["czech"],"pendrek":["czech"],"penze":["czech"],"periskop":["czech"],"pero":["czech"],"pestrost":["czech"],"petarda":["czech"],"petice":["czech"],"petrolej":["czech"],"pevnina":["czech"],"pexeso":["czech"],"pianista":["czech"],"piha":["czech"],"pijavice":["czech"],"pikle":["czech"],"piknik":["czech","turkish"],"pilina":["czech"],"pilnost":["czech"],"pilulka":["czech"],"pinzeta":["czech"],"pipeta":["czech"],"pisatel":["czech"],"pistole":["czech"],"pitevna":["czech"],"pivnice":["czech"],"pivovar":["czech"],"placenta":["czech"],"plakat":["czech"],"plamen":["czech"],"planeta":["czech"],"plastika":["czech"],"platit":["czech"],"plavidlo":["czech"],"plaz":["czech"],"plech":["czech"],"plemeno":["czech"],"plenta":["czech"],"ples":["czech"],"pletivo":["czech"],"plevel":["czech"],"plivat":["czech"],"plnit":["czech"],"plno":["czech"],"plocha":["czech"],"plodina":["czech"],"plomba":["czech"],"plout":["czech"],"pluk":["czech"],"plyn":["czech"],"pobavit":["czech"],"pobyt":["czech"],"pochod":["czech"],"pocit":["czech"],"poctivec":["czech"],"podat":["czech"],"podcenit":["czech"],"podepsat":["czech"],"podhled":["czech"],"podivit":["czech"],"podklad":["czech"],"podmanit":["czech"],"podnik":["czech"],"podoba":["czech"],"podpora":["czech"],"podraz":["czech"],"podstata":["czech"],"podvod":["czech"],"podzim":["czech"],"poezie":["czech"],"pohanka":["czech"],"pohnutka":["czech"],"pohovor":["czech"],"pohroma":["czech"],"pohyb":["czech"],"pointa":["czech"],"pojistka":["czech"],"pojmout":["czech"],"pokazit":["czech"],"pokles":["czech"],"pokoj":["czech"],"pokrok":["czech"],"pokuta":["czech"],"pokyn":["czech"],"poledne":["czech"],"polibek":["czech"],"polknout":["czech"],"poloha":["czech"],"polynom":["czech"],"pomalu":["czech"],"pominout":["czech"],"pomlka":["czech"],"pomoc":["czech"],"pomsta":["czech"],"pomyslet":["czech"],"ponechat":["czech"],"ponorka":["czech"],"ponurost":["czech"],"popadat":["czech"],"popel":["czech"],"popisek":["czech"],"poplach":["czech"],"poprosit":["czech"],"popsat":["czech"],"popud":["czech"],"poradce":["czech"],"porce":["czech"],"porod":["czech"],"porucha":["czech"],"poryv":["czech"],"posadit":["czech"],"posed":["czech"],"posila":["czech"],"poskok":["czech"],"poslanec":["czech"],"posoudit":["czech"],"pospolu":["czech"],"postava":["czech"],"posudek":["czech"],"posyp":["czech"],"potah":["czech"],"potkan":["czech"],"potlesk":["czech"],"potomek":["czech"],"potrava":["czech"],"potupa":["czech"],"potvora":["czech"],"poukaz":["czech"],"pouto":["czech"],"pouzdro":["czech"],"povaha":["czech"],"povidla":["czech"],"povlak":["czech"],"povoz":["czech"],"povrch":["czech"],"povstat":["czech"],"povyk":["czech"],"povzdech":["czech"],"pozdrav":["czech"],"pozemek":["czech"],"poznatek":["czech"],"pozor":["czech"],"pozvat":["czech"],"pracovat":["czech"],"prahory":["czech"],"praktika":["czech"],"prales":["czech"],"praotec":["czech"],"praporek":["czech"],"prase":["czech"],"pravda":["czech"],"princip":["czech"],"prkno":["czech"],"probudit":["czech"],"procento":["czech"],"prodej":["czech"],"profese":["czech"],"prohra":["czech"],"projekt":["czech"],"prolomit":["czech"],"promile":["czech"],"pronikat":["czech"],"propad":["czech"],"prorok":["czech"],"prosba":["czech"],"proton":["czech"],"proutek":["czech"],"provaz":["czech"],"prskavka":["czech"],"prsten":["czech"],"prudkost":["czech"],"prut":["czech"],"prvek":["czech"],"prvohory":["czech"],"psanec":["czech"],"psovod":["czech"],"pstruh":["czech"],"ptactvo":["czech"],"puberta":["czech"],"puch":["czech"],"pudl":["czech"],"pukavec":["czech"],"puklina":["czech"],"pukrle":["czech"],"pult":["czech"],"pumpa":["czech"],"punc":["czech"],"pupen":["czech"],"pusa":["czech"],"pusinka":["czech"],"pustina":["czech"],"putovat":["czech"],"putyka":["czech"],"pyramida":["czech"],"pysk":["czech"],"pytel":["czech"],"racek":["czech"],"rachot":["czech"],"radiace":["czech"],"radnice":["czech"],"radon":["czech"],"raft":["czech"],"ragby":["czech"],"raketa":["czech"],"rakovina":["czech"],"rameno":["czech"],"rampouch":["czech"],"rande":["czech"],"rarach":["czech"],"rarita":["czech"],"rasovna":["czech"],"rastr":["czech"],"ratolest":["czech"],"razance":["czech"],"razidlo":["czech"],"reagovat":["czech"],"reakce":["czech"],"recept":["czech"],"redaktor":["czech"],"referent":["czech"],"reflex":["czech"],"rejnok":["czech"],"reklama":["czech"],"rekord":["czech"],"rekrut":["czech"],"rektor":["czech"],"reputace":["czech"],"revize":["czech","turkish"],"revma":["czech"],"revolver":["czech"],"rezerva":["czech"],"riskovat":["czech"],"riziko":["czech"],"robotika":["czech"],"rodokmen":["czech"],"rohovka":["czech"],"rokle":["czech"],"rokoko":["czech"],"romaneto":["czech"],"ropovod":["czech"],"ropucha":["czech"],"rorejs":["czech"],"rosol":["czech"],"rostlina":["czech"],"rotmistr":["czech"],"rotoped":["czech"],"rotunda":["czech"],"roubenka":["czech"],"roucho":["czech"],"roup":["czech"],"roura":["czech"],"rovina":["czech"],"rovnice":["czech"],"rozbor":["czech"],"rozchod":["czech"],"rozdat":["czech"],"rozeznat":["czech"],"rozhodce":["czech"],"rozinka":["czech"],"rozjezd":["czech"],"rozkaz":["czech"],"rozloha":["czech"],"rozmar":["czech"],"rozpad":["czech"],"rozruch":["czech"],"rozsah":["czech"],"roztok":["czech"],"rozum":["czech"],"rozvod":["czech"],"rubrika":["czech"],"ruchadlo":["czech"],"rukavice":["czech"],"rukopis":["czech"],"ryba":["czech"],"rybolov":["czech"],"rychlost":["czech"],"rydlo":["czech"],"rypadlo":["czech"],"rytina":["czech"],"ryzost":["czech"],"sadista":["czech"],"sahat":["czech"],"sako":["czech"],"samec":["czech"],"samizdat":["czech"],"samota":["czech"],"sanitka":["czech"],"sardinka":["czech"],"sasanka":["czech"],"satelit":["czech"],"sazba":["czech"],"sazenice":["czech"],"sbor":["czech"],"schovat":["czech"],"sebranka":["czech"],"secese":["czech"],"sedadlo":["czech"],"sediment":["czech"],"sedlo":["czech"],"sehnat":["czech"],"sejmout":["czech"],"sekera":["czech"],"sekta":["czech"],"sekunda":["czech"],"sekvoje":["czech"],"semeno":["czech"],"seno":["czech"],"servis":["czech","turkish"],"sesadit":["czech"],"seshora":["czech"],"seskok":["czech"],"seslat":["czech"],"sestra":["czech"],"sesuv":["czech"],"sesypat":["czech"],"setba":["czech"],"setina":["czech"],"setkat":["czech"],"setnout":["czech"],"setrvat":["czech"],"sever":["czech"],"seznam":["czech"],"shoda":["czech"],"shrnout":["czech"],"sifon":["czech"],"silnice":["czech"],"sirka":["czech"],"sirotek":["czech"],"sirup":["czech"],"situace":["czech"],"skafandr":["czech"],"skalisko":["czech"],"skanzen":["czech"],"skaut":["czech"],"skeptik":["czech"],"skica":["czech"],"skladba":["czech"],"sklenice":["czech"],"sklo":["czech"],"skluz":["czech"],"skoba":["czech"],"skokan":["czech"],"skoro":["czech"],"skripta":["czech"],"skrz":["czech"],"skupina":["czech"],"skvost":["czech"],"skvrna":["czech"],"slabika":["czech"],"sladidlo":["czech"],"slanina":["czech"],"slast":["czech"],"slavnost":["czech"],"sledovat":["czech"],"slepec":["czech"],"sleva":["czech"],"slezina":["czech"],"slib":["czech"],"slina":["czech"],"sliznice":["czech"],"slon":["czech"],"sloupek":["czech"],"slovo":["czech"],"sluch":["czech"],"sluha":["czech"],"slunce":["czech"],"slupka":["czech"],"slza":["czech"],"smaragd":["czech"],"smetana":["czech"],"smilstvo":["czech"],"smlouva":["czech"],"smog":["czech"],"smrad":["czech"],"smrk":["czech"],"smrtka":["czech"],"smutek":["czech"],"smysl":["czech"],"snad":["czech"],"snaha":["czech"],"snob":["czech"],"sobota":["czech"],"socha":["czech"],"sodovka":["czech"],"sokol":["czech"],"sopka":["czech"],"sotva":["czech"],"souboj":["czech"],"soucit":["czech"],"soudce":["czech"],"souhlas":["czech"],"soulad":["czech"],"soumrak":["czech"],"souprava":["czech"],"soused":["czech"],"soutok":["czech"],"souviset":["czech"],"spalovna":["czech"],"spasitel":["czech"],"spis":["czech"],"splav":["czech"],"spodek":["czech"],"spojenec":["czech"],"spolu":["czech"],"sponzor":["czech"],"spornost":["czech"],"spousta":["czech"],"sprcha":["czech"],"spustit":["czech"],"sranda":["czech"],"sraz":["czech"],"srdce":["czech"],"srna":["czech"],"srnec":["czech"],"srovnat":["czech"],"srpen":["czech"],"srst":["czech"],"srub":["czech"],"stanice":["czech"],"starosta":["czech"],"statika":["czech"],"stavba":["czech"],"stehno":["czech"],"stezka":["czech"],"stodola":["czech"],"stolek":["czech"],"stopa":["czech"],"storno":["czech"],"stoupat":["czech"],"strach":["czech"],"stres":["czech"],"strhnout":["czech"],"strom":["czech"],"struna":["czech"],"studna":["czech"],"stupnice":["czech"],"stvol":["czech"],"styk":["czech"],"subjekt":["czech"],"subtropy":["czech"],"suchar":["czech"],"sudost":["czech"],"sukno":["czech"],"sundat":["czech"],"sunout":["czech"],"surikata":["czech"],"surovina":["czech"],"svah":["czech"],"svalstvo":["czech"],"svetr":["czech"],"svatba":["czech"],"svazek":["czech"],"svisle":["czech"],"svitek":["czech"],"svoboda":["czech"],"svodidlo":["czech"],"svorka":["czech"],"svrab":["czech"],"sykavka":["czech"],"sykot":["czech"],"synek":["czech"],"synovec":["czech"],"sypat":["czech"],"sypkost":["czech"],"syrovost":["czech"],"sysel":["czech"],"sytost":["czech"],"tabletka":["czech"],"tabule":["czech"],"tahoun":["czech"],"tajemno":["czech"],"tajfun":["czech"],"tajga":["czech"],"tajit":["czech"],"tajnost":["czech"],"taktika":["czech"],"tamhle":["czech"],"tampon":["czech","turkish"],"tancovat":["czech"],"tanec":["czech"],"tanker":["czech"],"tapeta":["czech"],"tavenina":["czech"],"tazatel":["czech"],"technika":["czech"],"tehdy":["czech"],"tekutina":["czech"],"telefon":["czech"],"temnota":["czech"],"tendence":["czech"],"tenista":["czech"],"tenor":["czech"],"teplota":["czech"],"tepna":["czech"],"teprve":["czech"],"terapie":["czech"],"termoska":["czech"],"textil":["czech"],"ticho":["czech"],"tiskopis":["czech"],"titulek":["czech"],"tkadlec":["czech"],"tkanina":["czech"],"tlapka":["czech"],"tleskat":["czech"],"tlukot":["czech"],"tlupa":["czech"],"tmel":["czech"],"toaleta":["czech"],"topinka":["czech"],"topol":["czech"],"torzo":["czech"],"touha":["czech"],"toulec":["czech"],"tradice":["czech"],"traktor":["czech"],"tramp":["czech"],"trasa":["czech"],"traverza":["czech"],"trefit":["czech"],"trest":["czech"],"trezor":["czech"],"trhavina":["czech"],"trhlina":["czech"],"trochu":["czech"],"trojice":["czech"],"troska":["czech"],"trouba":["czech"],"trpce":["czech"],"trpitel":["czech"],"trpkost":["czech"],"trubec":["czech"],"truchlit":["czech"],"truhlice":["czech"],"trus":["czech"],"trvat":["czech"],"tudy":["czech"],"tuhnout":["czech"],"tuhost":["czech"],"tundra":["czech"],"turista":["czech"],"turnaj":["czech"],"tuzemsko":["czech"],"tvaroh":["czech"],"tvorba":["czech"],"tvrdost":["czech"],"tvrz":["czech"],"tygr":["czech"],"tykev":["czech"],"ubohost":["czech"],"uboze":["czech"],"ubrat":["czech"],"ubrousek":["czech"],"ubrus":["czech"],"ubytovna":["czech"],"ucho":["czech"],"uctivost":["czech"],"udivit":["czech"],"uhradit":["czech"],"ujednat":["czech"],"ujistit":["czech"],"ujmout":["czech"],"ukazatel":["czech"],"uklidnit":["czech"],"uklonit":["czech"],"ukotvit":["czech"],"ukrojit":["czech"],"ulice":["czech"],"ulita":["czech"],"ulovit":["czech"],"umyvadlo":["czech"],"unavit":["czech"],"uniforma":["czech"],"uniknout":["czech"],"upadnout":["czech"],"uplatnit":["czech"],"uplynout":["czech"],"upoutat":["czech"],"upravit":["czech"],"uran":["czech"],"urazit":["czech"],"usednout":["czech"],"usilovat":["czech"],"usmrtit":["czech"],"usnadnit":["czech"],"usnout":["czech"],"usoudit":["czech"],"ustlat":["czech"],"ustrnout":["czech"],"utahovat":["czech"],"utkat":["czech"],"utlumit":["czech"],"utonout":["czech"],"utopenec":["czech"],"utrousit":["czech"],"uvalit":["czech"],"uvolnit":["czech"],"uvozovka":["czech"],"uzdravit":["czech"],"uzel":["czech"],"uzenina":["czech"],"uzlina":["czech"],"uznat":["czech"],"vagon":["czech","turkish"],"valcha":["czech"],"valoun":["czech"],"vana":["czech"],"vandal":["czech"],"vanilka":["czech"],"varan":["czech"],"varhany":["czech"],"varovat":["czech"],"vcelku":["czech"],"vchod":["czech"],"vdova":["czech"],"vedro":["czech"],"vegetace":["czech"],"vejce":["czech"],"velbloud":["czech"],"veletrh":["czech"],"velitel":["czech"],"velmoc":["czech"],"velryba":["czech"],"venkov":["czech"],"veranda":["czech"],"verze":["czech"],"veselka":["czech"],"veskrze":["czech"],"vesnice":["czech"],"vespodu":["czech"],"vesta":["czech"],"veterina":["czech"],"veverka":["czech"],"vibrace":["czech"],"vichr":["czech"],"videohra":["czech"],"vidina":["czech"],"vidle":["czech"],"vila":["czech"],"vinice":["czech"],"viset":["czech"],"vitalita":["czech"],"vize":["czech"],"vizitka":["czech"],"vjezd":["czech"],"vklad":["czech"],"vkus":["czech"],"vlajka":["czech"],"vlak":["czech"],"vlasec":["czech"],"vlevo":["czech"],"vlhkost":["czech"],"vliv":["czech"],"vlnovka":["czech"],"vloupat":["czech"],"vnucovat":["czech"],"vnuk":["czech"],"voda":["czech"],"vodivost":["czech"],"vodoznak":["czech"],"vodstvo":["czech"],"vojensky":["czech"],"vojna":["czech"],"vojsko":["czech"],"volant":["czech"],"volba":["czech"],"volit":["czech"],"volno":["czech"],"voskovka":["czech"],"vozidlo":["czech"],"vozovna":["czech"],"vpravo":["czech"],"vrabec":["czech"],"vracet":["czech"],"vrah":["czech"],"vrata":["czech"],"vrba":["czech"],"vrcholek":["czech"],"vrhat":["czech"],"vrstva":["czech"],"vrtule":["czech"],"vsadit":["czech"],"vstoupit":["czech"],"vstup":["czech"],"vtip":["czech"],"vybavit":["czech"],"vybrat":["czech"],"vychovat":["czech"],"vydat":["czech"],"vydra":["czech"],"vyfotit":["czech"],"vyhledat":["czech"],"vyhnout":["czech"],"vyhodit":["czech"],"vyhradit":["czech"],"vyhubit":["czech"],"vyjasnit":["czech"],"vyjet":["czech"],"vyjmout":["czech"],"vyklopit":["czech"],"vykonat":["czech"],"vylekat":["czech"],"vymazat":["czech"],"vymezit":["czech"],"vymizet":["czech"],"vymyslet":["czech"],"vynechat":["czech"],"vynikat":["czech"],"vynutit":["czech"],"vypadat":["czech"],"vyplatit":["czech"],"vypravit":["czech"],"vypustit":["czech"],"vyrazit":["czech"],"vyrovnat":["czech"],"vyrvat":["czech"],"vyslovit":["czech"],"vysoko":["czech"],"vystavit":["czech"],"vysunout":["czech"],"vysypat":["czech"],"vytasit":["czech"],"vytesat":["czech"],"vytratit":["czech"],"vyvinout":["czech"],"vyvolat":["czech"],"vyvrhel":["czech"],"vyzdobit":["czech"],"vyznat":["czech"],"vzadu":["czech"],"vzbudit":["czech"],"vzchopit":["czech"],"vzdor":["czech"],"vzduch":["czech"],"vzdychat":["czech"],"vzestup":["czech"],"vzhledem":["czech"],"vzkaz":["czech"],"vzlykat":["czech"],"vznik":["czech"],"vzorek":["czech"],"vzpoura":["czech"],"vztah":["czech"],"vztek":["czech"],"xylofon":["czech"],"zabrat":["czech"],"zabydlet":["czech"],"zachovat":["czech"],"zadarmo":["czech"],"zadusit":["czech"],"zafoukat":["czech"],"zahltit":["czech"],"zahodit":["czech"],"zahrada":["czech"],"zahynout":["czech"],"zajatec":["czech"],"zajet":["czech"],"zajistit":["czech"],"zaklepat":["czech"],"zakoupit":["czech"],"zalepit":["czech"],"zamezit":["czech"],"zamotat":["czech"],"zamyslet":["czech"],"zanechat":["czech"],"zanikat":["czech"],"zaplatit":["czech"],"zapojit":["czech"],"zapsat":["czech"],"zarazit":["czech"],"zastavit":["czech"],"zasunout":["czech"],"zatajit":["czech"],"zatemnit":["czech"],"zatknout":["czech"],"zaujmout":["czech"],"zavalit":["czech"],"zavelet":["czech"],"zavinit":["czech"],"zavolat":["czech"],"zavrtat":["czech"],"zazvonit":["czech"],"zbavit":["czech"],"zbrusu":["czech"],"zbudovat":["czech"],"zbytek":["czech"],"zdaleka":["czech"],"zdarma":["czech"],"zdatnost":["czech"],"zdivo":["czech"],"zdobit":["czech"],"zdroj":["czech"],"zdvih":["czech"],"zdymadlo":["czech"],"zelenina":["czech"],"zeman":["czech"],"zemina":["czech"],"zeptat":["czech"],"zezadu":["czech"],"zezdola":["czech"],"zhatit":["czech"],"zhltnout":["czech"],"zhluboka":["czech"],"zhotovit":["czech"],"zhruba":["czech"],"zima":["czech"],"zimnice":["czech"],"zjemnit":["czech"],"zklamat":["czech"],"zkoumat":["czech"],"zkratka":["czech"],"zkumavka":["czech"],"zlato":["czech"],"zlehka":["czech"],"zloba":["czech"],"zlom":["czech"],"zlost":["czech"],"zlozvyk":["czech"],"zmapovat":["czech"],"zmar":["czech"],"zmatek":["czech"],"zmije":["czech"],"zmizet":["czech"],"zmocnit":["czech"],"zmodrat":["czech"],"zmrzlina":["czech"],"zmutovat":["czech"],"znak":["czech"],"znalost":["czech"],"znamenat":["czech"],"znovu":["czech"],"zobrazit":["czech"],"zotavit":["czech"],"zoubek":["czech"],"zoufale":["czech"],"zplodit":["czech"],"zpomalit":["czech"],"zprava":["czech"],"zprostit":["czech"],"zprudka":["czech"],"zprvu":["czech"],"zrada":["czech"],"zranit":["czech"],"zrcadlo":["czech"],"zrnitost":["czech"],"zrno":["czech"],"zrovna":["czech"],"zrychlit":["czech"],"zrzavost":["czech"],"zticha":["czech"],"ztratit":["czech"],"zubovina":["czech"],"zubr":["czech"],"zvednout":["czech"],"zvenku":["czech"],"zvesela":["czech"],"zvon":["czech"],"zvrat":["czech"],"zvukovod":["czech"],"zvyk":["czech"],"abandon":["english","french"],"ability":["english"],"able":["english"],"about":["english"],"above":["english"],"absent":["english"],"absorb":["english"],"abstract":["english"],"absurd":["english"],"abuse":["english"],"access":["english"],"accident":["english"],"account":["english"],"accuse":["english"],"achieve":["english"],"acid":["english"],"acoustic":["english"],"acquire":["english"],"across":["english"],"act":["english"],"action":["english"],"actor":["english"],"actress":["english"],"actual":["english"],"adapt":["english"],"add":["english"],"addict":["english"],"address":["english"],"adjust":["english"],"admit":["english"],"adult":["english"],"advance":["english"],"advice":["english"],"aerobic":["english"],"affair":["english"],"afford":["english"],"afraid":["english"],"again":["english"],"age":["english"],"agent":["english"],"agree":["english"],"ahead":["english"],"aim":["english"],"air":["english"],"airport":["english"],"aisle":["english"],"alarm":["english"],"album":["english"],"alcohol":["english"],"alert":["english"],"alien":["english"],"all":["english"],"alley":["english"],"allow":["english"],"almost":["english"],"alone":["english"],"alpha":["english"],"already":["english"],"also":["english"],"alter":["english"],"always":["english"],"amateur":["english","french"],"amazing":["english"],"among":["english"],"amount":["english"],"amused":["english"],"analyst":["english"],"anchor":["english"],"ancient":["english"],"anger":["english"],"angle":["english","french"],"angry":["english"],"animal":["english","french"],"ankle":["english"],"announce":["english"],"annual":["english"],"another":["english"],"answer":["english"],"antenna":["english"],"antique":["english"],"anxiety":["english"],"any":["english"],"apart":["english"],"apology":["english"],"appear":["english"],"apple":["english"],"approve":["english"],"april":["english"],"arch":["english"],"arctic":["english"],"area":["english"],"arena":["english","turkish"],"argue":["english"],"arm":["english"],"armed":["english"],"armor":["english"],"army":["english"],"around":["english"],"arrange":["english"],"arrest":["english"],"arrive":["english"],"arrow":["english"],"art":["english"],"artefact":["english"],"artist":["english","turkish"],"artwork":["english"],"ask":["english"],"aspect":["english","french"],"assault":["english"],"asset":["english"],"assist":["english"],"assume":["english"],"asthma":["english"],"athlete":["english"],"atom":["english","turkish"],"attack":["english"],"attend":["english"],"attitude":["english"],"attract":["english"],"auction":["english"],"audit":["english"],"august":["english"],"aunt":["english"],"author":["english"],"auto":["english"],"autumn":["english"],"average":["english"],"avocado":["english"],"avoid":["english"],"awake":["english"],"aware":["english"],"away":["english"],"awesome":["english"],"awful":["english"],"awkward":["english"],"axis":["english"],"baby":["english"],"bachelor":["english"],"bacon":["english"],"badge":["english","french"],"bag":["english"],"balance":["english"],"balcony":["english"],"ball":["english"],"bamboo":["english"],"banana":["english"],"banner":["english"],"bar":["english"],"barely":["english"],"bargain":["english"],"barrel":["english"],"base":["english"],"basic":["english"],"basket":["english"],"battle":["english"],"beach":["english"],"bean":["english"],"beauty":["english"],"because":["english"],"become":["english"],"beef":["english"],"before":["english"],"begin":["english"],"behave":["english"],"behind":["english"],"believe":["english"],"below":["english"],"belt":["english"],"bench":["english"],"benefit":["english"],"best":["english"],"betray":["english"],"better":["english"],"between":["english"],"beyond":["english"],"bicycle":["english","french"],"bid":["english"],"bike":["english"],"bind":["english"],"biology":["english"],"bird":["english"],"birth":["english"],"bitter":["english"],"black":["english"],"blade":["english"],"blame":["english"],"blanket":["english"],"blast":["english"],"bleak":["english"],"bless":["english"],"blind":["english"],"blood":["english"],"blossom":["english"],"blouse":["english"],"blue":["english"],"blur":["english"],"blush":["english"],"board":["english"],"boat":["english"],"body":["english"],"boil":["english"],"bomb":["english"],"bone":["english"],"bonus":["english","french"],"book":["english"],"boost":["english"],"border":["english"],"boring":["english"],"borrow":["english"],"boss":["english"],"bottom":["english"],"bounce":["english"],"box":["english"],"boy":["english"],"bracket":["english"],"brain":["english"],"brand":["english"],"brass":["english"],"brave":["english","french"],"bread":["english"],"breeze":["english"],"brick":["english"],"bridge":["english"],"brief":["english"],"bright":["english"],"bring":["english"],"brisk":["english"],"broccoli":["english"],"broken":["english"],"bronze":["english"],"broom":["english"],"brother":["english"],"brown":["english"],"brush":["english"],"bubble":["english"],"buddy":["english"],"budget":["english"],"buffalo":["english"],"build":["english"],"bulb":["english"],"bulk":["english"],"bullet":["english"],"bundle":["english"],"bunker":["english"],"burden":["english"],"burger":["english"],"burst":["english"],"bus":["english"],"business":["english"],"busy":["english"],"butter":["english"],"buyer":["english"],"buzz":["english"],"cabbage":["english"],"cabin":["english"],"cable":["english"],"cactus":["english"],"cage":["english"],"cake":["english"],"call":["english"],"calm":["english"],"camera":["english"],"camp":["english"],"can":["english"],"canal":["english","french"],"cancel":["english"],"candy":["english"],"cannon":["english"],"canoe":["english"],"canvas":["english"],"canyon":["english"],"capable":["english","french"],"capital":["english"],"captain":["english"],"car":["english"],"carbon":["english"],"card":["english"],"cargo":["english"],"carpet":["english"],"carry":["english"],"cart":["english"],"case":["english"],"cash":["english"],"casino":["english"],"castle":["english"],"casual":["english"],"cat":["english"],"catalog":["english"],"catch":["english"],"category":["english"],"cattle":["english"],"caught":["english"],"cause":["english"],"caution":["english","french"],"cave":["english"],"ceiling":["english"],"celery":["english"],"cement":["english"],"census":["english"],"century":["english"],"cereal":["english"],"certain":["english"],"chair":["english"],"chalk":["english"],"champion":["english"],"change":["english"],"chaos":["english"],"chapter":["english"],"charge":["english"],"chase":["english"],"chat":["english"],"cheap":["english"],"check":["english"],"cheese":["english"],"chef":["english"],"cherry":["english"],"chest":["english"],"chicken":["english"],"chief":["english"],"child":["english"],"chimney":["english"],"choice":["english"],"choose":["english"],"chronic":["english"],"chuckle":["english"],"chunk":["english"],"churn":["english"],"cigar":["english"],"cinnamon":["english"],"circle":["english"],"citizen":["english"],"city":["english"],"civil":["english","french"],"claim":["english"],"clap":["english"],"clarify":["english"],"claw":["english"],"clay":["english"],"clean":["english"],"clerk":["english"],"clever":["english"],"click":["english"],"client":["english","french"],"cliff":["english"],"climb":["english"],"clinic":["english"],"clip":["english"],"clock":["english"],"clog":["english"],"close":["english"],"cloth":["english"],"cloud":["english"],"clown":["english"],"club":["english"],"clump":["english"],"cluster":["english"],"clutch":["english"],"coach":["english"],"coast":["english"],"coconut":["english"],"code":["english"],"coffee":["english"],"coil":["english"],"coin":["english"],"collect":["english"],"color":["english"],"column":["english"],"combine":["english"],"come":["english"],"comfort":["english"],"comic":["english"],"common":["english"],"company":["english"],"concert":["english","french"],"conduct":["english"],"confirm":["english"],"congress":["english"],"connect":["english"],"consider":["english"],"control":["english"],"convince":["english"],"cook":["english"],"cool":["english"],"copper":["english"],"copy":["english"],"coral":["english"],"core":["english"],"corn":["english"],"correct":["english","french"],"cost":["english"],"cotton":["english"],"couch":["english"],"country":["english"],"couple":["english"],"course":["english"],"cousin":["english"],"cover":["english"],"coyote":["english","french"],"crack":["english"],"cradle":["english"],"craft":["english"],"cram":["english"],"crane":["english"],"crash":["english"],"crater":["english"],"crawl":["english"],"crazy":["english"],"cream":["english"],"credit":["english"],"creek":["english"],"crew":["english"],"cricket":["english"],"crime":["english"],"crisp":["english"],"critic":["english"],"crop":["english"],"cross":["english"],"crouch":["english"],"crowd":["english"],"crucial":["english","french"],"cruel":["english","french"],"cruise":["english"],"crumble":["english"],"crunch":["english"],"crush":["english"],"cry":["english"],"crystal":["english"],"cube":["english"],"culture":["english"],"cup":["english"],"cupboard":["english"],"curious":["english"],"current":["english"],"curtain":["english"],"curve":["english"],"cushion":["english"],"custom":["english"],"cute":["english"],"cycle":["english","french"],"dad":["english"],"damage":["english"],"damp":["english"],"dance":["english"],"danger":["english","french"],"daring":["english"],"dash":["english"],"daughter":["english"],"dawn":["english"],"day":["english"],"deal":["english"],"debate":["english"],"debris":["english"],"decade":["english"],"december":["english"],"decide":["english"],"decline":["english"],"decorate":["english"],"decrease":["english"],"deer":["english"],"defense":["english"],"define":["english"],"defy":["english"],"degree":["english"],"delay":["english"],"deliver":["english"],"demand":["english"],"demise":["english"],"denial":["english"],"dentist":["english"],"deny":["english"],"depart":["english"],"depend":["english"],"deposit":["english"],"depth":["english"],"deputy":["english"],"derive":["english"],"describe":["english"],"desert":["english"],"design":["english"],"desk":["english"],"despair":["english"],"destroy":["english"],"detail":["english"],"detect":["english"],"develop":["english"],"device":["english"],"devote":["english"],"diagram":["english"],"dial":["english"],"diamond":["english"],"diary":["english"],"dice":["english"],"diesel":["english"],"diet":["english"],"differ":["english"],"digital":["english","french"],"dignity":["english"],"dilemma":["english"],"dinner":["english"],"dinosaur":["english"],"direct":["english"],"dirt":["english"],"disagree":["english"],"discover":["english"],"disease":["english"],"dish":["english"],"dismiss":["english"],"disorder":["english"],"display":["english"],"distance":["english","french"],"divert":["english"],"divide":["english"],"divorce":["english"],"dizzy":["english"],"doctor":["english"],"document":["english"],"dog":["english"],"doll":["english"],"dolphin":["english"],"domain":["english"],"donate":["english"],"donkey":["english"],"donor":["english"],"door":["english"],"dose":["english"],"double":["english","french"],"dove":["english"],"draft":["english"],"dragon":["english","french"],"drama":["english"],"drastic":["english"],"draw":["english"],"dream":["english"],"dress":["english"],"drift":["english"],"drill":["english"],"drink":["english"],"drip":["english"],"drive":["english"],"drop":["english"],"drum":["english"],"dry":["english"],"duck":["english"],"dumb":["english"],"dune":["english"],"during":["english"],"dust":["english"],"dutch":["english"],"duty":["english"],"dwarf":["english"],"dynamic":["english"],"eager":["english"],"eagle":["english"],"early":["english"],"earn":["english"],"earth":["english"],"easily":["english"],"east":["english"],"easy":["english"],"echo":["english"],"ecology":["english"],"economy":["english"],"edge":["english"],"edit":["english"],"educate":["english"],"effort":["english","french"],"egg":["english"],"eight":["english"],"either":["english"],"elbow":["english"],"elder":["english"],"electric":["english"],"elegant":["english"],"element":["english"],"elephant":["english"],"elevator":["english"],"elite":["english"],"else":["english"],"embark":["english"],"embody":["english"],"embrace":["english"],"emerge":["english"],"emotion":["english"],"employ":["english"],"empower":["english"],"empty":["english"],"enable":["english"],"enact":["english"],"end":["english"],"endless":["english"],"endorse":["english"],"enemy":["english"],"energy":["english"],"enforce":["english"],"engage":["english"],"engine":["english"],"enhance":["english"],"enjoy":["english"],"enlist":["english"],"enough":["english"],"enrich":["english"],"enroll":["english"],"ensure":["english"],"enter":["english"],"entire":["english"],"entry":["english"],"envelope":["english"],"episode":["english"],"equal":["english"],"equip":["english"],"era":["english"],"erase":["english"],"erode":["english"],"erosion":["english"],"error":["english"],"erupt":["english"],"escape":["english"],"essay":["english"],"essence":["english","french"],"estate":["english"],"eternal":["english"],"ethics":["english"],"evidence":["english"],"evil":["english"],"evoke":["english"],"evolve":["english"],"exact":["english","french"],"example":["english"],"excess":["english"],"exchange":["english"],"excite":["english"],"exclude":["english"],"excuse":["english","french"],"execute":["english"],"exercise":["english"],"exhaust":["english"],"exhibit":["english"],"exile":["english"],"exist":["english"],"exit":["english"],"exotic":["english"],"expand":["english"],"expect":["english"],"expire":["english"],"explain":["english"],"expose":["english"],"express":["english"],"extend":["english"],"extra":["english"],"eye":["english"],"eyebrow":["english"],"fabric":["english"],"face":["english"],"faculty":["english"],"fade":["english"],"faint":["english"],"faith":["english"],"fall":["english"],"false":["english"],"fame":["english"],"family":["english"],"famous":["english"],"fan":["english"],"fancy":["english"],"fantasy":["english"],"farm":["english"],"fashion":["english"],"fat":["english"],"fatal":["english","french"],"father":["english"],"fatigue":["english","french"],"fault":["english"],"favorite":["english"],"feature":["english"],"february":["english"],"federal":["english","turkish"],"fee":["english"],"feed":["english"],"feel":["english"],"female":["english"],"fence":["english"],"festival":["english","french","turkish"],"fetch":["english"],"fever":["english"],"few":["english"],"fiber":["english"],"fiction":["english"],"field":["english"],"figure":["english","french"],"file":["english"],"film":["english"],"filter":["english"],"final":["english"],"find":["english"],"fine":["english"],"finger":["english"],"finish":["english"],"fire":["english"],"firm":["english"],"first":["english"],"fiscal":["english"],"fish":["english"],"fit":["english"],"fitness":["english"],"fix":["english"],"flag":["english"],"flame":["english"],"flash":["english"],"flat":["english"],"flavor":["english"],"flee":["english"],"flight":["english"],"flip":["english"],"float":["english"],"flock":["english"],"floor":["english"],"flower":["english"],"fluid":["english"],"flush":["english"],"fly":["english"],"foam":["english"],"focus":["english"],"fog":["english"],"foil":["english"],"fold":["english"],"follow":["english"],"food":["english"],"foot":["english"],"force":["english"],"forest":["english"],"forget":["english"],"fork":["english"],"fortune":["english","french"],"forum":["english"],"forward":["english"],"fossil":["english"],"foster":["english"],"found":["english"],"fox":["english"],"fragile":["english","french"],"frame":["english"],"frequent":["english"],"fresh":["english"],"friend":["english"],"fringe":["english"],"frog":["english"],"front":["english"],"frost":["english"],"frown":["english"],"frozen":["english"],"fruit":["english","french"],"fuel":["english"],"fun":["english"],"funny":["english"],"furnace":["english"],"fury":["english"],"future":["english"],"gadget":["english"],"gain":["english"],"galaxy":["english"],"gallery":["english"],"game":["english"],"gap":["english"],"garage":["english"],"garbage":["english"],"garden":["english"],"garlic":["english"],"garment":["english"],"gas":["english"],"gasp":["english"],"gate":["english"],"gather":["english"],"gauge":["english"],"gaze":["english"],"general":["english"],"genius":["english"],"genre":["english"],"gentle":["english"],"genuine":["english"],"gesture":["english"],"ghost":["english"],"giant":["english"],"gift":["english"],"giggle":["english"],"ginger":["english"],"giraffe":["english"],"girl":["english"],"give":["english"],"glad":["english"],"glance":["english"],"glare":["english"],"glass":["english"],"glide":["english"],"glimpse":["english"],"globe":["english","french"],"gloom":["english"],"glory":["english"],"glove":["english"],"glow":["english"],"glue":["english"],"goat":["english"],"goddess":["english"],"gold":["english"],"good":["english"],"goose":["english"],"gorilla":["english"],"gospel":["english"],"gossip":["english"],"govern":["english"],"gown":["english"],"grab":["english"],"grace":["english"],"grain":["english"],"grant":["english"],"grape":["english"],"grass":["english"],"gravity":["english"],"great":["english"],"green":["english"],"grid":["english"],"grief":["english"],"grit":["english"],"grocery":["english"],"group":["english"],"grow":["english"],"grunt":["english"],"guard":["english"],"guess":["english"],"guide":["english","french"],"guilt":["english"],"guitar":["english"],"gun":["english"],"gym":["english"],"habit":["english"],"hair":["english"],"half":["english"],"hammer":["english"],"hamster":["english"],"hand":["english"],"happy":["english"],"harbor":["english"],"hard":["english"],"harsh":["english"],"harvest":["english"],"hat":["english"],"have":["english"],"hawk":["english"],"hazard":["english"],"head":["english"],"health":["english"],"heart":["english"],"heavy":["english"],"hedgehog":["english"],"height":["english"],"hello":["english"],"helmet":["english"],"help":["english"],"hen":["english"],"hero":["english"],"hidden":["english"],"high":["english"],"hill":["english"],"hint":["english"],"hip":["english"],"hire":["english"],"history":["english"],"hobby":["english"],"hockey":["english"],"hold":["english"],"hole":["english"],"holiday":["english"],"hollow":["english"],"home":["english"],"honey":["english"],"hood":["english"],"hope":["english"],"horn":["english"],"horror":["english"],"horse":["english"],"hospital":["english"],"host":["english"],"hotel":["english"],"hour":["english"],"hover":["english"],"hub":["english"],"huge":["english"],"human":["english"],"humble":["english","french"],"humor":["english"],"hundred":["english"],"hungry":["english"],"hunt":["english"],"hurdle":["english"],"hurry":["english"],"hurt":["english"],"husband":["english"],"hybrid":["english"],"ice":["english"],"icon":["english"],"idea":["english"],"identify":["english"],"idle":["english"],"ignore":["english"],"ill":["english"],"illegal":["english"],"illness":["english"],"image":["english","french"],"imitate":["english"],"immense":["english","french"],"immune":["english"],"impact":["english","french"],"impose":["english"],"improve":["english"],"impulse":["english"],"inch":["english"],"include":["english"],"income":["english"],"increase":["english"],"index":["english"],"indicate":["english"],"indoor":["english"],"industry":["english"],"infant":["english"],"inflict":["english"],"inform":["english"],"inhale":["english"],"inherit":["english"],"initial":["english"],"inject":["english"],"injury":["english"],"inmate":["english"],"inner":["english"],"innocent":["english","french"],"input":["english"],"inquiry":["english"],"insane":["english"],"insect":["english"],"inside":["english"],"inspire":["english"],"install":["english"],"intact":["english","french"],"interest":["english"],"into":["english"],"invest":["english"],"invite":["english"],"involve":["english"],"iron":["english"],"island":["english"],"isolate":["english"],"issue":["english"],"item":["english"],"ivory":["english"],"jacket":["english"],"jaguar":["english","french"],"jar":["english"],"jazz":["english"],"jealous":["english"],"jeans":["english"],"jelly":["english"],"jewel":["english"],"job":["english"],"join":["english"],"joke":["english"],"journey":["english"],"joy":["english"],"judge":["english"],"juice":["english"],"jump":["english"],"jungle":["english"],"junior":["english","french"],"junk":["english"],"just":["english"],"kangaroo":["english"],"keen":["english"],"keep":["english"],"ketchup":["english"],"key":["english"],"kick":["english"],"kid":["english"],"kidney":["english"],"kind":["english"],"kingdom":["english"],"kiss":["english"],"kit":["english"],"kitchen":["english"],"kite":["english"],"kitten":["english"],"kiwi":["english"],"knee":["english"],"knife":["english"],"knock":["english"],"know":["english"],"lab":["english"],"label":["english","french"],"labor":["english"],"ladder":["english"],"lady":["english"],"lake":["english"],"lamp":["english"],"language":["english"],"laptop":["english"],"large":["english"],"later":["english"],"latin":["english"],"laugh":["english"],"laundry":["english"],"lava":["english"],"law":["english"],"lawn":["english"],"lawsuit":["english"],"layer":["english"],"lazy":["english"],"leader":["english"],"leaf":["english"],"learn":["english"],"leave":["english"],"lecture":["english","french"],"left":["english"],"leg":["english"],"legal":["english"],"legend":["english"],"leisure":["english"],"lemon":["english"],"lend":["english"],"length":["english"],"lens":["english"],"leopard":["english"],"lesson":["english"],"letter":["english"],"level":["english"],"liar":["english"],"liberty":["english"],"library":["english"],"license":["english"],"life":["english"],"lift":["english"],"light":["english"],"like":["english"],"limb":["english"],"limit":["english"],"link":["english"],"lion":["english"],"liquid":["english"],"list":["english"],"little":["english"],"live":["english"],"lizard":["english"],"load":["english"],"loan":["english"],"lobster":["english"],"local":["english"],"lock":["english"],"logic":["english"],"lonely":["english"],"long":["english"],"loop":["english"],"lottery":["english"],"loud":["english"],"lounge":["english"],"love":["english"],"loyal":["english","french"],"lucky":["english"],"luggage":["english"],"lumber":["english"],"lunar":["english"],"lunch":["english"],"luxury":["english"],"lyrics":["english"],"machine":["english","french"],"mad":["english"],"magic":["english"],"magnet":["english"],"maid":["english"],"mail":["english"],"main":["english"],"major":["english"],"make":["english"],"mammal":["english"],"man":["english"],"manage":["english"],"mandate":["english"],"mango":["english"],"mansion":["english"],"manual":["english"],"maple":["english"],"marble":["english"],"march":["english"],"margin":["english"],"marine":["english"],"market":["english","turkish"],"marriage":["english"],"mask":["english"],"mass":["english"],"master":["english"],"match":["english"],"material":["english"],"math":["english"],"matrix":["english"],"matter":["english"],"maximum":["english"],"maze":["english"],"meadow":["english"],"mean":["english"],"measure":["english"],"meat":["english"],"mechanic":["english"],"medal":["english"],"media":["english"],"melody":["english"],"melt":["english"],"member":["english"],"memory":["english"],"mention":["english"],"menu":["english"],"mercy":["english"],"merge":["english"],"merit":["english"],"merry":["english"],"mesh":["english"],"message":["english"],"metal":["english"],"method":["english"],"middle":["english"],"midnight":["english"],"milk":["english"],"million":["english","french"],"mimic":["english"],"mind":["english"],"minimum":["english"],"minor":["english"],"minute":["english","french"],"miracle":["english","french"],"mirror":["english"],"misery":["english"],"miss":["english"],"mistake":["english"],"mix":["english"],"mixed":["english"],"mixture":["english"],"mobile":["english","french"],"model":["english","turkish"],"modify":["english"],"mom":["english"],"moment":["english"],"monitor":["english"],"monkey":["english"],"monster":["english"],"month":["english"],"moon":["english"],"moral":["english"],"more":["english"],"morning":["english"],"mosquito":["english"],"mother":["english"],"motion":["english"],"motor":["english","turkish"],"mountain":["english"],"mouse":["english"],"move":["english"],"movie":["english"],"much":["english"],"muffin":["english"],"mule":["english"],"multiply":["english"],"muscle":["english","french"],"museum":["english"],"mushroom":["english"],"music":["english"],"must":["english"],"mutual":["english"],"myself":["english"],"mystery":["english"],"myth":["english"],"naive":["english"],"name":["english"],"napkin":["english"],"narrow":["english"],"nasty":["english"],"nation":["english","french"],"nature":["english","french"],"near":["english"],"neck":["english"],"need":["english"],"negative":["english"],"neglect":["english"],"neither":["english"],"nephew":["english"],"nerve":["english"],"nest":["english"],"net":["english"],"network":["english"],"neutral":["english"],"never":["english"],"news":["english"],"next":["english"],"nice":["english"],"night":["english"],"noble":["english","french"],"noise":["english"],"nominee":["english"],"noodle":["english"],"normal":["english","turkish"],"north":["english"],"nose":["english"],"notable":["english","french"],"note":["english"],"nothing":["english"],"notice":["english"],"novel":["english"],"now":["english"],"nuclear":["english"],"number":["english"],"nurse":["english"],"nut":["english"],"oak":["english"],"obey":["english"],"object":["english"],"oblige":["english"],"obscure":["english"],"observe":["english"],"obtain":["english"],"obvious":["english"],"occur":["english"],"ocean":["english"],"october":["english"],"odor":["english"],"off":["english"],"offer":["english"],"office":["english"],"often":["english"],"oil":["english"],"okay":["english"],"old":["english"],"olive":["english"],"olympic":["english"],"omit":["english"],"once":["english"],"one":["english"],"onion":["english"],"online":["english"],"only":["english"],"open":["english"],"opera":["english","turkish"],"opinion":["english","french"],"oppose":["english"],"option":["english"],"orange":["english","french"],"orbit":["english"],"orchard":["english"],"order":["english"],"ordinary":["english"],"organ":["english"],"orient":["english"],"original":["english"],"orphan":["english"],"ostrich":["english"],"other":["english"],"outdoor":["english"],"outer":["english"],"output":["english"],"outside":["english"],"oval":["english"],"oven":["english"],"over":["english"],"own":["english"],"owner":["english"],"oxygen":["english"],"oyster":["english"],"ozone":["english","french"],"pact":["english"],"paddle":["english"],"page":["english"],"pair":["english"],"palace":["english","french"],"palm":["english"],"panda":["english","french","turkish"],"panel":["english","turkish"],"panic":["english"],"panther":["english"],"paper":["english"],"parade":["english"],"parent":["english"],"park":["english"],"parrot":["english"],"party":["english"],"pass":["english"],"patch":["english"],"path":["english"],"patient":["english"],"patrol":["english"],"pattern":["english"],"pause":["english"],"pave":["english"],"payment":["english"],"peace":["english"],"peanut":["english"],"pear":["english"],"peasant":["english"],"pelican":["english"],"pen":["english"],"penalty":["english"],"pencil":["english"],"people":["english"],"pepper":["english"],"perfect":["english"],"permit":["english"],"person":["english"],"pet":["english"],"phone":["english"],"photo":["english"],"phrase":["english","french"],"physical":["english"],"piano":["english","french"],"picnic":["english"],"picture":["english"],"piece":["english"],"pig":["english"],"pigeon":["english"],"pill":["english"],"pilot":["english","turkish"],"pink":["english"],"pioneer":["english"],"pipe":["english"],"pistol":["english"],"pitch":["english"],"pizza":["english","french"],"place":["english"],"planet":["english"],"plastic":["english"],"plate":["english"],"play":["english"],"please":["english"],"pledge":["english"],"pluck":["english"],"plug":["english"],"plunge":["english"],"poem":["english"],"poet":["english"],"point":["english"],"polar":["english"],"pole":["english"],"police":["english"],"pond":["english"],"pony":["english"],"pool":["english"],"popular":["english"],"portion":["english"],"position":["english","french"],"possible":["english"],"post":["english"],"potato":["english"],"pottery":["english"],"poverty":["english"],"powder":["english"],"power":["english"],"practice":["english"],"praise":["english"],"predict":["english"],"prefer":["english"],"prepare":["english"],"present":["english"],"pretty":["english"],"prevent":["english"],"price":["english"],"pride":["english"],"primary":["english"],"print":["english"],"priority":["english"],"prison":["english","french"],"private":["english"],"prize":["english"],"problem":["english","turkish"],"process":["english"],"produce":["english"],"profit":["english"],"program":["english","turkish"],"project":["english"],"promote":["english"],"proof":["english"],"property":["english"],"prosper":["english"],"protect":["english"],"proud":["english"],"provide":["english"],"public":["english","french"],"pudding":["english"],"pull":["english"],"pulp":["english"],"pulse":["english"],"pumpkin":["english"],"punch":["english"],"pupil":["english"],"puppy":["english"],"purchase":["english"],"purity":["english"],"purpose":["english"],"purse":["english"],"push":["english"],"put":["english"],"puzzle":["english","french"],"pyramid":["english"],"quality":["english"],"quantum":["english"],"quarter":["english"],"question":["english","french"],"quick":["english"],"quit":["english"],"quiz":["english"],"quote":["english"],"rabbit":["english"],"raccoon":["english"],"race":["english"],"rack":["english"],"radar":["english","turkish"],"radio":["english"],"rail":["english"],"rain":["english"],"raise":["english"],"rally":["english"],"ramp":["english"],"ranch":["english"],"random":["english"],"range":["english"],"rapid":["english"],"rare":["english"],"rate":["english"],"rather":["english"],"raven":["english"],"raw":["english"],"razor":["english"],"ready":["english"],"real":["english"],"reason":["english"],"rebel":["english"],"rebuild":["english"],"recall":["english"],"receive":["english"],"recipe":["english"],"record":["english"],"recycle":["english"],"reduce":["english"],"reflect":["english"],"reform":["english","turkish"],"refuse":["english"],"region":["english"],"regret":["english"],"regular":["english"],"reject":["english"],"relax":["english"],"release":["english"],"relief":["english","french"],"rely":["english"],"remain":["english"],"remember":["english"],"remind":["english"],"remove":["english"],"render":["english"],"renew":["english"],"rent":["english"],"reopen":["english"],"repair":["english"],"repeat":["english"],"replace":["english"],"report":["english"],"require":["english"],"rescue":["english"],"resemble":["english"],"resist":["english"],"resource":["english"],"response":["english"],"result":["english"],"retire":["english"],"retreat":["english"],"return":["english"],"reunion":["english"],"reveal":["english"],"review":["english"],"reward":["english"],"rhythm":["english"],"rib":["english"],"ribbon":["english"],"rice":["english"],"rich":["english"],"ride":["english"],"ridge":["english"],"rifle":["english"],"right":["english"],"rigid":["english"],"ring":["english"],"riot":["english"],"ripple":["english"],"risk":["english"],"ritual":["english"],"rival":["english","french"],"river":["english"],"road":["english"],"roast":["english"],"robot":["english","turkish"],"robust":["english"],"rocket":["english"],"romance":["english","french"],"roof":["english"],"rookie":["english"],"room":["english"],"rose":["english"],"rotate":["english"],"rough":["english"],"round":["english"],"route":["english"],"royal":["english"],"rubber":["english"],"rude":["english"],"rug":["english"],"rule":["english"],"run":["english"],"runway":["english"],"rural":["english"],"sad":["english"],"saddle":["english"],"sadness":["english"],"safe":["english"],"sail":["english"],"salad":["english"],"salmon":["english"],"salon":["english","french","turkish"],"salt":["english"],"salute":["english"],"same":["english"],"sample":["english"],"sand":["english"],"satisfy":["english"],"satoshi":["english"],"sauce":["english"],"sausage":["english"],"save":["english"],"say":["english"],"scale":["english"],"scan":["english"],"scare":["english"],"scatter":["english"],"scene":["english"],"scheme":["english"],"school":["english"],"science":["english","french"],"scissors":["english"],"scorpion":["english"],"scout":["english"],"scrap":["english"],"screen":["english"],"script":["english"],"scrub":["english"],"sea":["english"],"search":["english"],"season":["english"],"seat":["english"],"second":["english"],"secret":["english"],"section":["english"],"security":["english"],"seed":["english"],"seek":["english"],"segment":["english"],"select":["english"],"sell":["english"],"seminar":["english"],"senior":["english"],"sense":["english"],"sentence":["english","french"],"series":["english"],"service":["english","french"],"session":["english"],"settle":["english"],"setup":["english"],"seven":["english"],"shadow":["english"],"shaft":["english"],"shallow":["english"],"share":["english"],"shed":["english"],"shell":["english"],"sheriff":["english"],"shield":["english"],"shift":["english"],"shine":["english"],"ship":["english"],"shiver":["english"],"shock":["english"],"shoe":["english"],"shoot":["english"],"shop":["english"],"short":["english"],"shoulder":["english"],"shove":["english"],"shrimp":["english"],"shrug":["english"],"shuffle":["english"],"shy":["english"],"sibling":["english"],"sick":["english"],"side":["english"],"siege":["english"],"sight":["english"],"sign":["english"],"silent":["english"],"silk":["english"],"silly":["english"],"silver":["english"],"similar":["english"],"simple":["english","french"],"since":["english"],"sing":["english"],"siren":["english"],"sister":["english"],"situate":["english"],"six":["english"],"size":["english"],"skate":["english"],"sketch":["english"],"ski":["english"],"skill":["english"],"skin":["english"],"skirt":["english"],"skull":["english"],"slab":["english"],"slam":["english"],"sleep":["english"],"slender":["english"],"slice":["english"],"slide":["english"],"slight":["english"],"slim":["english"],"slogan":["english","turkish"],"slot":["english"],"slow":["english"],"slush":["english"],"small":["english"],"smart":["english"],"smile":["english"],"smoke":["english"],"smooth":["english"],"snack":["english"],"snake":["english"],"snap":["english"],"sniff":["english"],"snow":["english"],"soap":["english"],"soccer":["english"],"social":["english","french"],"sock":["english"],"soda":["english"],"soft":["english"],"solar":["english"],"soldier":["english"],"solid":["english"],"solution":["english"],"solve":["english"],"someone":["english"],"song":["english"],"soon":["english"],"sorry":["english"],"sort":["english"],"soul":["english"],"sound":["english"],"soup":["english"],"source":["english","french"],"south":["english"],"space":["english"],"spare":["english"],"spatial":["english","french"],"spawn":["english"],"speak":["english"],"special":["english"],"speed":["english"],"spell":["english"],"spend":["english"],"sphere":["english"],"spice":["english"],"spider":["english"],"spike":["english"],"spin":["english"],"spirit":["english"],"split":["english"],"spoil":["english"],"sponsor":["english","turkish"],"spoon":["english"],"sport":["english"],"spot":["english"],"spray":["english"],"spread":["english"],"spring":["english"],"spy":["english"],"square":["english"],"squeeze":["english"],"squirrel":["english"],"stable":["english","french"],"stadium":["english"],"staff":["english"],"stage":["english"],"stairs":["english"],"stamp":["english"],"stand":["english"],"start":["english"],"state":["english"],"stay":["english"],"steak":["english"],"steel":["english"],"stem":["english"],"step":["english"],"stereo":["english"],"stick":["english"],"still":["english"],"sting":["english"],"stock":["english"],"stomach":["english"],"stone":["english"],"stool":["english"],"story":["english"],"stove":["english"],"strategy":["english"],"street":["english"],"strike":["english"],"strong":["english"],"struggle":["english"],"student":["english"],"stuff":["english"],"stumble":["english"],"style":["english"],"subject":["english"],"submit":["english"],"subway":["english"],"success":["english"],"such":["english"],"sudden":["english"],"suffer":["english"],"sugar":["english"],"suggest":["english"],"suit":["english"],"summer":["english"],"sun":["english"],"sunny":["english"],"sunset":["english"],"super":["english"],"supply":["english"],"supreme":["english"],"sure":["english"],"surface":["english","french"],"surge":["english"],"surprise":["english","french"],"surround":["english"],"survey":["english"],"suspect":["english","french"],"sustain":["english"],"swallow":["english"],"swamp":["english"],"swap":["english"],"swarm":["english"],"swear":["english"],"sweet":["english"],"swift":["english"],"swim":["english"],"swing":["english"],"switch":["english"],"sword":["english"],"symbol":["english"],"symptom":["english"],"syrup":["english"],"system":["english"],"table":["english"],"tackle":["english"],"tag":["english"],"tail":["english"],"talent":["english","french"],"talk":["english"],"tank":["english"],"tape":["english"],"target":["english"],"task":["english"],"taste":["english"],"tattoo":["english"],"taxi":["english"],"teach":["english"],"team":["english"],"tell":["english"],"ten":["english"],"tenant":["english"],"tennis":["english"],"tent":["english"],"term":["english"],"test":["english"],"text":["english"],"thank":["english"],"that":["english"],"theme":["english"],"then":["english"],"theory":["english"],"there":["english"],"they":["english"],"thing":["english"],"this":["english"],"thought":["english"],"three":["english"],"thrive":["english"],"throw":["english"],"thumb":["english"],"thunder":["english"],"ticket":["english"],"tide":["english"],"tiger":["english"],"tilt":["english"],"timber":["english"],"time":["english"],"tiny":["english"],"tip":["english"],"tired":["english"],"tissue":["english"],"title":["english"],"toast":["english"],"tobacco":["english"],"today":["english"],"toddler":["english"],"toe":["english"],"together":["english"],"toilet":["english"],"token":["english"],"tomato":["english"],"tomorrow":["english"],"tone":["english"],"tongue":["english"],"tonight":["english"],"tool":["english"],"tooth":["english"],"top":["english"],"topic":["english"],"topple":["english"],"torch":["english"],"tornado":["english"],"tortoise":["english"],"toss":["english"],"total":["english"],"tourist":["english"],"toward":["english"],"tower":["english"],"town":["english"],"toy":["english"],"track":["english"],"trade":["english"],"traffic":["english"],"tragic":["english"],"train":["english","french"],"transfer":["english","turkish"],"trap":["english"],"trash":["english"],"travel":["english"],"tray":["english"],"treat":["english"],"tree":["english"],"trend":["english"],"trial":["english"],"tribe":["english"],"trick":["english"],"trigger":["english"],"trim":["english"],"trip":["english"],"trophy":["english"],"trouble":["english"],"truck":["english"],"true":["english"],"truly":["english"],"trumpet":["english"],"trust":["english"],"truth":["english"],"try":["english"],"tube":["english"],"tuition":["english"],"tumble":["english"],"tuna":["english"],"tunnel":["english","french"],"turkey":["english"],"turn":["english"],"turtle":["english"],"twelve":["english"],"twenty":["english"],"twice":["english"],"twin":["english"],"twist":["english"],"two":["english"],"type":["english"],"typical":["english"],"ugly":["english"],"umbrella":["english"],"unable":["english"],"unaware":["english"],"uncle":["english"],"uncover":["english"],"under":["english"],"undo":["english"],"unfair":["english"],"unfold":["english"],"unhappy":["english"],"uniform":["english"],"unique":["english","french"],"unit":["english"],"universe":["english"],"unknown":["english"],"unlock":["english"],"until":["english"],"unusual":["english"],"unveil":["english"],"update":["english"],"upgrade":["english"],"uphold":["english"],"upon":["english"],"upper":["english"],"upset":["english"],"urban":["english"],"urge":["english"],"usage":["english","french"],"use":["english"],"used":["english"],"useful":["english"],"useless":["english"],"usual":["english"],"utility":["english"],"vacant":["english"],"vacuum":["english"],"vague":["english","french"],"valid":["english"],"valley":["english"],"valve":["english","french"],"van":["english"],"vanish":["english"],"vapor":["english"],"various":["english"],"vast":["english"],"vault":["english"],"vehicle":["english"],"velvet":["english"],"vendor":["english"],"venture":["english"],"venue":["english"],"verb":["english"],"verify":["english"],"version":["english"],"very":["english"],"vessel":["english"],"veteran":["english"],"viable":["english"],"vibrant":["english"],"vicious":["english"],"victory":["english"],"video":["english"],"view":["english"],"village":["english","french"],"vintage":["english"],"violin":["english"],"virtual":["english"],"virus":["english","french"],"visa":["english"],"visit":["english"],"visual":["english"],"vital":["english","french"],"vivid":["english"],"vocal":["english"],"voice":["english"],"void":["english"],"volcano":["english"],"volume":["english","french"],"vote":["english"],"voyage":["english","french"],"wage":["english"],"wagon":["english","french"],"wait":["english"],"walk":["english"],"wall":["english"],"walnut":["english"],"want":["english"],"warfare":["english"],"warm":["english"],"warrior":["english"],"wash":["english"],"wasp":["english"],"waste":["english"],"water":["english"],"wave":["english"],"way":["english"],"wealth":["english"],"weapon":["english"],"wear":["english"],"weasel":["english"],"weather":["english"],"web":["english"],"wedding":["english"],"weekend":["english"],"weird":["english"],"welcome":["english"],"west":["english"],"wet":["english"],"whale":["english"],"what":["english"],"wheat":["english"],"wheel":["english"],"when":["english"],"where":["english"],"whip":["english"],"whisper":["english"],"wide":["english"],"width":["english"],"wife":["english"],"wild":["english"],"will":["english"],"win":["english"],"window":["english"],"wine":["english"],"wing":["english"],"wink":["english"],"winner":["english"],"winter":["english"],"wire":["english"],"wisdom":["english"],"wise":["english"],"wish":["english"],"witness":["english"],"wolf":["english"],"woman":["english"],"wonder":["english"],"wood":["english"],"wool":["english"],"word":["english"],"work":["english"],"world":["english"],"worry":["english"],"worth":["english"],"wrap":["english"],"wreck":["english"],"wrestle":["english"],"wrist":["english"],"write":["english"],"wrong":["english"],"yard":["english"],"year":["english"],"yellow":["english"],"you":["english"],"young":["english"],"youth":["english"],"zebra":["english"],"zero":["english"],"zone":["english"],"zoo":["english"],"abaisser":["french"],"abdiquer":["french"],"abeille":["french"],"abolir":["french"],"aborder":["french"],"aboutir":["french"],"aboyer":["french"],"abrasif":["french"],"abreuver":["french"],"abriter":["french"],"abroger":["french"],"abrupt":["french"],"absence":["french"],"absolu":["french"],"absurde":["french"],"abusif":["french"],"abyssal":["french"],"académie":["french"],"acajou":["french"],"acarien":["french"],"accabler":["french"],"accepter":["french"],"acclamer":["french"],"accolade":["french"],"accroche":["french"],"accuser":["french"],"acerbe":["french"],"achat":["french"],"acheter":["french"],"aciduler":["french"],"acier":["french"],"acompte":["french"],"acquérir":["french"],"acronyme":["french"],"acteur":["french"],"actif":["french"],"actuel":["french"],"adepte":["french"],"adéquat":["french"],"adhésif":["french"],"adjectif":["french"],"adjuger":["french"],"admettre":["french"],"admirer":["french"],"adopter":["french"],"adorer":["french"],"adoucir":["french"],"adresse":["french"],"adroit":["french"],"adulte":["french"],"adverbe":["french"],"aérer":["french"],"aéronef":["french"],"affaire":["french"],"affecter":["french"],"affiche":["french"],"affreux":["french"],"affubler":["french"],"agacer":["french"],"agencer":["french"],"agile":["french"],"agiter":["french"],"agrafer":["french"],"agréable":["french"],"agrume":["french"],"aider":["french"],"aiguille":["french"],"ailier":["french"],"aimable":["french"],"aisance":["french"],"ajouter":["french"],"ajuster":["french"],"alarmer":["french"],"alchimie":["french"],"alerte":["french"],"algèbre":["french"],"algue":["french"],"aliéner":["french"],"aliment":["french"],"alléger":["french"],"alliage":["french"],"allouer":["french"],"allumer":["french"],"alourdir":["french"],"alpaga":["french"],"altesse":["french"],"alvéole":["french"],"ambigu":["french"],"ambre":["french"],"aménager":["french"],"amertume":["french"],"amidon":["french"],"amiral":["french"],"amorcer":["french"],"amour":["french"],"amovible":["french"],"amphibie":["french"],"ampleur":["french"],"amusant":["french"],"analyse":["french"],"anaphore":["french"],"anarchie":["french"],"anatomie":["french"],"ancien":["french"],"anéantir":["french"],"angoisse":["french"],"anguleux":["french"],"annexer":["french"],"annonce":["french"],"annuel":["french"],"anodin":["french"],"anomalie":["french"],"anonyme":["french"],"anormal":["french"],"antenne":["french"],"antidote":["french"],"anxieux":["french"],"apaiser":["french"],"apéritif":["french"],"aplanir":["french"],"apologie":["french"],"appareil":["french"],"appeler":["french"],"apporter":["french"],"appuyer":["french"],"aquarium":["french"],"aqueduc":["french"],"arbitre":["french"],"arbuste":["french"],"ardeur":["french"],"ardoise":["french"],"argent":["french"],"arlequin":["french"],"armature":["french"],"armement":["french"],"armoire":["french"],"armure":["french"],"arpenter":["french"],"arracher":["french"],"arriver":["french"],"arroser":["french"],"arsenic":["french"],"artériel":["french"],"article":["french"],"asphalte":["french"],"aspirer":["french"],"assaut":["french"],"asservir":["french"],"assiette":["french"],"associer":["french"],"assurer":["french"],"asticot":["french"],"astre":["french"],"astuce":["french"],"atelier":["french"],"atome":["french"],"atrium":["french"],"atroce":["french"],"attaque":["french"],"attentif":["french"],"attirer":["french"],"attraper":["french"],"aubaine":["french"],"auberge":["french"],"audace":["french"],"audible":["french"],"augurer":["french"],"aurore":["french"],"automne":["french"],"autruche":["french"],"avaler":["french"],"avancer":["french"],"avarice":["french"],"avenir":["french"],"averse":["french"],"aveugle":["french"],"aviateur":["french"],"avide":["french"],"avion":["french"],"aviser":["french"],"avoine":["french"],"avouer":["french"],"avril":["french"],"axial":["french"],"axiome":["french"],"bafouer":["french"],"bagage":["french"],"baguette":["french"],"baignade":["french"],"balancer":["french"],"balcon":["french"],"baleine":["french"],"balisage":["french"],"bambin":["french"],"bancaire":["french"],"bandage":["french"],"banlieue":["french"],"bannière":["french"],"banquier":["french"],"barbier":["french"],"baril":["french"],"baron":["french"],"barque":["french"],"barrage":["french"],"bassin":["french"],"bastion":["french"],"bataille":["french"],"bateau":["french"],"batterie":["french"],"baudrier":["french"],"bavarder":["french"],"belette":["french"],"bélier":["french"],"belote":["french"],"bénéfice":["french"],"berceau":["french"],"berger":["french"],"berline":["french"],"bermuda":["french","turkish"],"besace":["french"],"besogne":["french"],"bétail":["french"],"beurre":["french"],"biberon":["french"],"bidule":["french"],"bijou":["french"],"bilan":["french"],"bilingue":["french"],"billard":["french"],"binaire":["french"],"biologie":["french"],"biopsie":["french"],"biotype":["french"],"biscuit":["french"],"bison":["french"],"bistouri":["french"],"bitume":["french"],"bizarre":["french"],"blafard":["french"],"blague":["french"],"blanchir":["french"],"blessant":["french"],"blinder":["french"],"blond":["french"],"bloquer":["french"],"blouson":["french"],"bobard":["french"],"bobine":["french"],"boire":["french"],"boiser":["french"],"bolide":["french"],"bonbon":["french"],"bondir":["french"],"bonheur":["french"],"bonifier":["french"],"bordure":["french"],"borne":["french"],"botte":["french"],"boucle":["french"],"boueux":["french"],"bougie":["french"],"boulon":["french"],"bouquin":["french"],"bourse":["french"],"boussole":["french"],"boutique":["french"],"boxeur":["french"],"branche":["french"],"brasier":["french"],"brebis":["french"],"brèche":["french"],"breuvage":["french"],"bricoler":["french"],"brigade":["french"],"brillant":["french"],"brioche":["french"],"brique":["french"],"brochure":["french"],"broder":["french"],"bronzer":["french"],"brousse":["french"],"broyeur":["french"],"brume":["french"],"brusque":["french"],"brutal":["french"],"bruyant":["french"],"buffle":["french"],"buisson":["french"],"bulletin":["french"],"bureau":["french"],"burin":["french"],"bustier":["french"],"butiner":["french"],"butoir":["french"],"buvable":["french"],"buvette":["french"],"cabanon":["french"],"cabine":["french"],"cachette":["french"],"cadeau":["french"],"cadre":["french"],"caféine":["french"],"caillou":["french"],"caisson":["french"],"calculer":["french"],"calepin":["french"],"calibre":["french"],"calmer":["french"],"calomnie":["french"],"calvaire":["french"],"camarade":["french"],"caméra":["french"],"camion":["french"],"campagne":["french"],"caneton":["french"],"canon":["french"],"cantine":["french"],"canular":["french"],"caporal":["french"],"caprice":["french"],"capsule":["french"],"capter":["french"],"capuche":["french"],"carabine":["french"],"carbone":["french"],"caresser":["french"],"caribou":["french"],"carnage":["french"],"carotte":["french"],"carreau":["french"],"carton":["french"],"cascade":["french"],"casier":["french"],"casque":["french"],"cassure":["french"],"causer":["french"],"cavalier":["french"],"caverne":["french"],"caviar":["french"],"cédille":["french"],"ceinture":["french"],"céleste":["french"],"cellule":["french"],"cendrier":["french"],"censurer":["french"],"central":["french"],"cercle":["french"],"cérébral":["french"],"cerise":["french"],"cerner":["french"],"cerveau":["french"],"cesser":["french"],"chagrin":["french"],"chaise":["french"],"chaleur":["french"],"chambre":["french"],"chance":["french"],"chapitre":["french"],"charbon":["french"],"chasseur":["french"],"chaton":["french"],"chausson":["french"],"chavirer":["french"],"chemise":["french"],"chenille":["french"],"chéquier":["french"],"chercher":["french"],"cheval":["french"],"chien":["french"],"chiffre":["french"],"chignon":["french"],"chimère":["french"],"chiot":["french"],"chlorure":["french"],"chocolat":["french"],"choisir":["french"],"chose":["french"],"chouette":["french"],"chrome":["french"],"chute":["french"],"cigare":["french"],"cigogne":["french"],"cimenter":["french"],"cinéma":["french"],"cintrer":["french"],"circuler":["french"],"cirer":["french"],"cirque":["french"],"citerne":["french"],"citoyen":["french"],"citron":["french"],"clairon":["french"],"clameur":["french"],"claquer":["french"],"classe":["french"],"clavier":["french"],"cligner":["french"],"climat":["french"],"clivage":["french"],"cloche":["french"],"clonage":["french"],"cloporte":["french"],"cobalt":["french"],"cobra":["french"],"cocasse":["french"],"cocotier":["french"],"coder":["french"],"codifier":["french"],"coffre":["french"],"cogner":["french"],"cohésion":["french"],"coiffer":["french"],"coincer":["french"],"colère":["french"],"colibri":["french"],"colline":["french"],"colmater":["french"],"colonel":["french"],"combat":["french"],"comédie":["french"],"commande":["french"],"compact":["french"],"conduire":["french"],"confier":["french"],"congeler":["french"],"connoter":["french"],"consonne":["french"],"contact":["french"],"convexe":["french"],"copain":["french"],"copie":["french"],"corail":["french"],"corbeau":["french"],"cordage":["french"],"corniche":["french"],"corpus":["french"],"cortège":["french"],"cosmique":["french"],"costume":["french"],"coton":["french"],"coude":["french"],"coupure":["french"],"courage":["french"],"couteau":["french"],"couvrir":["french"],"crabe":["french"],"crainte":["french"],"cravate":["french"],"crayon":["french"],"créature":["french"],"créditer":["french"],"crémeux":["french"],"creuser":["french"],"crevette":["french"],"cribler":["french"],"crier":["french"],"cristal":["french"],"critère":["french"],"croire":["french"],"croquer":["french"],"crotale":["french"],"crypter":["french"],"cubique":["french"],"cueillir":["french"],"cuillère":["french"],"cuisine":["french"],"cuivre":["french"],"culminer":["french"],"cultiver":["french"],"cumuler":["french"],"cupide":["french"],"curatif":["french"],"curseur":["french"],"cyanure":["french"],"cylindre":["french"],"cynique":["french"],"daigner":["french"],"damier":["french"],"danseur":["french"],"dauphin":["french"],"débattre":["french"],"débiter":["french"],"déborder":["french"],"débrider":["french"],"débutant":["french"],"décaler":["french"],"décembre":["french"],"déchirer":["french"],"décider":["french"],"déclarer":["french"],"décorer":["french"],"décrire":["french"],"décupler":["french"],"dédale":["french"],"déductif":["french"],"déesse":["french"],"défensif":["french"],"défiler":["french"],"défrayer":["french"],"dégager":["french"],"dégivrer":["french"],"déglutir":["french"],"dégrafer":["french"],"déjeuner":["french"],"délice":["french"],"déloger":["french"],"demander":["french"],"demeurer":["french"],"démolir":["french"],"dénicher":["french"],"dénouer":["french"],"dentelle":["french"],"dénuder":["french"],"départ":["french"],"dépenser":["french"],"déphaser":["french"],"déplacer":["french"],"déposer":["french"],"déranger":["french"],"dérober":["french"],"désastre":["french"],"descente":["french"],"désert":["french"],"désigner":["french"],"désobéir":["french"],"dessiner":["french"],"destrier":["french"],"détacher":["french"],"détester":["french"],"détourer":["french"],"détresse":["french"],"devancer":["french"],"devenir":["french"],"deviner":["french"],"devoir":["french"],"diable":["french"],"dialogue":["french"],"diamant":["french"],"dicter":["french"],"différer":["french"],"digérer":["french"],"digne":["french"],"diluer":["french"],"dimanche":["french"],"diminuer":["french"],"dioxyde":["french"],"directif":["french"],"diriger":["french"],"discuter":["french"],"disposer":["french"],"dissiper":["french"],"divertir":["french"],"diviser":["french"],"docile":["french"],"docteur":["french"],"dogme":["french"],"doigt":["french"],"domaine":["french"],"domicile":["french"],"dompter":["french"],"donateur":["french"],"donjon":["french"],"donner":["french"],"dopamine":["french"],"dortoir":["french"],"dorure":["french"],"dosage":["french"],"doseur":["french"],"dossier":["french"],"dotation":["french"],"douanier":["french"],"douceur":["french"],"douter":["french"],"doyen":["french"],"draper":["french"],"dresser":["french"],"dribbler":["french"],"droiture":["french"],"duperie":["french"],"duplexe":["french"],"durable":["french"],"durcir":["french"],"dynastie":["french"],"éblouir":["french"],"écarter":["french"],"écharpe":["french"],"échelle":["french"],"éclairer":["french"],"éclipse":["french"],"éclore":["french"],"écluse":["french"],"école":["french"],"économie":["french"],"écorce":["french"],"écouter":["french"],"écraser":["french"],"écrémer":["french"],"écrivain":["french"],"écrou":["french"],"écume":["french"],"écureuil":["french"],"édifier":["french"],"éduquer":["french"],"effacer":["french"],"effectif":["french"],"effigie":["french"],"effrayer":["french"],"effusion":["french"],"égaliser":["french"],"égarer":["french"],"éjecter":["french"],"élaborer":["french"],"élargir":["french"],"électron":["french"],"élégant":["french"],"éléphant":["french"],"élève":["french"],"éligible":["french"],"élitisme":["french"],"éloge":["french"],"élucider":["french"],"éluder":["french"],"emballer":["french"],"embellir":["french"],"embryon":["french"],"émeraude":["french"],"émission":["french"],"emmener":["french"],"émotion":["french"],"émouvoir":["french"],"empereur":["french"],"employer":["french"],"emporter":["french"],"emprise":["french"],"émulsion":["french"],"encadrer":["french"],"enchère":["french"],"enclave":["french"],"encoche":["french"],"endiguer":["french"],"endosser":["french"],"endroit":["french"],"enduire":["french"],"énergie":["french"],"enfance":["french"],"enfermer":["french"],"enfouir":["french"],"engager":["french"],"engin":["french","turkish"],"englober":["french"],"énigme":["french"],"enjamber":["french"],"enjeu":["french"],"enlever":["french"],"ennemi":["french"],"ennuyeux":["french"],"enrichir":["french"],"enrobage":["french"],"enseigne":["french"],"entasser":["french"],"entendre":["french"],"entier":["french"],"entourer":["french"],"entraver":["french"],"énumérer":["french"],"envahir":["french"],"enviable":["french"],"envoyer":["french"],"enzyme":["french"],"éolien":["french"],"épaissir":["french"],"épargne":["french"],"épatant":["french"],"épaule":["french"],"épicerie":["french"],"épidémie":["french"],"épier":["french"],"épilogue":["french"],"épine":["french"],"épisode":["french"],"épitaphe":["french"],"époque":["french"],"épreuve":["french"],"éprouver":["french"],"épuisant":["french"],"équerre":["french"],"équipe":["french"],"ériger":["french"],"érosion":["french"],"erreur":["french"],"éruption":["french"],"escalier":["french"],"espadon":["french"],"espèce":["french"],"espiègle":["french"],"espoir":["french"],"esprit":["french"],"esquiver":["french"],"essayer":["french"],"essieu":["french"],"essorer":["french"],"estime":["french"],"estomac":["french"],"estrade":["french"],"étagère":["french"],"étaler":["french"],"étanche":["french"],"étatique":["french"],"éteindre":["french"],"étendoir":["french"],"éternel":["french"],"éthanol":["french"],"éthique":["french"],"ethnie":["french"],"étirer":["french"],"étoffer":["french"],"étoile":["french"],"étonnant":["french"],"étourdir":["french"],"étrange":["french"],"étroit":["french"],"étude":["french"],"euphorie":["french"],"évaluer":["french"],"évasion":["french"],"éventail":["french"],"évidence":["french"],"éviter":["french"],"évolutif":["french"],"évoquer":["french"],"exagérer":["french"],"exaucer":["french"],"exceller":["french"],"excitant":["french"],"exclusif":["french"],"exécuter":["french"],"exemple":["french"],"exercer":["french"],"exhaler":["french"],"exhorter":["french"],"exigence":["french"],"exiler":["french"],"exister":["french"],"exotique":["french"],"expédier":["french"],"explorer":["french"],"exposer":["french"],"exprimer":["french"],"exquis":["french"],"extensif":["french"],"extraire":["french"],"exulter":["french"],"fable":["french"],"fabuleux":["french"],"facette":["french"],"facile":["french"],"facture":["french"],"faiblir":["french"],"falaise":["french"],"fameux":["french"],"famille":["french"],"farceur":["french"],"farfelu":["french"],"farine":["french"],"farouche":["french"],"fasciner":["french"],"faucon":["french"],"fautif":["french"],"faveur":["french"],"favori":["french","turkish"],"fébrile":["french"],"féconder":["french"],"fédérer":["french"],"félin":["french"],"femme":["french"],"fémur":["french"],"fendoir":["french"],"féodal":["french"],"fermer":["french"],"féroce":["french"],"ferveur":["french"],"feuille":["french"],"feutre":["french"],"février":["french"],"fiasco":["french"],"ficeler":["french"],"fictif":["french"],"fidèle":["french"],"filature":["french"],"filetage":["french"],"filière":["french"],"filleul":["french"],"filmer":["french"],"filou":["french"],"filtrer":["french"],"financer":["french"],"finir":["french"],"fiole":["french"],"firme":["french"],"fissure":["french"],"fixer":["french"],"flairer":["french"],"flamme":["french"],"flasque":["french"],"flatteur":["french"],"fléau":["french"],"flèche":["french"],"fleur":["french"],"flexion":["french"],"flocon":["french"],"flore":["french"],"fluctuer":["french"],"fluide":["french"],"fluvial":["french"],"folie":["french"],"fonderie":["french"],"fongible":["french"],"fontaine":["french"],"forcer":["french"],"forgeron":["french"],"formuler":["french"],"fossile":["french"],"foudre":["french"],"fougère":["french"],"fouiller":["french"],"foulure":["french"],"fourmi":["french"],"fraise":["french"],"franchir":["french"],"frapper":["french"],"frayeur":["french"],"frégate":["french"],"freiner":["french"],"frelon":["french"],"frémir":["french"],"frénésie":["french"],"frère":["french"],"friable":["french"],"friction":["french"],"frisson":["french"],"frivole":["french"],"froid":["french"],"fromage":["french"],"frontal":["french"],"frotter":["french"],"fugitif":["french"],"fuite":["french"],"fureur":["french"],"furieux":["french"],"furtif":["french"],"fusion":["french"],"futur":["french"],"gagner":["french"],"galaxie":["french"],"galerie":["french"],"gambader":["french"],"garantir":["french"],"gardien":["french"],"garnir":["french"],"garrigue":["french"],"gazelle":["french"],"gazon":["french"],"géant":["french"],"gélatine":["french"],"gélule":["french"],"gendarme":["french"],"général":["french"],"génie":["french"],"genou":["french"],"gentil":["french"],"géologie":["french"],"géomètre":["french"],"géranium":["french"],"germe":["french"],"gestuel":["french"],"geyser":["french"],"gibier":["french"],"gicler":["french"],"girafe":["french"],"givre":["french"],"glace":["french"],"glaive":["french"],"glisser":["french"],"gloire":["french"],"glorieux":["french"],"golfeur":["french"],"gomme":["french"],"gonfler":["french"],"gorge":["french"],"gorille":["french"],"goudron":["french"],"gouffre":["french"],"goulot":["french"],"goupille":["french"],"gourmand":["french"],"goutte":["french"],"graduel":["french"],"graffiti":["french"],"graine":["french"],"grand":["french"],"grappin":["french"],"gratuit":["french"],"gravir":["french"],"grenat":["french"],"griffure":["french"],"griller":["french"],"grimper":["french"],"grogner":["french"],"gronder":["french"],"grotte":["french"],"groupe":["french"],"gruger":["french"],"grutier":["french"],"gruyère":["french"],"guépard":["french"],"guerrier":["french"],"guimauve":["french"],"guitare":["french"],"gustatif":["french"],"gymnaste":["french"],"gyrostat":["french"],"habitude":["french"],"hachoir":["french"],"halte":["french"],"hameau":["french"],"hangar":["french","turkish"],"hanneton":["french"],"haricot":["french"],"harmonie":["french"],"harpon":["french"],"hasard":["french"],"hélium":["french"],"hématome":["french"],"herbe":["french"],"hérisson":["french"],"hermine":["french"],"héron":["french"],"hésiter":["french"],"heureux":["french"],"hiberner":["french"],"hibou":["french"],"hilarant":["french"],"histoire":["french"],"hiver":["french"],"homard":["french"],"hommage":["french"],"homogène":["french"],"honneur":["french"],"honorer":["french"],"honteux":["french"],"horde":["french"],"horizon":["french"],"horloge":["french"],"hormone":["french"],"horrible":["french"],"houleux":["french"],"housse":["french"],"hublot":["french"],"huileux":["french"],"humain":["french"],"humide":["french"],"humour":["french"],"hurler":["french"],"hydromel":["french"],"hygiène":["french"],"hymne":["french"],"hypnose":["french"],"idylle":["french"],"ignorer":["french"],"iguane":["french"],"illicite":["french"],"illusion":["french"],"imbiber":["french"],"imiter":["french"],"immobile":["french"],"immuable":["french"],"impérial":["french"],"implorer":["french"],"imposer":["french"],"imprimer":["french"],"imputer":["french"],"incarner":["french"],"incendie":["french"],"incident":["french"],"incliner":["french"],"incolore":["french"],"indexer":["french"],"indice":["french"],"inductif":["french"],"inédit":["french"],"ineptie":["french"],"inexact":["french"],"infini":["french"],"infliger":["french"],"informer":["french"],"infusion":["french"],"ingérer":["french"],"inhaler":["french"],"inhiber":["french"],"injecter":["french"],"injure":["french"],"inoculer":["french"],"inonder":["french"],"inscrire":["french"],"insecte":["french"],"insigne":["french"],"insolite":["french"],"inspirer":["french"],"instinct":["french"],"insulter":["french"],"intense":["french"],"intime":["french"],"intrigue":["french"],"intuitif":["french"],"inutile":["french"],"invasion":["french"],"inventer":["french"],"inviter":["french"],"invoquer":["french"],"ironique":["french"],"irradier":["french"],"irréel":["french"],"irriter":["french"],"isoler":["french"],"ivoire":["french"],"ivresse":["french"],"jaillir":["french"],"jambe":["french"],"janvier":["french"],"jardin":["french"],"jauger":["french"],"jaune":["french"],"javelot":["french"],"jetable":["french"],"jeton":["french"],"jeudi":["french"],"jeunesse":["french"],"joindre":["french"],"joncher":["french"],"jongler":["french"],"joueur":["french"],"jouissif":["french"],"journal":["french"],"jovial":["french"],"joyau":["french"],"joyeux":["french"],"jubiler":["french"],"jugement":["french"],"jupon":["french"],"juriste":["french"],"justice":["french"],"juteux":["french"],"juvénile":["french"],"kayak":["french"],"kimono":["french"],"kiosque":["french"],"labial":["french"],"labourer":["french"],"lacérer":["french"],"lactose":["french"],"lagune":["french"],"laine":["french"],"laisser":["french"],"laitier":["french"],"lambeau":["french"],"lamelle":["french"],"lampe":["french"],"lanceur":["french"],"langage":["french"],"lanterne":["french"],"lapin":["french"],"largeur":["french"],"larme":["french"],"laurier":["french"],"lavabo":["french"],"lavoir":["french"],"légal":["french"],"léger":["french"],"légume":["french"],"lessive":["french"],"lettre":["french"],"levier":["french"],"lexique":["french"],"lézard":["french"],"liasse":["french"],"libérer":["french"],"libre":["french"],"licence":["french"],"licorne":["french"],"liège":["french"],"lièvre":["french"],"ligature":["french"],"ligoter":["french"],"ligue":["french"],"limer":["french"],"limite":["french"],"limonade":["french"],"limpide":["french"],"linéaire":["french"],"lingot":["french"],"lionceau":["french"],"liquide":["french"],"lisière":["french"],"lister":["french"],"lithium":["french"],"litige":["french"],"littoral":["french"],"livreur":["french"],"logique":["french"],"lointain":["french"],"loisir":["french"],"lombric":["french"],"loterie":["french"],"louer":["french"],"lourd":["french"],"loutre":["french"],"louve":["french"],"lubie":["french"],"lucide":["french"],"lucratif":["french"],"lueur":["french"],"lugubre":["french"],"luisant":["french"],"lumière":["french"],"lunaire":["french"],"lundi":["french"],"luron":["french"],"lutter":["french"],"luxueux":["french"],"magasin":["french"],"magenta":["french"],"magique":["french"],"maigre":["french"],"maillon":["french"],"maintien":["french"],"mairie":["french"],"maison":["french"],"majorer":["french"],"malaxer":["french"],"maléfice":["french"],"malheur":["french"],"malice":["french"],"mallette":["french"],"mammouth":["french"],"mandater":["french"],"maniable":["french"],"manquant":["french"],"manteau":["french"],"manuel":["french"],"marathon":["french"],"marbre":["french"],"marchand":["french"],"mardi":["french"],"maritime":["french"],"marqueur":["french"],"marron":["french"],"marteler":["french"],"mascotte":["french"],"massif":["french"],"matériel":["french"],"matière":["french"],"matraque":["french"],"maudire":["french"],"maussade":["french"],"mauve":["french"],"maximal":["french"],"méchant":["french"],"méconnu":["french"],"médaille":["french"],"médecin":["french"],"méditer":["french"],"méduse":["french"],"meilleur":["french"],"mélange":["french"],"mélodie":["french"],"membre":["french"],"mémoire":["french"],"menacer":["french"],"mener":["french"],"menhir":["french"],"mensonge":["french"],"mentor":["french"],"mercredi":["french"],"mérite":["french"],"merle":["french"],"messager":["french"],"mesure":["french"],"métal":["french"],"météore":["french"],"méthode":["french"],"métier":["french"],"meuble":["french"],"miauler":["french"],"microbe":["french"],"miette":["french"],"mignon":["french"],"migrer":["french"],"milieu":["french"],"mimique":["french"],"mince":["french"],"minéral":["french"],"minimal":["french"],"minorer":["french"],"miroiter":["french"],"missile":["french"],"mixte":["french"],"moderne":["french"],"moelleux":["french"],"mondial":["french"],"moniteur":["french"],"monnaie":["french"],"monotone":["french"],"monstre":["french"],"montagne":["french"],"monument":["french"],"moqueur":["french"],"morceau":["french"],"morsure":["french"],"mortier":["french"],"moteur":["french"],"motif":["french"],"mouche":["french"],"moufle":["french"],"moulin":["french"],"mousson":["french"],"mouton":["french"],"mouvant":["french"],"multiple":["french"],"munition":["french"],"muraille":["french"],"murène":["french"],"murmure":["french"],"muséum":["french"],"musicien":["french"],"mutation":["french"],"muter":["french"],"mutuel":["french"],"myriade":["french"],"myrtille":["french"],"mystère":["french"],"mythique":["french"],"nageur":["french"],"nappe":["french"],"narquois":["french"],"narrer":["french"],"natation":["french"],"naufrage":["french"],"nautique":["french"],"navire":["french"],"nébuleux":["french"],"nectar":["french"],"néfaste":["french"],"négation":["french"],"négliger":["french"],"négocier":["french"],"neige":["french"],"nerveux":["french"],"nettoyer":["french"],"neurone":["french"],"neutron":["french"],"neveu":["french"],"niche":["french"],"nickel":["french"],"nitrate":["french"],"niveau":["french"],"nocif":["french"],"nocturne":["french"],"noirceur":["french"],"noisette":["french"],"nomade":["french"],"nombreux":["french"],"nommer":["french"],"normatif":["french"],"notifier":["french"],"notoire":["french"],"nourrir":["french"],"nouveau":["french"],"novateur":["french"],"novembre":["french"],"novice":["french"],"nuage":["french"],"nuancer":["french"],"nuire":["french"],"nuisible":["french"],"numéro":["french"],"nuptial":["french"],"nuque":["french"],"nutritif":["french"],"obéir":["french"],"objectif":["french"],"obliger":["french"],"obscur":["french"],"observer":["french"],"obstacle":["french"],"obtenir":["french"],"obturer":["french"],"occasion":["french"],"occuper":["french"],"océan":["french"],"octobre":["french"],"octroyer":["french"],"octupler":["french"],"oculaire":["french"],"odeur":["french"],"odorant":["french"],"offenser":["french"],"officier":["french"],"offrir":["french"],"ogive":["french"],"oiseau":["french"],"oisillon":["french"],"olfactif":["french"],"olivier":["french"],"ombrage":["french"],"omettre":["french"],"onctueux":["french"],"onduler":["french"],"onéreux":["french"],"onirique":["french"],"opale":["french"],"opaque":["french"],"opérer":["french"],"opportun":["french"],"opprimer":["french"],"opter":["french"],"optique":["french"],"orageux":["french"],"orbite":["french"],"ordonner":["french"],"oreille":["french"],"organe":["french"],"orgueil":["french"],"orifice":["french"],"ornement":["french"],"orque":["french"],"ortie":["french"],"osciller":["french"],"osmose":["french"],"ossature":["french"],"otarie":["french"],"ouragan":["french"],"ourson":["french"],"outil":["french"],"outrager":["french"],"ouvrage":["french"],"ovation":["french"],"oxyde":["french"],"oxygène":["french"],"paisible":["french"],"palmarès":["french"],"palourde":["french"],"palper":["french"],"panache":["french"],"pangolin":["french"],"paniquer":["french"],"panneau":["french"],"panorama":["french"],"pantalon":["french"],"papaye":["french"],"papier":["french"],"papoter":["french"],"papyrus":["french"],"paradoxe":["french"],"parcelle":["french"],"paresse":["french"],"parfumer":["french"],"parler":["french"],"parole":["french"],"parrain":["french"],"parsemer":["french"],"partager":["french"],"parure":["french"],"parvenir":["french"],"passion":["french"],"pastèque":["french"],"paternel":["french"],"patience":["french"],"patron":["french","turkish"],"pavillon":["french"],"pavoiser":["french"],"payer":["french"],"paysage":["french"],"peigne":["french"],"peintre":["french"],"pelage":["french"],"pélican":["french"],"pelle":["french"],"pelouse":["french"],"peluche":["french"],"pendule":["french"],"pénétrer":["french"],"pénible":["french"],"pensif":["french"],"pénurie":["french"],"pépite":["french"],"péplum":["french"],"perdrix":["french"],"perforer":["french"],"période":["french"],"permuter":["french"],"perplexe":["french"],"persil":["french"],"perte":["french"],"peser":["french"],"pétale":["french"],"petit":["french"],"pétrir":["french"],"peuple":["french"],"pharaon":["french"],"phobie":["french"],"phoque":["french"],"photon":["french"],"physique":["french"],"pictural":["french"],"pièce":["french"],"pierre":["french"],"pieuvre":["french"],"pilote":["french"],"pinceau":["french"],"pipette":["french"],"piquer":["french"],"pirogue":["french"],"piscine":["french"],"piston":["french"],"pivoter":["french"],"pixel":["french"],"placard":["french"],"plafond":["french"],"plaisir":["french"],"planer":["french"],"plaque":["french"],"plastron":["french"],"plateau":["french"],"pleurer":["french"],"plexus":["french"],"pliage":["french"],"plomb":["french"],"plonger":["french"],"pluie":["french"],"plumage":["french"],"pochette":["french"],"poésie":["french"],"poète":["french"],"pointe":["french"],"poirier":["french"],"poisson":["french"],"poivre":["french"],"polaire":["french"],"policier":["french"],"pollen":["french"],"polygone":["french"],"pommade":["french"],"pompier":["french"],"ponctuel":["french"],"pondérer":["french"],"poney":["french"],"portique":["french"],"posséder":["french"],"posture":["french"],"potager":["french"],"poteau":["french"],"potion":["french"],"pouce":["french"],"poulain":["french"],"poumon":["french"],"pourpre":["french"],"poussin":["french"],"pouvoir":["french"],"prairie":["french"],"pratique":["french"],"précieux":["french"],"prédire":["french"],"préfixe":["french"],"prélude":["french"],"prénom":["french"],"présence":["french"],"prétexte":["french"],"prévoir":["french"],"primitif":["french"],"prince":["french"],"priver":["french"],"problème":["french"],"procéder":["french"],"prodige":["french"],"profond":["french"],"progrès":["french"],"proie":["french"],"projeter":["french"],"prologue":["french"],"promener":["french"],"propre":["french"],"prospère":["french"],"protéger":["french"],"prouesse":["french"],"proverbe":["french"],"prudence":["french"],"pruneau":["french"],"psychose":["french"],"puceron":["french"],"puiser":["french"],"pulpe":["french"],"pulsar":["french"],"punaise":["french"],"punitif":["french"],"pupitre":["french"],"purifier":["french"],"pyramide":["french"],"quasar":["french"],"querelle":["french"],"quiétude":["french"],"quitter":["french"],"quotient":["french"],"racine":["french"],"raconter":["french"],"radieux":["french"],"ragondin":["french"],"raideur":["french"],"raisin":["french"],"ralentir":["french"],"rallonge":["french"],"ramasser":["french"],"rapide":["french"],"rasage":["french"],"ratisser":["french"],"ravager":["french"],"ravin":["french"],"rayonner":["french"],"réactif":["french"],"réagir":["french"],"réaliser":["french"],"réanimer":["french"],"recevoir":["french"],"réciter":["french"],"réclamer":["french"],"récolter":["french"],"recruter":["french"],"reculer":["french"],"recycler":["french"],"rédiger":["french"],"redouter":["french"],"refaire":["french"],"réflexe":["french"],"réformer":["french"],"refrain":["french"],"refuge":["french"],"régalien":["french"],"région":["french"],"réglage":["french"],"régulier":["french"],"réitérer":["french"],"rejeter":["french"],"rejouer":["french"],"relatif":["french"],"relever":["french"],"remarque":["french"],"remède":["french"],"remise":["french"],"remonter":["french"],"remplir":["french"],"remuer":["french"],"renard":["french"],"renfort":["french"],"renifler":["french"],"renoncer":["french"],"rentrer":["french"],"renvoi":["french"],"replier":["french"],"reporter":["french"],"reprise":["french"],"reptile":["french"],"requin":["french"],"réserve":["french"],"résineux":["french"],"résoudre":["french"],"respect":["french"],"rester":["french"],"résultat":["french"],"rétablir":["french"],"retenir":["french"],"réticule":["french"],"retomber":["french"],"retracer":["french"],"réunion":["french"],"réussir":["french"],"revanche":["french"],"revivre":["french"],"révolte":["french"],"révulsif":["french"],"richesse":["french"],"rideau":["french"],"rieur":["french"],"rigide":["french"],"rigoler":["french"],"rincer":["french"],"riposter":["french"],"risible":["french"],"risque":["french"],"rituel":["french"],"rivière":["french"],"rocheux":["french"],"rompre":["french"],"ronce":["french"],"rondin":["french"],"roseau":["french"],"rosier":["french"],"rotatif":["french"],"rotor":["french"],"rotule":["french"],"rouge":["french"],"rouille":["french"],"rouleau":["french"],"routine":["french"],"royaume":["french"],"ruban":["french"],"rubis":["french"],"ruche":["french"],"ruelle":["french"],"rugueux":["french"],"ruiner":["french"],"ruisseau":["french"],"ruser":["french"],"rustique":["french"],"rythme":["french"],"sabler":["french"],"saboter":["french"],"sabre":["french"],"sacoche":["french"],"safari":["french"],"sagesse":["french"],"saisir":["french"],"salade":["french"],"salive":["french"],"saluer":["french"],"samedi":["french"],"sanction":["french"],"sanglier":["french"],"sarcasme":["french"],"sardine":["french"],"saturer":["french"],"saugrenu":["french"],"saumon":["french"],"sauter":["french"],"sauvage":["french"],"savant":["french"],"savonner":["french"],"scalpel":["french"],"scandale":["french"],"scélérat":["french"],"scénario":["french"],"sceptre":["french"],"schéma":["french"],"scinder":["french"],"score":["french"],"scrutin":["french"],"sculpter":["french"],"séance":["french"],"sécable":["french"],"sécher":["french"],"secouer":["french"],"sécréter":["french"],"sédatif":["french"],"séduire":["french"],"seigneur":["french"],"séjour":["french"],"sélectif":["french"],"semaine":["french"],"sembler":["french"],"semence":["french"],"séminal":["french"],"sénateur":["french"],"sensible":["french"],"séparer":["french"],"séquence":["french"],"serein":["french"],"sergent":["french"],"sérieux":["french"],"serrure":["french"],"sérum":["french"],"sésame":["french"],"sévir":["french"],"sevrage":["french"],"sextuple":["french"],"sidéral":["french"],"siècle":["french"],"siéger":["french"],"siffler":["french"],"sigle":["french"],"signal":["french"],"silence":["french"],"silicium":["french"],"sincère":["french"],"sinistre":["french"],"siphon":["french"],"sirop":["french"],"sismique":["french"],"situer":["french"],"skier":["french"],"socle":["french"],"sodium":["french"],"soigneux":["french"],"soldat":["french"],"soleil":["french"],"solitude":["french"],"soluble":["french"],"sombre":["french"],"sommeil":["french"],"somnoler":["french"],"sonde":["french"],"songeur":["french"],"sonnette":["french"],"sonore":["french"],"sorcier":["french"],"sortir":["french"],"sosie":["french"],"sottise":["french"],"soucieux":["french"],"soudure":["french"],"souffle":["french"],"soulever":["french"],"soupape":["french"],"soutirer":["french"],"souvenir":["french"],"spacieux":["french"],"spécial":["french"],"sphère":["french"],"spiral":["french","turkish"],"station":["french"],"sternum":["french"],"stimulus":["french"],"stipuler":["french"],"strict":["french"],"studieux":["french"],"stupeur":["french"],"styliste":["french"],"sublime":["french"],"substrat":["french"],"subtil":["french"],"subvenir":["french"],"succès":["french"],"sucre":["french"],"suffixe":["french"],"suggérer":["french"],"suiveur":["french"],"sulfate":["french"],"superbe":["french"],"supplier":["french"],"suricate":["french"],"surmener":["french"],"sursaut":["french"],"survie":["french"],"syllabe":["french"],"symbole":["french"],"symétrie":["french"],"synapse":["french"],"syntaxe":["french"],"système":["french"],"tabac":["french"],"tablier":["french"],"tactile":["french"],"tailler":["french"],"talisman":["french"],"talonner":["french"],"tambour":["french"],"tamiser":["french"],"tangible":["french"],"tapis":["french"],"taquiner":["french"],"tarder":["french"],"tarif":["french"],"tartine":["french"],"tasse":["french"],"tatami":["french"],"tatouage":["french"],"taupe":["french"],"taureau":["french"],"taxer":["french"],"témoin":["french"],"temporel":["french"],"tenaille":["french"],"tendre":["french"],"teneur":["french"],"tenir":["french"],"tension":["french"],"terminer":["french"],"terne":["french"],"terrible":["french"],"tétine":["french"],"texte":["french"],"thème":["french"],"théorie":["french"],"thérapie":["french"],"thorax":["french"],"tibia":["french"],"tiède":["french"],"timide":["french"],"tirelire":["french"],"tiroir":["french"],"tissu":["french"],"titane":["french"],"titre":["french"],"tituber":["french"],"toboggan":["french"],"tolérant":["french"],"tomate":["french"],"tonique":["french"],"tonneau":["french"],"toponyme":["french"],"torche":["french"],"tordre":["french"],"tornade":["french"],"torpille":["french"],"torrent":["french"],"torse":["french"],"tortue":["french"],"totem":["french"],"toucher":["french"],"tournage":["french"],"tousser":["french"],"toxine":["french"],"traction":["french"],"trafic":["french"],"tragique":["french"],"trahir":["french"],"trancher":["french"],"travail":["french"],"trèfle":["french"],"tremper":["french"],"trésor":["french"],"treuil":["french"],"triage":["french"],"tribunal":["french"],"tricoter":["french"],"trilogie":["french"],"triomphe":["french"],"tripler":["french"],"triturer":["french"],"trivial":["french"],"trombone":["french"],"tronc":["french"],"tropical":["french"],"troupeau":["french"],"tuile":["french"],"tulipe":["french"],"tumulte":["french"],"turbine":["french"],"tuteur":["french"],"tutoyer":["french"],"tuyau":["french"],"tympan":["french"],"typhon":["french"],"typique":["french"],"tyran":["french"],"ubuesque":["french"],"ultime":["french"],"ultrason":["french"],"unanime":["french"],"unifier":["french"],"union":["french"],"unitaire":["french"],"univers":["french"],"uranium":["french"],"urbain":["french"],"urticant":["french"],"usine":["french"],"usuel":["french"],"usure":["french"],"utile":["french"],"utopie":["french"],"vacarme":["french"],"vaccin":["french"],"vagabond":["french"],"vaillant":["french"],"vaincre":["french"],"vaisseau":["french"],"valable":["french"],"valise":["french"],"vallon":["french"],"vampire":["french"],"vanille":["french"],"vapeur":["french"],"varier":["french"],"vaseux":["french"],"vassal":["french"],"vaste":["french"],"vecteur":["french"],"vedette":["french"],"végétal":["french"],"véhicule":["french"],"veinard":["french"],"véloce":["french"],"vendredi":["french"],"vénérer":["french"],"venger":["french"],"venimeux":["french"],"ventouse":["french"],"verdure":["french"],"vérin":["french"],"vernir":["french"],"verrou":["french"],"verser":["french"],"vertu":["french"],"veston":["french"],"vétéran":["french"],"vétuste":["french"],"vexant":["french"],"vexer":["french"],"viaduc":["french"],"viande":["french"],"victoire":["french"],"vidange":["french"],"vidéo":["french"],"vignette":["french"],"vigueur":["french"],"vilain":["french"],"vinaigre":["french"],"violon":["french"],"vipère":["french"],"virement":["french"],"virtuose":["french"],"visage":["french"],"viseur":["french"],"vision":["french"],"visqueux":["french"],"visuel":["french"],"vitesse":["french"],"viticole":["french"],"vitrine":["french"],"vivace":["french"],"vivipare":["french"],"vocation":["french"],"voguer":["french"],"voile":["french"],"voisin":["french"],"voiture":["french"],"volaille":["french"],"volcan":["french"],"voltiger":["french"],"vorace":["french"],"vortex":["french"],"voter":["french"],"vouloir":["french"],"voyelle":["french"],"xénon":["french"],"yacht":["french"],"zèbre":["french"],"zénith":["french"],"zeste":["french"],"zoologie":["french"],"abaco":["italian"],"abbaglio":["italian"],"abbinato":["italian"],"abete":["italian"],"abisso":["italian"],"abolire":["italian"],"abrasivo":["italian"],"abrogato":["italian"],"accadere":["italian"],"accenno":["italian"],"accusato":["italian"],"acetone":["italian"],"achille":["italian"],"acido":["italian"],"acqua":["italian"],"acre":["italian"],"acrilico":["italian"],"acrobata":["italian"],"acuto":["italian"],"adagio":["italian"],"addebito":["italian"],"addome":["italian"],"adeguato":["italian"],"aderire":["italian"],"adipe":["italian"],"adottare":["italian"],"adulare":["italian"],"affabile":["italian"],"affetto":["italian"],"affisso":["italian"],"affranto":["italian"],"aforisma":["italian"],"afoso":["italian"],"africano":["italian"],"agave":["italian"],"agente":["italian"],"agevole":["italian"],"aggancio":["italian"],"agire":["italian"],"agitare":["italian"],"agonismo":["italian"],"agricolo":["italian"],"agrumeto":["italian"],"aguzzo":["italian"],"alabarda":["italian"],"alato":["italian"],"albatro":["italian"],"alberato":["italian"],"albo":["italian"],"albume":["italian"],"alce":["italian"],"alcolico":["italian"],"alettone":["italian"],"alfa":["italian"],"algebra":["italian"],"aliante":["italian"],"alibi":["italian"],"alimento":["italian"],"allagato":["italian"],"allegro":["italian"],"allievo":["italian"],"allodola":["italian"],"allusivo":["italian"],"almeno":["italian"],"alogeno":["italian"],"alpaca":["italian"],"alpestre":["italian"],"altalena":["italian"],"alterno":["italian"],"alticcio":["italian"],"altrove":["italian"],"alunno":["italian"],"alveolo":["italian"],"alzare":["italian"],"amalgama":["italian"],"amanita":["italian"],"amarena":["italian"],"ambito":["italian"],"ambrato":["italian"],"ameba":["italian"],"america":["italian"],"ametista":["italian"],"amico":["italian"],"ammasso":["italian"],"ammenda":["italian"],"ammirare":["italian"],"ammonito":["italian"],"amore":["italian"],"ampio":["italian"],"ampliare":["italian"],"amuleto":["italian"],"anacardo":["italian"],"anagrafe":["italian"],"analista":["italian"],"anarchia":["italian"],"anatra":["italian"],"anca":["italian"],"ancella":["italian"],"ancora":["italian"],"andare":["italian"],"andrea":["italian"],"anello":["italian"],"angelo":["italian"],"angolare":["italian"],"angusto":["italian"],"anima":["italian"],"annegare":["italian"],"annidato":["italian"],"anno":["italian"],"annuncio":["italian"],"anonimo":["italian"],"anticipo":["italian"],"anzi":["italian"],"apatico":["italian"],"apertura":["italian"],"apode":["italian"],"apparire":["italian"],"appetito":["italian"],"appoggio":["italian"],"approdo":["italian"],"appunto":["italian"],"aprile":["italian"],"arabica":["italian"],"arachide":["italian"],"aragosta":["italian"],"araldica":["italian"],"arancio":["italian"],"aratura":["italian"],"arazzo":["italian"],"arbitro":["italian"],"archivio":["italian"],"ardito":["italian"],"arenile":["italian"],"argento":["italian"],"argine":["italian"],"arguto":["italian"],"aria":["italian"],"armonia":["italian"],"arnese":["italian"],"arredato":["italian"],"arringa":["italian"],"arrosto":["italian"],"arsenico":["italian"],"arso":["italian"],"artefice":["italian"],"arzillo":["italian"],"asciutto":["italian"],"ascolto":["italian"],"asepsi":["italian"],"asettico":["italian"],"asfalto":["italian"],"asino":["italian"],"asola":["italian"],"aspirato":["italian"],"aspro":["italian"],"assaggio":["italian"],"asse":["italian"],"assoluto":["italian"],"assurdo":["italian"],"asta":["italian"],"astenuto":["italian"],"astice":["italian"],"astratto":["italian"],"atavico":["italian"],"ateismo":["italian"],"atomico":["italian"],"atono":["italian"],"attesa":["italian"],"attivare":["italian"],"attorno":["italian"],"attrito":["italian"],"attuale":["italian"],"ausilio":["italian"],"austria":["italian"],"autista":["italian"],"autonomo":["italian"],"autunno":["italian"],"avanzato":["italian"],"avere":["italian"],"avvenire":["italian"],"avviso":["italian"],"avvolgere":["italian"],"azione":["italian"],"azoto":["italian"],"azzimo":["italian"],"azzurro":["italian"],"babele":["italian"],"baccano":["italian"],"bacino":["italian"],"baco":["italian"],"badessa":["italian"],"badilata":["italian"],"bagnato":["italian"],"baita":["italian"],"balcone":["italian"],"baldo":["italian"],"balena":["italian"],"ballata":["italian"],"balzano":["italian"],"bambino":["italian"],"bandire":["italian"],"baraonda":["italian"],"barbaro":["italian"],"barca":["italian"],"baritono":["italian"],"barlume":["italian"],"barocco":["italian"],"basilico":["italian"],"basso":["italian"],"batosta":["italian"],"battuto":["italian"],"baule":["italian"],"bava":["italian"],"bavosa":["italian"],"becco":["italian"],"beffa":["italian"],"belgio":["italian"],"belva":["italian"],"benda":["italian"],"benevole":["italian"],"benigno":["italian"],"benzina":["italian"],"bere":["italian"],"berlina":["italian"],"beta":["italian"],"bibita":["italian"],"bici":["italian"],"bidone":["italian"],"bifido":["italian"],"biga":["italian"],"bilancia":["italian"],"bimbo":["italian"],"binocolo":["italian"],"biologo":["italian"],"bipede":["italian"],"bipolare":["italian"],"birbante":["italian"],"birra":["italian"],"biscotto":["italian"],"bisesto":["italian"],"bisnonno":["italian"],"bisonte":["italian"],"bisturi":["italian"],"bizzarro":["italian"],"blando":["italian"],"blatta":["italian"],"bollito":["italian"],"bonifico":["italian"],"bordo":["italian"],"bosco":["italian"],"botanico":["italian"],"bottino":["italian"],"bozzolo":["italian"],"braccio":["italian"],"bradipo":["italian"],"brama":["italian"],"branca":["italian"],"bravura":["italian"],"bretella":["italian"],"brevetto":["italian"],"brezza":["italian"],"briglia":["italian"],"brillante":["italian"],"brindare":["italian"],"broccolo":["italian"],"brodo":["italian"],"bronzina":["italian"],"brullo":["italian"],"bruno":["italian"],"bubbone":["italian"],"buca":["italian"],"budino":["italian"],"buffone":["italian"],"buio":["italian"],"bulbo":["italian"],"buono":["italian"],"burlone":["italian"],"burrasca":["italian"],"bussola":["italian"],"busta":["italian"],"cadetto":["italian"],"caduco":["italian"],"calamaro":["italian"],"calcolo":["italian"],"calesse":["italian"],"calibro":["italian"],"calmo":["italian"],"caloria":["italian"],"cambusa":["italian"],"camerata":["italian"],"camicia":["italian"],"cammino":["italian"],"camola":["italian"],"campale":["italian"],"canapa":["italian"],"candela":["italian"],"cane":["italian"],"canino":["italian"],"canotto":["italian"],"cantina":["italian"],"capace":["italian"],"capello":["italian"],"capitolo":["italian"],"capogiro":["italian"],"cappero":["italian"],"capra":["italian"],"capsula":["italian"],"carapace":["italian"],"carcassa":["italian"],"cardo":["italian"],"carisma":["italian"],"carovana":["italian"],"carretto":["italian"],"cartolina":["italian"],"casaccio":["italian"],"cascata":["italian"],"caserma":["italian"],"caso":["italian"],"cassone":["italian"],"castello":["italian"],"casuale":["italian"],"catasta":["italian"],"catena":["italian"],"catrame":["italian"],"cauto":["italian"],"cavillo":["italian"],"cedibile":["italian"],"cedrata":["italian"],"cefalo":["italian"],"celebre":["italian"],"cellulare":["italian"],"cena":["italian"],"cenone":["italian"],"centesimo":["italian"],"ceramica":["italian"],"cercare":["italian"],"certo":["italian"],"cerume":["italian"],"cervello":["italian"],"cesoia":["italian"],"cespo":["italian"],"ceto":["italian"],"chela":["italian"],"chiaro":["italian"],"chicca":["italian"],"chiedere":["italian"],"chimera":["italian"],"china":["italian"],"chirurgo":["italian"],"chitarra":["italian"],"ciao":["italian"],"ciclismo":["italian"],"cifrare":["italian"],"cigno":["italian"],"cilindro":["italian"],"ciottolo":["italian"],"circa":["italian"],"cirrosi":["italian"],"citrico":["italian"],"cittadino":["italian"],"ciuffo":["italian"],"civetta":["italian"],"civile":["italian"],"classico":["italian"],"clinica":["italian"],"cloro":["italian"],"cocco":["italian"],"codardo":["italian"],"codice":["italian"],"coerente":["italian"],"cognome":["italian"],"collare":["italian"],"colmato":["italian"],"colore":["italian"],"colposo":["italian"],"coltivato":["italian"],"colza":["italian"],"coma":["italian"],"cometa":["italian"],"commando":["italian"],"comodo":["italian"],"computer":["italian"],"comune":["italian"],"conciso":["italian"],"condurre":["italian"],"conferma":["italian"],"congelare":["italian"],"coniuge":["italian"],"connesso":["italian"],"conoscere":["italian"],"consumo":["italian"],"continuo":["italian"],"convegno":["italian"],"coperto":["italian"],"copione":["italian"],"coppia":["italian"],"copricapo":["italian"],"corazza":["italian"],"cordata":["italian"],"coricato":["italian"],"cornice":["italian"],"corolla":["italian"],"corpo":["italian"],"corredo":["italian"],"corsia":["italian"],"cortese":["italian"],"cosmico":["italian"],"costante":["italian"],"cottura":["italian"],"covato":["italian"],"cratere":["italian"],"cravatta":["italian"],"creato":["italian"],"credere":["italian"],"cremoso":["italian"],"crescita":["italian"],"creta":["italian"],"criceto":["italian"],"crinale":["italian"],"crisi":["italian"],"critico":["italian"],"croce":["italian"],"cronaca":["italian"],"crostata":["italian"],"cruciale":["italian"],"crusca":["italian"],"cucire":["italian"],"cuculo":["italian"],"cugino":["italian"],"cullato":["italian"],"cupola":["italian"],"curatore":["italian"],"cursore":["italian"],"curvo":["italian"],"cuscino":["italian"],"custode":["italian"],"dado":["italian"],"daino":["italian"],"dalmata":["italian"],"damerino":["italian"],"daniela":["italian"],"dannoso":["italian"],"danzare":["italian"],"datato":["italian"],"davanti":["italian"],"davvero":["italian"],"debutto":["italian"],"decennio":["italian"],"deciso":["italian"],"declino":["italian"],"decollo":["italian"],"decreto":["italian"],"dedicato":["italian"],"definito":["italian"],"deforme":["italian"],"degno":["italian"],"delegare":["italian"],"delfino":["italian"],"delirio":["italian"],"delta":["italian"],"demenza":["italian"],"denotato":["italian"],"dentro":["italian"],"deposito":["italian"],"derapata":["italian"],"derivare":["italian"],"deroga":["italian"],"descritto":["italian"],"deserto":["italian"],"desiderio":["italian"],"desumere":["italian"],"detersivo":["italian"],"devoto":["italian"],"diametro":["italian"],"dicembre":["italian"],"diedro":["italian"],"difeso":["italian"],"diffuso":["italian"],"digerire":["italian"],"digitale":["italian"],"diluvio":["italian"],"dinamico":["italian"],"dinnanzi":["italian"],"dipinto":["italian"],"diploma":["italian"],"dipolo":["italian"],"diradare":["italian"],"dire":["italian"],"dirotto":["italian"],"dirupo":["italian"],"disagio":["italian"],"discreto":["italian"],"disfare":["italian"],"disgelo":["italian"],"disposto":["italian"],"distanza":["italian"],"disumano":["italian"],"dito":["italian"],"divano":["italian"],"divelto":["italian"],"dividere":["italian"],"divorato":["italian"],"doblone":["italian"],"docente":["italian"],"doganale":["italian"],"dogma":["italian"],"dolce":["italian"],"domato":["italian"],"domenica":["italian"],"dominare":["italian"],"dondolo":["italian"],"dono":["italian"],"dormire":["italian"],"dote":["italian"],"dottore":["italian"],"dovuto":["italian"],"dozzina":["italian"],"drago":["italian"],"druido":["italian"],"dubbio":["italian"],"dubitare":["italian"],"ducale":["italian"],"duna":["italian"],"duomo":["italian"],"duplice":["italian"],"duraturo":["italian"],"ebano":["italian"],"eccesso":["italian"],"ecco":["italian"],"eclissi":["italian"],"economia":["italian"],"edera":["italian"],"edicola":["italian"],"edile":["italian"],"editoria":["italian"],"educare":["italian"],"egemonia":["italian"],"egli":["italian"],"egoismo":["italian"],"egregio":["italian"],"elaborato":["italian"],"elargire":["italian"],"elegante":["italian"],"elencato":["italian"],"eletto":["italian"],"elevare":["italian"],"elfico":["italian"],"elica":["italian"],"elmo":["italian"],"elsa":["italian"],"eluso":["italian"],"emanato":["italian"],"emblema":["italian"],"emesso":["italian"],"emiro":["italian"],"emotivo":["italian"],"emozione":["italian"],"empirico":["italian"],"emulo":["italian"],"endemico":["italian"],"enduro":["italian"],"energia":["italian"],"enfasi":["italian"],"enoteca":["italian"],"entrare":["italian"],"enzima":["italian"],"epatite":["italian"],"epilogo":["italian"],"episodio":["italian"],"epocale":["italian"],"eppure":["italian"],"equatore":["italian"],"erario":["italian"],"erba":["italian"],"erboso":["italian"],"erede":["italian"],"eremita":["italian"],"erigere":["italian"],"ermetico":["italian"],"eroe":["italian"],"erosivo":["italian"],"errante":["italian"],"esagono":["italian"],"esame":["italian"],"esanime":["italian"],"esaudire":["italian"],"esca":["italian"],"esempio":["italian"],"esercito":["italian"],"esibito":["italian"],"esigente":["italian"],"esistere":["italian"],"esito":["italian"],"esofago":["italian"],"esortato":["italian"],"esoso":["italian"],"espanso":["italian"],"espresso":["italian"],"essenza":["italian"],"esso":["italian"],"esteso":["italian"],"estimare":["italian"],"estonia":["italian"],"estroso":["italian"],"esultare":["italian"],"etilico":["italian"],"etnico":["italian"],"etrusco":["italian"],"etto":["italian"],"euclideo":["italian"],"europa":["italian"],"evaso":["italian"],"evidenza":["italian"],"evitato":["italian"],"evoluto":["italian"],"evviva":["italian"],"fabbrica":["italian"],"faccenda":["italian"],"fachiro":["italian"],"falco":["italian"],"famiglia":["italian"],"fanale":["italian"],"fanfara":["italian"],"fango":["italian"],"fantasma":["italian"],"fare":["italian"],"farfalla":["italian"],"farinoso":["italian"],"farmaco":["italian"],"fascia":["italian"],"fastoso":["italian"],"fasullo":["italian"],"faticare":["italian"],"fato":["italian"],"favoloso":["italian"],"febbre":["italian"],"fecola":["italian"],"fede":["italian"],"fegato":["italian"],"felpa":["italian"],"feltro":["italian"],"femmina":["italian"],"fendere":["italian"],"fenomeno":["italian"],"fermento":["italian"],"ferro":["italian"],"fertile":["italian"],"fessura":["italian"],"festivo":["italian"],"fetta":["italian"],"feudo":["italian"],"fiaba":["italian"],"fiducia":["italian"],"fifa":["italian"],"figurato":["italian"],"filo":["italian","turkish"],"finanza":["italian"],"finestra":["italian"],"finire":["italian"],"fiore":["italian"],"fiscale":["italian"],"fisico":["italian"],"fiume":["italian"],"flacone":["italian"],"flamenco":["italian"],"flebo":["italian"],"flemma":["italian"],"florido":["italian"],"fluente":["italian"],"fluoro":["italian"],"fobico":["italian"],"focaccia":["italian"],"focoso":["italian"],"foderato":["italian"],"foglio":["italian"],"folata":["italian"],"folclore":["italian"],"folgore":["italian"],"fondente":["italian"],"fonetico":["italian"],"fonia":["italian"],"fontana":["italian"],"forbito":["italian"],"forchetta":["italian"],"foresta":["italian"],"formica":["italian"],"fornaio":["italian"],"foro":["italian"],"fortezza":["italian"],"forzare":["italian"],"fosfato":["italian"],"fosso":["italian"],"fracasso":["italian"],"frana":["italian"],"frassino":["italian"],"fratello":["italian"],"freccetta":["italian"],"frenata":["italian"],"fresco":["italian"],"frigo":["italian"],"frollino":["italian"],"fronde":["italian"],"frugale":["italian"],"frutta":["italian"],"fucilata":["italian"],"fucsia":["italian"],"fuggente":["italian"],"fulmine":["italian"],"fulvo":["italian"],"fumante":["italian"],"fumetto":["italian"],"fumoso":["italian"],"fune":["italian"],"funzione":["italian"],"fuoco":["italian"],"furbo":["italian"],"furgone":["italian"],"furore":["italian"],"fuso":["italian"],"futile":["italian"],"gabbiano":["italian"],"gaffe":["italian"],"galateo":["italian"],"gallina":["italian"],"galoppo":["italian"],"gambero":["italian"],"gamma":["italian"],"garanzia":["italian"],"garbo":["italian"],"garofano":["italian"],"garzone":["italian"],"gasdotto":["italian"],"gasolio":["italian"],"gastrico":["italian"],"gatto":["italian"],"gaudio":["italian"],"gazebo":["italian"],"gazzella":["italian"],"geco":["italian"],"gelatina":["italian"],"gelso":["italian"],"gemello":["italian"],"gemmato":["italian"],"gene":["italian"],"genitore":["italian"],"gennaio":["italian"],"genotipo":["italian"],"gergo":["italian"],"ghepardo":["italian"],"ghiaccio":["italian"],"ghisa":["italian"],"giallo":["italian"],"gilda":["italian"],"ginepro":["italian"],"giocare":["italian"],"gioiello":["italian"],"giorno":["italian"],"giove":["italian"],"girato":["italian"],"girone":["italian"],"gittata":["italian"],"giudizio":["italian"],"giurato":["italian"],"giusto":["italian"],"globulo":["italian"],"glutine":["italian"],"gnomo":["italian"],"gobba":["italian"],"golf":["italian"],"gomito":["italian"],"gommone":["italian"],"gonfio":["italian"],"gonna":["italian"],"governo":["italian"],"gracile":["italian"],"grado":["italian"],"grafico":["italian"],"grammo":["italian"],"grande":["italian"],"grattare":["italian"],"gravoso":["italian"],"grazia":["italian"],"greca":["italian"],"gregge":["italian"],"grifone":["italian"],"grigio":["italian"],"grinza":["italian"],"grotta":["italian"],"gruppo":["italian"],"guadagno":["italian"],"guaio":["italian"],"guanto":["italian"],"guardare":["italian"],"gufo":["italian"],"guidare":["italian"],"ibernato":["italian"],"icona":["italian"],"identico":["italian"],"idillio":["italian"],"idolo":["italian"],"idra":["italian"],"idrico":["italian"],"idrogeno":["italian"],"igiene":["italian"],"ignaro":["italian"],"ignorato":["italian"],"ilare":["italian"],"illeso":["italian"],"illogico":["italian"],"illudere":["italian"],"imballo":["italian"],"imbevuto":["italian"],"imbocco":["italian"],"imbuto":["italian"],"immane":["italian"],"immerso":["italian"],"immolato":["italian"],"impacco":["italian"],"impeto":["italian"],"impiego":["italian"],"importo":["italian"],"impronta":["italian"],"inalare":["italian"],"inarcare":["italian"],"inattivo":["italian"],"incanto":["italian"],"incendio":["italian"],"inchino":["italian"],"incisivo":["italian"],"incluso":["italian"],"incontro":["italian"],"incrocio":["italian"],"incubo":["italian"],"indagine":["italian"],"india":["italian"],"indole":["italian"],"inedito":["italian"],"infatti":["italian"],"infilare":["italian"],"inflitto":["italian"],"ingaggio":["italian"],"ingegno":["italian"],"inglese":["italian"],"ingordo":["italian"],"ingrosso":["italian"],"innesco":["italian"],"inodore":["italian"],"inoltrare":["italian"],"inondato":["italian"],"insano":["italian"],"insetto":["italian"],"insieme":["italian"],"insonnia":["italian"],"insulina":["italian"],"intasato":["italian"],"intero":["italian"],"intonaco":["italian"],"intuito":["italian"],"inumidire":["italian"],"invalido":["italian"],"invece":["italian"],"invito":["italian"],"iperbole":["italian"],"ipnotico":["italian"],"ipotesi":["italian"],"ippica":["italian"],"iride":["italian"],"irlanda":["italian"],"ironico":["italian"],"irrigato":["italian"],"irrorare":["italian"],"isolato":["italian"],"isotopo":["italian"],"isterico":["italian"],"istituto":["italian"],"istrice":["italian"],"italia":["italian"],"iterare":["italian"],"labbro":["italian"],"labirinto":["italian"],"lacca":["italian"],"lacerato":["italian"],"lacrima":["italian"],"lacuna":["italian"],"laddove":["italian"],"lago":["italian"],"lampo":["italian"],"lancetta":["italian"],"lanterna":["italian"],"lardoso":["italian"],"larga":["italian"],"laringe":["italian"],"lastra":["italian"],"latenza":["italian"],"latino":["italian"],"lattuga":["italian"],"lavagna":["italian"],"lavoro":["italian"],"legale":["italian"],"leggero":["italian"],"lembo":["italian"],"lentezza":["italian"],"lenza":["italian"],"leone":["italian"],"lepre":["italian"],"lesivo":["italian"],"lessato":["italian"],"lesto":["italian"],"letterale":["italian"],"leva":["italian"],"levigato":["italian"],"libero":["italian"],"lido":["italian"],"lievito":["italian"],"lilla":["italian"],"limatura":["italian"],"limitare":["italian"],"limpido":["italian"],"lineare":["italian"],"lingua":["italian"],"liquido":["italian"],"lira":["italian"],"lirica":["italian"],"lisca":["italian"],"lite":["italian"],"litigio":["italian"],"livrea":["italian"],"locanda":["italian"],"lode":["italian"],"logica":["italian"],"lombare":["italian"],"londra":["italian"],"longevo":["italian"],"loquace":["italian"],"lorenzo":["italian"],"loto":["italian"],"lotteria":["italian"],"luce":["italian"],"lucidato":["italian"],"lumaca":["italian"],"luminoso":["italian"],"lungo":["italian"],"lupo":["italian"],"luppolo":["italian"],"lusinga":["italian"],"lusso":["italian"],"lutto":["italian"],"macabro":["italian"],"macchina":["italian"],"macero":["italian"],"macinato":["italian"],"madama":["italian"],"magico":["italian"],"maglia":["italian"],"magnete":["italian"],"magro":["italian"],"maiolica":["italian"],"malafede":["italian"],"malgrado":["italian"],"malinteso":["italian"],"malsano":["italian"],"malto":["italian"],"malumore":["italian"],"mana":["italian"],"mancia":["italian"],"mandorla":["italian"],"mangiare":["italian"],"manifesto":["italian"],"mannaro":["italian"],"manovra":["italian"],"mansarda":["italian"],"mantide":["italian"],"manubrio":["italian"],"mappa":["italian"],"maratona":["italian"],"marcire":["italian"],"maretta":["italian"],"marmo":["italian"],"marsupio":["italian"],"maschera":["italian"],"massaia":["italian"],"mastino":["italian"],"materasso":["italian"],"matricola":["italian"],"mattone":["italian"],"maturo":["italian"],"mazurca":["italian"],"meandro":["italian"],"meccanico":["italian"],"mecenate":["italian"],"medesimo":["italian"],"meditare":["italian"],"mega":["italian"],"melassa":["italian"],"melis":["italian"],"melodia":["italian"],"meninge":["italian"],"meno":["italian"],"mensola":["italian"],"mercurio":["italian"],"merenda":["italian"],"merlo":["italian"],"meschino":["italian"],"mese":["italian"],"messere":["italian"],"mestolo":["italian"],"metallo":["italian"],"metodo":["italian"],"mettere":["italian"],"miagolare":["italian"],"mica":["italian"],"micelio":["italian"],"michele":["italian"],"microbo":["italian"],"midollo":["italian"],"miele":["italian"],"migliore":["italian"],"milano":["italian"],"milite":["italian"],"mimosa":["italian"],"minerale":["italian"],"mini":["italian"],"minore":["italian"],"mirino":["italian"],"mirtillo":["italian"],"miscela":["italian"],"missiva":["italian"],"misto":["italian"],"misurare":["italian"],"mitezza":["italian"],"mitigare":["italian"],"mitra":["italian"],"mittente":["italian"],"mnemonico":["italian"],"modello":["italian"],"modifica":["italian"],"modulo":["italian"],"mogano":["italian"],"mogio":["italian"],"mole":["italian"],"molosso":["italian"],"monastero":["italian"],"monco":["italian"],"mondina":["italian"],"monetario":["italian"],"monile":["italian"],"monotono":["italian"],"monsone":["italian"],"montato":["italian"],"monviso":["italian"],"mora":["italian"],"mordere":["italian"],"morsicato":["italian"],"mostro":["italian"],"motivato":["italian"],"motosega":["italian"],"motto":["italian"],"movenza":["italian"],"movimento":["italian"],"mozzo":["italian"],"mucca":["italian"],"mucosa":["italian"],"muffa":["italian"],"mughetto":["italian"],"mugnaio":["italian"],"mulatto":["italian"],"mulinello":["italian"],"multiplo":["italian"],"mummia":["italian"],"munto":["italian"],"muovere":["italian"],"murale":["italian"],"musa":["italian"],"muscolo":["italian"],"musica":["italian"],"mutevole":["italian"],"muto":["italian"],"nababbo":["italian"],"nafta":["italian"],"nanometro":["italian"],"narciso":["italian"],"narice":["italian"],"narrato":["italian"],"nascere":["italian"],"nastrare":["italian"],"naturale":["italian"],"nautica":["italian"],"naviglio":["italian"],"nebulosa":["italian"],"necrosi":["italian"],"negativo":["italian"],"negozio":["italian"],"nemmeno":["italian"],"neofita":["italian"],"neretto":["italian"],"nervo":["italian"],"nessuno":["italian"],"nettuno":["italian"],"neutrale":["italian"],"neve":["italian"],"nevrotico":["italian"],"nicchia":["italian"],"ninfa":["italian"],"nitido":["italian"],"nobile":["italian"],"nocivo":["italian"],"nodo":["italian"],"nome":["italian"],"nomina":["italian"],"nordico":["italian"],"normale":["italian"],"norvegese":["italian"],"nostrano":["italian"],"notare":["italian"],"notizia":["italian"],"notturno":["italian"],"novella":["italian"],"nucleo":["italian"],"nulla":["italian"],"numero":["italian"],"nuovo":["italian"],"nutrire":["italian"],"nuvola":["italian"],"nuziale":["italian"],"oasi":["italian"],"obbedire":["italian"],"obbligo":["italian"],"obelisco":["italian"],"oblio":["italian"],"obolo":["italian"],"obsoleto":["italian"],"occasione":["italian"],"occhio":["italian"],"occidente":["italian"],"occorrere":["italian"],"occultare":["italian"],"ocra":["italian"],"oculato":["italian"],"odierno":["italian"],"odorare":["italian"],"offerta":["italian"],"offrire":["italian"],"offuscato":["italian"],"oggetto":["italian"],"oggi":["italian"],"ognuno":["italian"],"olandese":["italian"],"olfatto":["italian"],"oliato":["italian"],"oliva":["italian"],"ologramma":["italian"],"oltre":["italian"],"omaggio":["italian"],"ombelico":["italian"],"ombra":["italian"],"omega":["italian"],"omissione":["italian"],"ondoso":["italian"],"onere":["italian"],"onice":["italian"],"onnivoro":["italian"],"onorevole":["italian"],"onta":["italian"],"operato":["italian"],"opinione":["italian"],"opposto":["italian"],"oracolo":["italian"],"orafo":["italian"],"ordine":["italian"],"orecchino":["italian"],"orefice":["italian"],"orfano":["italian"],"organico":["italian"],"origine":["italian"],"orizzonte":["italian"],"orma":["italian"],"ormeggio":["italian"],"ornativo":["italian"],"orologio":["italian"],"orrendo":["italian"],"orribile":["italian"],"ortensia":["italian"],"ortica":["italian"],"orzata":["italian"],"orzo":["italian"],"osare":["italian"],"oscurare":["italian"],"osmosi":["italian"],"ospedale":["italian"],"ospite":["italian"],"ossa":["italian"],"ossidare":["italian"],"ostacolo":["italian"],"oste":["italian"],"otite":["italian"],"otre":["italian"],"ottagono":["italian"],"ottimo":["italian"],"ottobre":["italian"],"ovale":["italian"],"ovest":["italian"],"ovino":["italian"],"oviparo":["italian"],"ovocito":["italian"],"ovunque":["italian"],"ovviare":["italian"],"ozio":["italian"],"pacchetto":["italian"],"pace":["italian"],"pacifico":["italian"],"padella":["italian"],"padrone":["italian"],"paese":["italian"],"paga":["italian"],"pagina":["italian"],"palazzina":["italian"],"palesare":["italian"],"pallido":["italian"],"palo":["italian"],"palude":["italian"],"pandoro":["italian"],"pannello":["italian"],"paolo":["italian"],"paonazzo":["italian"],"paprica":["italian"],"parabola":["italian"],"parcella":["italian"],"parere":["italian"],"pargolo":["italian"],"pari":["italian"],"parlato":["italian"],"parola":["italian"],"partire":["italian"],"parvenza":["italian"],"parziale":["italian"],"passivo":["italian"],"pasticca":["italian"],"patacca":["italian"],"patologia":["italian"],"pattume":["italian"],"pavone":["italian"],"peccato":["italian"],"pedalare":["italian"],"pedonale":["italian"],"peggio":["italian"],"peloso":["italian"],"penare":["italian"],"pendice":["italian"],"penisola":["italian"],"pennuto":["italian"],"penombra":["italian"],"pensare":["italian"],"pentola":["italian"],"pepe":["italian"],"pepita":["italian"],"perbene":["italian"],"percorso":["italian"],"perdonato":["italian"],"perforare":["italian"],"pergamena":["italian"],"periodo":["italian"],"permesso":["italian"],"perno":["italian"],"perplesso":["italian"],"persuaso":["italian"],"pertugio":["italian"],"pervaso":["italian"],"pesatore":["italian"],"pesista":["italian"],"peso":["italian"],"pestifero":["italian"],"petalo":["italian"],"pettine":["italian"],"petulante":["italian"],"pezzo":["italian"],"piacere":["italian"],"pianta":["italian"],"piattino":["italian"],"piccino":["italian"],"picozza":["italian"],"piega":["italian"],"pietra":["italian"],"piffero":["italian"],"pigiama":["italian"],"pigolio":["italian"],"pigro":["italian"],"pila":["italian"],"pilifero":["italian"],"pillola":["italian"],"pilota":["italian"],"pimpante":["italian"],"pineta":["italian"],"pinna":["italian"],"pinolo":["italian"],"pioggia":["italian"],"piombo":["italian"],"piramide":["italian"],"piretico":["italian"],"pirite":["italian"],"pirolisi":["italian"],"pitone":["italian"],"pizzico":["italian"],"placebo":["italian"],"planare":["italian"],"plasma":["italian"],"platano":["italian"],"plenario":["italian"],"pochezza":["italian"],"poderoso":["italian"],"podismo":["italian"],"poesia":["italian"],"poggiare":["italian"],"polenta":["italian"],"poligono":["italian"],"pollice":["italian"],"polmonite":["italian"],"polpetta":["italian"],"polso":["italian"],"poltrona":["italian"],"polvere":["italian"],"pomice":["italian"],"pomodoro":["italian"],"ponte":["italian"],"popoloso":["italian"],"porfido":["italian"],"poroso":["italian"],"porpora":["italian"],"porre":["italian"],"portata":["italian"],"posa":["italian","turkish"],"positivo":["italian"],"possesso":["italian"],"postulato":["italian"],"potassio":["italian"],"potere":["italian"],"pranzo":["italian"],"prassi":["italian"],"pratica":["italian"],"precluso":["italian"],"predica":["italian"],"prefisso":["italian"],"pregiato":["italian"],"prelievo":["italian"],"premere":["italian"],"prenotare":["italian"],"preparato":["italian"],"presenza":["italian"],"pretesto":["italian"],"prevalso":["italian"],"prima":["italian"],"principe":["italian"],"privato":["italian"],"problema":["italian"],"procura":["italian"],"produrre":["italian"],"profumo":["italian"],"progetto":["italian"],"prolunga":["italian"],"promessa":["italian"],"pronome":["italian"],"proposta":["italian"],"proroga":["italian"],"proteso":["italian"],"prova":["italian","turkish"],"prudente":["italian"],"prugna":["italian"],"prurito":["italian"],"psiche":["italian"],"pubblico":["italian"],"pudica":["italian"],"pugilato":["italian"],"pugno":["italian"],"pulce":["italian"],"pulito":["italian"],"pulsante":["italian"],"puntare":["italian"],"pupazzo":["italian"],"pupilla":["italian"],"puro":["italian"],"quadro":["italian"],"qualcosa":["italian"],"quasi":["italian"],"querela":["italian"],"quota":["italian"],"raccolto":["italian"],"raddoppio":["italian"],"radicale":["italian"],"radunato":["italian"],"raffica":["italian"],"ragazzo":["italian"],"ragione":["italian"],"ragno":["italian"],"ramarro":["italian"],"ramingo":["italian"],"ramo":["italian"],"randagio":["italian"],"rantolare":["italian"],"rapato":["italian"],"rapina":["italian"],"rappreso":["italian"],"rasatura":["italian"],"raschiato":["italian"],"rasente":["italian"],"rassegna":["italian"],"rastrello":["italian"],"rata":["italian"],"ravveduto":["italian"],"reale":["italian"],"recepire":["italian"],"recinto":["italian"],"recluta":["italian"],"recondito":["italian"],"recupero":["italian"],"reddito":["italian"],"redimere":["italian"],"regalato":["italian"],"registro":["italian"],"regola":["italian"],"regresso":["italian"],"relazione":["italian"],"remare":["italian"],"remoto":["italian"],"renna":["italian"],"replica":["italian"],"reprimere":["italian"],"reputare":["italian"],"resa":["italian"],"residente":["italian"],"responso":["italian"],"restauro":["italian"],"rete":["italian"],"retina":["italian"],"retorica":["italian"],"rettifica":["italian"],"revocato":["italian"],"riassunto":["italian"],"ribadire":["italian"],"ribelle":["italian"],"ribrezzo":["italian"],"ricarica":["italian"],"ricco":["italian"],"ricevere":["italian"],"riciclato":["italian"],"ricordo":["italian"],"ricreduto":["italian"],"ridicolo":["italian"],"ridurre":["italian"],"rifasare":["italian"],"riflesso":["italian"],"riforma":["italian"],"rifugio":["italian"],"rigare":["italian"],"rigettato":["italian"],"righello":["italian"],"rilassato":["italian"],"rilevato":["italian"],"rimanere":["italian"],"rimbalzo":["italian"],"rimedio":["italian"],"rimorchio":["italian"],"rinascita":["italian"],"rincaro":["italian"],"rinforzo":["italian"],"rinnovo":["italian"],"rinomato":["italian"],"rinsavito":["italian"],"rintocco":["italian"],"rinuncia":["italian"],"rinvenire":["italian"],"riparato":["italian"],"ripetuto":["italian"],"ripieno":["italian"],"riportare":["italian"],"ripresa":["italian"],"ripulire":["italian"],"risata":["italian"],"rischio":["italian"],"riserva":["italian"],"risibile":["italian"],"riso":["italian"],"rispetto":["italian"],"ristoro":["italian"],"risultato":["italian"],"risvolto":["italian"],"ritardo":["italian"],"ritegno":["italian"],"ritmico":["italian"],"ritrovo":["italian"],"riunione":["italian"],"riva":["italian"],"riverso":["italian"],"rivincita":["italian"],"rivolto":["italian"],"rizoma":["italian"],"roba":["italian"],"robotico":["italian"],"robusto":["italian"],"roccia":["italian"],"roco":["italian"],"rodaggio":["italian"],"rodere":["italian"],"roditore":["italian"],"rogito":["italian"],"rollio":["italian"],"romantico":["italian"],"rompere":["italian"],"ronzio":["italian"],"rosolare":["italian"],"rospo":["italian"],"rotante":["italian"],"rotondo":["italian"],"rotula":["italian"],"rovescio":["italian"],"rubizzo":["italian"],"rubrica":["italian"],"ruga":["italian"],"rullino":["italian"],"rumine":["italian"],"rumoroso":["italian"],"ruolo":["italian"],"rupe":["italian"],"russare":["italian"],"rustico":["italian"],"sabato":["italian"],"sabbiare":["italian"],"sabotato":["italian"],"sagoma":["italian"],"salasso":["italian"],"saldatura":["italian"],"salgemma":["italian"],"salivare":["italian"],"salmone":["italian"],"salone":["italian"],"saltare":["italian"],"saluto":["italian"],"salvo":["italian"],"sapere":["italian"],"sapido":["italian"],"saporito":["italian"],"saraceno":["italian"],"sarcasmo":["italian"],"sarto":["italian"],"sassoso":["italian"],"satellite":["italian"],"satira":["italian"],"satollo":["italian"],"saturno":["italian"],"savana":["italian"],"savio":["italian"],"saziato":["italian"],"sbadiglio":["italian"],"sbalzo":["italian"],"sbancato":["italian"],"sbarra":["italian"],"sbattere":["italian"],"sbavare":["italian"],"sbendare":["italian"],"sbirciare":["italian"],"sbloccato":["italian"],"sbocciato":["italian"],"sbrinare":["italian"],"sbruffone":["italian"],"sbuffare":["italian"],"scabroso":["italian"],"scadenza":["italian"],"scala":["italian"],"scambiare":["italian"],"scandalo":["italian"],"scapola":["italian"],"scarso":["italian"],"scatenare":["italian"],"scavato":["italian"],"scelto":["italian"],"scenico":["italian"],"scettro":["italian"],"scheda":["italian"],"schiena":["italian"],"sciarpa":["italian"],"scienza":["italian"],"scindere":["italian"],"scippo":["italian"],"sciroppo":["italian"],"scivolo":["italian"],"sclerare":["italian"],"scodella":["italian"],"scolpito":["italian"],"scomparto":["italian"],"sconforto":["italian"],"scoprire":["italian"],"scorta":["italian"],"scossone":["italian"],"scozzese":["italian"],"scriba":["italian"],"scrollare":["italian"],"scrutinio":["italian"],"scuderia":["italian"],"scultore":["italian"],"scuola":["italian"],"scuro":["italian"],"scusare":["italian"],"sdebitare":["italian"],"sdoganare":["italian"],"seccatura":["italian"],"secondo":["italian"],"sedano":["italian"],"seggiola":["italian"],"segnalato":["italian"],"segregato":["italian"],"seguito":["italian"],"selciato":["italian"],"selettivo":["italian"],"sella":["italian"],"selvaggio":["italian"],"semaforo":["italian"],"sembrare":["italian"],"seme":["italian"],"seminato":["italian"],"sempre":["italian"],"senso":["italian"],"sentire":["italian"],"sepolto":["italian"],"sequenza":["italian"],"serata":["italian"],"serbato":["italian"],"sereno":["italian"],"serio":["italian"],"serpente":["italian"],"serraglio":["italian"],"servire":["italian"],"sestina":["italian"],"setola":["italian"],"settimana":["italian"],"sfacelo":["italian"],"sfaldare":["italian"],"sfamato":["italian"],"sfarzoso":["italian"],"sfaticato":["italian"],"sfera":["italian"],"sfida":["italian"],"sfilato":["italian"],"sfinge":["italian"],"sfocato":["italian"],"sfoderare":["italian"],"sfogo":["italian"],"sfoltire":["italian"],"sforzato":["italian"],"sfratto":["italian"],"sfruttato":["italian"],"sfuggito":["italian"],"sfumare":["italian"],"sfuso":["italian"],"sgabello":["italian"],"sgarbato":["italian"],"sgonfiare":["italian"],"sgorbio":["italian"],"sgrassato":["italian"],"sguardo":["italian"],"sibilo":["italian"],"siccome":["italian"],"sierra":["italian"],"sigla":["italian"],"signore":["italian"],"silenzio":["italian"],"sillaba":["italian"],"simbolo":["italian"],"simpatico":["italian"],"simulato":["italian"],"sinfonia":["italian"],"singolo":["italian"],"sinistro":["italian"],"sino":["italian"],"sintesi":["italian"],"sinusoide":["italian"],"sipario":["italian"],"sisma":["italian"],"sistole":["italian"],"situato":["italian"],"slitta":["italian"],"slogatura":["italian"],"sloveno":["italian"],"smarrito":["italian"],"smemorato":["italian"],"smentito":["italian"],"smeraldo":["italian"],"smilzo":["italian"],"smontare":["italian"],"smottato":["italian"],"smussato":["italian"],"snellire":["italian"],"snervato":["italian"],"snodo":["italian"],"sobbalzo":["italian"],"sobrio":["italian"],"soccorso":["italian"],"sociale":["italian"],"sodale":["italian"],"soffitto":["italian"],"sogno":["italian"],"soldato":["italian"],"solenne":["italian"],"solido":["italian"],"sollazzo":["italian"],"solo":["italian"],"solubile":["italian"],"solvente":["italian"],"somatico":["italian"],"somma":["italian"],"sonda":["italian"],"sonetto":["italian"],"sonnifero":["italian"],"sopire":["italian"],"soppeso":["italian"],"sopra":["italian"],"sorgere":["italian"],"sorpasso":["italian"],"sorriso":["italian"],"sorso":["italian"],"sorteggio":["italian"],"sorvolato":["italian"],"sospiro":["italian"],"sosta":["italian"],"sottile":["italian"],"spada":["italian"],"spalla":["italian"],"spargere":["italian"],"spatola":["italian"],"spavento":["italian"],"spazzola":["italian"],"specie":["italian"],"spedire":["italian"],"spegnere":["italian"],"spelatura":["italian"],"speranza":["italian"],"spessore":["italian"],"spettrale":["italian"],"spezzato":["italian"],"spia":["italian"],"spigoloso":["italian"],"spillato":["italian"],"spinoso":["italian"],"spirale":["italian"],"splendido":["italian"],"sportivo":["italian"],"sposo":["italian"],"spranga":["italian"],"sprecare":["italian"],"spronato":["italian"],"spruzzo":["italian"],"spuntino":["italian"],"squillo":["italian"],"sradicare":["italian"],"srotolato":["italian"],"stabile":["italian"],"stacco":["italian"],"staffa":["italian"],"stagnare":["italian"],"stampato":["italian"],"stantio":["italian"],"starnuto":["italian"],"stasera":["italian"],"statuto":["italian"],"stelo":["italian"],"steppa":["italian"],"sterzo":["italian"],"stiletto":["italian"],"stima":["italian"],"stirpe":["italian"],"stivale":["italian"],"stizzoso":["italian"],"stonato":["italian"],"storico":["italian"],"strappo":["italian"],"stregato":["italian"],"stridulo":["italian"],"strozzare":["italian"],"strutto":["italian"],"stuccare":["italian"],"stufo":["italian"],"stupendo":["italian"],"subentro":["italian"],"succoso":["italian"],"sudore":["italian"],"suggerito":["italian"],"sugo":["italian"],"sultano":["italian"],"suonare":["italian"],"superbo":["italian"],"supporto":["italian"],"surgelato":["italian"],"surrogato":["italian"],"sussurro":["italian"],"sutura":["italian"],"svagare":["italian"],"svedese":["italian"],"sveglio":["italian"],"svelare":["italian"],"svenuto":["italian"],"svezia":["italian"],"sviluppo":["italian"],"svista":["italian"],"svizzera":["italian"],"svolta":["italian"],"svuotare":["italian"],"tabacco":["italian"],"tabulato":["italian"],"tacciare":["italian"],"taciturno":["italian"],"tale":["italian"],"talismano":["italian"],"tampone":["italian"],"tannino":["italian"],"tara":["italian"],"tardivo":["italian"],"targato":["italian"],"tariffa":["italian"],"tarpare":["italian"],"tartaruga":["italian"],"tasto":["italian"],"tattico":["italian"],"taverna":["italian"],"tavolata":["italian"],"tazza":["italian"],"teca":["italian"],"tecnico":["italian"],"telefono":["italian"],"temerario":["italian"],"tempo":["italian","turkish"],"temuto":["italian"],"tendone":["italian"],"tenero":["italian"],"tensione":["italian"],"tentacolo":["italian"],"teorema":["italian"],"terme":["italian"],"terrazzo":["italian"],"terzetto":["italian"],"tesi":["italian"],"tesserato":["italian"],"testato":["italian"],"tetro":["italian"],"tettoia":["italian"],"tifare":["italian"],"tigella":["italian"],"timbro":["italian"],"tinto":["italian"],"tipico":["italian"],"tipografo":["italian"],"tiraggio":["italian"],"tiro":["italian"],"titanio":["italian"],"titolo":["italian"],"titubante":["italian"],"tizio":["italian"],"tizzone":["italian"],"toccare":["italian"],"tollerare":["italian"],"tolto":["italian"],"tombola":["italian"],"tomo":["italian"],"tonfo":["italian"],"tonsilla":["italian"],"topazio":["italian"],"topologia":["italian"],"toppa":["italian"],"torba":["italian"],"tornare":["italian"],"torrone":["italian"],"tortora":["italian"],"toscano":["italian"],"tossire":["italian"],"tostatura":["italian"],"totano":["italian"],"trabocco":["italian"],"trachea":["italian"],"trafila":["italian"],"tragedia":["italian"],"tralcio":["italian"],"tramonto":["italian"],"transito":["italian"],"trapano":["italian"],"trarre":["italian"],"trasloco":["italian"],"trattato":["italian"],"trave":["italian"],"treccia":["italian"],"tremolio":["italian"],"trespolo":["italian"],"tributo":["italian"],"tricheco":["italian"],"trifoglio":["italian"],"trillo":["italian"],"trincea":["italian"],"trio":["italian"],"tristezza":["italian"],"triturato":["italian"],"trivella":["italian"],"tromba":["italian"],"trono":["italian"],"troppo":["italian"],"trottola":["italian"],"trovare":["italian"],"truccato":["italian"],"tubatura":["italian"],"tuffato":["italian"],"tulipano":["italian"],"tumulto":["italian"],"tunisia":["italian"],"turbare":["italian"],"turchino":["italian"],"tuta":["italian"],"tutela":["italian"],"ubicato":["italian"],"uccello":["italian"],"uccisore":["italian"],"udire":["italian"],"uditivo":["italian"],"uffa":["italian"],"ufficio":["italian"],"uguale":["italian"],"ulisse":["italian"],"ultimato":["italian"],"umano":["italian"],"umile":["italian"],"umorismo":["italian"],"uncinetto":["italian"],"ungere":["italian"],"ungherese":["italian"],"unicorno":["italian"],"unificato":["italian"],"unisono":["italian"],"unitario":["italian"],"unte":["italian"],"uovo":["italian"],"upupa":["italian"],"uragano":["italian"],"urgenza":["italian"],"urlo":["italian"],"usanza":["italian"],"usato":["italian"],"uscito":["italian"],"usignolo":["italian"],"usuraio":["italian"],"utensile":["italian"],"utilizzo":["italian"],"utopia":["italian"],"vacante":["italian"],"vaccinato":["italian"],"vagabondo":["italian"],"vagliato":["italian"],"valanga":["italian"],"valgo":["italian"],"valico":["italian"],"valletta":["italian"],"valoroso":["italian"],"valutare":["italian"],"valvola":["italian"],"vampata":["italian"],"vangare":["italian"],"vanitoso":["italian"],"vano":["italian"],"vantaggio":["italian"],"vanvera":["italian"],"vapore":["italian"],"varano":["italian"],"varcato":["italian"],"variante":["italian"],"vasca":["italian"],"vedetta":["italian"],"vedova":["italian"],"veduto":["italian"],"vegetale":["italian"],"veicolo":["italian"],"velcro":["italian"],"velina":["italian"],"velluto":["italian"],"veloce":["italian"],"venato":["italian"],"vendemmia":["italian"],"vento":["italian"],"verace":["italian"],"verbale":["italian"],"vergogna":["italian"],"verifica":["italian"],"vero":["italian"],"verruca":["italian"],"verticale":["italian"],"vescica":["italian"],"vessillo":["italian"],"vestale":["italian"],"veterano":["italian"],"vetrina":["italian"],"vetusto":["italian"],"viandante":["italian"],"vibrante":["italian"],"vicenda":["italian"],"vichingo":["italian"],"vicinanza":["italian"],"vidimare":["italian"],"vigilia":["italian"],"vigneto":["italian"],"vigore":["italian"],"vile":["italian"],"villano":["italian"],"vimini":["italian"],"vincitore":["italian"],"viola":["italian"],"vipera":["italian"],"virgola":["italian"],"virologo":["italian"],"virulento":["italian"],"viscoso":["italian"],"visione":["italian"],"vispo":["italian"],"vissuto":["italian"],"visura":["italian"],"vita":["italian"],"vitello":["italian"],"vittima":["italian"],"vivanda":["italian"],"vivido":["italian"],"viziare":["italian"],"voce":["italian"],"voga":["italian"],"volatile":["italian"],"volere":["italian"],"volpe":["italian"],"voragine":["italian"],"vulcano":["italian"],"zampogna":["italian"],"zanna":["italian"],"zappato":["italian"],"zattera":["italian"],"zavorra":["italian"],"zefiro":["italian"],"zelante":["italian"],"zelo":["italian"],"zenzero":["italian"],"zerbino":["italian"],"zibetto":["italian"],"zinco":["italian"],"zircone":["italian"],"zitto":["italian"],"zolla":["italian"],"zotico":["italian"],"zucchero":["italian"],"zufolo":["italian"],"zulu":["italian"],"zuppa":["italian"],"あいこくしん":["japanese"],"あいさつ":["japanese"],"あいだ":["japanese"],"あおぞら":["japanese"],"あかちゃん":["japanese"],"あきる":["japanese"],"あけがた":["japanese"],"あける":["japanese"],"あこがれる":["japanese"],"あさい":["japanese"],"あさひ":["japanese"],"あしあと":["japanese"],"あじわう":["japanese"],"あずかる":["japanese"],"あずき":["japanese"],"あそぶ":["japanese"],"あたえる":["japanese"],"あたためる":["japanese"],"あたりまえ":["japanese"],"あたる":["japanese"],"あつい":["japanese"],"あつかう":["japanese"],"あっしゅく":["japanese"],"あつまり":["japanese"],"あつめる":["japanese"],"あてな":["japanese"],"あてはまる":["japanese"],"あひる":["japanese"],"あぶら":["japanese"],"あぶる":["japanese"],"あふれる":["japanese"],"あまい":["japanese"],"あまど":["japanese"],"あまやかす":["japanese"],"あまり":["japanese"],"あみもの":["japanese"],"あめりか":["japanese"],"あやまる":["japanese"],"あゆむ":["japanese"],"あらいぐま":["japanese"],"あらし":["japanese"],"あらすじ":["japanese"],"あらためる":["japanese"],"あらゆる":["japanese"],"あらわす":["japanese"],"ありがとう":["japanese"],"あわせる":["japanese"],"あわてる":["japanese"],"あんい":["japanese"],"あんがい":["japanese"],"あんこ":["japanese"],"あんぜん":["japanese"],"あんてい":["japanese"],"あんない":["japanese"],"あんまり":["japanese"],"いいだす":["japanese"],"いおん":["japanese"],"いがい":["japanese"],"いがく":["japanese"],"いきおい":["japanese"],"いきなり":["japanese"],"いきもの":["japanese"],"いきる":["japanese"],"いくじ":["japanese"],"いくぶん":["japanese"],"いけばな":["japanese"],"いけん":["japanese"],"いこう":["japanese"],"いこく":["japanese"],"いこつ":["japanese"],"いさましい":["japanese"],"いさん":["japanese"],"いしき":["japanese"],"いじゅう":["japanese"],"いじょう":["japanese"],"いじわる":["japanese"],"いずみ":["japanese"],"いずれ":["japanese"],"いせい":["japanese"],"いせえび":["japanese"],"いせかい":["japanese"],"いせき":["japanese"],"いぜん":["japanese"],"いそうろう":["japanese"],"いそがしい":["japanese"],"いだい":["japanese"],"いだく":["japanese"],"いたずら":["japanese"],"いたみ":["japanese"],"いたりあ":["japanese"],"いちおう":["japanese"],"いちじ":["japanese"],"いちど":["japanese"],"いちば":["japanese"],"いちぶ":["japanese"],"いちりゅう":["japanese"],"いつか":["japanese"],"いっしゅん":["japanese"],"いっせい":["japanese"],"いっそう":["japanese"],"いったん":["japanese"],"いっち":["japanese"],"いってい":["japanese"],"いっぽう":["japanese"],"いてざ":["japanese"],"いてん":["japanese"],"いどう":["japanese"],"いとこ":["japanese"],"いない":["japanese"],"いなか":["japanese"],"いねむり":["japanese"],"いのち":["japanese"],"いのる":["japanese"],"いはつ":["japanese"],"いばる":["japanese"],"いはん":["japanese"],"いびき":["japanese"],"いひん":["japanese"],"いふく":["japanese"],"いへん":["japanese"],"いほう":["japanese"],"いみん":["japanese"],"いもうと":["japanese"],"いもたれ":["japanese"],"いもり":["japanese"],"いやがる":["japanese"],"いやす":["japanese"],"いよかん":["japanese"],"いよく":["japanese"],"いらい":["japanese"],"いらすと":["japanese"],"いりぐち":["japanese"],"いりょう":["japanese"],"いれい":["japanese"],"いれもの":["japanese"],"いれる":["japanese"],"いろえんぴつ":["japanese"],"いわい":["japanese"],"いわう":["japanese"],"いわかん":["japanese"],"いわば":["japanese"],"いわゆる":["japanese"],"いんげんまめ":["japanese"],"いんさつ":["japanese"],"いんしょう":["japanese"],"いんよう":["japanese"],"うえき":["japanese"],"うえる":["japanese"],"うおざ":["japanese"],"うがい":["japanese"],"うかぶ":["japanese"],"うかべる":["japanese"],"うきわ":["japanese"],"うくらいな":["japanese"],"うくれれ":["japanese"],"うけたまわる":["japanese"],"うけつけ":["japanese"],"うけとる":["japanese"],"うけもつ":["japanese"],"うける":["japanese"],"うごかす":["japanese"],"うごく":["japanese"],"うこん":["japanese"],"うさぎ":["japanese"],"うしなう":["japanese"],"うしろがみ":["japanese"],"うすい":["japanese"],"うすぎ":["japanese"],"うすぐらい":["japanese"],"うすめる":["japanese"],"うせつ":["japanese"],"うちあわせ":["japanese"],"うちがわ":["japanese"],"うちき":["japanese"],"うちゅう":["japanese"],"うっかり":["japanese"],"うつくしい":["japanese"],"うったえる":["japanese"],"うつる":["japanese"],"うどん":["japanese"],"うなぎ":["japanese"],"うなじ":["japanese"],"うなずく":["japanese"],"うなる":["japanese"],"うねる":["japanese"],"うのう":["japanese"],"うぶげ":["japanese"],"うぶごえ":["japanese"],"うまれる":["japanese"],"うめる":["japanese"],"うもう":["japanese"],"うやまう":["japanese"],"うよく":["japanese"],"うらがえす":["japanese"],"うらぐち":["japanese"],"うらない":["japanese"],"うりあげ":["japanese"],"うりきれ":["japanese"],"うるさい":["japanese"],"うれしい":["japanese"],"うれゆき":["japanese"],"うれる":["japanese"],"うろこ":["japanese"],"うわき":["japanese"],"うわさ":["japanese"],"うんこう":["japanese"],"うんちん":["japanese"],"うんてん":["japanese"],"うんどう":["japanese"],"えいえん":["japanese"],"えいが":["japanese"],"えいきょう":["japanese"],"えいご":["japanese"],"えいせい":["japanese"],"えいぶん":["japanese"],"えいよう":["japanese"],"えいわ":["japanese"],"えおり":["japanese"],"えがお":["japanese"],"えがく":["japanese"],"えきたい":["japanese"],"えくせる":["japanese"],"えしゃく":["japanese"],"えすて":["japanese"],"えつらん":["japanese"],"えのぐ":["japanese"],"えほうまき":["japanese"],"えほん":["japanese"],"えまき":["japanese"],"えもじ":["japanese"],"えもの":["japanese"],"えらい":["japanese"],"えらぶ":["japanese"],"えりあ":["japanese"],"えんえん":["japanese"],"えんかい":["japanese"],"えんぎ":["japanese"],"えんげき":["japanese"],"えんしゅう":["japanese"],"えんぜつ":["japanese"],"えんそく":["japanese"],"えんちょう":["japanese"],"えんとつ":["japanese"],"おいかける":["japanese"],"おいこす":["japanese"],"おいしい":["japanese"],"おいつく":["japanese"],"おうえん":["japanese"],"おうさま":["japanese"],"おうじ":["japanese"],"おうせつ":["japanese"],"おうたい":["japanese"],"おうふく":["japanese"],"おうべい":["japanese"],"おうよう":["japanese"],"おえる":["japanese"],"おおい":["japanese"],"おおう":["japanese"],"おおどおり":["japanese"],"おおや":["japanese"],"おおよそ":["japanese"],"おかえり":["japanese"],"おかず":["japanese"],"おがむ":["japanese"],"おかわり":["japanese"],"おぎなう":["japanese"],"おきる":["japanese"],"おくさま":["japanese"],"おくじょう":["japanese"],"おくりがな":["japanese"],"おくる":["japanese"],"おくれる":["japanese"],"おこす":["japanese"],"おこなう":["japanese"],"おこる":["japanese"],"おさえる":["japanese"],"おさない":["japanese"],"おさめる":["japanese"],"おしいれ":["japanese"],"おしえる":["japanese"],"おじぎ":["japanese"],"おじさん":["japanese"],"おしゃれ":["japanese"],"おそらく":["japanese"],"おそわる":["japanese"],"おたがい":["japanese"],"おたく":["japanese"],"おだやか":["japanese"],"おちつく":["japanese"],"おっと":["japanese"],"おつり":["japanese"],"おでかけ":["japanese"],"おとしもの":["japanese"],"おとなしい":["japanese"],"おどり":["japanese"],"おどろかす":["japanese"],"おばさん":["japanese"],"おまいり":["japanese"],"おめでとう":["japanese"],"おもいで":["japanese"],"おもう":["japanese"],"おもたい":["japanese"],"おもちゃ":["japanese"],"おやつ":["japanese"],"おやゆび":["japanese"],"およぼす":["japanese"],"おらんだ":["japanese"],"おろす":["japanese"],"おんがく":["japanese"],"おんけい":["japanese"],"おんしゃ":["japanese"],"おんせん":["japanese"],"おんだん":["japanese"],"おんちゅう":["japanese"],"おんどけい":["japanese"],"かあつ":["japanese"],"かいが":["japanese"],"がいき":["japanese"],"がいけん":["japanese"],"がいこう":["japanese"],"かいさつ":["japanese"],"かいしゃ":["japanese"],"かいすいよく":["japanese"],"かいぜん":["japanese"],"かいぞうど":["japanese"],"かいつう":["japanese"],"かいてん":["japanese"],"かいとう":["japanese"],"かいふく":["japanese"],"がいへき":["japanese"],"かいほう":["japanese"],"かいよう":["japanese"],"がいらい":["japanese"],"かいわ":["japanese"],"かえる":["japanese"],"かおり":["japanese"],"かかえる":["japanese"],"かがく":["japanese"],"かがし":["japanese"],"かがみ":["japanese"],"かくご":["japanese"],"かくとく":["japanese"],"かざる":["japanese"],"がぞう":["japanese"],"かたい":["japanese"],"かたち":["japanese"],"がちょう":["japanese"],"がっきゅう":["japanese"],"がっこう":["japanese"],"がっさん":["japanese"],"がっしょう":["japanese"],"かなざわし":["japanese"],"かのう":["japanese"],"がはく":["japanese"],"かぶか":["japanese"],"かほう":["japanese"],"かほご":["japanese"],"かまう":["japanese"],"かまぼこ":["japanese"],"かめれおん":["japanese"],"かゆい":["japanese"],"かようび":["japanese"],"からい":["japanese"],"かるい":["japanese"],"かろう":["japanese"],"かわく":["japanese"],"かわら":["japanese"],"がんか":["japanese"],"かんけい":["japanese"],"かんこう":["japanese"],"かんしゃ":["japanese"],"かんそう":["japanese"],"かんたん":["japanese"],"かんち":["japanese"],"がんばる":["japanese"],"きあい":["japanese"],"きあつ":["japanese"],"きいろ":["japanese"],"ぎいん":["japanese"],"きうい":["japanese"],"きうん":["japanese"],"きえる":["japanese"],"きおう":["japanese"],"きおく":["japanese"],"きおち":["japanese"],"きおん":["japanese"],"きかい":["japanese"],"きかく":["japanese"],"きかんしゃ":["japanese"],"ききて":["japanese"],"きくばり":["japanese"],"きくらげ":["japanese"],"きけんせい":["japanese"],"きこう":["japanese"],"きこえる":["japanese"],"きこく":["japanese"],"きさい":["japanese"],"きさく":["japanese"],"きさま":["japanese"],"きさらぎ":["japanese"],"ぎじかがく":["japanese"],"ぎしき":["japanese"],"ぎじたいけん":["japanese"],"ぎじにってい":["japanese"],"ぎじゅつしゃ":["japanese"],"きすう":["japanese"],"きせい":["japanese"],"きせき":["japanese"],"きせつ":["japanese"],"きそう":["japanese"],"きぞく":["japanese"],"きぞん":["japanese"],"きたえる":["japanese"],"きちょう":["japanese"],"きつえん":["japanese"],"ぎっちり":["japanese"],"きつつき":["japanese"],"きつね":["japanese"],"きてい":["japanese"],"きどう":["japanese"],"きどく":["japanese"],"きない":["japanese"],"きなが":["japanese"],"きなこ":["japanese"],"きぬごし":["japanese"],"きねん":["japanese"],"きのう":["japanese"],"きのした":["japanese"],"きはく":["japanese"],"きびしい":["japanese"],"きひん":["japanese"],"きふく":["japanese"],"きぶん":["japanese"],"きぼう":["japanese"],"きほん":["japanese"],"きまる":["japanese"],"きみつ":["japanese"],"きむずかしい":["japanese"],"きめる":["japanese"],"きもだめし":["japanese"],"きもち":["japanese"],"きもの":["japanese"],"きゃく":["japanese"],"きやく":["japanese"],"ぎゅうにく":["japanese"],"きよう":["japanese"],"きょうりゅう":["japanese"],"きらい":["japanese"],"きらく":["japanese"],"きりん":["japanese"],"きれい":["japanese"],"きれつ":["japanese"],"きろく":["japanese"],"ぎろん":["japanese"],"きわめる":["japanese"],"ぎんいろ":["japanese"],"きんかくじ":["japanese"],"きんじょ":["japanese"],"きんようび":["japanese"],"ぐあい":["japanese"],"くいず":["japanese"],"くうかん":["japanese"],"くうき":["japanese"],"くうぐん":["japanese"],"くうこう":["japanese"],"ぐうせい":["japanese"],"くうそう":["japanese"],"ぐうたら":["japanese"],"くうふく":["japanese"],"くうぼ":["japanese"],"くかん":["japanese"],"くきょう":["japanese"],"くげん":["japanese"],"ぐこう":["japanese"],"くさい":["japanese"],"くさき":["japanese"],"くさばな":["japanese"],"くさる":["japanese"],"くしゃみ":["japanese"],"くしょう":["japanese"],"くすのき":["japanese"],"くすりゆび":["japanese"],"くせげ":["japanese"],"くせん":["japanese"],"ぐたいてき":["japanese"],"くださる":["japanese"],"くたびれる":["japanese"],"くちこみ":["japanese"],"くちさき":["japanese"],"くつした":["japanese"],"ぐっすり":["japanese"],"くつろぐ":["japanese"],"くとうてん":["japanese"],"くどく":["japanese"],"くなん":["japanese"],"くねくね":["japanese"],"くのう":["japanese"],"くふう":["japanese"],"くみあわせ":["japanese"],"くみたてる":["japanese"],"くめる":["japanese"],"くやくしょ":["japanese"],"くらす":["japanese"],"くらべる":["japanese"],"くるま":["japanese"],"くれる":["japanese"],"くろう":["japanese"],"くわしい":["japanese"],"ぐんかん":["japanese"],"ぐんしょく":["japanese"],"ぐんたい":["japanese"],"ぐんて":["japanese"],"けあな":["japanese"],"けいかく":["japanese"],"けいけん":["japanese"],"けいこ":["japanese"],"けいさつ":["japanese"],"げいじゅつ":["japanese"],"けいたい":["japanese"],"げいのうじん":["japanese"],"けいれき":["japanese"],"けいろ":["japanese"],"けおとす":["japanese"],"けおりもの":["japanese"],"げきか":["japanese"],"げきげん":["japanese"],"げきだん":["japanese"],"げきちん":["japanese"],"げきとつ":["japanese"],"げきは":["japanese"],"げきやく":["japanese"],"げこう":["japanese"],"げこくじょう":["japanese"],"げざい":["japanese"],"けさき":["japanese"],"げざん":["japanese"],"けしき":["japanese"],"けしごむ":["japanese"],"けしょう":["japanese"],"げすと":["japanese"],"けたば":["japanese"],"けちゃっぷ":["japanese"],"けちらす":["japanese"],"けつあつ":["japanese"],"けつい":["japanese"],"けつえき":["japanese"],"けっこん":["japanese"],"けつじょ":["japanese"],"けっせき":["japanese"],"けってい":["japanese"],"けつまつ":["japanese"],"げつようび":["japanese"],"げつれい":["japanese"],"けつろん":["japanese"],"げどく":["japanese"],"けとばす":["japanese"],"けとる":["japanese"],"けなげ":["japanese"],"けなす":["japanese"],"けなみ":["japanese"],"けぬき":["japanese"],"げねつ":["japanese"],"けねん":["japanese"],"けはい":["japanese"],"げひん":["japanese"],"けぶかい":["japanese"],"げぼく":["japanese"],"けまり":["japanese"],"けみかる":["japanese"],"けむし":["japanese"],"けむり":["japanese"],"けもの":["japanese"],"けらい":["japanese"],"けろけろ":["japanese"],"けわしい":["japanese"],"けんい":["japanese"],"けんえつ":["japanese"],"けんお":["japanese"],"けんか":["japanese"],"げんき":["japanese"],"けんげん":["japanese"],"けんこう":["japanese"],"けんさく":["japanese"],"けんしゅう":["japanese"],"けんすう":["japanese"],"げんそう":["japanese"],"けんちく":["japanese"],"けんてい":["japanese"],"けんとう":["japanese"],"けんない":["japanese"],"けんにん":["japanese"],"げんぶつ":["japanese"],"けんま":["japanese"],"けんみん":["japanese"],"けんめい":["japanese"],"けんらん":["japanese"],"けんり":["japanese"],"こあくま":["japanese"],"こいぬ":["japanese"],"こいびと":["japanese"],"ごうい":["japanese"],"こうえん":["japanese"],"こうおん":["japanese"],"こうかん":["japanese"],"ごうきゅう":["japanese"],"ごうけい":["japanese"],"こうこう":["japanese"],"こうさい":["japanese"],"こうじ":["japanese"],"こうすい":["japanese"],"ごうせい":["japanese"],"こうそく":["japanese"],"こうたい":["japanese"],"こうちゃ":["japanese"],"こうつう":["japanese"],"こうてい":["japanese"],"こうどう":["japanese"],"こうない":["japanese"],"こうはい":["japanese"],"ごうほう":["japanese"],"ごうまん":["japanese"],"こうもく":["japanese"],"こうりつ":["japanese"],"こえる":["japanese"],"こおり":["japanese"],"ごかい":["japanese"],"ごがつ":["japanese"],"ごかん":["japanese"],"こくご":["japanese"],"こくさい":["japanese"],"こくとう":["japanese"],"こくない":["japanese"],"こくはく":["japanese"],"こぐま":["japanese"],"こけい":["japanese"],"こける":["japanese"],"ここのか":["japanese"],"こころ":["japanese"],"こさめ":["japanese"],"こしつ":["japanese"],"こすう":["japanese"],"こせい":["japanese"],"こせき":["japanese"],"こぜん":["japanese"],"こそだて":["japanese"],"こたい":["japanese"],"こたえる":["japanese"],"こたつ":["japanese"],"こちょう":["japanese"],"こっか":["japanese"],"こつこつ":["japanese"],"こつばん":["japanese"],"こつぶ":["japanese"],"こてい":["japanese"],"こてん":["japanese"],"ことがら":["japanese"],"ことし":["japanese"],"ことば":["japanese"],"ことり":["japanese"],"こなごな":["japanese"],"こねこね":["japanese"],"このまま":["japanese"],"このみ":["japanese"],"このよ":["japanese"],"ごはん":["japanese"],"こひつじ":["japanese"],"こふう":["japanese"],"こふん":["japanese"],"こぼれる":["japanese"],"ごまあぶら":["japanese"],"こまかい":["japanese"],"ごますり":["japanese"],"こまつな":["japanese"],"こまる":["japanese"],"こむぎこ":["japanese"],"こもじ":["japanese"],"こもち":["japanese"],"こもの":["japanese"],"こもん":["japanese"],"こやく":["japanese"],"こやま":["japanese"],"こゆう":["japanese"],"こゆび":["japanese"],"こよい":["japanese"],"こよう":["japanese"],"こりる":["japanese"],"これくしょん":["japanese"],"ころっけ":["japanese"],"こわもて":["japanese"],"こわれる":["japanese"],"こんいん":["japanese"],"こんかい":["japanese"],"こんき":["japanese"],"こんしゅう":["japanese"],"こんすい":["japanese"],"こんだて":["japanese"],"こんとん":["japanese"],"こんなん":["japanese"],"こんびに":["japanese"],"こんぽん":["japanese"],"こんまけ":["japanese"],"こんや":["japanese"],"こんれい":["japanese"],"こんわく":["japanese"],"ざいえき":["japanese"],"さいかい":["japanese"],"さいきん":["japanese"],"ざいげん":["japanese"],"ざいこ":["japanese"],"さいしょ":["japanese"],"さいせい":["japanese"],"ざいたく":["japanese"],"ざいちゅう":["japanese"],"さいてき":["japanese"],"ざいりょう":["japanese"],"さうな":["japanese"],"さかいし":["japanese"],"さがす":["japanese"],"さかな":["japanese"],"さかみち":["japanese"],"さがる":["japanese"],"さぎょう":["japanese"],"さくし":["japanese"],"さくひん":["japanese"],"さくら":["japanese"],"さこく":["japanese"],"さこつ":["japanese"],"さずかる":["japanese"],"ざせき":["japanese"],"さたん":["japanese"],"さつえい":["japanese"],"ざつおん":["japanese"],"ざっか":["japanese"],"ざつがく":["japanese"],"さっきょく":["japanese"],"ざっし":["japanese"],"さつじん":["japanese"],"ざっそう":["japanese"],"さつたば":["japanese"],"さつまいも":["japanese"],"さてい":["japanese"],"さといも":["japanese"],"さとう":["japanese"],"さとおや":["japanese"],"さとし":["japanese"],"さとる":["japanese"],"さのう":["japanese"],"さばく":["japanese"],"さびしい":["japanese"],"さべつ":["japanese"],"さほう":["japanese"],"さほど":["japanese"],"さます":["japanese"],"さみしい":["japanese"],"さみだれ":["japanese"],"さむけ":["japanese"],"さめる":["japanese"],"さやえんどう":["japanese"],"さゆう":["japanese"],"さよう":["japanese"],"さよく":["japanese"],"さらだ":["japanese"],"ざるそば":["japanese"],"さわやか":["japanese"],"さわる":["japanese"],"さんいん":["japanese"],"さんか":["japanese"],"さんきゃく":["japanese"],"さんこう":["japanese"],"さんさい":["japanese"],"ざんしょ":["japanese"],"さんすう":["japanese"],"さんせい":["japanese"],"さんそ":["japanese"],"さんち":["japanese"],"さんま":["japanese"],"さんみ":["japanese"],"さんらん":["japanese"],"しあい":["japanese"],"しあげ":["japanese"],"しあさって":["japanese"],"しあわせ":["japanese"],"しいく":["japanese"],"しいん":["japanese"],"しうち":["japanese"],"しえい":["japanese"],"しおけ":["japanese"],"しかい":["japanese"],"しかく":["japanese"],"じかん":["japanese"],"しごと":["japanese"],"しすう":["japanese"],"じだい":["japanese"],"したうけ":["japanese"],"したぎ":["japanese"],"したて":["japanese"],"したみ":["japanese"],"しちょう":["japanese"],"しちりん":["japanese"],"しっかり":["japanese"],"しつじ":["japanese"],"しつもん":["japanese"],"してい":["japanese"],"してき":["japanese"],"してつ":["japanese"],"じてん":["japanese"],"じどう":["japanese"],"しなぎれ":["japanese"],"しなもの":["japanese"],"しなん":["japanese"],"しねま":["japanese"],"しねん":["japanese"],"しのぐ":["japanese"],"しのぶ":["japanese"],"しはい":["japanese"],"しばかり":["japanese"],"しはつ":["japanese"],"しはらい":["japanese"],"しはん":["japanese"],"しひょう":["japanese"],"しふく":["japanese"],"じぶん":["japanese"],"しへい":["japanese"],"しほう":["japanese"],"しほん":["japanese"],"しまう":["japanese"],"しまる":["japanese"],"しみん":["japanese"],"しむける":["japanese"],"じむしょ":["japanese"],"しめい":["japanese"],"しめる":["japanese"],"しもん":["japanese"],"しゃいん":["japanese"],"しゃうん":["japanese"],"しゃおん":["japanese"],"じゃがいも":["japanese"],"しやくしょ":["japanese"],"しゃくほう":["japanese"],"しゃけん":["japanese"],"しゃこ":["japanese"],"しゃざい":["japanese"],"しゃしん":["japanese"],"しゃせん":["japanese"],"しゃそう":["japanese"],"しゃたい":["japanese"],"しゃちょう":["japanese"],"しゃっきん":["japanese"],"じゃま":["japanese"],"しゃりん":["japanese"],"しゃれい":["japanese"],"じゆう":["japanese"],"じゅうしょ":["japanese"],"しゅくはく":["japanese"],"じゅしん":["japanese"],"しゅっせき":["japanese"],"しゅみ":["japanese"],"しゅらば":["japanese"],"じゅんばん":["japanese"],"しょうかい":["japanese"],"しょくたく":["japanese"],"しょっけん":["japanese"],"しょどう":["japanese"],"しょもつ":["japanese"],"しらせる":["japanese"],"しらべる":["japanese"],"しんか":["japanese"],"しんこう":["japanese"],"じんじゃ":["japanese"],"しんせいじ":["japanese"],"しんちく":["japanese"],"しんりん":["japanese"],"すあげ":["japanese"],"すあし":["japanese"],"すあな":["japanese"],"ずあん":["japanese"],"すいえい":["japanese"],"すいか":["japanese"],"すいとう":["japanese"],"ずいぶん":["japanese"],"すいようび":["japanese"],"すうがく":["japanese"],"すうじつ":["japanese"],"すうせん":["japanese"],"すおどり":["japanese"],"すきま":["japanese"],"すくう":["japanese"],"すくない":["japanese"],"すける":["japanese"],"すごい":["japanese"],"すこし":["japanese"],"ずさん":["japanese"],"すずしい":["japanese"],"すすむ":["japanese"],"すすめる":["japanese"],"すっかり":["japanese"],"ずっしり":["japanese"],"ずっと":["japanese"],"すてき":["japanese"],"すてる":["japanese"],"すねる":["japanese"],"すのこ":["japanese"],"すはだ":["japanese"],"すばらしい":["japanese"],"ずひょう":["japanese"],"ずぶぬれ":["japanese"],"すぶり":["japanese"],"すふれ":["japanese"],"すべて":["japanese"],"すべる":["japanese"],"ずほう":["japanese"],"すぼん":["japanese"],"すまい":["japanese"],"すめし":["japanese"],"すもう":["japanese"],"すやき":["japanese"],"すらすら":["japanese"],"するめ":["japanese"],"すれちがう":["japanese"],"すろっと":["japanese"],"すわる":["japanese"],"すんぜん":["japanese"],"すんぽう":["japanese"],"せあぶら":["japanese"],"せいかつ":["japanese"],"せいげん":["japanese"],"せいじ":["japanese"],"せいよう":["japanese"],"せおう":["japanese"],"せかいかん":["japanese"],"せきにん":["japanese"],"せきむ":["japanese"],"せきゆ":["japanese"],"せきらんうん":["japanese"],"せけん":["japanese"],"せこう":["japanese"],"せすじ":["japanese"],"せたい":["japanese"],"せたけ":["japanese"],"せっかく":["japanese"],"せっきゃく":["japanese"],"ぜっく":["japanese"],"せっけん":["japanese"],"せっこつ":["japanese"],"せっさたくま":["japanese"],"せつぞく":["japanese"],"せつだん":["japanese"],"せつでん":["japanese"],"せっぱん":["japanese"],"せつび":["japanese"],"せつぶん":["japanese"],"せつめい":["japanese"],"せつりつ":["japanese"],"せなか":["japanese"],"せのび":["japanese"],"せはば":["japanese"],"せびろ":["japanese"],"せぼね":["japanese"],"せまい":["japanese"],"せまる":["japanese"],"せめる":["japanese"],"せもたれ":["japanese"],"せりふ":["japanese"],"ぜんあく":["japanese"],"せんい":["japanese"],"せんえい":["japanese"],"せんか":["japanese"],"せんきょ":["japanese"],"せんく":["japanese"],"せんげん":["japanese"],"ぜんご":["japanese"],"せんさい":["japanese"],"せんしゅ":["japanese"],"せんすい":["japanese"],"せんせい":["japanese"],"せんぞ":["japanese"],"せんたく":["japanese"],"せんちょう":["japanese"],"せんてい":["japanese"],"せんとう":["japanese"],"せんぬき":["japanese"],"せんねん":["japanese"],"せんぱい":["japanese"],"ぜんぶ":["japanese"],"ぜんぽう":["japanese"],"せんむ":["japanese"],"せんめんじょ":["japanese"],"せんもん":["japanese"],"せんやく":["japanese"],"せんゆう":["japanese"],"せんよう":["japanese"],"ぜんら":["japanese"],"ぜんりゃく":["japanese"],"せんれい":["japanese"],"せんろ":["japanese"],"そあく":["japanese"],"そいとげる":["japanese"],"そいね":["japanese"],"そうがんきょう":["japanese"],"そうき":["japanese"],"そうご":["japanese"],"そうしん":["japanese"],"そうだん":["japanese"],"そうなん":["japanese"],"そうび":["japanese"],"そうめん":["japanese"],"そうり":["japanese"],"そえもの":["japanese"],"そえん":["japanese"],"そがい":["japanese"],"そげき":["japanese"],"そこう":["japanese"],"そこそこ":["japanese"],"そざい":["japanese"],"そしな":["japanese"],"そせい":["japanese"],"そせん":["japanese"],"そそぐ":["japanese"],"そだてる":["japanese"],"そつう":["japanese"],"そつえん":["japanese"],"そっかん":["japanese"],"そつぎょう":["japanese"],"そっけつ":["japanese"],"そっこう":["japanese"],"そっせん":["japanese"],"そっと":["japanese"],"そとがわ":["japanese"],"そとづら":["japanese"],"そなえる":["japanese"],"そなた":["japanese"],"そふぼ":["japanese"],"そぼく":["japanese"],"そぼろ":["japanese"],"そまつ":["japanese"],"そまる":["japanese"],"そむく":["japanese"],"そむりえ":["japanese"],"そめる":["japanese"],"そもそも":["japanese"],"そよかぜ":["japanese"],"そらまめ":["japanese"],"そろう":["japanese"],"そんかい":["japanese"],"そんけい":["japanese"],"そんざい":["japanese"],"そんしつ":["japanese"],"そんぞく":["japanese"],"そんちょう":["japanese"],"ぞんび":["japanese"],"ぞんぶん":["japanese"],"そんみん":["japanese"],"たあい":["japanese"],"たいいん":["japanese"],"たいうん":["japanese"],"たいえき":["japanese"],"たいおう":["japanese"],"だいがく":["japanese"],"たいき":["japanese"],"たいぐう":["japanese"],"たいけん":["japanese"],"たいこ":["japanese"],"たいざい":["japanese"],"だいじょうぶ":["japanese"],"だいすき":["japanese"],"たいせつ":["japanese"],"たいそう":["japanese"],"だいたい":["japanese"],"たいちょう":["japanese"],"たいてい":["japanese"],"だいどころ":["japanese"],"たいない":["japanese"],"たいねつ":["japanese"],"たいのう":["japanese"],"たいはん":["japanese"],"だいひょう":["japanese"],"たいふう":["japanese"],"たいへん":["japanese"],"たいほ":["japanese"],"たいまつばな":["japanese"],"たいみんぐ":["japanese"],"たいむ":["japanese"],"たいめん":["japanese"],"たいやき":["japanese"],"たいよう":["japanese"],"たいら":["japanese"],"たいりょく":["japanese"],"たいる":["japanese"],"たいわん":["japanese"],"たうえ":["japanese"],"たえる":["japanese"],"たおす":["japanese"],"たおる":["japanese"],"たおれる":["japanese"],"たかい":["japanese"],"たかね":["japanese"],"たきび":["japanese"],"たくさん":["japanese"],"たこく":["japanese"],"たこやき":["japanese"],"たさい":["japanese"],"たしざん":["japanese"],"だじゃれ":["japanese"],"たすける":["japanese"],"たずさわる":["japanese"],"たそがれ":["japanese"],"たたかう":["japanese"],"たたく":["japanese"],"ただしい":["japanese"],"たたみ":["japanese"],"たちばな":["japanese"],"だっかい":["japanese"],"だっきゃく":["japanese"],"だっこ":["japanese"],"だっしゅつ":["japanese"],"だったい":["japanese"],"たてる":["japanese"],"たとえる":["japanese"],"たなばた":["japanese"],"たにん":["japanese"],"たぬき":["japanese"],"たのしみ":["japanese"],"たはつ":["japanese"],"たぶん":["japanese"],"たべる":["japanese"],"たぼう":["japanese"],"たまご":["japanese"],"たまる":["japanese"],"だむる":["japanese"],"ためいき":["japanese"],"ためす":["japanese"],"ためる":["japanese"],"たもつ":["japanese"],"たやすい":["japanese"],"たよる":["japanese"],"たらす":["japanese"],"たりきほんがん":["japanese"],"たりょう":["japanese"],"たりる":["japanese"],"たると":["japanese"],"たれる":["japanese"],"たれんと":["japanese"],"たろっと":["japanese"],"たわむれる":["japanese"],"だんあつ":["japanese"],"たんい":["japanese"],"たんおん":["japanese"],"たんか":["japanese"],"たんき":["japanese"],"たんけん":["japanese"],"たんご":["japanese"],"たんさん":["japanese"],"たんじょうび":["japanese"],"だんせい":["japanese"],"たんそく":["japanese"],"たんたい":["japanese"],"だんち":["japanese"],"たんてい":["japanese"],"たんとう":["japanese"],"だんな":["japanese"],"たんにん":["japanese"],"だんねつ":["japanese"],"たんのう":["japanese"],"たんぴん":["japanese"],"だんぼう":["japanese"],"たんまつ":["japanese"],"たんめい":["japanese"],"だんれつ":["japanese"],"だんろ":["japanese"],"だんわ":["japanese"],"ちあい":["japanese"],"ちあん":["japanese"],"ちいき":["japanese"],"ちいさい":["japanese"],"ちえん":["japanese"],"ちかい":["japanese"],"ちから":["japanese"],"ちきゅう":["japanese"],"ちきん":["japanese"],"ちけいず":["japanese"],"ちけん":["japanese"],"ちこく":["japanese"],"ちさい":["japanese"],"ちしき":["japanese"],"ちしりょう":["japanese"],"ちせい":["japanese"],"ちそう":["japanese"],"ちたい":["japanese"],"ちたん":["japanese"],"ちちおや":["japanese"],"ちつじょ":["japanese"],"ちてき":["japanese"],"ちてん":["japanese"],"ちぬき":["japanese"],"ちぬり":["japanese"],"ちのう":["japanese"],"ちひょう":["japanese"],"ちへいせん":["japanese"],"ちほう":["japanese"],"ちまた":["japanese"],"ちみつ":["japanese"],"ちみどろ":["japanese"],"ちめいど":["japanese"],"ちゃんこなべ":["japanese"],"ちゅうい":["japanese"],"ちゆりょく":["japanese"],"ちょうし":["japanese"],"ちょさくけん":["japanese"],"ちらし":["japanese"],"ちらみ":["japanese"],"ちりがみ":["japanese"],"ちりょう":["japanese"],"ちるど":["japanese"],"ちわわ":["japanese"],"ちんたい":["japanese"],"ちんもく":["japanese"],"ついか":["japanese"],"ついたち":["japanese"],"つうか":["japanese"],"つうじょう":["japanese"],"つうはん":["japanese"],"つうわ":["japanese"],"つかう":["japanese"],"つかれる":["japanese"],"つくね":["japanese"],"つくる":["japanese"],"つけね":["japanese"],"つける":["japanese"],"つごう":["japanese"],"つたえる":["japanese"],"つづく":["japanese"],"つつじ":["japanese"],"つつむ":["japanese"],"つとめる":["japanese"],"つながる":["japanese"],"つなみ":["japanese"],"つねづね":["japanese"],"つのる":["japanese"],"つぶす":["japanese"],"つまらない":["japanese"],"つまる":["japanese"],"つみき":["japanese"],"つめたい":["japanese"],"つもり":["japanese"],"つもる":["japanese"],"つよい":["japanese"],"つるぼ":["japanese"],"つるみく":["japanese"],"つわもの":["japanese"],"つわり":["japanese"],"てあし":["japanese"],"てあて":["japanese"],"てあみ":["japanese"],"ていおん":["japanese"],"ていか":["japanese"],"ていき":["japanese"],"ていけい":["japanese"],"ていこく":["japanese"],"ていさつ":["japanese"],"ていし":["japanese"],"ていせい":["japanese"],"ていたい":["japanese"],"ていど":["japanese"],"ていねい":["japanese"],"ていひょう":["japanese"],"ていへん":["japanese"],"ていぼう":["japanese"],"てうち":["japanese"],"ておくれ":["japanese"],"てきとう":["japanese"],"てくび":["japanese"],"でこぼこ":["japanese"],"てさぎょう":["japanese"],"てさげ":["japanese"],"てすり":["japanese"],"てそう":["japanese"],"てちがい":["japanese"],"てちょう":["japanese"],"てつがく":["japanese"],"てつづき":["japanese"],"でっぱ":["japanese"],"てつぼう":["japanese"],"てつや":["japanese"],"でぬかえ":["japanese"],"てぬき":["japanese"],"てぬぐい":["japanese"],"てのひら":["japanese"],"てはい":["japanese"],"てぶくろ":["japanese"],"てふだ":["japanese"],"てほどき":["japanese"],"てほん":["japanese"],"てまえ":["japanese"],"てまきずし":["japanese"],"てみじか":["japanese"],"てみやげ":["japanese"],"てらす":["japanese"],"てれび":["japanese"],"てわけ":["japanese"],"てわたし":["japanese"],"でんあつ":["japanese"],"てんいん":["japanese"],"てんかい":["japanese"],"てんき":["japanese"],"てんぐ":["japanese"],"てんけん":["japanese"],"てんごく":["japanese"],"てんさい":["japanese"],"てんし":["japanese"],"てんすう":["japanese"],"でんち":["japanese"],"てんてき":["japanese"],"てんとう":["japanese"],"てんない":["japanese"],"てんぷら":["japanese"],"てんぼうだい":["japanese"],"てんめつ":["japanese"],"てんらんかい":["japanese"],"でんりょく":["japanese"],"でんわ":["japanese"],"どあい":["japanese"],"といれ":["japanese"],"どうかん":["japanese"],"とうきゅう":["japanese"],"どうぐ":["japanese"],"とうし":["japanese"],"とうむぎ":["japanese"],"とおい":["japanese"],"とおか":["japanese"],"とおく":["japanese"],"とおす":["japanese"],"とおる":["japanese"],"とかい":["japanese"],"とかす":["japanese"],"ときおり":["japanese"],"ときどき":["japanese"],"とくい":["japanese"],"とくしゅう":["japanese"],"とくてん":["japanese"],"とくに":["japanese"],"とくべつ":["japanese"],"とけい":["japanese"],"とける":["japanese"],"とこや":["japanese"],"とさか":["japanese"],"としょかん":["japanese"],"とそう":["japanese"],"とたん":["japanese"],"とちゅう":["japanese"],"とっきゅう":["japanese"],"とっくん":["japanese"],"とつぜん":["japanese"],"とつにゅう":["japanese"],"とどける":["japanese"],"ととのえる":["japanese"],"とない":["japanese"],"となえる":["japanese"],"となり":["japanese"],"とのさま":["japanese"],"とばす":["japanese"],"どぶがわ":["japanese"],"とほう":["japanese"],"とまる":["japanese"],"とめる":["japanese"],"ともだち":["japanese"],"ともる":["japanese"],"どようび":["japanese"],"とらえる":["japanese"],"とんかつ":["japanese"],"どんぶり":["japanese"],"ないかく":["japanese"],"ないこう":["japanese"],"ないしょ":["japanese"],"ないす":["japanese"],"ないせん":["japanese"],"ないそう":["japanese"],"なおす":["japanese"],"ながい":["japanese"],"なくす":["japanese"],"なげる":["japanese"],"なこうど":["japanese"],"なさけ":["japanese"],"なたでここ":["japanese"],"なっとう":["japanese"],"なつやすみ":["japanese"],"ななおし":["japanese"],"なにごと":["japanese"],"なにもの":["japanese"],"なにわ":["japanese"],"なのか":["japanese"],"なふだ":["japanese"],"なまいき":["japanese"],"なまえ":["japanese"],"なまみ":["japanese"],"なみだ":["japanese"],"なめらか":["japanese"],"なめる":["japanese"],"なやむ":["japanese"],"ならう":["japanese"],"ならび":["japanese"],"ならぶ":["japanese"],"なれる":["japanese"],"なわとび":["japanese"],"なわばり":["japanese"],"にあう":["japanese"],"にいがた":["japanese"],"にうけ":["japanese"],"におい":["japanese"],"にかい":["japanese"],"にがて":["japanese"],"にきび":["japanese"],"にくしみ":["japanese"],"にくまん":["japanese"],"にげる":["japanese"],"にさんかたんそ":["japanese"],"にしき":["japanese"],"にせもの":["japanese"],"にちじょう":["japanese"],"にちようび":["japanese"],"にっか":["japanese"],"にっき":["japanese"],"にっけい":["japanese"],"にっこう":["japanese"],"にっさん":["japanese"],"にっしょく":["japanese"],"にっすう":["japanese"],"にっせき":["japanese"],"にってい":["japanese"],"になう":["japanese"],"にほん":["japanese"],"にまめ":["japanese"],"にもつ":["japanese"],"にやり":["japanese"],"にゅういん":["japanese"],"にりんしゃ":["japanese"],"にわとり":["japanese"],"にんい":["japanese"],"にんか":["japanese"],"にんき":["japanese"],"にんげん":["japanese"],"にんしき":["japanese"],"にんずう":["japanese"],"にんそう":["japanese"],"にんたい":["japanese"],"にんち":["japanese"],"にんてい":["japanese"],"にんにく":["japanese"],"にんぷ":["japanese"],"にんまり":["japanese"],"にんむ":["japanese"],"にんめい":["japanese"],"にんよう":["japanese"],"ぬいくぎ":["japanese"],"ぬかす":["japanese"],"ぬぐいとる":["japanese"],"ぬぐう":["japanese"],"ぬくもり":["japanese"],"ぬすむ":["japanese"],"ぬまえび":["japanese"],"ぬめり":["japanese"],"ぬらす":["japanese"],"ぬんちゃく":["japanese"],"ねあげ":["japanese"],"ねいき":["japanese"],"ねいる":["japanese"],"ねいろ":["japanese"],"ねぐせ":["japanese"],"ねくたい":["japanese"],"ねくら":["japanese"],"ねこぜ":["japanese"],"ねこむ":["japanese"],"ねさげ":["japanese"],"ねすごす":["japanese"],"ねそべる":["japanese"],"ねだん":["japanese"],"ねつい":["japanese"],"ねっしん":["japanese"],"ねつぞう":["japanese"],"ねったいぎょ":["japanese"],"ねぶそく":["japanese"],"ねふだ":["japanese"],"ねぼう":["japanese"],"ねほりはほり":["japanese"],"ねまき":["japanese"],"ねまわし":["japanese"],"ねみみ":["japanese"],"ねむい":["japanese"],"ねむたい":["japanese"],"ねもと":["japanese"],"ねらう":["japanese"],"ねわざ":["japanese"],"ねんいり":["japanese"],"ねんおし":["japanese"],"ねんかん":["japanese"],"ねんきん":["japanese"],"ねんぐ":["japanese"],"ねんざ":["japanese"],"ねんし":["japanese"],"ねんちゃく":["japanese"],"ねんど":["japanese"],"ねんぴ":["japanese"],"ねんぶつ":["japanese"],"ねんまつ":["japanese"],"ねんりょう":["japanese"],"ねんれい":["japanese"],"のいず":["japanese"],"のおづま":["japanese"],"のがす":["japanese"],"のきなみ":["japanese"],"のこぎり":["japanese"],"のこす":["japanese"],"のこる":["japanese"],"のせる":["japanese"],"のぞく":["japanese"],"のぞむ":["japanese"],"のたまう":["japanese"],"のちほど":["japanese"],"のっく":["japanese"],"のばす":["japanese"],"のはら":["japanese"],"のべる":["japanese"],"のぼる":["japanese"],"のみもの":["japanese"],"のやま":["japanese"],"のらいぬ":["japanese"],"のらねこ":["japanese"],"のりもの":["japanese"],"のりゆき":["japanese"],"のれん":["japanese"],"のんき":["japanese"],"ばあい":["japanese"],"はあく":["japanese"],"ばあさん":["japanese"],"ばいか":["japanese"],"ばいく":["japanese"],"はいけん":["japanese"],"はいご":["japanese"],"はいしん":["japanese"],"はいすい":["japanese"],"はいせん":["japanese"],"はいそう":["japanese"],"はいち":["japanese"],"ばいばい":["japanese"],"はいれつ":["japanese"],"はえる":["japanese"],"はおる":["japanese"],"はかい":["japanese"],"ばかり":["japanese"],"はかる":["japanese"],"はくしゅ":["japanese"],"はけん":["japanese"],"はこぶ":["japanese"],"はさみ":["japanese"],"はさん":["japanese"],"はしご":["japanese"],"ばしょ":["japanese"],"はしる":["japanese"],"はせる":["japanese"],"ぱそこん":["japanese"],"はそん":["japanese"],"はたん":["japanese"],"はちみつ":["japanese"],"はつおん":["japanese"],"はっかく":["japanese"],"はづき":["japanese"],"はっきり":["japanese"],"はっくつ":["japanese"],"はっけん":["japanese"],"はっこう":["japanese"],"はっさん":["japanese"],"はっしん":["japanese"],"はったつ":["japanese"],"はっちゅう":["japanese"],"はってん":["japanese"],"はっぴょう":["japanese"],"はっぽう":["japanese"],"はなす":["japanese"],"はなび":["japanese"],"はにかむ":["japanese"],"はぶらし":["japanese"],"はみがき":["japanese"],"はむかう":["japanese"],"はめつ":["japanese"],"はやい":["japanese"],"はやし":["japanese"],"はらう":["japanese"],"はろうぃん":["japanese"],"はわい":["japanese"],"はんい":["japanese"],"はんえい":["japanese"],"はんおん":["japanese"],"はんかく":["japanese"],"はんきょう":["japanese"],"ばんぐみ":["japanese"],"はんこ":["japanese"],"はんしゃ":["japanese"],"はんすう":["japanese"],"はんだん":["japanese"],"ぱんち":["japanese"],"ぱんつ":["japanese"],"はんてい":["japanese"],"はんとし":["japanese"],"はんのう":["japanese"],"はんぱ":["japanese"],"はんぶん":["japanese"],"はんぺん":["japanese"],"はんぼうき":["japanese"],"はんめい":["japanese"],"はんらん":["japanese"],"はんろん":["japanese"],"ひいき":["japanese"],"ひうん":["japanese"],"ひえる":["japanese"],"ひかく":["japanese"],"ひかり":["japanese"],"ひかる":["japanese"],"ひかん":["japanese"],"ひくい":["japanese"],"ひけつ":["japanese"],"ひこうき":["japanese"],"ひこく":["japanese"],"ひさい":["japanese"],"ひさしぶり":["japanese"],"ひさん":["japanese"],"びじゅつかん":["japanese"],"ひしょ":["japanese"],"ひそか":["japanese"],"ひそむ":["japanese"],"ひたむき":["japanese"],"ひだり":["japanese"],"ひたる":["japanese"],"ひつぎ":["japanese"],"ひっこし":["japanese"],"ひっし":["japanese"],"ひつじゅひん":["japanese"],"ひっす":["japanese"],"ひつぜん":["japanese"],"ぴったり":["japanese"],"ぴっちり":["japanese"],"ひつよう":["japanese"],"ひてい":["japanese"],"ひとごみ":["japanese"],"ひなまつり":["japanese"],"ひなん":["japanese"],"ひねる":["japanese"],"ひはん":["japanese"],"ひびく":["japanese"],"ひひょう":["japanese"],"ひほう":["japanese"],"ひまわり":["japanese"],"ひまん":["japanese"],"ひみつ":["japanese"],"ひめい":["japanese"],"ひめじし":["japanese"],"ひやけ":["japanese"],"ひやす":["japanese"],"ひよう":["japanese"],"びょうき":["japanese"],"ひらがな":["japanese"],"ひらく":["japanese"],"ひりつ":["japanese"],"ひりょう":["japanese"],"ひるま":["japanese"],"ひるやすみ":["japanese"],"ひれい":["japanese"],"ひろい":["japanese"],"ひろう":["japanese"],"ひろき":["japanese"],"ひろゆき":["japanese"],"ひんかく":["japanese"],"ひんけつ":["japanese"],"ひんこん":["japanese"],"ひんしゅ":["japanese"],"ひんそう":["japanese"],"ぴんち":["japanese"],"ひんぱん":["japanese"],"びんぼう":["japanese"],"ふあん":["japanese"],"ふいうち":["japanese"],"ふうけい":["japanese"],"ふうせん":["japanese"],"ぷうたろう":["japanese"],"ふうとう":["japanese"],"ふうふ":["japanese"],"ふえる":["japanese"],"ふおん":["japanese"],"ふかい":["japanese"],"ふきん":["japanese"],"ふくざつ":["japanese"],"ふくぶくろ":["japanese"],"ふこう":["japanese"],"ふさい":["japanese"],"ふしぎ":["japanese"],"ふじみ":["japanese"],"ふすま":["japanese"],"ふせい":["japanese"],"ふせぐ":["japanese"],"ふそく":["japanese"],"ぶたにく":["japanese"],"ふたん":["japanese"],"ふちょう":["japanese"],"ふつう":["japanese"],"ふつか":["japanese"],"ふっかつ":["japanese"],"ふっき":["japanese"],"ふっこく":["japanese"],"ぶどう":["japanese"],"ふとる":["japanese"],"ふとん":["japanese"],"ふのう":["japanese"],"ふはい":["japanese"],"ふひょう":["japanese"],"ふへん":["japanese"],"ふまん":["japanese"],"ふみん":["japanese"],"ふめつ":["japanese"],"ふめん":["japanese"],"ふよう":["japanese"],"ふりこ":["japanese"],"ふりる":["japanese"],"ふるい":["japanese"],"ふんいき":["japanese"],"ぶんがく":["japanese"],"ぶんぐ":["japanese"],"ふんしつ":["japanese"],"ぶんせき":["japanese"],"ふんそう":["japanese"],"ぶんぽう":["japanese"],"へいあん":["japanese"],"へいおん":["japanese"],"へいがい":["japanese"],"へいき":["japanese"],"へいげん":["japanese"],"へいこう":["japanese"],"へいさ":["japanese"],"へいしゃ":["japanese"],"へいせつ":["japanese"],"へいそ":["japanese"],"へいたく":["japanese"],"へいてん":["japanese"],"へいねつ":["japanese"],"へいわ":["japanese"],"へきが":["japanese"],"へこむ":["japanese"],"べにいろ":["japanese"],"べにしょうが":["japanese"],"へらす":["japanese"],"へんかん":["japanese"],"べんきょう":["japanese"],"べんごし":["japanese"],"へんさい":["japanese"],"へんたい":["japanese"],"べんり":["japanese"],"ほあん":["japanese"],"ほいく":["japanese"],"ぼうぎょ":["japanese"],"ほうこく":["japanese"],"ほうそう":["japanese"],"ほうほう":["japanese"],"ほうもん":["japanese"],"ほうりつ":["japanese"],"ほえる":["japanese"],"ほおん":["japanese"],"ほかん":["japanese"],"ほきょう":["japanese"],"ぼきん":["japanese"],"ほくろ":["japanese"],"ほけつ":["japanese"],"ほけん":["japanese"],"ほこう":["japanese"],"ほこる":["japanese"],"ほしい":["japanese"],"ほしつ":["japanese"],"ほしゅ":["japanese"],"ほしょう":["japanese"],"ほせい":["japanese"],"ほそい":["japanese"],"ほそく":["japanese"],"ほたて":["japanese"],"ほたる":["japanese"],"ぽちぶくろ":["japanese"],"ほっきょく":["japanese"],"ほっさ":["japanese"],"ほったん":["japanese"],"ほとんど":["japanese"],"ほめる":["japanese"],"ほんい":["japanese"],"ほんき":["japanese"],"ほんけ":["japanese"],"ほんしつ":["japanese"],"ほんやく":["japanese"],"まいにち":["japanese"],"まかい":["japanese"],"まかせる":["japanese"],"まがる":["japanese"],"まける":["japanese"],"まこと":["japanese"],"まさつ":["japanese"],"まじめ":["japanese"],"ますく":["japanese"],"まぜる":["japanese"],"まつり":["japanese"],"まとめ":["japanese"],"まなぶ":["japanese"],"まぬけ":["japanese"],"まねく":["japanese"],"まほう":["japanese"],"まもる":["japanese"],"まゆげ":["japanese"],"まよう":["japanese"],"まろやか":["japanese"],"まわす":["japanese"],"まわり":["japanese"],"まわる":["japanese"],"まんが":["japanese"],"まんきつ":["japanese"],"まんぞく":["japanese"],"まんなか":["japanese"],"みいら":["japanese"],"みうち":["japanese"],"みえる":["japanese"],"みがく":["japanese"],"みかた":["japanese"],"みかん":["japanese"],"みけん":["japanese"],"みこん":["japanese"],"みじかい":["japanese"],"みすい":["japanese"],"みすえる":["japanese"],"みせる":["japanese"],"みっか":["japanese"],"みつかる":["japanese"],"みつける":["japanese"],"みてい":["japanese"],"みとめる":["japanese"],"みなと":["japanese"],"みなみかさい":["japanese"],"みねらる":["japanese"],"みのう":["japanese"],"みのがす":["japanese"],"みほん":["japanese"],"みもと":["japanese"],"みやげ":["japanese"],"みらい":["japanese"],"みりょく":["japanese"],"みわく":["japanese"],"みんか":["japanese"],"みんぞく":["japanese"],"むいか":["japanese"],"むえき":["japanese"],"むえん":["japanese"],"むかい":["japanese"],"むかう":["japanese"],"むかえ":["japanese"],"むかし":["japanese"],"むぎちゃ":["japanese"],"むける":["japanese"],"むげん":["japanese"],"むさぼる":["japanese"],"むしあつい":["japanese"],"むしば":["japanese"],"むじゅん":["japanese"],"むしろ":["japanese"],"むすう":["japanese"],"むすこ":["japanese"],"むすぶ":["japanese"],"むすめ":["japanese"],"むせる":["japanese"],"むせん":["japanese"],"むちゅう":["japanese"],"むなしい":["japanese"],"むのう":["japanese"],"むやみ":["japanese"],"むよう":["japanese"],"むらさき":["japanese"],"むりょう":["japanese"],"むろん":["japanese"],"めいあん":["japanese"],"めいうん":["japanese"],"めいえん":["japanese"],"めいかく":["japanese"],"めいきょく":["japanese"],"めいさい":["japanese"],"めいし":["japanese"],"めいそう":["japanese"],"めいぶつ":["japanese"],"めいれい":["japanese"],"めいわく":["japanese"],"めぐまれる":["japanese"],"めざす":["japanese"],"めした":["japanese"],"めずらしい":["japanese"],"めだつ":["japanese"],"めまい":["japanese"],"めやす":["japanese"],"めんきょ":["japanese"],"めんせき":["japanese"],"めんどう":["japanese"],"もうしあげる":["japanese"],"もうどうけん":["japanese"],"もえる":["japanese"],"もくし":["japanese"],"もくてき":["japanese"],"もくようび":["japanese"],"もちろん":["japanese"],"もどる":["japanese"],"もらう":["japanese"],"もんく":["japanese"],"もんだい":["japanese"],"やおや":["japanese"],"やける":["japanese"],"やさい":["japanese"],"やさしい":["japanese"],"やすい":["japanese"],"やすたろう":["japanese"],"やすみ":["japanese"],"やせる":["japanese"],"やそう":["japanese"],"やたい":["japanese"],"やちん":["japanese"],"やっと":["japanese"],"やっぱり":["japanese"],"やぶる":["japanese"],"やめる":["japanese"],"ややこしい":["japanese"],"やよい":["japanese"],"やわらかい":["japanese"],"ゆうき":["japanese"],"ゆうびんきょく":["japanese"],"ゆうべ":["japanese"],"ゆうめい":["japanese"],"ゆけつ":["japanese"],"ゆしゅつ":["japanese"],"ゆせん":["japanese"],"ゆそう":["japanese"],"ゆたか":["japanese"],"ゆちゃく":["japanese"],"ゆでる":["japanese"],"ゆにゅう":["japanese"],"ゆびわ":["japanese"],"ゆらい":["japanese"],"ゆれる":["japanese"],"ようい":["japanese"],"ようか":["japanese"],"ようきゅう":["japanese"],"ようじ":["japanese"],"ようす":["japanese"],"ようちえん":["japanese"],"よかぜ":["japanese"],"よかん":["japanese"],"よきん":["japanese"],"よくせい":["japanese"],"よくぼう":["japanese"],"よけい":["japanese"],"よごれる":["japanese"],"よさん":["japanese"],"よしゅう":["japanese"],"よそう":["japanese"],"よそく":["japanese"],"よっか":["japanese"],"よてい":["japanese"],"よどがわく":["japanese"],"よねつ":["japanese"],"よやく":["japanese"],"よゆう":["japanese"],"よろこぶ":["japanese"],"よろしい":["japanese"],"らいう":["japanese"],"らくがき":["japanese"],"らくご":["japanese"],"らくさつ":["japanese"],"らくだ":["japanese"],"らしんばん":["japanese"],"らせん":["japanese"],"らぞく":["japanese"],"らたい":["japanese"],"らっか":["japanese"],"られつ":["japanese"],"りえき":["japanese"],"りかい":["japanese"],"りきさく":["japanese"],"りきせつ":["japanese"],"りくぐん":["japanese"],"りくつ":["japanese"],"りけん":["japanese"],"りこう":["japanese"],"りせい":["japanese"],"りそう":["japanese"],"りそく":["japanese"],"りてん":["japanese"],"りねん":["japanese"],"りゆう":["japanese"],"りゅうがく":["japanese"],"りよう":["japanese"],"りょうり":["japanese"],"りょかん":["japanese"],"りょくちゃ":["japanese"],"りょこう":["japanese"],"りりく":["japanese"],"りれき":["japanese"],"りろん":["japanese"],"りんご":["japanese"],"るいけい":["japanese"],"るいさい":["japanese"],"るいじ":["japanese"],"るいせき":["japanese"],"るすばん":["japanese"],"るりがわら":["japanese"],"れいかん":["japanese"],"れいぎ":["japanese"],"れいせい":["japanese"],"れいぞうこ":["japanese"],"れいとう":["japanese"],"れいぼう":["japanese"],"れきし":["japanese"],"れきだい":["japanese"],"れんあい":["japanese"],"れんけい":["japanese"],"れんこん":["japanese"],"れんさい":["japanese"],"れんしゅう":["japanese"],"れんぞく":["japanese"],"れんらく":["japanese"],"ろうか":["japanese"],"ろうご":["japanese"],"ろうじん":["japanese"],"ろうそく":["japanese"],"ろくが":["japanese"],"ろこつ":["japanese"],"ろじうら":["japanese"],"ろしゅつ":["japanese"],"ろせん":["japanese"],"ろてん":["japanese"],"ろめん":["japanese"],"ろれつ":["japanese"],"ろんぎ":["japanese"],"ろんぱ":["japanese"],"ろんぶん":["japanese"],"ろんり":["japanese"],"わかす":["japanese"],"わかめ":["japanese"],"わかやま":["japanese"],"わかれる":["japanese"],"わしつ":["japanese"],"わじまし":["japanese"],"わすれもの":["japanese"],"わらう":["japanese"],"われる":["japanese"],"가격":["korean"],"가끔":["korean"],"가난":["korean"],"가능":["korean"],"가득":["korean"],"가르침":["korean"],"가뭄":["korean"],"가방":["korean"],"가상":["korean"],"가슴":["korean"],"가운데":["korean"],"가을":["korean"],"가이드":["korean"],"가입":["korean"],"가장":["korean"],"가정":["korean"],"가족":["korean"],"가죽":["korean"],"각오":["korean"],"각자":["korean"],"간격":["korean"],"간부":["korean"],"간섭":["korean"],"간장":["korean"],"간접":["korean"],"간판":["korean"],"갈등":["korean"],"갈비":["korean"],"갈색":["korean"],"갈증":["korean"],"감각":["korean"],"감기":["korean"],"감소":["korean"],"감수성":["korean"],"감자":["korean"],"감정":["korean"],"갑자기":["korean"],"강남":["korean"],"강당":["korean"],"강도":["korean"],"강력히":["korean"],"강변":["korean"],"강북":["korean"],"강사":["korean"],"강수량":["korean"],"강아지":["korean"],"강원도":["korean"],"강의":["korean"],"강제":["korean"],"강조":["korean"],"같이":["korean"],"개구리":["korean"],"개나리":["korean"],"개방":["korean"],"개별":["korean"],"개선":["korean"],"개성":["korean"],"개인":["korean"],"객관적":["korean"],"거실":["korean"],"거액":["korean"],"거울":["korean"],"거짓":["korean"],"거품":["korean"],"걱정":["korean"],"건강":["korean"],"건물":["korean"],"건설":["korean"],"건조":["korean"],"건축":["korean"],"걸음":["korean"],"검사":["korean"],"검토":["korean"],"게시판":["korean"],"게임":["korean"],"겨울":["korean"],"견해":["korean"],"결과":["korean"],"결국":["korean"],"결론":["korean"],"결석":["korean"],"결승":["korean"],"결심":["korean"],"결정":["korean"],"결혼":["korean"],"경계":["korean"],"경고":["korean"],"경기":["korean"],"경력":["korean"],"경복궁":["korean"],"경비":["korean"],"경상도":["korean"],"경영":["korean"],"경우":["korean"],"경쟁":["korean"],"경제":["korean"],"경주":["korean"],"경찰":["korean"],"경치":["korean"],"경향":["korean"],"경험":["korean"],"계곡":["korean"],"계단":["korean"],"계란":["korean"],"계산":["korean"],"계속":["korean"],"계약":["korean"],"계절":["korean"],"계층":["korean"],"계획":["korean"],"고객":["korean"],"고구려":["korean"],"고궁":["korean"],"고급":["korean"],"고등학생":["korean"],"고무신":["korean"],"고민":["korean"],"고양이":["korean"],"고장":["korean"],"고전":["korean"],"고집":["korean"],"고춧가루":["korean"],"고통":["korean"],"고향":["korean"],"곡식":["korean"],"골목":["korean"],"골짜기":["korean"],"골프":["korean"],"공간":["korean"],"공개":["korean"],"공격":["korean"],"공군":["korean"],"공급":["korean"],"공기":["korean"],"공동":["korean"],"공무원":["korean"],"공부":["korean"],"공사":["korean"],"공식":["korean"],"공업":["korean"],"공연":["korean"],"공원":["korean"],"공장":["korean"],"공짜":["korean"],"공책":["korean"],"공통":["korean"],"공포":["korean"],"공항":["korean"],"공휴일":["korean"],"과목":["korean"],"과일":["korean"],"과장":["korean"],"과정":["korean"],"과학":["korean"],"관객":["korean"],"관계":["korean"],"관광":["korean"],"관념":["korean"],"관람":["korean"],"관련":["korean"],"관리":["korean"],"관습":["korean"],"관심":["korean"],"관점":["korean"],"관찰":["korean"],"광경":["korean"],"광고":["korean"],"광장":["korean"],"광주":["korean"],"괴로움":["korean"],"굉장히":["korean"],"교과서":["korean"],"교문":["korean"],"교복":["korean"],"교실":["korean"],"교양":["korean"],"교육":["korean"],"교장":["korean"],"교직":["korean"],"교통":["korean"],"교환":["korean"],"교훈":["korean"],"구경":["korean"],"구름":["korean"],"구멍":["korean"],"구별":["korean"],"구분":["korean"],"구석":["korean"],"구성":["korean"],"구속":["korean"],"구역":["korean"],"구입":["korean"],"구청":["korean"],"구체적":["korean"],"국가":["korean"],"국기":["korean"],"국내":["korean"],"국립":["korean"],"국물":["korean"],"국민":["korean"],"국수":["korean"],"국어":["korean"],"국왕":["korean"],"국적":["korean"],"국제":["korean"],"국회":["korean"],"군대":["korean"],"군사":["korean"],"군인":["korean"],"궁극적":["korean"],"권리":["korean"],"권위":["korean"],"권투":["korean"],"귀국":["korean"],"귀신":["korean"],"규정":["korean"],"규칙":["korean"],"균형":["korean"],"그날":["korean"],"그냥":["korean"],"그늘":["korean"],"그러나":["korean"],"그룹":["korean"],"그릇":["korean"],"그림":["korean"],"그제서야":["korean"],"그토록":["korean"],"극복":["korean"],"극히":["korean"],"근거":["korean"],"근교":["korean"],"근래":["korean"],"근로":["korean"],"근무":["korean"],"근본":["korean"],"근원":["korean"],"근육":["korean"],"근처":["korean"],"글씨":["korean"],"글자":["korean"],"금강산":["korean"],"금고":["korean"],"금년":["korean"],"금메달":["korean"],"금액":["korean"],"금연":["korean"],"금요일":["korean"],"금지":["korean"],"긍정적":["korean"],"기간":["korean"],"기관":["korean"],"기념":["korean"],"기능":["korean"],"기독교":["korean"],"기둥":["korean"],"기록":["korean"],"기름":["korean"],"기법":["korean"],"기본":["korean"],"기분":["korean"],"기쁨":["korean"],"기숙사":["korean"],"기술":["korean"],"기억":["korean"],"기업":["korean"],"기온":["korean"],"기운":["korean"],"기원":["korean"],"기적":["korean"],"기준":["korean"],"기침":["korean"],"기혼":["korean"],"기획":["korean"],"긴급":["korean"],"긴장":["korean"],"길이":["korean"],"김밥":["korean"],"김치":["korean"],"김포공항":["korean"],"깍두기":["korean"],"깜빡":["korean"],"깨달음":["korean"],"깨소금":["korean"],"껍질":["korean"],"꼭대기":["korean"],"꽃잎":["korean"],"나들이":["korean"],"나란히":["korean"],"나머지":["korean"],"나물":["korean"],"나침반":["korean"],"나흘":["korean"],"낙엽":["korean"],"난방":["korean"],"날개":["korean"],"날씨":["korean"],"날짜":["korean"],"남녀":["korean"],"남대문":["korean"],"남매":["korean"],"남산":["korean"],"남자":["korean"],"남편":["korean"],"남학생":["korean"],"낭비":["korean"],"낱말":["korean"],"내년":["korean"],"내용":["korean"],"내일":["korean"],"냄비":["korean"],"냄새":["korean"],"냇물":["korean"],"냉동":["korean"],"냉면":["korean"],"냉방":["korean"],"냉장고":["korean"],"넥타이":["korean"],"넷째":["korean"],"노동":["korean"],"노란색":["korean"],"노력":["korean"],"노인":["korean"],"녹음":["korean"],"녹차":["korean"],"녹화":["korean"],"논리":["korean"],"논문":["korean"],"논쟁":["korean"],"놀이":["korean"],"농구":["korean"],"농담":["korean"],"농민":["korean"],"농부":["korean"],"농업":["korean"],"농장":["korean"],"농촌":["korean"],"높이":["korean"],"눈동자":["korean"],"눈물":["korean"],"눈썹":["korean"],"뉴욕":["korean"],"느낌":["korean"],"늑대":["korean"],"능동적":["korean"],"능력":["korean"],"다방":["korean"],"다양성":["korean"],"다음":["korean"],"다이어트":["korean"],"다행":["korean"],"단계":["korean"],"단골":["korean"],"단독":["korean"],"단맛":["korean"],"단순":["korean"],"단어":["korean"],"단위":["korean"],"단점":["korean"],"단체":["korean"],"단추":["korean"],"단편":["korean"],"단풍":["korean"],"달걀":["korean"],"달러":["korean"],"달력":["korean"],"달리":["korean"],"닭고기":["korean"],"담당":["korean"],"담배":["korean"],"담요":["korean"],"담임":["korean"],"답변":["korean"],"답장":["korean"],"당근":["korean"],"당분간":["korean"],"당연히":["korean"],"당장":["korean"],"대규모":["korean"],"대낮":["korean"],"대단히":["korean"],"대답":["korean"],"대도시":["korean"],"대략":["korean"],"대량":["korean"],"대륙":["korean"],"대문":["korean"],"대부분":["korean"],"대신":["korean"],"대응":["korean"],"대장":["korean"],"대전":["korean"],"대접":["korean"],"대중":["korean"],"대책":["korean"],"대출":["korean"],"대충":["korean"],"대통령":["korean"],"대학":["korean"],"대한민국":["korean"],"대합실":["korean"],"대형":["korean"],"덩어리":["korean"],"데이트":["korean"],"도대체":["korean"],"도덕":["korean"],"도둑":["korean"],"도망":["korean"],"도서관":["korean"],"도심":["korean"],"도움":["korean"],"도입":["korean"],"도자기":["korean"],"도저히":["korean"],"도전":["korean"],"도중":["korean"],"도착":["korean"],"독감":["korean"],"독립":["korean"],"독서":["korean"],"독일":["korean"],"독창적":["korean"],"동화책":["korean"],"뒷모습":["korean"],"뒷산":["korean"],"딸아이":["korean"],"마누라":["korean"],"마늘":["korean"],"마당":["korean"],"마라톤":["korean"],"마련":["korean"],"마무리":["korean"],"마사지":["korean"],"마약":["korean"],"마요네즈":["korean"],"마을":["korean"],"마음":["korean"],"마이크":["korean"],"마중":["korean"],"마지막":["korean"],"마찬가지":["korean"],"마찰":["korean"],"마흔":["korean"],"막걸리":["korean"],"막내":["korean"],"막상":["korean"],"만남":["korean"],"만두":["korean"],"만세":["korean"],"만약":["korean"],"만일":["korean"],"만점":["korean"],"만족":["korean"],"만화":["korean"],"많이":["korean"],"말기":["korean"],"말씀":["korean"],"말투":["korean"],"맘대로":["korean"],"망원경":["korean"],"매년":["korean"],"매달":["korean"],"매력":["korean"],"매번":["korean"],"매스컴":["korean"],"매일":["korean"],"매장":["korean"],"맥주":["korean"],"먹이":["korean"],"먼저":["korean"],"먼지":["korean"],"멀리":["korean"],"메일":["korean"],"며느리":["korean"],"며칠":["korean"],"면담":["korean"],"멸치":["korean"],"명단":["korean"],"명령":["korean"],"명예":["korean"],"명의":["korean"],"명절":["korean"],"명칭":["korean"],"명함":["korean"],"모금":["korean"],"모니터":["korean"],"모델":["korean"],"모든":["korean"],"모범":["korean"],"모습":["korean"],"모양":["korean"],"모임":["korean"],"모조리":["korean"],"모집":["korean"],"모퉁이":["korean"],"목걸이":["korean"],"목록":["korean"],"목사":["korean"],"목소리":["korean"],"목숨":["korean"],"목적":["korean"],"목표":["korean"],"몰래":["korean"],"몸매":["korean"],"몸무게":["korean"],"몸살":["korean"],"몸속":["korean"],"몸짓":["korean"],"몸통":["korean"],"몹시":["korean"],"무관심":["korean"],"무궁화":["korean"],"무더위":["korean"],"무덤":["korean"],"무릎":["korean"],"무슨":["korean"],"무엇":["korean"],"무역":["korean"],"무용":["korean"],"무조건":["korean"],"무지개":["korean"],"무척":["korean"],"문구":["korean"],"문득":["korean"],"문법":["korean"],"문서":["korean"],"문제":["korean"],"문학":["korean"],"문화":["korean"],"물가":["korean"],"물건":["korean"],"물결":["korean"],"물고기":["korean"],"물론":["korean"],"물리학":["korean"],"물음":["korean"],"물질":["korean"],"물체":["korean"],"미국":["korean"],"미디어":["korean"],"미사일":["korean"],"미술":["korean"],"미역":["korean"],"미용실":["korean"],"미움":["korean"],"미인":["korean"],"미팅":["korean"],"미혼":["korean"],"민간":["korean"],"민족":["korean"],"민주":["korean"],"믿음":["korean"],"밀가루":["korean"],"밀리미터":["korean"],"밑바닥":["korean"],"바가지":["korean"],"바구니":["korean"],"바나나":["korean"],"바늘":["korean"],"바닥":["korean"],"바닷가":["korean"],"바람":["korean"],"바이러스":["korean"],"바탕":["korean"],"박물관":["korean"],"박사":["korean"],"박수":["korean"],"반대":["korean"],"반드시":["korean"],"반말":["korean"],"반발":["korean"],"반성":["korean"],"반응":["korean"],"반장":["korean"],"반죽":["korean"],"반지":["korean"],"반찬":["korean"],"받침":["korean"],"발가락":["korean"],"발걸음":["korean"],"발견":["korean"],"발달":["korean"],"발레":["korean"],"발목":["korean"],"발바닥":["korean"],"발생":["korean"],"발음":["korean"],"발자국":["korean"],"발전":["korean"],"발톱":["korean"],"발표":["korean"],"밤하늘":["korean"],"밥그릇":["korean"],"밥맛":["korean"],"밥상":["korean"],"밥솥":["korean"],"방금":["korean"],"방면":["korean"],"방문":["korean"],"방바닥":["korean"],"방법":["korean"],"방송":["korean"],"방식":["korean"],"방안":["korean"],"방울":["korean"],"방지":["korean"],"방학":["korean"],"방해":["korean"],"방향":["korean"],"배경":["korean"],"배꼽":["korean"],"배달":["korean"],"배드민턴":["korean"],"백두산":["korean"],"백색":["korean"],"백성":["korean"],"백인":["korean"],"백제":["korean"],"백화점":["korean"],"버릇":["korean"],"버섯":["korean"],"버튼":["korean"],"번개":["korean"],"번역":["korean"],"번지":["korean"],"번호":["korean"],"벌금":["korean"],"벌레":["korean"],"벌써":["korean"],"범위":["korean"],"범인":["korean"],"범죄":["korean"],"법률":["korean"],"법원":["korean"],"법적":["korean"],"법칙":["korean"],"베이징":["korean"],"벨트":["korean"],"변경":["korean"],"변동":["korean"],"변명":["korean"],"변신":["korean"],"변호사":["korean"],"변화":["korean"],"별도":["korean"],"별명":["korean"],"별일":["korean"],"병실":["korean"],"병아리":["korean"],"병원":["korean"],"보관":["korean"],"보너스":["korean"],"보라색":["korean"],"보람":["korean"],"보름":["korean"],"보상":["korean"],"보안":["korean"],"보자기":["korean"],"보장":["korean"],"보전":["korean"],"보존":["korean"],"보통":["korean"],"보편적":["korean"],"보험":["korean"],"복도":["korean"],"복사":["korean"],"복숭아":["korean"],"복습":["korean"],"볶음":["korean"],"본격적":["korean"],"본래":["korean"],"본부":["korean"],"본사":["korean"],"본성":["korean"],"본인":["korean"],"본질":["korean"],"볼펜":["korean"],"봉사":["korean"],"봉지":["korean"],"봉투":["korean"],"부근":["korean"],"부끄러움":["korean"],"부담":["korean"],"부동산":["korean"],"부문":["korean"],"부분":["korean"],"부산":["korean"],"부상":["korean"],"부엌":["korean"],"부인":["korean"],"부작용":["korean"],"부장":["korean"],"부정":["korean"],"부족":["korean"],"부지런히":["korean"],"부친":["korean"],"부탁":["korean"],"부품":["korean"],"부회장":["korean"],"북부":["korean"],"북한":["korean"],"분노":["korean"],"분량":["korean"],"분리":["korean"],"분명":["korean"],"분석":["korean"],"분야":["korean"],"분위기":["korean"],"분필":["korean"],"분홍색":["korean"],"불고기":["korean"],"불과":["korean"],"불교":["korean"],"불꽃":["korean"],"불만":["korean"],"불법":["korean"],"불빛":["korean"],"불안":["korean"],"불이익":["korean"],"불행":["korean"],"브랜드":["korean"],"비극":["korean"],"비난":["korean"],"비닐":["korean"],"비둘기":["korean"],"비디오":["korean"],"비로소":["korean"],"비만":["korean"],"비명":["korean"],"비밀":["korean"],"비바람":["korean"],"비빔밥":["korean"],"비상":["korean"],"비용":["korean"],"비율":["korean"],"비중":["korean"],"비타민":["korean"],"비판":["korean"],"빌딩":["korean"],"빗물":["korean"],"빗방울":["korean"],"빗줄기":["korean"],"빛깔":["korean"],"빨간색":["korean"],"빨래":["korean"],"빨리":["korean"],"사건":["korean"],"사계절":["korean"],"사나이":["korean"],"사냥":["korean"],"사람":["korean"],"사랑":["korean"],"사립":["korean"],"사모님":["korean"],"사물":["korean"],"사방":["korean"],"사상":["korean"],"사생활":["korean"],"사설":["korean"],"사슴":["korean"],"사실":["korean"],"사업":["korean"],"사용":["korean"],"사월":["korean"],"사장":["korean"],"사전":["korean"],"사진":["korean"],"사촌":["korean"],"사춘기":["korean"],"사탕":["korean"],"사투리":["korean"],"사흘":["korean"],"산길":["korean"],"산부인과":["korean"],"산업":["korean"],"산책":["korean"],"살림":["korean"],"살인":["korean"],"살짝":["korean"],"삼계탕":["korean"],"삼국":["korean"],"삼십":["korean"],"삼월":["korean"],"삼촌":["korean"],"상관":["korean"],"상금":["korean"],"상대":["korean"],"상류":["korean"],"상반기":["korean"],"상상":["korean"],"상식":["korean"],"상업":["korean"],"상인":["korean"],"상자":["korean"],"상점":["korean"],"상처":["korean"],"상추":["korean"],"상태":["korean"],"상표":["korean"],"상품":["korean"],"상황":["korean"],"새벽":["korean"],"색깔":["korean"],"색연필":["korean"],"생각":["korean"],"생명":["korean"],"생물":["korean"],"생방송":["korean"],"생산":["korean"],"생선":["korean"],"생신":["korean"],"생일":["korean"],"생활":["korean"],"서랍":["korean"],"서른":["korean"],"서명":["korean"],"서민":["korean"],"서비스":["korean"],"서양":["korean"],"서울":["korean"],"서적":["korean"],"서점":["korean"],"서쪽":["korean"],"서클":["korean"],"석사":["korean"],"석유":["korean"],"선거":["korean"],"선물":["korean"],"선배":["korean"],"선생":["korean"],"선수":["korean"],"선원":["korean"],"선장":["korean"],"선전":["korean"],"선택":["korean"],"선풍기":["korean"],"설거지":["korean"],"설날":["korean"],"설렁탕":["korean"],"설명":["korean"],"설문":["korean"],"설사":["korean"],"설악산":["korean"],"설치":["korean"],"설탕":["korean"],"섭씨":["korean"],"성공":["korean"],"성당":["korean"],"성명":["korean"],"성별":["korean"],"성인":["korean"],"성장":["korean"],"성적":["korean"],"성질":["korean"],"성함":["korean"],"세금":["korean"],"세미나":["korean"],"세상":["korean"],"세월":["korean"],"세종대왕":["korean"],"세탁":["korean"],"센터":["korean"],"센티미터":["korean"],"셋째":["korean"],"소규모":["korean"],"소극적":["korean"],"소금":["korean"],"소나기":["korean"],"소년":["korean"],"소득":["korean"],"소망":["korean"],"소문":["korean"],"소설":["korean"],"소속":["korean"],"소아과":["korean"],"소용":["korean"],"소원":["korean"],"소음":["korean"],"소중히":["korean"],"소지품":["korean"],"소질":["korean"],"소풍":["korean"],"소형":["korean"],"속담":["korean"],"속도":["korean"],"속옷":["korean"],"손가락":["korean"],"손길":["korean"],"손녀":["korean"],"손님":["korean"],"손등":["korean"],"손목":["korean"],"손뼉":["korean"],"손실":["korean"],"손질":["korean"],"손톱":["korean"],"손해":["korean"],"솔직히":["korean"],"솜씨":["korean"],"송아지":["korean"],"송이":["korean"],"송편":["korean"],"쇠고기":["korean"],"쇼핑":["korean"],"수건":["korean"],"수년":["korean"],"수단":["korean"],"수돗물":["korean"],"수동적":["korean"],"수면":["korean"],"수명":["korean"],"수박":["korean"],"수상":["korean"],"수석":["korean"],"수술":["korean"],"수시로":["korean"],"수업":["korean"],"수염":["korean"],"수영":["korean"],"수입":["korean"],"수준":["korean"],"수집":["korean"],"수출":["korean"],"수컷":["korean"],"수필":["korean"],"수학":["korean"],"수험생":["korean"],"수화기":["korean"],"숙녀":["korean"],"숙소":["korean"],"숙제":["korean"],"순간":["korean"],"순서":["korean"],"순수":["korean"],"순식간":["korean"],"순위":["korean"],"숟가락":["korean"],"술병":["korean"],"술집":["korean"],"숫자":["korean"],"스님":["korean"],"스물":["korean"],"스스로":["korean"],"스승":["korean"],"스웨터":["korean"],"스위치":["korean"],"스케이트":["korean"],"스튜디오":["korean"],"스트레스":["korean"],"스포츠":["korean"],"슬쩍":["korean"],"슬픔":["korean"],"습관":["korean"],"습기":["korean"],"승객":["korean"],"승리":["korean"],"승부":["korean"],"승용차":["korean"],"승진":["korean"],"시각":["korean"],"시간":["korean"],"시골":["korean"],"시금치":["korean"],"시나리오":["korean"],"시댁":["korean"],"시리즈":["korean"],"시멘트":["korean"],"시민":["korean"],"시부모":["korean"],"시선":["korean"],"시설":["korean"],"시스템":["korean"],"시아버지":["korean"],"시어머니":["korean"],"시월":["korean"],"시인":["korean"],"시일":["korean"],"시작":["korean"],"시장":["korean"],"시절":["korean"],"시점":["korean"],"시중":["korean"],"시즌":["korean"],"시집":["korean"],"시청":["korean"],"시합":["korean"],"시험":["korean"],"식구":["korean"],"식기":["korean"],"식당":["korean"],"식량":["korean"],"식료품":["korean"],"식물":["korean"],"식빵":["korean"],"식사":["korean"],"식생활":["korean"],"식초":["korean"],"식탁":["korean"],"식품":["korean"],"신고":["korean"],"신규":["korean"],"신념":["korean"],"신문":["korean"],"신발":["korean"],"신비":["korean"],"신사":["korean"],"신세":["korean"],"신용":["korean"],"신제품":["korean"],"신청":["korean"],"신체":["korean"],"신화":["korean"],"실감":["korean"],"실내":["korean"],"실력":["korean"],"실례":["korean"],"실망":["korean"],"실수":["korean"],"실습":["korean"],"실시":["korean"],"실장":["korean"],"실정":["korean"],"실질적":["korean"],"실천":["korean"],"실체":["korean"],"실컷":["korean"],"실태":["korean"],"실패":["korean"],"실험":["korean"],"실현":["korean"],"심리":["korean"],"심부름":["korean"],"심사":["korean"],"심장":["korean"],"심정":["korean"],"심판":["korean"],"쌍둥이":["korean"],"씨름":["korean"],"씨앗":["korean"],"아가씨":["korean"],"아나운서":["korean"],"아드님":["korean"],"아들":["korean"],"아쉬움":["korean"],"아스팔트":["korean"],"아시아":["korean"],"아울러":["korean"],"아저씨":["korean"],"아줌마":["korean"],"아직":["korean"],"아침":["korean"],"아파트":["korean"],"아프리카":["korean"],"아픔":["korean"],"아홉":["korean"],"아흔":["korean"],"악기":["korean"],"악몽":["korean"],"악수":["korean"],"안개":["korean"],"안경":["korean"],"안과":["korean"],"안내":["korean"],"안녕":["korean"],"안동":["korean"],"안방":["korean"],"안부":["korean"],"안주":["korean"],"알루미늄":["korean"],"알코올":["korean"],"암시":["korean"],"암컷":["korean"],"압력":["korean"],"앞날":["korean"],"앞문":["korean"],"애인":["korean"],"애정":["korean"],"액수":["korean"],"앨범":["korean"],"야간":["korean"],"야단":["korean"],"야옹":["korean"],"약간":["korean"],"약국":["korean"],"약속":["korean"],"약수":["korean"],"약점":["korean"],"약품":["korean"],"약혼녀":["korean"],"양념":["korean"],"양력":["korean"],"양말":["korean"],"양배추":["korean"],"양주":["korean"],"양파":["korean"],"어둠":["korean"],"어려움":["korean"],"어른":["korean"],"어젯밤":["korean"],"어쨌든":["korean"],"어쩌다가":["korean"],"어쩐지":["korean"],"언니":["korean"],"언덕":["korean"],"언론":["korean"],"언어":["korean"],"얼굴":["korean"],"얼른":["korean"],"얼음":["korean"],"얼핏":["korean"],"엄마":["korean"],"업무":["korean"],"업종":["korean"],"업체":["korean"],"엉덩이":["korean"],"엉망":["korean"],"엉터리":["korean"],"엊그제":["korean"],"에너지":["korean"],"에어컨":["korean"],"엔진":["korean"],"여건":["korean"],"여고생":["korean"],"여관":["korean"],"여군":["korean"],"여권":["korean"],"여대생":["korean"],"여덟":["korean"],"여동생":["korean"],"여든":["korean"],"여론":["korean"],"여름":["korean"],"여섯":["korean"],"여성":["korean"],"여왕":["korean"],"여인":["korean"],"여전히":["korean"],"여직원":["korean"],"여학생":["korean"],"여행":["korean"],"역사":["korean"],"역시":["korean"],"역할":["korean"],"연결":["korean"],"연구":["korean"],"연극":["korean"],"연기":["korean"],"연락":["korean"],"연설":["korean"],"연세":["korean"],"연속":["korean"],"연습":["korean"],"연애":["korean"],"연예인":["korean"],"연인":["korean"],"연장":["korean"],"연주":["korean"],"연출":["korean"],"연필":["korean"],"연합":["korean"],"연휴":["korean"],"열기":["korean"],"열매":["korean"],"열쇠":["korean"],"열심히":["korean"],"열정":["korean"],"열차":["korean"],"열흘":["korean"],"염려":["korean"],"엽서":["korean"],"영국":["korean"],"영남":["korean"],"영상":["korean"],"영양":["korean"],"영역":["korean"],"영웅":["korean"],"영원히":["korean"],"영하":["korean"],"영향":["korean"],"영혼":["korean"],"영화":["korean"],"옆구리":["korean"],"옆방":["korean"],"옆집":["korean"],"예감":["korean"],"예금":["korean"],"예방":["korean"],"예산":["korean"],"예상":["korean"],"예선":["korean"],"예술":["korean"],"예습":["korean"],"예식장":["korean"],"예약":["korean"],"예전":["korean"],"예절":["korean"],"예정":["korean"],"예컨대":["korean"],"옛날":["korean"],"오늘":["korean"],"오락":["korean"],"오랫동안":["korean"],"오렌지":["korean"],"오로지":["korean"],"오른발":["korean"],"오븐":["korean"],"오십":["korean"],"오염":["korean"],"오월":["korean"],"오전":["korean"],"오직":["korean"],"오징어":["korean"],"오페라":["korean"],"오피스텔":["korean"],"오히려":["korean"],"옥상":["korean"],"옥수수":["korean"],"온갖":["korean"],"온라인":["korean"],"온몸":["korean"],"온종일":["korean"],"온통":["korean"],"올가을":["korean"],"올림픽":["korean"],"올해":["korean"],"옷차림":["korean"],"와이셔츠":["korean"],"와인":["korean"],"완성":["korean"],"완전":["korean"],"왕비":["korean"],"왕자":["korean"],"왜냐하면":["korean"],"왠지":["korean"],"외갓집":["korean"],"외국":["korean"],"외로움":["korean"],"외삼촌":["korean"],"외출":["korean"],"외침":["korean"],"외할머니":["korean"],"왼발":["korean"],"왼손":["korean"],"왼쪽":["korean"],"요금":["korean"],"요일":["korean"],"요즘":["korean"],"요청":["korean"],"용기":["korean"],"용서":["korean"],"용어":["korean"],"우산":["korean"],"우선":["korean"],"우승":["korean"],"우연히":["korean"],"우정":["korean"],"우체국":["korean"],"우편":["korean"],"운동":["korean"],"운명":["korean"],"운반":["korean"],"운전":["korean"],"운행":["korean"],"울산":["korean"],"울음":["korean"],"움직임":["korean"],"웃어른":["korean"],"웃음":["korean"],"워낙":["korean"],"원고":["korean"],"원래":["korean"],"원서":["korean"],"원숭이":["korean"],"원인":["korean"],"원장":["korean"],"원피스":["korean"],"월급":["korean"],"월드컵":["korean"],"월세":["korean"],"월요일":["korean"],"웨이터":["korean"],"위반":["korean"],"위법":["korean"],"위성":["korean"],"위원":["korean"],"위험":["korean"],"위협":["korean"],"윗사람":["korean"],"유난히":["korean"],"유럽":["korean"],"유명":["korean"],"유물":["korean"],"유산":["korean"],"유적":["korean"],"유치원":["korean"],"유학":["korean"],"유행":["korean"],"유형":["korean"],"육군":["korean"],"육상":["korean"],"육십":["korean"],"육체":["korean"],"은행":["korean"],"음력":["korean"],"음료":["korean"],"음반":["korean"],"음성":["korean"],"음식":["korean"],"음악":["korean"],"음주":["korean"],"의견":["korean"],"의논":["korean"],"의문":["korean"],"의복":["korean"],"의식":["korean"],"의심":["korean"],"의외로":["korean"],"의욕":["korean"],"의원":["korean"],"의학":["korean"],"이것":["korean"],"이곳":["korean"],"이념":["korean"],"이놈":["korean"],"이달":["korean"],"이대로":["korean"],"이동":["korean"],"이렇게":["korean"],"이력서":["korean"],"이론적":["korean"],"이름":["korean"],"이민":["korean"],"이발소":["korean"],"이별":["korean"],"이불":["korean"],"이빨":["korean"],"이상":["korean"],"이성":["korean"],"이슬":["korean"],"이야기":["korean"],"이용":["korean"],"이웃":["korean"],"이월":["korean"],"이윽고":["korean"],"이익":["korean"],"이전":["korean"],"이중":["korean"],"이튿날":["korean"],"이틀":["korean"],"이혼":["korean"],"인간":["korean"],"인격":["korean"],"인공":["korean"],"인구":["korean"],"인근":["korean"],"인기":["korean"],"인도":["korean"],"인류":["korean"],"인물":["korean"],"인생":["korean"],"인쇄":["korean"],"인연":["korean"],"인원":["korean"],"인재":["korean"],"인종":["korean"],"인천":["korean"],"인체":["korean"],"인터넷":["korean"],"인하":["korean"],"인형":["korean"],"일곱":["korean"],"일기":["korean"],"일단":["korean"],"일대":["korean"],"일등":["korean"],"일반":["korean"],"일본":["korean"],"일부":["korean"],"일상":["korean"],"일생":["korean"],"일손":["korean"],"일요일":["korean"],"일월":["korean"],"일정":["korean"],"일종":["korean"],"일주일":["korean"],"일찍":["korean"],"일체":["korean"],"일치":["korean"],"일행":["korean"],"일회용":["korean"],"임금":["korean"],"임무":["korean"],"입대":["korean"],"입력":["korean"],"입맛":["korean"],"입사":["korean"],"입술":["korean"],"입시":["korean"],"입원":["korean"],"입장":["korean"],"입학":["korean"],"자가용":["korean"],"자격":["korean"],"자극":["korean"],"자동":["korean"],"자랑":["korean"],"자부심":["korean"],"자식":["korean"],"자신":["korean"],"자연":["korean"],"자원":["korean"],"자율":["korean"],"자전거":["korean"],"자정":["korean"],"자존심":["korean"],"자판":["korean"],"작가":["korean"],"작년":["korean"],"작성":["korean"],"작업":["korean"],"작용":["korean"],"작은딸":["korean"],"작품":["korean"],"잔디":["korean"],"잔뜩":["korean"],"잔치":["korean"],"잘못":["korean"],"잠깐":["korean"],"잠수함":["korean"],"잠시":["korean"],"잠옷":["korean"],"잠자리":["korean"],"잡지":["korean"],"장관":["korean"],"장군":["korean"],"장기간":["korean"],"장래":["korean"],"장례":["korean"],"장르":["korean"],"장마":["korean"],"장면":["korean"],"장모":["korean"],"장미":["korean"],"장비":["korean"],"장사":["korean"],"장소":["korean"],"장식":["korean"],"장애인":["korean"],"장인":["korean"],"장점":["korean"],"장차":["korean"],"장학금":["korean"],"재능":["korean"],"재빨리":["korean"],"재산":["korean"],"재생":["korean"],"재작년":["korean"],"재정":["korean"],"재채기":["korean"],"재판":["korean"],"재학":["korean"],"재활용":["korean"],"저것":["korean"],"저고리":["korean"],"저곳":["korean"],"저녁":["korean"],"저런":["korean"],"저렇게":["korean"],"저번":["korean"],"저울":["korean"],"저절로":["korean"],"저축":["korean"],"적극":["korean"],"적당히":["korean"],"적성":["korean"],"적용":["korean"],"적응":["korean"],"전개":["korean"],"전공":["korean"],"전기":["korean"],"전달":["korean"],"전라도":["korean"],"전망":["korean"],"전문":["korean"],"전반":["korean"],"전부":["korean"],"전세":["korean"],"전시":["korean"],"전용":["korean"],"전자":["korean"],"전쟁":["korean"],"전주":["korean"],"전철":["korean"],"전체":["korean"],"전통":["korean"],"전혀":["korean"],"전후":["korean"],"절대":["korean"],"절망":["korean"],"절반":["korean"],"절약":["korean"],"절차":["korean"],"점검":["korean"],"점수":["korean"],"점심":["korean"],"점원":["korean"],"점점":["korean"],"점차":["korean"],"접근":["korean"],"접시":["korean"],"접촉":["korean"],"젓가락":["korean"],"정거장":["korean"],"정도":["korean"],"정류장":["korean"],"정리":["korean"],"정말":["korean"],"정면":["korean"],"정문":["korean"],"정반대":["korean"],"정보":["korean"],"정부":["korean"],"정비":["korean"],"정상":["korean"],"정성":["korean"],"정오":["korean"],"정원":["korean"],"정장":["korean"],"정지":["korean"],"정치":["korean"],"정확히":["korean"],"제공":["korean"],"제과점":["korean"],"제대로":["korean"],"제목":["korean"],"제발":["korean"],"제법":["korean"],"제삿날":["korean"],"제안":["korean"],"제일":["korean"],"제작":["korean"],"제주도":["korean"],"제출":["korean"],"제품":["korean"],"제한":["korean"],"조각":["korean"],"조건":["korean"],"조금":["korean"],"조깅":["korean"],"조명":["korean"],"조미료":["korean"],"조상":["korean"],"조선":["korean"],"조용히":["korean"],"조절":["korean"],"조정":["korean"],"조직":["korean"],"존댓말":["korean"],"존재":["korean"],"졸업":["korean"],"졸음":["korean"],"종교":["korean"],"종로":["korean"],"종류":["korean"],"종소리":["korean"],"종업원":["korean"],"종종":["korean"],"종합":["korean"],"좌석":["korean"],"죄인":["korean"],"주관적":["korean"],"주름":["korean"],"주말":["korean"],"주머니":["korean"],"주먹":["korean"],"주문":["korean"],"주민":["korean"],"주방":["korean"],"주변":["korean"],"주식":["korean"],"주인":["korean"],"주일":["korean"],"주장":["korean"],"주전자":["korean"],"주택":["korean"],"준비":["korean"],"줄거리":["korean"],"줄기":["korean"],"줄무늬":["korean"],"중간":["korean"],"중계방송":["korean"],"중국":["korean"],"중년":["korean"],"중단":["korean"],"중독":["korean"],"중반":["korean"],"중부":["korean"],"중세":["korean"],"중소기업":["korean"],"중순":["korean"],"중앙":["korean"],"중요":["korean"],"중학교":["korean"],"즉석":["korean"],"즉시":["korean"],"즐거움":["korean"],"증가":["korean"],"증거":["korean"],"증권":["korean"],"증상":["korean"],"증세":["korean"],"지각":["korean"],"지갑":["korean"],"지경":["korean"],"지극히":["korean"],"지금":["korean"],"지급":["korean"],"지능":["korean"],"지름길":["korean"],"지리산":["korean"],"지방":["korean"],"지붕":["korean"],"지식":["korean"],"지역":["korean"],"지우개":["korean"],"지원":["korean"],"지적":["korean"],"지점":["korean"],"지진":["korean"],"지출":["korean"],"직선":["korean"],"직업":["korean"],"직원":["korean"],"직장":["korean"],"진급":["korean"],"진동":["korean"],"진로":["korean"],"진료":["korean"],"진리":["korean"],"진짜":["korean"],"진찰":["korean"],"진출":["korean"],"진통":["korean"],"진행":["korean"],"질문":["korean"],"질병":["korean"],"질서":["korean"],"짐작":["korean"],"집단":["korean"],"집안":["korean"],"집중":["korean"],"짜증":["korean"],"찌꺼기":["korean"],"차남":["korean"],"차라리":["korean"],"차량":["korean"],"차림":["korean"],"차별":["korean"],"차선":["korean"],"차츰":["korean"],"착각":["korean"],"찬물":["korean"],"찬성":["korean"],"참가":["korean"],"참기름":["korean"],"참새":["korean"],"참석":["korean"],"참여":["korean"],"참외":["korean"],"참조":["korean"],"찻잔":["korean"],"창가":["korean"],"창고":["korean"],"창구":["korean"],"창문":["korean"],"창밖":["korean"],"창작":["korean"],"창조":["korean"],"채널":["korean"],"채점":["korean"],"책가방":["korean"],"책방":["korean"],"책상":["korean"],"책임":["korean"],"챔피언":["korean"],"처벌":["korean"],"처음":["korean"],"천국":["korean"],"천둥":["korean"],"천장":["korean"],"천재":["korean"],"천천히":["korean"],"철도":["korean"],"철저히":["korean"],"철학":["korean"],"첫날":["korean"],"첫째":["korean"],"청년":["korean"],"청바지":["korean"],"청소":["korean"],"청춘":["korean"],"체계":["korean"],"체력":["korean"],"체온":["korean"],"체육":["korean"],"체중":["korean"],"체험":["korean"],"초등학생":["korean"],"초반":["korean"],"초밥":["korean"],"초상화":["korean"],"초순":["korean"],"초여름":["korean"],"초원":["korean"],"초저녁":["korean"],"초점":["korean"],"초청":["korean"],"초콜릿":["korean"],"촛불":["korean"],"총각":["korean"],"총리":["korean"],"총장":["korean"],"촬영":["korean"],"최근":["korean"],"최상":["korean"],"최선":["korean"],"최신":["korean"],"최악":["korean"],"최종":["korean"],"추석":["korean"],"추억":["korean"],"추진":["korean"],"추천":["korean"],"추측":["korean"],"축구":["korean"],"축소":["korean"],"축제":["korean"],"축하":["korean"],"출근":["korean"],"출발":["korean"],"출산":["korean"],"출신":["korean"],"출연":["korean"],"출입":["korean"],"출장":["korean"],"출판":["korean"],"충격":["korean"],"충고":["korean"],"충돌":["korean"],"충분히":["korean"],"충청도":["korean"],"취업":["korean"],"취직":["korean"],"취향":["korean"],"치약":["korean"],"친구":["korean"],"친척":["korean"],"칠십":["korean"],"칠월":["korean"],"칠판":["korean"],"침대":["korean"],"침묵":["korean"],"침실":["korean"],"칫솔":["korean"],"칭찬":["korean"],"카메라":["korean"],"카운터":["korean"],"칼국수":["korean"],"캐릭터":["korean"],"캠퍼스":["korean"],"캠페인":["korean"],"커튼":["korean"],"컨디션":["korean"],"컬러":["korean"],"컴퓨터":["korean"],"코끼리":["korean"],"코미디":["korean"],"콘서트":["korean"],"콜라":["korean"],"콤플렉스":["korean"],"콩나물":["korean"],"쾌감":["korean"],"쿠데타":["korean"],"크림":["korean"],"큰길":["korean"],"큰딸":["korean"],"큰소리":["korean"],"큰아들":["korean"],"큰어머니":["korean"],"큰일":["korean"],"큰절":["korean"],"클래식":["korean"],"클럽":["korean"],"킬로":["korean"],"타입":["korean"],"타자기":["korean"],"탁구":["korean"],"탁자":["korean"],"탄생":["korean"],"태권도":["korean"],"태양":["korean"],"태풍":["korean"],"택시":["korean"],"탤런트":["korean"],"터널":["korean"],"터미널":["korean"],"테니스":["korean"],"테스트":["korean"],"테이블":["korean"],"텔레비전":["korean"],"토론":["korean"],"토마토":["korean"],"토요일":["korean"],"통계":["korean"],"통과":["korean"],"통로":["korean"],"통신":["korean"],"통역":["korean"],"통일":["korean"],"통장":["korean"],"통제":["korean"],"통증":["korean"],"통합":["korean"],"통화":["korean"],"퇴근":["korean"],"퇴원":["korean"],"퇴직금":["korean"],"튀김":["korean"],"트럭":["korean"],"특급":["korean"],"특별":["korean"],"특성":["korean"],"특수":["korean"],"특징":["korean"],"특히":["korean"],"튼튼히":["korean"],"티셔츠":["korean"],"파란색":["korean"],"파일":["korean"],"파출소":["korean"],"판결":["korean"],"판단":["korean"],"판매":["korean"],"판사":["korean"],"팔십":["korean"],"팔월":["korean"],"팝송":["korean"],"패션":["korean"],"팩스":["korean"],"팩시밀리":["korean"],"팬티":["korean"],"퍼센트":["korean"],"페인트":["korean"],"편견":["korean"],"편의":["korean"],"편지":["korean"],"편히":["korean"],"평가":["korean"],"평균":["korean"],"평생":["korean"],"평소":["korean"],"평양":["korean"],"평일":["korean"],"평화":["korean"],"포스터":["korean"],"포인트":["korean"],"포장":["korean"],"포함":["korean"],"표면":["korean"],"표정":["korean"],"표준":["korean"],"표현":["korean"],"품목":["korean"],"품질":["korean"],"풍경":["korean"],"풍속":["korean"],"풍습":["korean"],"프랑스":["korean"],"프린터":["korean"],"플라스틱":["korean"],"피곤":["korean"],"피망":["korean"],"피아노":["korean"],"필름":["korean"],"필수":["korean"],"필요":["korean"],"필자":["korean"],"필통":["korean"],"핑계":["korean"],"하느님":["korean"],"하늘":["korean"],"하드웨어":["korean"],"하룻밤":["korean"],"하반기":["korean"],"하숙집":["korean"],"하순":["korean"],"하여튼":["korean"],"하지만":["korean"],"하천":["korean"],"하품":["korean"],"하필":["korean"],"학과":["korean"],"학교":["korean"],"학급":["korean"],"학기":["korean"],"학년":["korean"],"학력":["korean"],"학번":["korean"],"학부모":["korean"],"학비":["korean"],"학생":["korean"],"학술":["korean"],"학습":["korean"],"학용품":["korean"],"학원":["korean"],"학위":["korean"],"학자":["korean"],"학점":["korean"],"한계":["korean"],"한글":["korean"],"한꺼번에":["korean"],"한낮":["korean"],"한눈":["korean"],"한동안":["korean"],"한때":["korean"],"한라산":["korean"],"한마디":["korean"],"한문":["korean"],"한번":["korean"],"한복":["korean"],"한식":["korean"],"한여름":["korean"],"한쪽":["korean"],"할머니":["korean"],"할아버지":["korean"],"할인":["korean"],"함께":["korean"],"함부로":["korean"],"합격":["korean"],"합리적":["korean"],"항공":["korean"],"항구":["korean"],"항상":["korean"],"항의":["korean"],"해결":["korean"],"해군":["korean"],"해답":["korean"],"해당":["korean"],"해물":["korean"],"해석":["korean"],"해설":["korean"],"해수욕장":["korean"],"해안":["korean"],"핵심":["korean"],"핸드백":["korean"],"햄버거":["korean"],"햇볕":["korean"],"햇살":["korean"],"행동":["korean"],"행복":["korean"],"행사":["korean"],"행운":["korean"],"행위":["korean"],"향기":["korean"],"향상":["korean"],"향수":["korean"],"허락":["korean"],"허용":["korean"],"헬기":["korean"],"현관":["korean"],"현금":["korean"],"현대":["korean"],"현상":["korean"],"현실":["korean"],"현장":["korean"],"현재":["korean"],"현지":["korean"],"혈액":["korean"],"협력":["korean"],"형부":["korean"],"형사":["korean"],"형수":["korean"],"형식":["korean"],"형제":["korean"],"형태":["korean"],"형편":["korean"],"혜택":["korean"],"호기심":["korean"],"호남":["korean"],"호랑이":["korean"],"호박":["korean"],"호텔":["korean"],"호흡":["korean"],"혹시":["korean"],"홀로":["korean"],"홈페이지":["korean"],"홍보":["korean"],"홍수":["korean"],"홍차":["korean"],"화면":["korean"],"화분":["korean"],"화살":["korean"],"화요일":["korean"],"화장":["korean"],"화학":["korean"],"확보":["korean"],"확인":["korean"],"확장":["korean"],"확정":["korean"],"환갑":["korean"],"환경":["korean"],"환영":["korean"],"환율":["korean"],"환자":["korean"],"활기":["korean"],"활동":["korean"],"활발히":["korean"],"활용":["korean"],"활짝":["korean"],"회견":["korean"],"회관":["korean"],"회복":["korean"],"회색":["korean"],"회원":["korean"],"회장":["korean"],"회전":["korean"],"횟수":["korean"],"횡단보도":["korean"],"효율적":["korean"],"후반":["korean"],"후춧가루":["korean"],"훈련":["korean"],"훨씬":["korean"],"휴식":["korean"],"휴일":["korean"],"흉내":["korean"],"흐름":["korean"],"흑백":["korean"],"흑인":["korean"],"흔적":["korean"],"흔히":["korean"],"흥미":["korean"],"흥분":["korean"],"희곡":["korean"],"희망":["korean"],"희생":["korean"],"흰색":["korean"],"힘껏":["korean"],"abacate":["portuguese"],"abaixo":["portuguese"],"abalar":["portuguese"],"abater":["portuguese"],"abduzir":["portuguese"],"abelha":["portuguese"],"aberto":["portuguese"],"abismo":["portuguese"],"abotoar":["portuguese"],"abranger":["portuguese"],"abreviar":["portuguese"],"abrigar":["portuguese"],"abrupto":["portuguese"],"absinto":["portuguese"],"absoluto":["portuguese"],"absurdo":["portuguese"],"abutre":["portuguese"],"acabado":["portuguese"],"acalmar":["portuguese"],"acampar":["portuguese"],"acanhar":["portuguese"],"acaso":["portuguese"],"aceitar":["portuguese"],"acelerar":["portuguese"],"acenar":["portuguese"],"acervo":["portuguese"],"acessar":["portuguese"],"acetona":["portuguese"],"achatar":["portuguese"],"acidez":["portuguese"],"acima":["portuguese"],"acionado":["portuguese"],"acirrar":["portuguese"],"aclamar":["portuguese"],"aclive":["portuguese"],"acolhida":["portuguese"],"acomodar":["portuguese"],"acoplar":["portuguese"],"acordar":["portuguese"],"acumular":["portuguese"],"acusador":["portuguese"],"adaptar":["portuguese"],"adega":["portuguese"],"adentro":["portuguese"],"adepto":["portuguese"],"adequar":["portuguese"],"aderente":["portuguese"],"adesivo":["portuguese"],"adeus":["portuguese"],"adiante":["portuguese"],"aditivo":["portuguese"],"adjetivo":["portuguese"],"adjunto":["portuguese"],"admirar":["portuguese"],"adorar":["portuguese"],"adquirir":["portuguese"],"adubo":["portuguese"],"adverso":["portuguese"],"advogado":["portuguese"],"aeronave":["portuguese"],"afastar":["portuguese"],"aferir":["portuguese"],"afetivo":["portuguese"],"afinador":["portuguese"],"afivelar":["portuguese"],"aflito":["portuguese"],"afluente":["portuguese"],"afrontar":["portuguese"],"agachar":["portuguese"],"agarrar":["portuguese"],"agasalho":["portuguese"],"agenciar":["portuguese"],"agilizar":["portuguese"],"agiota":["portuguese"],"agitado":["portuguese"],"agora":["portuguese"],"agradar":["portuguese"],"agreste":["portuguese"],"agrupar":["portuguese"],"aguardar":["portuguese"],"agulha":["portuguese"],"ajoelhar":["portuguese"],"ajudar":["portuguese"],"ajustar":["portuguese"],"alameda":["portuguese"],"alarme":["portuguese"],"alastrar":["portuguese"],"alavanca":["portuguese"],"albergue":["portuguese"],"albino":["portuguese"],"alcatra":["portuguese"],"aldeia":["portuguese"],"alecrim":["portuguese"],"alegria":["portuguese"],"alertar":["portuguese"],"alface":["portuguese"],"alfinete":["portuguese"],"algum":["portuguese"],"alheio":["portuguese"],"aliar":["portuguese"],"alicate":["portuguese"],"alienar":["portuguese"],"alinhar":["portuguese"],"aliviar":["portuguese"],"almofada":["portuguese"],"alocar":["portuguese"],"alpiste":["portuguese"],"alterar":["portuguese"],"altitude":["portuguese"],"alucinar":["portuguese"],"alugar":["portuguese"],"aluno":["portuguese"],"alusivo":["portuguese"],"alvo":["portuguese"],"amaciar":["portuguese"],"amador":["portuguese"],"amarelo":["portuguese"],"amassar":["portuguese"],"ambas":["portuguese"],"ambiente":["portuguese"],"ameixa":["portuguese"],"amenizar":["portuguese"],"amido":["portuguese"],"amistoso":["portuguese"],"amizade":["portuguese"],"amolador":["portuguese"],"amontoar":["portuguese"],"amoroso":["portuguese"],"amostra":["portuguese"],"amparar":["portuguese"],"ampliar":["portuguese"],"ampola":["portuguese"],"anagrama":["portuguese"],"analisar":["portuguese"],"anarquia":["portuguese"],"anatomia":["portuguese"],"andaime":["portuguese"],"anel":["portuguese"],"anexo":["portuguese"],"angular":["portuguese"],"animar":["portuguese"],"anjo":["portuguese"],"anomalia":["portuguese"],"anotado":["portuguese"],"ansioso":["portuguese"],"anterior":["portuguese"],"anuidade":["portuguese"],"anunciar":["portuguese"],"anzol":["portuguese"],"apagador":["portuguese"],"apalpar":["portuguese"],"apanhado":["portuguese"],"apego":["portuguese"],"apelido":["portuguese"],"apertada":["portuguese"],"apesar":["portuguese"],"apetite":["portuguese"],"apito":["portuguese"],"aplauso":["portuguese"],"aplicada":["portuguese"],"apoio":["portuguese"],"apontar":["portuguese"],"aposta":["portuguese"],"aprendiz":["portuguese"],"aprovar":["portuguese"],"aquecer":["portuguese"],"arame":["portuguese"],"aranha":["portuguese"],"arara":["portuguese"],"arcada":["portuguese"],"ardente":["portuguese"],"areia":["portuguese"],"arejar":["portuguese"],"arenito":["portuguese"],"aresta":["portuguese"],"argiloso":["portuguese"],"argola":["portuguese"],"arma":["portuguese"],"arquivo":["portuguese"],"arraial":["portuguese"],"arrebate":["portuguese"],"arriscar":["portuguese"],"arroba":["portuguese"],"arrumar":["portuguese"],"arsenal":["portuguese"],"arterial":["portuguese"],"artigo":["portuguese"],"arvoredo":["portuguese"],"asfaltar":["portuguese"],"asilado":["portuguese"],"aspirar":["portuguese"],"assador":["portuguese"],"assinar":["portuguese"],"assoalho":["portuguese"],"assunto":["portuguese"],"astral":["portuguese"],"atacado":["portuguese"],"atadura":["portuguese"],"atalho":["portuguese"],"atarefar":["portuguese"],"atear":["portuguese"],"atender":["portuguese"],"aterro":["portuguese"],"ateu":["portuguese"],"atingir":["portuguese"],"atirador":["portuguese"],"ativo":["portuguese"],"atoleiro":["portuguese"],"atracar":["portuguese"],"atrevido":["portuguese"],"atriz":["portuguese"],"atual":["portuguese"],"atum":["portuguese"],"auditor":["portuguese"],"aumentar":["portuguese"],"aura":["portuguese"],"aurora":["portuguese"],"autismo":["portuguese"],"autoria":["portuguese"],"autuar":["portuguese"],"avaliar":["portuguese"],"avante":["portuguese"],"avaria":["portuguese"],"avental":["portuguese"],"avesso":["portuguese"],"aviador":["portuguese"],"avisar":["portuguese"],"avulso":["portuguese"],"axila":["portuguese"],"azarar":["portuguese"],"azedo":["portuguese"],"azeite":["portuguese"],"azulejo":["portuguese"],"babar":["portuguese"],"babosa":["portuguese"],"bacalhau":["portuguese"],"bacharel":["portuguese"],"bacia":["portuguese"],"bagagem":["portuguese"],"baiano":["portuguese"],"bailar":["portuguese"],"baioneta":["portuguese"],"bairro":["portuguese"],"baixista":["portuguese"],"bajular":["portuguese"],"baleia":["portuguese"],"baliza":["portuguese"],"balsa":["portuguese"],"banal":["portuguese"],"bandeira":["portuguese"],"banho":["portuguese"],"banir":["portuguese"],"banquete":["portuguese"],"barato":["portuguese"],"barbado":["portuguese"],"baronesa":["portuguese"],"barraca":["portuguese"],"barulho":["portuguese"],"baseado":["portuguese"],"bastante":["portuguese"],"batata":["portuguese"],"batedor":["portuguese"],"batida":["portuguese"],"batom":["portuguese"],"batucar":["portuguese"],"baunilha":["portuguese"],"beber":["portuguese"],"beijo":["portuguese"],"beirada":["portuguese"],"beisebol":["portuguese"],"beldade":["portuguese"],"beleza":["portuguese"],"belga":["portuguese"],"beliscar":["portuguese"],"bendito":["portuguese"],"bengala":["portuguese"],"benzer":["portuguese","turkish"],"berimbau":["portuguese"],"berlinda":["portuguese"],"berro":["portuguese"],"besouro":["portuguese"],"bexiga":["portuguese"],"bezerro":["portuguese"],"bico":["portuguese"],"bicudo":["portuguese"],"bienal":["portuguese"],"bifocal":["portuguese"],"bifurcar":["portuguese"],"bigorna":["portuguese"],"bilhete":["portuguese"],"bimestre":["portuguese"],"bimotor":["portuguese"],"biologia":["portuguese"],"biombo":["portuguese"],"biosfera":["portuguese"],"bipolar":["portuguese"],"birrento":["portuguese"],"biscoito":["portuguese"],"bisneto":["portuguese"],"bispo":["portuguese"],"bissexto":["portuguese"],"bitola":["portuguese"],"bizarro":["portuguese"],"blindado":["portuguese"],"bloco":["portuguese"],"bloquear":["portuguese"],"boato":["portuguese"],"bobagem":["portuguese"],"bocado":["portuguese"],"bocejo":["portuguese"],"bochecha":["portuguese"],"boicotar":["portuguese"],"bolada":["portuguese"],"boletim":["portuguese"],"bolha":["portuguese"],"bolo":["portuguese"],"bombeiro":["portuguese"],"bonde":["portuguese"],"boneco":["portuguese"],"bonita":["portuguese"],"borbulha":["portuguese"],"borda":["portuguese"],"boreal":["portuguese"],"borracha":["portuguese"],"bovino":["portuguese"],"boxeador":["portuguese"],"branco":["portuguese"],"brasa":["portuguese"],"braveza":["portuguese"],"breu":["portuguese"],"briga":["portuguese"],"brilho":["portuguese"],"brincar":["portuguese"],"broa":["portuguese"],"brochura":["portuguese"],"bronzear":["portuguese"],"broto":["portuguese"],"bruxo":["portuguese"],"bucha":["portuguese"],"budismo":["portuguese"],"bufar":["portuguese"],"bule":["portuguese"],"buraco":["portuguese"],"busca":["portuguese"],"busto":["portuguese"],"buzina":["portuguese"],"cabana":["portuguese"],"cabelo":["portuguese"],"cabide":["portuguese"],"cabo":["portuguese"],"cabrito":["portuguese"],"cacau":["portuguese"],"cacetada":["portuguese"],"cachorro":["portuguese"],"cacique":["portuguese"],"cadastro":["portuguese"],"cadeado":["portuguese"],"cafezal":["portuguese"],"caiaque":["portuguese"],"caipira":["portuguese"],"caixote":["portuguese"],"cajado":["portuguese"],"caju":["portuguese"],"calafrio":["portuguese"],"calcular":["portuguese"],"caldeira":["portuguese"],"calibrar":["portuguese"],"calmante":["portuguese"],"calota":["portuguese"],"camada":["portuguese"],"cambista":["portuguese"],"camisa":["portuguese"],"camomila":["portuguese"],"campanha":["portuguese"],"camuflar":["portuguese"],"canavial":["portuguese"],"cancelar":["portuguese"],"caneta":["portuguese"],"canguru":["portuguese"],"canhoto":["portuguese"],"canivete":["portuguese"],"canoa":["portuguese"],"cansado":["portuguese"],"cantar":["portuguese"],"canudo":["portuguese"],"capacho":["portuguese"],"capela":["portuguese"],"capinar":["portuguese"],"capotar":["portuguese"],"capricho":["portuguese"],"captador":["portuguese"],"capuz":["portuguese"],"caracol":["portuguese"],"carbono":["portuguese"],"cardeal":["portuguese"],"careca":["portuguese"],"carimbar":["portuguese"],"carneiro":["portuguese"],"carpete":["portuguese"],"carreira":["portuguese"],"cartaz":["portuguese"],"carvalho":["portuguese"],"casaco":["portuguese"],"casca":["portuguese"],"casebre":["portuguese"],"castelo":["portuguese"],"casulo":["portuguese"],"catarata":["portuguese"],"cativar":["portuguese"],"caule":["portuguese"],"causador":["portuguese"],"cautelar":["portuguese"],"cavalo":["portuguese"],"caverna":["portuguese"],"cebola":["portuguese"],"cedilha":["portuguese"],"cegonha":["portuguese"],"celebrar":["portuguese"],"celular":["portuguese"],"cenoura":["portuguese"],"censo":["portuguese"],"centeio":["portuguese"],"cercar":["portuguese"],"cerrado":["portuguese"],"certeiro":["portuguese"],"cerveja":["portuguese"],"cetim":["portuguese"],"cevada":["portuguese"],"chacota":["portuguese"],"chaleira":["portuguese"],"chamado":["portuguese"],"chapada":["portuguese"],"charme":["portuguese"],"chatice":["portuguese"],"chave":["portuguese"],"chefe":["portuguese"],"chegada":["portuguese"],"cheiro":["portuguese"],"cheque":["portuguese"],"chicote":["portuguese"],"chifre":["portuguese"],"chinelo":["portuguese"],"chocalho":["portuguese"],"chover":["portuguese"],"chumbo":["portuguese"],"chutar":["portuguese"],"chuva":["portuguese"],"cicatriz":["portuguese"],"ciclone":["portuguese"],"cidade":["portuguese"],"cidreira":["portuguese"],"ciente":["portuguese"],"cigana":["portuguese"],"cimento":["portuguese"],"cinto":["portuguese"],"cinza":["portuguese"],"ciranda":["portuguese"],"circuito":["portuguese"],"cirurgia":["portuguese"],"citar":["portuguese"],"clareza":["portuguese"],"clero":["portuguese"],"clicar":["portuguese"],"clone":["portuguese"],"clube":["portuguese"],"coado":["portuguese"],"coagir":["portuguese"],"cobaia":["portuguese"],"cobertor":["portuguese"],"cobrar":["portuguese"],"cocada":["portuguese"],"coelho":["portuguese"],"coentro":["portuguese"],"coeso":["portuguese"],"cogumelo":["portuguese"],"coibir":["portuguese"],"coifa":["portuguese"],"coiote":["portuguese"],"colar":["portuguese"],"coleira":["portuguese"],"colher":["portuguese"],"colidir":["portuguese"],"colmeia":["portuguese"],"colono":["portuguese"],"coluna":["portuguese"],"comando":["portuguese"],"combinar":["portuguese"],"comentar":["portuguese"],"comitiva":["portuguese"],"comover":["portuguese"],"complexo":["portuguese"],"comum":["portuguese"],"concha":["portuguese"],"condor":["portuguese"],"conectar":["portuguese"],"confuso":["portuguese"],"congelar":["portuguese"],"conhecer":["portuguese"],"conjugar":["portuguese"],"consumir":["portuguese"],"contrato":["portuguese"],"convite":["portuguese"],"cooperar":["portuguese"],"copeiro":["portuguese"],"copiador":["portuguese"],"copo":["portuguese"],"coquetel":["portuguese"],"coragem":["portuguese"],"cordial":["portuguese"],"corneta":["portuguese"],"coronha":["portuguese"],"corporal":["portuguese"],"correio":["portuguese"],"cortejo":["portuguese"],"coruja":["portuguese"],"corvo":["portuguese"],"cosseno":["portuguese"],"costela":["portuguese"],"cotonete":["portuguese"],"couro":["portuguese"],"couve":["portuguese"],"covil":["portuguese"],"cozinha":["portuguese"],"cratera":["portuguese"],"cravo":["portuguese"],"creche":["portuguese"],"credor":["portuguese"],"creme":["portuguese"],"crer":["portuguese"],"crespo":["portuguese"],"criada":["portuguese"],"criminal":["portuguese"],"crioulo":["portuguese"],"crise":["portuguese"],"criticar":["portuguese"],"crosta":["portuguese"],"crua":["portuguese"],"cruzeiro":["portuguese"],"cubano":["portuguese"],"cueca":["portuguese"],"cuidado":["portuguese"],"cujo":["portuguese"],"culatra":["portuguese"],"culminar":["portuguese"],"culpar":["portuguese"],"cultura":["portuguese"],"cumprir":["portuguese"],"cunhado":["portuguese"],"cupido":["portuguese"],"curativo":["portuguese"],"curral":["portuguese"],"cursar":["portuguese"],"curto":["portuguese"],"cuspir":["portuguese"],"custear":["portuguese"],"cutelo":["portuguese"],"damasco":["portuguese"],"datar":["portuguese"],"debater":["portuguese"],"debitar":["portuguese"],"deboche":["portuguese"],"debulhar":["portuguese"],"decalque":["portuguese"],"decimal":["portuguese"],"declive":["portuguese"],"decote":["portuguese"],"decretar":["portuguese"],"dedal":["portuguese"],"dedicado":["portuguese"],"deduzir":["portuguese"],"defesa":["portuguese"],"defumar":["portuguese"],"degelo":["portuguese"],"degrau":["portuguese"],"degustar":["portuguese"],"deitado":["portuguese"],"deixar":["portuguese"],"delator":["portuguese"],"delegado":["portuguese"],"delinear":["portuguese"],"delonga":["portuguese"],"demanda":["portuguese"],"demitir":["portuguese"],"demolido":["portuguese"],"dentista":["portuguese"],"depenado":["portuguese"],"depilar":["portuguese"],"depois":["portuguese"],"depressa":["portuguese"],"depurar":["portuguese"],"deriva":["portuguese"],"derramar":["portuguese"],"desafio":["portuguese"],"desbotar":["portuguese"],"descanso":["portuguese"],"desenho":["portuguese"],"desfiado":["portuguese"],"desgaste":["portuguese"],"desigual":["portuguese"],"deslize":["portuguese"],"desmamar":["portuguese"],"desova":["portuguese"],"despesa":["portuguese"],"destaque":["portuguese"],"desviar":["portuguese"],"detalhar":["portuguese"],"detentor":["portuguese"],"detonar":["portuguese"],"detrito":["portuguese"],"deusa":["portuguese"],"dever":["portuguese"],"devido":["portuguese"],"devotado":["portuguese"],"dezena":["portuguese"],"diagrama":["portuguese"],"dialeto":["portuguese"],"didata":["portuguese"],"difuso":["portuguese"],"digitar":["portuguese"],"dilatado":["portuguese"],"diluente":["portuguese"],"diminuir":["portuguese"],"dinastia":["portuguese"],"dinheiro":["portuguese"],"diocese":["portuguese"],"direto":["portuguese"],"discreta":["portuguese"],"disfarce":["portuguese"],"disparo":["portuguese"],"disquete":["portuguese"],"dissipar":["portuguese"],"distante":["portuguese"],"ditador":["portuguese"],"diurno":["portuguese"],"diverso":["portuguese"],"divisor":["portuguese"],"divulgar":["portuguese"],"dizer":["portuguese"],"dobrador":["portuguese"],"dolorido":["portuguese"],"domador":["portuguese"],"dominado":["portuguese"],"donativo":["portuguese"],"donzela":["portuguese"],"dormente":["portuguese"],"dorsal":["portuguese"],"dosagem":["portuguese"],"dourado":["portuguese"],"doutor":["portuguese"],"drenagem":["portuguese"],"drible":["portuguese"],"drogaria":["portuguese"],"duelar":["portuguese"],"duende":["portuguese"],"dueto":["portuguese"],"duplo":["portuguese"],"duquesa":["portuguese"],"durante":["portuguese"],"duvidoso":["portuguese"],"eclodir":["portuguese"],"ecoar":["portuguese"],"ecologia":["portuguese"],"edificar":["portuguese"],"edital":["portuguese"],"educado":["portuguese"],"efeito":["portuguese"],"efetivar":["portuguese"],"ejetar":["portuguese"],"elaborar":["portuguese"],"eleger":["portuguese"],"eleitor":["portuguese"],"elenco":["portuguese"],"elevador":["portuguese"],"eliminar":["portuguese"],"elogiar":["portuguese"],"embargo":["portuguese"],"embolado":["portuguese"],"embrulho":["portuguese"],"embutido":["portuguese"],"emenda":["portuguese"],"emergir":["portuguese"],"emissor":["portuguese"],"empatia":["portuguese"],"empenho":["portuguese"],"empinado":["portuguese"],"empolgar":["portuguese"],"emprego":["portuguese"],"empurrar":["portuguese"],"emulador":["portuguese"],"encaixe":["portuguese"],"encenado":["portuguese"],"enchente":["portuguese"],"encontro":["portuguese"],"endeusar":["portuguese"],"endossar":["portuguese"],"enfaixar":["portuguese"],"enfeite":["portuguese"],"enfim":["portuguese"],"engajado":["portuguese"],"engenho":["portuguese"],"englobar":["portuguese"],"engomado":["portuguese"],"engraxar":["portuguese"],"enguia":["portuguese"],"enjoar":["portuguese"],"enlatar":["portuguese"],"enquanto":["portuguese"],"enraizar":["portuguese"],"enrolado":["portuguese"],"enrugar":["portuguese"],"ensaio":["portuguese"],"enseada":["portuguese"],"ensino":["portuguese"],"ensopado":["portuguese"],"entanto":["portuguese"],"enteado":["portuguese"],"entidade":["portuguese"],"entortar":["portuguese"],"entrada":["portuguese"],"entulho":["portuguese"],"envergar":["portuguese"],"enviado":["portuguese"],"envolver":["portuguese"],"enxame":["portuguese"],"enxerto":["portuguese"],"enxofre":["portuguese"],"enxuto":["portuguese"],"epiderme":["portuguese"],"equipar":["portuguese"],"ereto":["portuguese"],"erguido":["portuguese"],"errata":["portuguese"],"erva":["portuguese"],"ervilha":["portuguese"],"esbanjar":["portuguese"],"esbelto":["portuguese"],"escama":["portuguese"],"escola":["portuguese"],"escrita":["portuguese"],"escuta":["portuguese"],"esfinge":["portuguese"],"esfolar":["portuguese"],"esfregar":["portuguese"],"esfumado":["portuguese"],"esgrima":["portuguese"],"esmalte":["portuguese"],"espanto":["portuguese"],"espelho":["portuguese"],"espiga":["portuguese"],"esponja":["portuguese"],"espreita":["portuguese"],"espumar":["portuguese"],"esquerda":["portuguese"],"estaca":["portuguese"],"esteira":["portuguese"],"esticar":["portuguese"],"estofado":["portuguese"],"estrela":["portuguese"],"estudo":["portuguese"],"esvaziar":["portuguese"],"etanol":["portuguese"],"etiqueta":["portuguese"],"euforia":["portuguese"],"europeu":["portuguese"],"evacuar":["portuguese"],"evaporar":["portuguese"],"evasivo":["portuguese"],"eventual":["portuguese"],"evidente":["portuguese"],"evoluir":["portuguese"],"exagero":["portuguese"],"exalar":["portuguese"],"examinar":["portuguese"],"exato":["portuguese"],"exausto":["portuguese"],"excesso":["portuguese"],"excitar":["portuguese"],"exclamar":["portuguese"],"executar":["portuguese"],"exemplo":["portuguese"],"exibir":["portuguese"],"exigente":["portuguese"],"exonerar":["portuguese"],"expandir":["portuguese"],"expelir":["portuguese"],"expirar":["portuguese"],"explanar":["portuguese"],"exposto":["portuguese"],"expresso":["portuguese"],"expulsar":["portuguese"],"externo":["portuguese"],"extinto":["portuguese"],"extrato":["portuguese"],"fabricar":["portuguese"],"fabuloso":["portuguese"],"faceta":["portuguese"],"facial":["portuguese"],"fada":["portuguese"],"fadiga":["portuguese"],"faixa":["portuguese"],"falar":["portuguese"],"falta":["portuguese"],"familiar":["portuguese"],"fandango":["portuguese"],"fanfarra":["portuguese"],"fantoche":["portuguese"],"fardado":["portuguese"],"farelo":["portuguese"],"farinha":["portuguese"],"farofa":["portuguese"],"farpa":["portuguese"],"fartura":["portuguese"],"fatia":["portuguese"],"fator":["portuguese"],"favorita":["portuguese"],"faxina":["portuguese"],"fazenda":["portuguese"],"fechado":["portuguese"],"feijoada":["portuguese"],"feirante":["portuguese"],"felino":["portuguese"],"feminino":["portuguese"],"fenda":["portuguese"],"feno":["portuguese"],"fera":["portuguese"],"feriado":["portuguese"],"ferrugem":["portuguese"],"ferver":["portuguese"],"festejar":["portuguese"],"fetal":["portuguese"],"feudal":["portuguese"],"fiapo":["portuguese"],"fibrose":["portuguese"],"ficar":["portuguese"],"ficheiro":["portuguese"],"figurado":["portuguese"],"fileira":["portuguese"],"filho":["portuguese"],"filme":["portuguese"],"filtrar":["portuguese"],"firmeza":["portuguese"],"fisgada":["portuguese"],"fissura":["portuguese"],"fita":["portuguese"],"fivela":["portuguese"],"fixador":["portuguese"],"fixo":["portuguese"],"flacidez":["portuguese"],"flamingo":["portuguese"],"flanela":["portuguese"],"flechada":["portuguese"],"flora":["portuguese"],"flutuar":["portuguese"],"fluxo":["portuguese"],"focal":["portuguese"],"focinho":["portuguese"],"fofocar":["portuguese"],"fogo":["portuguese"],"foguete":["portuguese"],"foice":["portuguese"],"folgado":["portuguese"],"folheto":["portuguese"],"forjar":["portuguese"],"formiga":["portuguese"],"forno":["portuguese"],"forte":["portuguese"],"fosco":["portuguese"],"fossa":["portuguese"],"fragata":["portuguese"],"fralda":["portuguese"],"frango":["portuguese"],"frasco":["portuguese"],"fraterno":["portuguese"],"freira":["portuguese"],"frente":["portuguese"],"fretar":["portuguese"],"frieza":["portuguese"],"friso":["portuguese"],"fritura":["portuguese"],"fronha":["portuguese"],"frustrar":["portuguese"],"fruteira":["portuguese"],"fugir":["portuguese"],"fulano":["portuguese"],"fuligem":["portuguese"],"fundar":["portuguese"],"fungo":["portuguese"],"funil":["portuguese"],"furador":["portuguese"],"furioso":["portuguese"],"futebol":["portuguese"],"gabarito":["portuguese"],"gabinete":["portuguese"],"gado":["portuguese"],"gaiato":["portuguese"],"gaiola":["portuguese"],"gaivota":["portuguese"],"galega":["portuguese"],"galho":["portuguese"],"galinha":["portuguese"],"galocha":["portuguese"],"ganhar":["portuguese"],"garagem":["portuguese"],"garfo":["portuguese"],"gargalo":["portuguese"],"garimpo":["portuguese"],"garoupa":["portuguese"],"garrafa":["portuguese"],"gasoduto":["portuguese"],"gasto":["portuguese"],"gata":["portuguese"],"gatilho":["portuguese"],"gaveta":["portuguese"],"gazela":["portuguese"],"gelado":["portuguese"],"geleia":["portuguese"],"gelo":["portuguese"],"gemada":["portuguese"],"gemer":["portuguese"],"gemido":["portuguese"],"generoso":["portuguese"],"gengiva":["portuguese"],"genial":["portuguese"],"genoma":["portuguese"],"genro":["portuguese"],"geologia":["portuguese"],"gerador":["portuguese"],"germinar":["portuguese"],"gesso":["portuguese"],"gestor":["portuguese"],"ginasta":["portuguese"],"gincana":["portuguese"],"gingado":["portuguese"],"girafa":["portuguese"],"girino":["portuguese"],"glacial":["portuguese"],"glicose":["portuguese"],"global":["portuguese"],"glorioso":["portuguese"],"goela":["portuguese"],"goiaba":["portuguese"],"golfe":["portuguese"],"golpear":["portuguese"],"gordura":["portuguese"],"gorjeta":["portuguese"],"gorro":["portuguese"],"gostoso":["portuguese"],"goteira":["portuguese"],"governar":["portuguese"],"gracejo":["portuguese"],"gradual":["portuguese"],"grafite":["portuguese"],"gralha":["portuguese"],"grampo":["portuguese"],"granada":["portuguese"],"gratuito":["portuguese"],"graveto":["portuguese"],"graxa":["portuguese"],"grego":["portuguese"],"grelhar":["portuguese"],"greve":["portuguese"],"grilo":["portuguese"],"grisalho":["portuguese"],"gritaria":["portuguese"],"grosso":["portuguese"],"grotesco":["portuguese"],"grudado":["portuguese"],"grunhido":["portuguese"],"gruta":["portuguese"],"guache":["portuguese"],"guarani":["portuguese"],"guaxinim":["portuguese"],"guerrear":["portuguese"],"guiar":["portuguese"],"guincho":["portuguese"],"guisado":["portuguese"],"gula":["portuguese"],"guloso":["portuguese"],"guru":["portuguese"],"habitar":["portuguese"],"harmonia":["portuguese"],"haste":["portuguese"],"haver":["portuguese"],"hectare":["portuguese"],"herdar":["portuguese"],"heresia":["portuguese"],"hesitar":["portuguese"],"hiato":["portuguese"],"hibernar":["portuguese"],"hidratar":["portuguese"],"hiena":["portuguese"],"hino":["portuguese"],"hipismo":["portuguese"],"hipnose":["portuguese"],"hipoteca":["portuguese"],"hoje":["portuguese"],"holofote":["portuguese"],"homem":["portuguese"],"honesto":["portuguese"],"honrado":["portuguese"],"hormonal":["portuguese"],"hospedar":["portuguese"],"humorado":["portuguese"],"iate":["portuguese"],"ideia":["portuguese"],"idoso":["portuguese"],"ignorado":["portuguese"],"igreja":["portuguese"],"iguana":["portuguese"],"ileso":["portuguese"],"ilha":["portuguese"],"iludido":["portuguese"],"iluminar":["portuguese"],"ilustrar":["portuguese"],"imagem":["portuguese"],"imediato":["portuguese"],"imenso":["portuguese"],"imersivo":["portuguese"],"iminente":["portuguese"],"imitador":["portuguese"],"imortal":["portuguese"],"impacto":["portuguese"],"impedir":["portuguese"],"implante":["portuguese"],"impor":["portuguese"],"imprensa":["portuguese"],"impune":["portuguese"],"imunizar":["portuguese"],"inalador":["portuguese"],"inapto":["portuguese"],"inativo":["portuguese"],"incenso":["portuguese"],"inchar":["portuguese"],"incidir":["portuguese"],"incluir":["portuguese"],"incolor":["portuguese"],"indeciso":["portuguese"],"indireto":["portuguese"],"indutor":["portuguese"],"ineficaz":["portuguese"],"inerente":["portuguese"],"infantil":["portuguese"],"infestar":["portuguese"],"infinito":["portuguese"],"inflamar":["portuguese"],"informal":["portuguese"],"infrator":["portuguese"],"ingerir":["portuguese"],"inibido":["portuguese"],"inicial":["portuguese"],"inimigo":["portuguese"],"injetar":["portuguese"],"inocente":["portuguese"],"inodoro":["portuguese"],"inovador":["portuguese"],"inox":["portuguese"],"inquieto":["portuguese"],"inscrito":["portuguese"],"inseto":["portuguese"],"insistir":["portuguese"],"inspetor":["portuguese"],"instalar":["portuguese"],"insulto":["portuguese"],"intacto":["portuguese"],"integral":["portuguese"],"intimar":["portuguese"],"intocado":["portuguese"],"intriga":["portuguese"],"invasor":["portuguese"],"inverno":["portuguese"],"invicto":["portuguese"],"invocar":["portuguese"],"iogurte":["portuguese"],"iraniano":["portuguese"],"ironizar":["portuguese"],"irreal":["portuguese"],"irritado":["portuguese"],"isca":["portuguese"],"isento":["portuguese"],"isolado":["portuguese"],"isqueiro":["portuguese"],"italiano":["portuguese"],"janeiro":["portuguese"],"jangada":["portuguese"],"janta":["portuguese"],"jararaca":["portuguese"],"jardim":["portuguese"],"jarro":["portuguese"],"jasmim":["portuguese"],"jato":["portuguese"],"javali":["portuguese"],"jazida":["portuguese"],"jejum":["portuguese"],"joaninha":["portuguese"],"joelhada":["portuguese"],"jogador":["portuguese"],"joia":["portuguese"],"jornal":["portuguese"],"jorrar":["portuguese"],"jovem":["portuguese"],"juba":["portuguese"],"judeu":["portuguese"],"judoca":["portuguese"],"juiz":["portuguese"],"julgador":["portuguese"],"julho":["portuguese"],"jurado":["portuguese"],"jurista":["portuguese"],"juro":["portuguese"],"justa":["portuguese"],"labareda":["portuguese"],"laboral":["portuguese"],"lacre":["portuguese"],"lactante":["portuguese"],"ladrilho":["portuguese"],"lagarta":["portuguese"],"lagoa":["portuguese"],"laje":["portuguese"],"lamber":["portuguese"],"lamentar":["portuguese"],"laminar":["portuguese"],"lampejo":["portuguese"],"lanche":["portuguese"],"lapidar":["portuguese"],"lapso":["portuguese"],"laranja":["portuguese"],"lareira":["portuguese"],"largura":["portuguese"],"lasanha":["portuguese"],"lastro":["portuguese"],"lateral":["portuguese"],"latido":["portuguese"],"lavanda":["portuguese"],"lavoura":["portuguese"],"lavrador":["portuguese"],"laxante":["portuguese"],"lazer":["portuguese"],"lealdade":["portuguese"],"lebre":["portuguese"],"legado":["portuguese"],"legendar":["portuguese"],"legista":["portuguese"],"leigo":["portuguese"],"leiloar":["portuguese"],"leitura":["portuguese"],"lembrete":["portuguese"],"leme":["portuguese"],"lenhador":["portuguese"],"lentilha":["portuguese"],"leoa":["portuguese"],"lesma":["portuguese"],"leste":["portuguese"],"letivo":["portuguese"],"letreiro":["portuguese"],"levar":["portuguese"],"leveza":["portuguese"],"levitar":["portuguese"],"liberal":["portuguese"],"libido":["portuguese"],"liderar":["portuguese"],"ligar":["portuguese"],"ligeiro":["portuguese"],"limitar":["portuguese"],"limoeiro":["portuguese"],"limpador":["portuguese"],"linda":["portuguese"],"linear":["portuguese"],"linhagem":["portuguese"],"liquidez":["portuguese"],"listagem":["portuguese"],"lisura":["portuguese"],"litoral":["portuguese"],"livro":["portuguese"],"lixa":["portuguese"],"lixeira":["portuguese"],"locador":["portuguese"],"locutor":["portuguese"],"lojista":["portuguese"],"lombo":["portuguese"],"lona":["portuguese"],"longe":["portuguese"],"lontra":["portuguese"],"lorde":["portuguese"],"lotado":["portuguese"],"loteria":["portuguese"],"loucura":["portuguese"],"lousa":["portuguese"],"louvar":["portuguese"],"luar":["portuguese"],"lucidez":["portuguese"],"lucro":["portuguese"],"luneta":["portuguese"],"lustre":["portuguese"],"lutador":["portuguese"],"luva":["portuguese"],"macaco":["portuguese"],"macete":["portuguese"],"machado":["portuguese"],"macio":["portuguese"],"madeira":["portuguese"],"madrinha":["portuguese"],"magnata":["portuguese"],"magreza":["portuguese"],"maior":["portuguese"],"mais":["portuguese"],"malandro":["portuguese"],"malha":["portuguese"],"malote":["portuguese"],"maluco":["portuguese"],"mamilo":["portuguese"],"mamoeiro":["portuguese"],"mamute":["portuguese"],"manada":["portuguese"],"mancha":["portuguese"],"mandato":["portuguese"],"manequim":["portuguese"],"manhoso":["portuguese"],"manivela":["portuguese"],"manobrar":["portuguese"],"mansa":["portuguese"],"manter":["portuguese"],"manusear":["portuguese"],"mapeado":["portuguese"],"maquinar":["portuguese"],"marcador":["portuguese"],"maresia":["portuguese"],"marfim":["portuguese"],"margem":["portuguese"],"marinho":["portuguese"],"marmita":["portuguese"],"maroto":["portuguese"],"marquise":["portuguese"],"marreco":["portuguese"],"martelo":["portuguese"],"marujo":["portuguese"],"mascote":["portuguese"],"masmorra":["portuguese"],"massagem":["portuguese"],"mastigar":["portuguese"],"matagal":["portuguese"],"materno":["portuguese"],"matinal":["portuguese"],"matutar":["portuguese"],"maxilar":["portuguese"],"medalha":["portuguese"],"medida":["portuguese"],"medusa":["portuguese"],"megafone":["portuguese"],"meiga":["portuguese"],"melancia":["portuguese"],"melhor":["portuguese"],"membro":["portuguese"],"memorial":["portuguese"],"menino":["portuguese"],"menos":["portuguese"],"mensagem":["portuguese"],"mental":["portuguese"],"merecer":["portuguese"],"mergulho":["portuguese"],"mesada":["portuguese"],"mesclar":["portuguese"],"mesmo":["portuguese"],"mesquita":["portuguese"],"mestre":["portuguese"],"metade":["portuguese"],"meteoro":["portuguese"],"metragem":["portuguese"],"mexer":["portuguese"],"mexicano":["portuguese"],"micro":["portuguese"],"migalha":["portuguese"],"migrar":["portuguese"],"milagre":["portuguese"],"milenar":["portuguese"],"milhar":["portuguese"],"mimado":["portuguese"],"minerar":["portuguese"],"minhoca":["portuguese"],"ministro":["portuguese"],"minoria":["portuguese"],"miolo":["portuguese"],"mirante":["portuguese"],"mirtilo":["portuguese"],"misturar":["portuguese"],"mocidade":["portuguese"],"moderno":["portuguese"],"modular":["portuguese"],"moeda":["portuguese"],"moer":["portuguese"],"moinho":["portuguese"],"moita":["portuguese"],"moldura":["portuguese"],"moleza":["portuguese"],"molho":["portuguese"],"molinete":["portuguese"],"molusco":["portuguese"],"montanha":["portuguese"],"moqueca":["portuguese"],"morango":["portuguese"],"morcego":["portuguese"],"mordomo":["portuguese"],"morena":["portuguese"],"mosaico":["portuguese"],"mosquete":["portuguese"],"mostarda":["portuguese"],"motel":["portuguese"],"motim":["portuguese"],"moto":["portuguese"],"motriz":["portuguese"],"muda":["portuguese"],"muito":["portuguese"],"mulata":["portuguese"],"mulher":["portuguese"],"multar":["portuguese"],"mundial":["portuguese"],"munido":["portuguese"],"muralha":["portuguese"],"murcho":["portuguese"],"muscular":["portuguese"],"museu":["portuguese"],"musical":["portuguese"],"nacional":["portuguese"],"nadador":["portuguese"],"naja":["portuguese"],"namoro":["portuguese"],"narina":["portuguese"],"narrado":["portuguese"],"nascer":["portuguese"],"nativa":["portuguese"],"natureza":["portuguese"],"navalha":["portuguese"],"navegar":["portuguese"],"navio":["portuguese"],"neblina":["portuguese"],"nebuloso":["portuguese"],"negativa":["portuguese"],"negociar":["portuguese"],"negrito":["portuguese"],"nervoso":["portuguese"],"neta":["portuguese"],"neural":["portuguese"],"nevasca":["portuguese"],"nevoeiro":["portuguese"],"ninar":["portuguese"],"ninho":["portuguese"],"nitidez":["portuguese"],"nivelar":["portuguese"],"nobreza":["portuguese"],"noite":["portuguese"],"noiva":["portuguese"],"nomear":["portuguese"],"nominal":["portuguese"],"nordeste":["portuguese"],"nortear":["portuguese"],"notar":["portuguese"],"noticiar":["portuguese"],"noturno":["portuguese"],"novelo":["portuguese"],"novilho":["portuguese"],"novo":["portuguese"],"nublado":["portuguese"],"nudez":["portuguese"],"numeral":["portuguese"],"nupcial":["portuguese"],"nutrir":["portuguese"],"nuvem":["portuguese"],"obcecado":["portuguese"],"obedecer":["portuguese"],"objetivo":["portuguese"],"obrigado":["portuguese"],"obscuro":["portuguese"],"obstetra":["portuguese"],"obter":["portuguese"],"obturar":["portuguese"],"ocidente":["portuguese"],"ocioso":["portuguese"],"ocorrer":["portuguese"],"oculista":["portuguese"],"ocupado":["portuguese"],"ofegante":["portuguese"],"ofensiva":["portuguese"],"oferenda":["portuguese"],"oficina":["portuguese"],"ofuscado":["portuguese"],"ogiva":["portuguese"],"olaria":["portuguese"],"oleoso":["portuguese"],"olhar":["portuguese"],"oliveira":["portuguese"],"ombro":["portuguese"],"omelete":["portuguese"],"omisso":["portuguese"],"omitir":["portuguese"],"ondulado":["portuguese"],"oneroso":["portuguese"],"ontem":["portuguese"],"opcional":["portuguese"],"operador":["portuguese"],"oponente":["portuguese"],"oportuno":["portuguese"],"oposto":["portuguese"],"orar":["portuguese"],"orbitar":["portuguese"],"ordem":["portuguese"],"ordinal":["portuguese"],"orfanato":["portuguese"],"orgasmo":["portuguese"],"orgulho":["portuguese"],"oriental":["portuguese"],"origem":["portuguese"],"oriundo":["portuguese"],"orla":["portuguese"],"ortodoxo":["portuguese"],"orvalho":["portuguese"],"oscilar":["portuguese"],"ossada":["portuguese"],"osso":["portuguese"],"ostentar":["portuguese"],"otimismo":["portuguese"],"ousadia":["portuguese"],"outono":["portuguese"],"outubro":["portuguese"],"ouvido":["portuguese"],"ovelha":["portuguese"],"ovular":["portuguese"],"oxidar":["portuguese"],"oxigenar":["portuguese"],"pacato":["portuguese"],"paciente":["portuguese"],"pacote":["portuguese"],"pactuar":["portuguese"],"padaria":["portuguese"],"padrinho":["portuguese"],"pagar":["portuguese"],"pagode":["portuguese"],"painel":["portuguese"],"pairar":["portuguese"],"paisagem":["portuguese"],"palavra":["portuguese"],"palestra":["portuguese"],"palheta":["portuguese"],"palito":["portuguese"],"palmada":["portuguese"],"palpitar":["portuguese"],"pancada":["portuguese"],"panela":["portuguese"],"panfleto":["portuguese"],"panqueca":["portuguese"],"pantanal":["portuguese"],"papagaio":["portuguese"],"papelada":["portuguese"],"papiro":["portuguese"],"parafina":["portuguese"],"parcial":["portuguese"],"pardal":["portuguese"],"parede":["portuguese"],"partida":["portuguese"],"pasmo":["portuguese"],"passado":["portuguese"],"pastel":["portuguese"],"patamar":["portuguese"],"patente":["portuguese"],"patinar":["portuguese"],"patrono":["portuguese"],"paulada":["portuguese"],"pausar":["portuguese"],"peculiar":["portuguese"],"pedalar":["portuguese"],"pedestre":["portuguese"],"pediatra":["portuguese"],"pedra":["portuguese"],"pegada":["portuguese"],"peitoral":["portuguese"],"peixe":["portuguese"],"pele":["portuguese"],"pelicano":["portuguese"],"penca":["portuguese"],"pendurar":["portuguese"],"peneira":["portuguese"],"penhasco":["portuguese"],"pensador":["portuguese"],"pente":["portuguese"],"perceber":["portuguese"],"perfeito":["portuguese"],"pergunta":["portuguese"],"perito":["portuguese"],"permitir":["portuguese"],"perna":["portuguese"],"perplexo":["portuguese"],"persiana":["portuguese"],"pertence":["portuguese"],"peruca":["portuguese"],"pescado":["portuguese"],"pesquisa":["portuguese"],"pessoa":["portuguese"],"petiscar":["portuguese"],"piada":["portuguese"],"picado":["portuguese"],"piedade":["portuguese"],"pigmento":["portuguese"],"pilastra":["portuguese"],"pilhado":["portuguese"],"pilotar":["portuguese"],"pimenta":["portuguese"],"pincel":["portuguese"],"pinguim":["portuguese"],"pinha":["portuguese"],"pinote":["portuguese"],"pintar":["portuguese"],"pioneiro":["portuguese"],"pipoca":["portuguese"],"piquete":["portuguese"],"piranha":["portuguese"],"pires":["portuguese"],"pirueta":["portuguese"],"piscar":["portuguese"],"pistola":["portuguese"],"pitanga":["portuguese"],"pivete":["portuguese"],"planta":["portuguese"],"plaqueta":["portuguese"],"platina":["portuguese"],"plebeu":["portuguese"],"plumagem":["portuguese"],"pluvial":["portuguese"],"pneu":["portuguese"],"poda":["portuguese"],"poeira":["portuguese"],"poetisa":["portuguese"],"polegada":["portuguese"],"policiar":["portuguese"],"poluente":["portuguese"],"polvilho":["portuguese"],"pomar":["portuguese"],"pomba":["portuguese"],"ponderar":["portuguese"],"pontaria":["portuguese"],"populoso":["portuguese"],"porta":["portuguese"],"possuir":["portuguese"],"postal":["portuguese"],"pote":["portuguese"],"poupar":["portuguese"],"pouso":["portuguese"],"povoar":["portuguese"],"praia":["portuguese"],"prancha":["portuguese"],"prato":["portuguese"],"praxe":["portuguese"],"prece":["portuguese"],"predador":["portuguese"],"prefeito":["portuguese"],"premiar":["portuguese"],"prensar":["portuguese"],"preparar":["portuguese"],"presilha":["portuguese"],"pretexto":["portuguese"],"prevenir":["portuguese"],"prezar":["portuguese"],"primata":["portuguese"],"princesa":["portuguese"],"prisma":["portuguese"],"privado":["portuguese"],"processo":["portuguese"],"produto":["portuguese"],"profeta":["portuguese"],"proibido":["portuguese"],"projeto":["portuguese"],"prometer":["portuguese"],"propagar":["portuguese"],"prosa":["portuguese"],"protetor":["portuguese"],"provador":["portuguese"],"publicar":["portuguese"],"pudim":["portuguese"],"pular":["portuguese"],"pulmonar":["portuguese"],"pulseira":["portuguese"],"punhal":["portuguese"],"punir":["portuguese"],"pupilo":["portuguese"],"pureza":["portuguese"],"puxador":["portuguese"],"quadra":["portuguese"],"quantia":["portuguese"],"quarto":["portuguese"],"quase":["portuguese"],"quebrar":["portuguese"],"queda":["portuguese"],"queijo":["portuguese"],"quente":["portuguese"],"querido":["portuguese"],"quimono":["portuguese"],"quina":["portuguese"],"quiosque":["portuguese"],"rabanada":["portuguese"],"rabisco":["portuguese"],"rachar":["portuguese"],"racionar":["portuguese"],"radial":["portuguese"],"raiar":["portuguese"],"rainha":["portuguese"],"raio":["portuguese"],"raiva":["portuguese"],"rajada":["portuguese"],"ralado":["portuguese"],"ramal":["portuguese"],"ranger":["portuguese"],"ranhura":["portuguese"],"rapadura":["portuguese"],"rapel":["portuguese"],"rapidez":["portuguese"],"raposa":["portuguese"],"raquete":["portuguese"],"raridade":["portuguese"],"rasante":["portuguese"],"rascunho":["portuguese"],"rasgar":["portuguese"],"raspador":["portuguese"],"rasteira":["portuguese"],"rasurar":["portuguese"],"ratazana":["portuguese"],"ratoeira":["portuguese"],"realeza":["portuguese"],"reanimar":["portuguese"],"reaver":["portuguese"],"rebaixar":["portuguese"],"rebelde":["portuguese"],"rebolar":["portuguese"],"recado":["portuguese"],"recente":["portuguese"],"recheio":["portuguese"],"recibo":["portuguese"],"recordar":["portuguese"],"recrutar":["portuguese"],"recuar":["portuguese"],"rede":["portuguese"],"redimir":["portuguese"],"redonda":["portuguese"],"reduzida":["portuguese"],"reenvio":["portuguese"],"refinar":["portuguese"],"refletir":["portuguese"],"refogar":["portuguese"],"refresco":["portuguese"],"refugiar":["portuguese"],"regalia":["portuguese"],"regime":["portuguese"],"regra":["portuguese"],"reinado":["portuguese"],"reitor":["portuguese"],"rejeitar":["portuguese"],"relativo":["portuguese"],"remador":["portuguese"],"remendo":["portuguese"],"remorso":["portuguese"],"renovado":["portuguese"],"reparo":["portuguese"],"repelir":["portuguese"],"repleto":["portuguese"],"repolho":["portuguese"],"represa":["portuguese"],"repudiar":["portuguese"],"requerer":["portuguese"],"resenha":["portuguese"],"resfriar":["portuguese"],"resgatar":["portuguese"],"residir":["portuguese"],"resolver":["portuguese"],"respeito":["portuguese"],"ressaca":["portuguese"],"restante":["portuguese"],"resumir":["portuguese"],"retalho":["portuguese"],"reter":["portuguese"],"retirar":["portuguese"],"retomada":["portuguese"],"retratar":["portuguese"],"revelar":["portuguese"],"revisor":["portuguese"],"revolta":["portuguese"],"riacho":["portuguese"],"rica":["portuguese"],"rigidez":["portuguese"],"rigoroso":["portuguese"],"rimar":["portuguese"],"ringue":["portuguese"],"risada":["portuguese"],"risco":["portuguese"],"risonho":["portuguese"],"robalo":["portuguese"],"rochedo":["portuguese"],"rodada":["portuguese"],"rodeio":["portuguese"],"rodovia":["portuguese"],"roedor":["portuguese"],"roleta":["portuguese"],"romano":["portuguese"],"roncar":["portuguese"],"rosado":["portuguese"],"roseira":["portuguese"],"rosto":["portuguese"],"rota":["portuguese","turkish"],"roteiro":["portuguese"],"rotina":["portuguese"],"rotular":["portuguese"],"rouco":["portuguese"],"roupa":["portuguese"],"roxo":["portuguese"],"rubro":["portuguese"],"rugido":["portuguese"],"rugoso":["portuguese"],"ruivo":["portuguese"],"rumo":["portuguese"],"rupestre":["portuguese"],"russo":["portuguese"],"sabor":["portuguese"],"saciar":["portuguese"],"sacola":["portuguese"],"sacudir":["portuguese"],"sadio":["portuguese"],"safira":["portuguese"],"saga":["portuguese"],"sagrada":["portuguese"],"saibro":["portuguese"],"salada":["portuguese"],"saleiro":["portuguese"],"salgado":["portuguese"],"saliva":["portuguese"],"salpicar":["portuguese"],"salsicha":["portuguese"],"saltar":["portuguese"],"salvador":["portuguese"],"sambar":["portuguese"],"samurai":["portuguese"],"sanar":["portuguese"],"sanfona":["portuguese"],"sangue":["portuguese"],"sanidade":["portuguese"],"sapato":["portuguese"],"sarda":["portuguese"],"sargento":["portuguese"],"sarjeta":["portuguese"],"saturar":["portuguese"],"saudade":["portuguese"],"saxofone":["portuguese"],"sazonal":["portuguese"],"secar":["portuguese"],"secular":["portuguese"],"seda":["portuguese","turkish"],"sedento":["portuguese"],"sediado":["portuguese"],"sedoso":["portuguese"],"sedutor":["portuguese"],"segmento":["portuguese"],"segredo":["portuguese"],"segundo":["portuguese"],"seiva":["portuguese"],"seleto":["portuguese"],"selvagem":["portuguese"],"semanal":["portuguese"],"semente":["portuguese"],"senador":["portuguese"],"senhor":["portuguese"],"sensual":["portuguese"],"sentado":["portuguese"],"separado":["portuguese"],"sereia":["portuguese"],"seringa":["portuguese"],"serra":["portuguese"],"servo":["portuguese"],"setembro":["portuguese"],"setor":["portuguese"],"sigilo":["portuguese"],"silhueta":["portuguese"],"silicone":["portuguese"],"simetria":["portuguese"],"simpatia":["portuguese"],"simular":["portuguese"],"sinal":["portuguese"],"sincero":["portuguese"],"singular":["portuguese"],"sinopse":["portuguese"],"sintonia":["portuguese"],"sirene":["portuguese"],"siri":["portuguese"],"situado":["portuguese"],"soberano":["portuguese"],"sobra":["portuguese"],"socorro":["portuguese"],"sogro":["portuguese"],"soja":["portuguese"],"solda":["portuguese"],"soletrar":["portuguese"],"solteiro":["portuguese"],"sombrio":["portuguese"],"sonata":["portuguese"],"sondar":["portuguese"],"sonegar":["portuguese"],"sonhador":["portuguese"],"sono":["portuguese"],"soprano":["portuguese"],"soquete":["portuguese"],"sorrir":["portuguese"],"sorteio":["portuguese"],"sossego":["portuguese"],"sotaque":["portuguese"],"soterrar":["portuguese"],"sovado":["portuguese"],"sozinho":["portuguese"],"suavizar":["portuguese"],"subida":["portuguese"],"submerso":["portuguese"],"subsolo":["portuguese"],"subtrair":["portuguese"],"sucata":["portuguese"],"sucesso":["portuguese"],"suco":["portuguese"],"sudeste":["portuguese"],"sufixo":["portuguese"],"sugador":["portuguese"],"sugerir":["portuguese"],"sujeito":["portuguese"],"sulfato":["portuguese"],"sumir":["portuguese"],"suor":["portuguese"],"superior":["portuguese"],"suplicar":["portuguese"],"suposto":["portuguese"],"suprimir":["portuguese"],"surdina":["portuguese"],"surfista":["portuguese"],"surpresa":["portuguese"],"surreal":["portuguese"],"surtir":["portuguese"],"suspiro":["portuguese"],"sustento":["portuguese"],"tabela":["portuguese","turkish"],"tablete":["portuguese"],"tabuada":["portuguese"],"tacho":["portuguese"],"tagarela":["portuguese"],"talher":["portuguese"],"talo":["portuguese"],"talvez":["portuguese"],"tamanho":["portuguese"],"tamborim":["portuguese"],"tampa":["portuguese"],"tangente":["portuguese"],"tanto":["portuguese"],"tapar":["portuguese"],"tapioca":["portuguese"],"tardio":["portuguese"],"tarefa":["portuguese"],"tarja":["portuguese"],"tarraxa":["portuguese"],"tatuagem":["portuguese"],"taurino":["portuguese"],"taxativo":["portuguese"],"taxista":["portuguese"],"teatral":["portuguese"],"tecer":["portuguese"],"tecido":["portuguese"],"teclado":["portuguese"],"tedioso":["portuguese"],"teia":["portuguese"],"teimar":["portuguese"],"telefone":["portuguese"],"telhado":["portuguese"],"tempero":["portuguese"],"tenente":["portuguese"],"tensor":["portuguese"],"tentar":["portuguese"],"termal":["portuguese"],"terno":["portuguese"],"terreno":["portuguese"],"tese":["portuguese"],"tesoura":["portuguese"],"testado":["portuguese"],"teto":["portuguese"],"textura":["portuguese"],"texugo":["portuguese"],"tiara":["portuguese"],"tigela":["portuguese"],"tijolo":["portuguese"],"timbrar":["portuguese"],"timidez":["portuguese"],"tingido":["portuguese"],"tinteiro":["portuguese"],"tiragem":["portuguese"],"titular":["portuguese"],"toalha":["portuguese"],"tocha":["portuguese"],"tolerar":["portuguese"],"tolice":["portuguese"],"tomada":["portuguese"],"tomilho":["portuguese"],"tonel":["portuguese"],"tontura":["portuguese"],"topete":["portuguese"],"tora":["portuguese"],"torcido":["portuguese"],"torneio":["portuguese"],"torque":["portuguese"],"torrada":["portuguese"],"torto":["portuguese"],"tostar":["portuguese"],"touca":["portuguese"],"toupeira":["portuguese"],"toxina":["portuguese"],"trabalho":["portuguese"],"tracejar":["portuguese"],"tradutor":["portuguese"],"trafegar":["portuguese"],"trajeto":["portuguese"],"trama":["portuguese"],"trancar":["portuguese"],"trapo":["portuguese"],"traseiro":["portuguese"],"tratador":["portuguese"],"travar":["portuguese"],"treino":["portuguese"],"tremer":["portuguese"],"trepidar":["portuguese"],"trevo":["portuguese"],"triagem":["portuguese"],"tribo":["portuguese"],"triciclo":["portuguese"],"tridente":["portuguese"],"trilogia":["portuguese"],"trindade":["portuguese"],"triplo":["portuguese"],"triturar":["portuguese"],"triunfal":["portuguese"],"trocar":["portuguese"],"trombeta":["portuguese"],"trova":["portuguese"],"trunfo":["portuguese"],"truque":["portuguese"],"tubular":["portuguese"],"tucano":["portuguese"],"tudo":["portuguese"],"tulipa":["portuguese"],"tupi":["portuguese"],"turbo":["portuguese"],"turma":["portuguese"],"turquesa":["portuguese"],"tutelar":["portuguese"],"tutorial":["portuguese"],"uivar":["portuguese"],"umbigo":["portuguese"],"unha":["portuguese"],"unidade":["portuguese"],"uniforme":["portuguese"],"urologia":["portuguese"],"urso":["portuguese"],"urtiga":["portuguese"],"urubu":["portuguese"],"usado":["portuguese"],"usina":["portuguese"],"usufruir":["portuguese"],"vacina":["portuguese"],"vadiar":["portuguese"],"vagaroso":["portuguese"],"vaidoso":["portuguese"],"vala":["portuguese"],"valente":["portuguese"],"validade":["portuguese"],"valores":["portuguese"],"vantagem":["portuguese"],"vaqueiro":["portuguese"],"varanda":["portuguese"],"vareta":["portuguese"],"varrer":["portuguese"],"vascular":["portuguese"],"vasilha":["portuguese"],"vassoura":["portuguese"],"vazar":["portuguese"],"vazio":["portuguese"],"veado":["portuguese"],"vedar":["portuguese"],"vegetar":["portuguese"],"veicular":["portuguese"],"veleiro":["portuguese"],"velhice":["portuguese"],"veludo":["portuguese"],"vencedor":["portuguese"],"vendaval":["portuguese"],"venerar":["portuguese"],"ventre":["portuguese"],"verbal":["portuguese"],"verdade":["portuguese"],"vereador":["portuguese"],"vergonha":["portuguese"],"vermelho":["portuguese"],"verniz":["portuguese"],"versar":["portuguese"],"vertente":["portuguese"],"vespa":["portuguese"],"vestido":["portuguese"],"vetorial":["portuguese"],"viaduto":["portuguese"],"viagem":["portuguese"],"viajar":["portuguese"],"viatura":["portuguese"],"vibrador":["portuguese"],"videira":["portuguese"],"vidraria":["portuguese"],"viela":["portuguese"],"viga":["portuguese"],"vigente":["portuguese"],"vigiar":["portuguese"],"vigorar":["portuguese"],"vilarejo":["portuguese"],"vinco":["portuguese"],"vinheta":["portuguese"],"vinil":["portuguese"],"violeta":["portuguese"],"virada":["portuguese"],"virtude":["portuguese"],"visitar":["portuguese"],"visto":["portuguese"],"vitral":["portuguese"],"viveiro":["portuguese"],"vizinho":["portuguese"],"voador":["portuguese"],"voar":["portuguese"],"vogal":["portuguese"],"volante":["portuguese"],"voleibol":["portuguese"],"voltagem":["portuguese"],"volumoso":["portuguese"],"vontade":["portuguese"],"vulto":["portuguese"],"vuvuzela":["portuguese"],"xadrez":["portuguese"],"xarope":["portuguese"],"xeque":["portuguese"],"xeretar":["portuguese"],"xerife":["portuguese"],"xingar":["portuguese"],"zangado":["portuguese"],"zarpar":["portuguese"],"zebu":["portuguese"],"zelador":["portuguese"],"zombar":["portuguese"],"zoologia":["portuguese"],"zumbido":["portuguese"],"абзац":["russian"],"абонент":["russian"],"абсурд":["russian"],"авангард":["russian"],"авария":["russian"],"август":["russian"],"авиация":["russian"],"автор":["russian"],"агент":["russian"],"агитация":["russian"],"агрегат":["russian"],"адвокат":["russian"],"адмирал":["russian"],"адрес":["russian"],"азарт":["russian"],"азот":["russian"],"академия":["russian"],"аквариум":["russian"],"аксиома":["russian"],"акула":["russian"],"акцент":["russian"],"акция":["russian"],"аллея":["russian"],"алмаз":["russian"],"алтарь":["russian"],"альбом":["russian"],"альянс":["russian"],"амбиция":["russian"],"анализ":["russian"],"анекдот":["russian"],"анкета":["russian"],"ансамбль":["russian"],"антенна":["russian"],"апельсин":["russian"],"аппарат":["russian"],"аппетит":["russian"],"апрель":["russian"],"аптека":["russian"],"арбуз":["russian"],"аргумент":["russian"],"аренда":["russian"],"арест":["russian"],"армия":["russian"],"аромат":["russian"],"арсенал":["russian"],"артерия":["russian"],"артист":["russian"],"архив":["russian"],"аспирант":["russian"],"асфальт":["russian"],"атака":["russian"],"атомный":["russian"],"атрибут":["russian"],"аукцион":["russian"],"афиша":["russian"],"аэропорт":["russian"],"бабочка":["russian"],"бабушка":["russian"],"багаж":["russian"],"база":["russian"],"бактерия":["russian"],"баланс":["russian"],"балерина":["russian"],"балкон":["russian"],"бандит":["russian"],"банк":["russian"],"барабан":["russian"],"барон":["russian"],"барышня":["russian"],"барьер":["russian"],"бассейн":["russian"],"батарея":["russian"],"башмак":["russian"],"башня":["russian"],"бедный":["russian"],"беженец":["russian"],"бездна":["russian"],"белка":["russian"],"белый":["russian"],"бензин":["russian"],"берег":["russian"],"беседа":["russian"],"бешеный":["russian"],"билет":["russian"],"бинокль":["russian"],"биржа":["russian"],"битва":["russian"],"благо":["russian"],"блеск":["russian"],"близкий":["russian"],"блин":["russian"],"блок":["russian"],"блюдо":["russian"],"богатый":["russian"],"бодрый":["russian"],"боец":["russian"],"бокал":["russian"],"боковой":["russian"],"бокс":["russian"],"более":["russian"],"болото":["russian"],"болтать":["russian"],"большой":["russian"],"бомба":["russian"],"борт":["russian"],"борьба":["russian"],"босой":["russian"],"ботинок":["russian"],"бояться":["russian"],"брак":["russian"],"брать":["russian"],"бревно":["russian"],"бред":["russian"],"бригада":["russian"],"бродяга":["russian"],"броня":["russian"],"бросить":["russian"],"брызги":["russian"],"брюки":["russian"],"брюхо":["russian"],"бугор":["russian"],"будка":["russian"],"будни":["russian"],"будущее":["russian"],"буква":["russian"],"букет":["russian"],"бульвар":["russian"],"бумага":["russian"],"бунт":["russian"],"бурный":["russian"],"буря":["russian"],"бутылка":["russian"],"бухта":["russian"],"бывший":["russian"],"быстро":["russian"],"бытовой":["russian"],"быть":["russian"],"бюджет":["russian"],"бюро":["russian"],"бюст":["russian"],"вагон":["russian"],"важный":["russian"],"вакцина":["russian"],"валенок":["russian"],"вальс":["russian"],"валюта":["russian"],"ванная":["russian"],"варенье":["russian"],"вариант":["russian"],"вблизи":["russian"],"вверх":["russian"],"вводить":["russian"],"вдали":["russian"],"вдвое":["russian"],"вдова":["russian"],"вдоль":["russian"],"вдруг":["russian"],"ведро":["russian"],"ведущий":["russian"],"ведьма":["russian"],"вежливо":["russian"],"везде":["russian"],"веко":["russian"],"вексель":["russian"],"велеть":["russian"],"великий":["russian"],"венец":["russian"],"веник":["russian"],"веранда":["russian"],"верблюд":["russian"],"верить":["russian"],"верный":["russian"],"версия":["russian"],"вертеть":["russian"],"верхний":["russian"],"вершина":["russian"],"весело":["russian"],"весна":["russian"],"весомый":["russian"],"вести":["russian"],"весь":["russian"],"ветеран":["russian"],"ветхий":["russian"],"вечер":["russian"],"вечно":["russian"],"вешалка":["russian"],"вещество":["russian"],"взамен":["russian"],"взгляд":["russian"],"вздох":["russian"],"взнос":["russian"],"взойти":["russian"],"взор":["russian"],"взрыв":["russian"],"взять":["russian"],"видеть":["russian"],"видимо":["russian"],"визг":["russian"],"визит":["russian"],"вилка":["russian"],"вина":["russian"],"вирус":["russian"],"висок":["russian"],"витамин":["russian"],"витрина":["russian"],"вихрь":["russian"],"вишня":["russian"],"вкус":["russian"],"влага":["russian"],"владелец":["russian"],"власть":["russian"],"влево":["russian"],"влияние":["russian"],"вложить":["russian"],"вместе":["russian"],"внешний":["russian"],"вникать":["russian"],"внимание":["russian"],"вновь":["russian"],"внук":["russian"],"внутри":["russian"],"внучка":["russian"],"внушать":["russian"],"вовлечь":["russian"],"вовремя":["russian"],"вовсю":["russian"],"вода":["russian"],"водород":["russian"],"водяной":["russian"],"воевать":["russian"],"возврат":["russian"],"возглас":["russian"],"воздух":["russian"],"возить":["russian"],"возле":["russian"],"возня":["russian"],"возраст":["russian"],"война":["russian"],"войско":["russian"],"вокзал":["russian"],"волос":["russian"],"волчий":["russian"],"вольный":["russian"],"воля":["russian"],"вообще":["russian"],"вопль":["russian"],"вопрос":["russian"],"ворота":["russian"],"восемь":["russian"],"восток":["russian"],"вплоть":["russian"],"вполне":["russian"],"вправе":["russian"],"впредь":["russian"],"впрочем":["russian"],"врач":["russian"],"вредный":["russian"],"время":["russian"],"вручить":["russian"],"всадник":["russian"],"всегда":["russian"],"вскоре":["russian"],"вскрыть":["russian"],"всплеск":["russian"],"вспышка":["russian"],"встреча":["russian"],"всюду":["russian"],"всякий":["russian"],"второй":["russian"],"вход":["russian"],"вчера":["russian"],"выбор":["russian"],"вывод":["russian"],"выгнать":["russian"],"выдать":["russian"],"выехать":["russian"],"вызов":["russian"],"выйти":["russian"],"выкуп":["russian"],"вылезти":["russian"],"вымыть":["russian"],"выпасть":["russian"],"выпить":["russian"],"выплата":["russian"],"выпуск":["russian"],"вырасти":["russian"],"выручка":["russian"],"выслать":["russian"],"высокий":["russian"],"выставка":["russian"],"вышка":["russian"],"вязать":["russian"],"вялый":["russian"],"газета":["russian"],"газовый":["russian"],"галерея":["russian"],"галстук":["russian"],"гамма":["russian"],"гарантия":["russian"],"гармония":["russian"],"гарнизон":["russian"],"гастроли":["russian"],"гвардия":["russian"],"гвоздь":["russian"],"гектар":["russian"],"генерал":["russian"],"гений":["russian"],"геном":["russian"],"геолог":["russian"],"герб":["russian"],"герой":["russian"],"гибкий":["russian"],"гигант":["russian"],"гимн":["russian"],"гипотеза":["russian"],"гитара":["russian"],"главный":["russian"],"глагол":["russian"],"гладить":["russian"],"глаз":["russian"],"глина":["russian"],"глоток":["russian"],"глубокий":["russian"],"глупый":["russian"],"глухой":["russian"],"глыба":["russian"],"глядеть":["russian"],"гнев":["russian"],"гнездо":["russian"],"гнилой":["russian"],"годовой":["russian"],"голова":["russian"],"голубой":["russian"],"голый":["russian"],"гонорар":["russian"],"гордость":["russian"],"горизонт":["russian"],"горло":["russian"],"горный":["russian"],"город":["russian"],"горшок":["russian"],"горький":["russian"],"горючее":["russian"],"горячий":["russian"],"готовый":["russian"],"градус":["russian"],"грамм":["russian"],"граница":["russian"],"граф":["russian"],"гребень":["russian"],"гриб":["russian"],"гримаса":["russian"],"грозить":["russian"],"грохот":["russian"],"грош":["russian"],"грубый":["russian"],"грудь":["russian"],"груз":["russian"],"грунт":["russian"],"группа":["russian"],"груша":["russian"],"грязный":["russian"],"губа":["russian"],"гудок":["russian"],"гулкий":["russian"],"гулять":["russian"],"гусеница":["russian"],"густо":["russian"],"гусь":["russian"],"давление":["russian"],"давно":["russian"],"даже":["russian"],"дальний":["russian"],"данный":["russian"],"дарить":["russian"],"датчик":["russian"],"дать":["russian"],"дача":["russian"],"двадцать":["russian"],"дважды":["russian"],"дверь":["russian"],"двигать":["russian"],"движение":["russian"],"двойной":["russian"],"двор":["russian"],"дебют":["russian"],"девятый":["russian"],"дежурный":["russian"],"действие":["russian"],"декабрь":["russian"],"деление":["russian"],"дело":["russian"],"дельфин":["russian"],"день":["russian"],"дерево":["russian"],"держать":["russian"],"дерзкий":["russian"],"десять":["russian"],"деталь":["russian"],"детский":["russian"],"дефект":["russian"],"дефицит":["russian"],"деятель":["russian"],"джаз":["russian"],"джинсы":["russian"],"джунгли":["russian"],"диагноз":["russian"],"диалог":["russian"],"диапазон":["russian"],"диван":["russian"],"дивизия":["russian"],"дивный":["russian"],"диета":["russian"],"дизайн":["russian"],"дикарь":["russian"],"дилер":["russian"],"динамика":["russian"],"диплом":["russian"],"директор":["russian"],"дитя":["russian"],"длинный":["russian"],"дневник":["russian"],"добрый":["russian"],"добыча":["russian"],"доверие":["russian"],"догадка":["russian"],"догнать":["russian"],"дождь":["russian"],"доклад":["russian"],"доктор":["russian"],"документ":["russian"],"долго":["russian"],"должен":["russian"],"долина":["russian"],"донос":["russian"],"дорога":["russian"],"досада":["russian"],"доска":["russian"],"достать":["russian"],"досуг":["russian"],"доход":["russian"],"доцент":["russian"],"дощатый":["russian"],"драка":["russian"],"древний":["russian"],"дремать":["russian"],"дробный":["russian"],"дрова":["russian"],"дрожать":["russian"],"другой":["russian"],"дружба":["russian"],"дубовый":["russian"],"дуга":["russian"],"думать":["russian"],"дурной":["russian"],"духи":["russian"],"душный":["russian"],"дуэль":["russian"],"дуэт":["russian"],"дыра":["russian"],"дыхание":["russian"],"дюжина":["russian"],"дядя":["russian"],"едва":["russian"],"единый":["russian"],"ерунда":["russian"],"если":["russian"],"ехать":["russian"],"жадный":["russian"],"жажда":["russian"],"жалеть":["russian"],"жалоба":["russian"],"жанр":["russian"],"жареный":["russian"],"жаркий":["russian"],"жгучий":["russian"],"жевать":["russian"],"желание":["russian"],"желудок":["russian"],"жена":["russian"],"женщина":["russian"],"жертва":["russian"],"жест":["russian"],"жидкость":["russian"],"житель":["russian"],"жить":["russian"],"жрец":["russian"],"жулик":["russian"],"журнал":["russian"],"жуткий":["russian"],"забрать":["russian"],"забыть":["russian"],"завести":["russian"],"завод":["russian"],"завтра":["russian"],"загадка":["russian"],"загнать":["russian"],"заговор":["russian"],"задача":["russian"],"задеть":["russian"],"задний":["russian"],"задолго":["russian"],"заехать":["russian"],"заказ":["russian"],"закон":["russian"],"закрыть":["russian"],"закуска":["russian"],"залезть":["russian"],"залить":["russian"],"залп":["russian"],"замок":["russian"],"замуж":["russian"],"замысел":["russian"],"занавес":["russian"],"заново":["russian"],"занять":["russian"],"заодно":["russian"],"запись":["russian"],"запрос":["russian"],"запуск":["russian"],"запястье":["russian"],"заранее":["russian"],"заросль":["russian"],"зарплата":["russian"],"заря":["russian"],"засада":["russian"],"заслуга":["russian"],"заснуть":["russian"],"застать":["russian"],"затвор":["russian"],"затеять":["russian"],"затрата":["russian"],"затылок":["russian"],"захват":["russian"],"зачем":["russian"],"защита":["russian"],"заявить":["russian"],"заяц":["russian"],"звезда":["russian"],"звено":["russian"],"звонить":["russian"],"здесь":["russian"],"зелень":["russian"],"земля":["russian"],"зеркало":["russian"],"зерно":["russian"],"зима":["russian"],"злой":["russian"],"змея":["russian"],"знамя":["russian"],"знание":["russian"],"значит":["russian"],"золотой":["russian"],"зона":["russian"],"зонтик":["russian"],"зоопарк":["russian"],"зрачок":["russian"],"зрение":["russian"],"зритель":["russian"],"зубной":["russian"],"зубр":["russian"],"игла":["russian"],"идеал":["russian"],"идеолог":["russian"],"идея":["russian"],"идол":["russian"],"идти":["russian"],"изба":["russian"],"избить":["russian"],"избрать":["russian"],"избыток":["russian"],"извлечь":["russian"],"извне":["russian"],"изгиб":["russian"],"изгнать":["russian"],"издание":["russian"],"изделие":["russian"],"изнутри":["russian"],"изобилие":["russian"],"изоляция":["russian"],"изредка":["russian"],"изрядно":["russian"],"изучение":["russian"],"изъять":["russian"],"изящный":["russian"],"икона":["russian"],"икра":["russian"],"иллюзия":["russian"],"именно":["russian"],"иметь":["russian"],"имидж":["russian"],"империя":["russian"],"импульс":["russian"],"иначе":["russian"],"инвалид":["russian"],"индекс":["russian"],"индивид":["russian"],"инерция":["russian"],"инженер":["russian"],"иногда":["russian"],"иной":["russian"],"институт":["russian"],"интерес":["russian"],"интрига":["russian"],"интуиция":["russian"],"инфаркт":["russian"],"инцидент":["russian"],"ирония":["russian"],"искать":["russian"],"испуг":["russian"],"история":["russian"],"итог":["russian"],"июнь":["russian"],"кабель":["russian"],"кабинет":["russian"],"каблук":["russian"],"кавалер":["russian"],"кадр":["russian"],"каждый":["russian"],"кажется":["russian"],"казино":["russian"],"калитка":["russian"],"камень":["russian"],"камин":["russian"],"канал":["russian"],"кандидат":["russian"],"каникулы":["russian"],"канон":["russian"],"капитан":["russian"],"капля":["russian"],"капот":["russian"],"капуста":["russian"],"карандаш":["russian"],"карета":["russian"],"каркас":["russian"],"карман":["russian"],"картина":["russian"],"карьера":["russian"],"каска":["russian"],"кассета":["russian"],"кастрюля":["russian"],"каталог":["russian"],"катер":["russian"],"каток":["russian"],"катушка":["russian"],"кафедра":["russian"],"качество":["russian"],"каша":["russian"],"кашлять":["russian"],"каюта":["russian"],"квадрат":["russian"],"квартира":["russian"],"квота":["russian"],"кепка":["russian"],"кивнуть":["russian"],"километр":["russian"],"кино":["russian"],"киоск":["russian"],"кипяток":["russian"],"кирпич":["russian"],"кислота":["russian"],"кисть":["russian"],"клавиша":["russian"],"клапан":["russian"],"класс":["russian"],"клей":["russian"],"клетка":["russian"],"клиент":["russian"],"климат":["russian"],"клиника":["russian"],"кличка":["russian"],"клоун":["russian"],"клочок":["russian"],"клуб":["russian"],"клумба":["russian"],"ключ":["russian"],"книга":["russian"],"кнопка":["russian"],"кнут":["russian"],"княгиня":["russian"],"князь":["russian"],"кобура":["russian"],"когда":["russian"],"кодекс":["russian"],"кожа":["russian"],"коктейль":["russian"],"колено":["russian"],"коллега":["russian"],"колонна":["russian"],"колпак":["russian"],"кольцо":["russian"],"колючий":["russian"],"коляска":["russian"],"команда":["russian"],"комедия":["russian"],"комиссия":["russian"],"коммуна":["russian"],"комната":["russian"],"комок":["russian"],"компания":["russian"],"комфорт":["russian"],"конвейер":["russian"],"конгресс":["russian"],"конечно":["russian"],"конкурс":["russian"],"контроль":["russian"],"концерт":["russian"],"конь":["russian"],"конюшня":["russian"],"копать":["russian"],"копейка":["russian"],"копыто":["russian"],"корабль":["russian"],"корень":["russian"],"корзина":["russian"],"коридор":["russian"],"кормить":["russian"],"корпус":["russian"],"космос":["russian"],"костюм":["russian"],"косяк":["russian"],"котел":["russian"],"котлета":["russian"],"который":["russian"],"коттедж":["russian"],"кофе":["russian"],"кофта":["russian"],"кошка":["russian"],"кража":["russian"],"край":["russian"],"красный":["russian"],"краткий":["russian"],"кредит":["russian"],"крем":["russian"],"крепкий":["russian"],"кресло":["russian"],"кривой":["russian"],"кризис":["russian"],"кристалл":["russian"],"критерий":["russian"],"кричать":["russian"],"кровь":["russian"],"крокодил":["russian"],"кролик":["russian"],"кроме":["russian"],"крона":["russian"],"круг":["russian"],"кружка":["russian"],"крупный":["russian"],"крутой":["russian"],"крушение":["russian"],"крыло":["russian"],"крыша":["russian"],"крючок":["russian"],"кстати":["russian"],"кубик":["russian"],"куда":["russian"],"кузов":["russian"],"кукла":["russian"],"кулак":["russian"],"кулиса":["russian"],"культура":["russian"],"кумир":["russian"],"купе":["russian"],"купить":["russian"],"купол":["russian"],"купюра":["russian"],"курица":["russian"],"курорт":["russian"],"курс":["russian"],"куртка":["russian"],"кусок":["russian"],"куст":["russian"],"кухня":["russian"],"кушать":["russian"],"лабиринт":["russian"],"лавка":["russian"],"лагерь":["russian"],"ладно":["russian"],"ладонь":["russian"],"лапа":["russian"],"лауреат":["russian"],"лгать":["russian"],"лебедь":["russian"],"левый":["russian"],"легенда":["russian"],"легкий":["russian"],"ледяной":["russian"],"лежать":["russian"],"лезвие":["russian"],"лезть":["russian"],"лекция":["russian"],"ленивый":["russian"],"лента":["russian"],"лепесток":["russian"],"лесной":["russian"],"лестница":["russian"],"лететь":["russian"],"лето":["russian"],"лечить":["russian"],"лига":["russian"],"лидер":["russian"],"лиловый":["russian"],"лимон":["russian"],"линия":["russian"],"липкий":["russian"],"лист":["russian"],"литр":["russian"],"лихой":["russian"],"лицо":["russian"],"лишить":["russian"],"лишний":["russian"],"ловить":["russian"],"логика":["russian"],"лодка":["russian"],"ложь":["russian"],"лозунг":["russian"],"локоть":["russian"],"лопата":["russian"],"лошадь":["russian"],"лукавый":["russian"],"луна":["russian"],"лучший":["russian"],"лысый":["russian"],"льгота":["russian"],"любить":["russian"],"любой":["russian"],"людской":["russian"],"люстра":["russian"],"лютый":["russian"],"лягушка":["russian"],"магазин":["russian"],"магия":["russian"],"майор":["russian"],"майский":["russian"],"максимум":["russian"],"макушка":["russian"],"мало":["russian"],"мальчик":["russian"],"мама":["russian"],"манера":["russian"],"марка":["russian"],"март":["russian"],"маршрут":["russian"],"масса":["russian"],"мастер":["russian"],"масштаб":["russian"],"материал":["russian"],"матч":["russian"],"махать":["russian"],"машина":["russian"],"маяк":["russian"],"мебель":["russian"],"медаль":["russian"],"медведь":["russian"],"медицина":["russian"],"медь":["russian"],"между":["russian"],"мелкий":["russian"],"мелочь":["russian"],"мемуары":["russian"],"меньше":["russian"],"меню":["russian"],"менять":["russian"],"мера":["russian"],"мерцать":["russian"],"место":["russian"],"месяц":["russian"],"металл":["russian"],"метод":["russian"],"метр":["russian"],"механизм":["russian"],"меховой":["russian"],"мечтать":["russian"],"мешать":["russian"],"мешок":["russian"],"миграция":["russian"],"микрофон":["russian"],"милиция":["russian"],"миллион":["russian"],"милость":["russian"],"миля":["russian"],"мимо":["russian"],"минерал":["russian"],"министр":["russian"],"минута":["russian"],"мирный":["russian"],"миска":["russian"],"миссия":["russian"],"митинг":["russian"],"мишень":["russian"],"младший":["russian"],"мнение":["russian"],"мнимый":["russian"],"много":["russian"],"могучий":["russian"],"модель":["russian"],"может":["russian"],"мозг":["russian"],"мокрый":["russian"],"молекула":["russian"],"молния":["russian"],"молодой":["russian"],"молчать":["russian"],"момент":["russian"],"монета":["russian"],"монитор":["russian"],"монолог":["russian"],"монстр":["russian"],"монтаж":["russian"],"мораль":["russian"],"море":["russian"],"морковь":["russian"],"мороз":["russian"],"морщина":["russian"],"мостовая":["russian"],"мотать":["russian"],"мотив":["russian"],"мотор":["russian"],"мохнатый":["russian"],"мрамор":["russian"],"мрачный":["russian"],"мстить":["russian"],"мудрый":["russian"],"мужество":["russian"],"мужчина":["russian"],"музей":["russian"],"музыка":["russian"],"мундир":["russian"],"муравей":["russian"],"мусор":["russian"],"муха":["russian"],"мчаться":["russian"],"мысль":["russian"],"мыться":["russian"],"мышца":["russian"],"мышь":["russian"],"мюзикл":["russian"],"мягкий":["russian"],"мясо":["russian"],"набор":["russian"],"навык":["russian"],"наглый":["russian"],"нагрузка":["russian"],"надежда":["russian"],"надзор":["russian"],"надо":["russian"],"наедине":["russian"],"назад":["russian"],"название":["russian"],"назло":["russian"],"наивный":["russian"],"найти":["russian"],"наконец":["russian"],"налево":["russian"],"наличие":["russian"],"налог":["russian"],"намерен":["russian"],"нанести":["russian"],"напасть":["russian"],"например":["russian"],"народ":["russian"],"наследие":["russian"],"натура":["russian"],"наука":["russian"],"наутро":["russian"],"начать":["russian"],"небо":["russian"],"неважно":["russian"],"невеста":["russian"],"негодяй":["russian"],"недавно":["russian"],"неделя":["russian"],"недолго":["russian"],"недра":["russian"],"недуг":["russian"],"нежный":["russian"],"незачем":["russian"],"некто":["russian"],"нелепый":["russian"],"неловко":["russian"],"нельзя":["russian"],"немало":["russian"],"немой":["russian"],"неплохо":["russian"],"нервный":["russian"],"нередко":["russian"],"нестись":["russian"],"неудача":["russian"],"неужели":["russian"],"нефть":["russian"],"неясный":["russian"],"нигде":["russian"],"низкий":["russian"],"никакой":["russian"],"никогда":["russian"],"никуда":["russian"],"ничто":["russian"],"ничуть":["russian"],"ниша":["russian"],"нищий":["russian"],"новость":["russian"],"новый":["russian"],"нога":["russian"],"ноготь":["russian"],"ножницы":["russian"],"ноздря":["russian"],"номер":["russian"],"носить":["russian"],"носок":["russian"],"ночь":["russian"],"ноябрь":["russian"],"нрав":["russian"],"нуль":["russian"],"нынче":["russian"],"нырять":["russian"],"нюанс":["russian"],"няня":["russian"],"обаяние":["russian"],"обед":["russian"],"обезьяна":["russian"],"обещать":["russian"],"обжечь":["russian"],"обзор":["russian"],"обилие":["russian"],"обитать":["russian"],"область":["russian"],"облик":["russian"],"обложка":["russian"],"обмен":["russian"],"обморок":["russian"],"обожать":["russian"],"обои":["russian"],"оболочка":["russian"],"оборона":["russian"],"обочина":["russian"],"образ":["russian"],"обрести":["russian"],"обрыв":["russian"],"обувь":["russian"],"обучение":["russian"],"обход":["russian"],"общество":["russian"],"общий":["russian"],"объект":["russian"],"обыск":["russian"],"обычно":["russian"],"обязать":["russian"],"овощи":["russian"],"овраг":["russian"],"овца":["russian"],"оговорка":["russian"],"ограда":["russian"],"огурец":["russian"],"одежда":["russian"],"одеяло":["russian"],"один":["russian"],"однако":["russian"],"одолеть":["russian"],"ожидать":["russian"],"озеро":["russian"],"океан":["russian"],"окно":["russian"],"около":["russian"],"окоп":["russian"],"окраина":["russian"],"октябрь":["russian"],"опасный":["russian"],"опека":["russian"],"операция":["russian"],"описание":["russian"],"оплата":["russian"],"опора":["russian"],"оппонент":["russian"],"оптимизм":["russian"],"оптовый":["russian"],"опухоль":["russian"],"опыт":["russian"],"оратор":["russian"],"орбита":["russian"],"орган":["russian"],"орден":["russian"],"орел":["russian"],"оригинал":["russian"],"ориентир":["russian"],"оркестр":["russian"],"оружие":["russian"],"осенний":["russian"],"осколок":["russian"],"осмотр":["russian"],"остров":["russian"],"отбор":["russian"],"отбыть":["russian"],"отвлечь":["russian"],"отдать":["russian"],"отдел":["russian"],"отдых":["russian"],"отель":["russian"],"отец":["russian"],"отзыв":["russian"],"отказ":["russian"],"отклик":["russian"],"открыть":["russian"],"откуда":["russian"],"отличие":["russian"],"отныне":["russian"],"отойти":["russian"],"отпуск":["russian"],"отрасль":["russian"],"отросток":["russian"],"отрывок":["russian"],"отряд":["russian"],"отсек":["russian"],"отставка":["russian"],"отсюда":["russian"],"оттенок":["russian"],"оттого":["russian"],"отчего":["russian"],"отъезд":["russian"],"офис":["russian"],"офицер":["russian"],"охота":["russian"],"охрана":["russian"],"оценка":["russian"],"очаг":["russian"],"очень":["russian"],"очередь":["russian"],"очищать":["russian"],"ошибка":["russian"],"ощущение":["russian"],"павильон":["russian"],"падать":["russian"],"пазуха":["russian"],"пакет":["russian"],"палата":["russian"],"палец":["russian"],"палуба":["russian"],"пальто":["russian"],"память":["russian"],"панель":["russian"],"паника":["russian"],"пара":["russian"],"парень":["russian"],"пароход":["russian"],"партия":["russian"],"парус":["russian"],"паспорт":["russian"],"пассажир":["russian"],"пастух":["russian"],"патент":["russian"],"патрон":["russian"],"пауза":["russian"],"паук":["russian"],"паутина":["russian"],"пафос":["russian"],"пахнуть":["russian"],"пациент":["russian"],"пачка":["russian"],"певец":["russian"],"педагог":["russian"],"пейзаж":["russian"],"пенсия":["russian"],"пепел":["russian"],"первый":["russian"],"перед":["russian"],"период":["russian"],"перо":["russian"],"перрон":["russian"],"персонаж":["russian"],"перчатка":["russian"],"песня":["russian"],"песок":["russian"],"петля":["russian"],"петрушка":["russian"],"петух":["russian"],"пехота":["russian"],"печать":["russian"],"печень":["russian"],"пешком":["russian"],"пещера":["russian"],"пианист":["russian"],"пиджак":["russian"],"пилот":["russian"],"пионер":["russian"],"пирамида":["russian"],"пирожок":["russian"],"письмо":["russian"],"пища":["russian"],"плавание":["russian"],"плакать":["russian"],"пламя":["russian"],"план":["russian"],"пласт":["russian"],"платить":["russian"],"пленный":["russian"],"плечо":["russian"],"плита":["russian"],"плод":["russian"],"плоский":["russian"],"плотный":["russian"],"плохой":["russian"],"площадь":["russian"],"плыть":["russian"],"плюс":["russian"],"пляж":["russian"],"плясать":["russian"],"победа":["russian"],"повар":["russian"],"повод":["russian"],"повсюду":["russian"],"повязка":["russian"],"погода":["russian"],"погреб":["russian"],"подбор":["russian"],"подвиг":["russian"],"подделка":["russian"],"поджать":["russian"],"поднос":["russian"],"подпись":["russian"],"подруга":["russian"],"подход":["russian"],"подчас":["russian"],"подъезд":["russian"],"поединок":["russian"],"поезд":["russian"],"поесть":["russian"],"поехать":["russian"],"пожалуй":["russian"],"пожилой":["russian"],"позади":["russian"],"позвать":["russian"],"поздний":["russian"],"позиция":["russian"],"позор":["russian"],"поиск":["russian"],"поймать":["russian"],"пойти":["russian"],"поклон":["russian"],"покой":["russian"],"покрыть":["russian"],"полдень":["russian"],"полезный":["russian"],"ползти":["russian"],"полк":["russian"],"полный":["russian"],"половина":["russian"],"полтора":["russian"],"польза":["russian"],"поляна":["russian"],"помидор":["russian"],"помнить":["russian"],"помощь":["russian"],"попасть":["russian"],"поперек":["russian"],"поплыть":["russian"],"пополам":["russian"],"поправка":["russian"],"попугай":["russian"],"попытка":["russian"],"порог":["russian"],"портрет":["russian"],"порция":["russian"],"порыв":["russian"],"порядок":["russian"],"после":["russian"],"посол":["russian"],"посреди":["russian"],"постель":["russian"],"посуда":["russian"],"потом":["russian"],"похвала":["russian"],"похожий":["russian"],"поцелуй":["russian"],"почва":["russian"],"почему":["russian"],"пошлина":["russian"],"поэма":["russian"],"поэтому":["russian"],"право":["russian"],"праздник":["russian"],"практика":["russian"],"прах":["russian"],"преграда":["russian"],"предмет":["russian"],"прежде":["russian"],"прелесть":["russian"],"премия":["russian"],"препарат":["russian"],"пресса":["russian"],"прибыть":["russian"],"прижать":["russian"],"прийти":["russian"],"приказ":["russian"],"прилавок":["russian"],"пример":["russian"],"принять":["russian"],"природа":["russian"],"притом":["russian"],"прихожая":["russian"],"прицел":["russian"],"причина":["russian"],"приют":["russian"],"прогноз":["russian"],"продукт":["russian"],"проект":["russian"],"прожить":["russian"],"прокат":["russian"],"промысел":["russian"],"пропуск":["russian"],"просто":["russian"],"против":["russian"],"профиль":["russian"],"процесс":["russian"],"прочий":["russian"],"прошлый":["russian"],"прощать":["russian"],"пружина":["russian"],"прут":["russian"],"прыжок":["russian"],"прямой":["russian"],"птица":["russian"],"публика":["russian"],"пугать":["russian"],"пуговица":["russian"],"пузырь":["russian"],"пульт":["russian"],"пуля":["russian"],"пункт":["russian"],"пускать":["russian"],"пустой":["russian"],"путь":["russian"],"пухлый":["russian"],"пучок":["russian"],"пушистый":["russian"],"пушка":["russian"],"пчела":["russian"],"пшеница":["russian"],"пылать":["russian"],"пыль":["russian"],"пышный":["russian"],"пьеса":["russian"],"пятка":["russian"],"пятно":["russian"],"пятый":["russian"],"пятьсот":["russian"],"работа":["russian"],"равнина":["russian"],"ради":["russian"],"радость":["russian"],"радуга":["russian"],"разбить":["russian"],"развитие":["russian"],"разговор":["russian"],"раздел":["russian"],"различие":["russian"],"размер":["russian"],"разный":["russian"],"разрыв":["russian"],"разум":["russian"],"район":["russian"],"ракета":["russian"],"раковина":["russian"],"рамка":["russian"],"рано":["russian"],"рапорт":["russian"],"распад":["russian"],"рассказ":["russian"],"расти":["russian"],"расход":["russian"],"расцвет":["russian"],"рация":["russian"],"рвануть":["russian"],"рваться":["russian"],"реакция":["russian"],"ребро":["russian"],"реветь":["russian"],"редактор":["russian"],"редкий":["russian"],"реестр":["russian"],"режим":["russian"],"резать":["russian"],"резерв":["russian"],"резина":["russian"],"резко":["russian"],"резной":["russian"],"рейс":["russian"],"реклама":["russian"],"рекорд":["russian"],"религия":["russian"],"рельс":["russian"],"ремень":["russian"],"ремонт":["russian"],"реплика":["russian"],"репортаж":["russian"],"ресница":["russian"],"ресторан":["russian"],"реформа":["russian"],"рецепт":["russian"],"речь":["russian"],"решение":["russian"],"ржавый":["russian"],"риск":["russian"],"рисунок":["russian"],"ритуал":["russian"],"рифма":["russian"],"робко":["russian"],"робот":["russian"],"ровесник":["russian"],"ровно":["russian"],"родной":["russian"],"рождение":["russian"],"роза":["russian"],"розовый":["russian"],"розыск":["russian"],"роль":["russian"],"роман":["russian"],"роскошь":["russian"],"роспись":["russian"],"рост":["russian"],"рубашка":["russian"],"рубеж":["russian"],"рубить":["russian"],"рубрика":["russian"],"рудник":["russian"],"рука":["russian"],"рукопись":["russian"],"румяный":["russian"],"русло":["russian"],"рухнуть":["russian"],"ручей":["russian"],"ручной":["russian"],"рыба":["russian"],"рыжий":["russian"],"рынок":["russian"],"рыхлый":["russian"],"рыцарь":["russian"],"рычаг":["russian"],"рюкзак":["russian"],"рядом":["russian"],"садовый":["russian"],"сажать":["russian"],"салон":["russian"],"салфетка":["russian"],"салют":["russian"],"самец":["russian"],"самовар":["russian"],"самый":["russian"],"сани":["russian"],"санкция":["russian"],"сапог":["russian"],"сарай":["russian"],"сатира":["russian"],"сахар":["russian"],"сбить":["russian"],"сбоку":["russian"],"сборная":["russian"],"сбыт":["russian"],"свадьба":["russian"],"свалка":["russian"],"сварить":["russian"],"свежий":["russian"],"сверху":["russian"],"свет":["russian"],"свеча":["russian"],"свинья":["russian"],"свист":["russian"],"свитер":["russian"],"свобода":["russian"],"сводка":["russian"],"свой":["russian"],"свыше":["russian"],"связь":["russian"],"сдаться":["russian"],"сделать":["russian"],"сегмент":["russian"],"сегодня":["russian"],"седло":["russian"],"седой":["russian"],"седьмой":["russian"],"сезон":["russian"],"сейф":["russian"],"сейчас":["russian"],"секрет":["russian"],"сектор":["russian"],"секунда":["russian"],"семинар":["russian"],"семья":["russian"],"сенатор":["russian"],"сено":["russian"],"сенсация":["russian"],"сентябрь":["russian"],"сервис":["russian"],"сердце":["russian"],"середина":["russian"],"сержант":["russian"],"серия":["russian"],"серый":["russian"],"сессия":["russian"],"сесть":["russian"],"сетевой":["russian"],"сжатый":["russian"],"сжечь":["russian"],"сзади":["russian"],"сигнал":["russian"],"сиденье":["russian"],"сила":["russian"],"силуэт":["russian"],"сильный":["russian"],"символ":["russian"],"симпатия":["russian"],"симфония":["russian"],"синий":["russian"],"синтез":["russian"],"синяк":["russian"],"сирень":["russian"],"система":["russian"],"ситуация":["russian"],"сияние":["russian"],"сказать":["russian"],"скала":["russian"],"скамейка":["russian"],"скандал":["russian"],"скатерть":["russian"],"скачок":["russian"],"скважина":["russian"],"сквер":["russian"],"сквозь":["russian"],"скелет":["russian"],"скидка":["russian"],"склад":["russian"],"сколько":["russian"],"скорый":["russian"],"скосить":["russian"],"скот":["russian"],"скрипка":["russian"],"скудный":["russian"],"скука":["russian"],"слабый":["russian"],"слава":["russian"],"сладкий":["russian"],"слегка":["russian"],"след":["russian"],"слеза":["russian"],"слепой":["russian"],"слесарь":["russian"],"слишком":["russian"],"слово":["russian"],"слог":["russian"],"сложный":["russian"],"сломать":["russian"],"служба":["russian"],"слух":["russian"],"случай":["russian"],"слышать":["russian"],"слюна":["russian"],"смежный":["russian"],"смелый":["russian"],"сменить":["russian"],"смесь":["russian"],"сметана":["russian"],"смех":["russian"],"смола":["russian"],"смуглый":["russian"],"смутный":["russian"],"смущать":["russian"],"смысл":["russian"],"снайпер":["russian"],"снаряд":["russian"],"сначала":["russian"],"снег":["russian"],"снизу":["russian"],"сниться":["russian"],"сно��а":["russian"],"снять":["russian"],"собака":["russian"],"соблазн":["russian"],"собрание":["russian"],"событие":["russian"],"совесть":["russian"],"совсем":["russian"],"согласие":["russian"],"создать":["russian"],"сознание":["russian"],"созреть":["russian"],"сойтись":["russian"],"сокол":["russian"],"солдат":["russian"],"соленый":["russian"],"солнце":["russian"],"солома":["russian"],"сомнение":["russian"],"сонный":["russian"],"соперник":["russian"],"соратник":["russian"],"сорвать":["russian"],"сосед":["russian"],"сосиска":["russian"],"состав":["russian"],"сотня":["russian"],"соус":["russian"],"союз":["russian"],"спад":["russian"],"спальня":["russian"],"спасти":["russian"],"спектр":["russian"],"сперва":["russian"],"спешить":["russian"],"спина":["russian"],"спирт":["russian"],"список":["russian"],"спичка":["russian"],"сплав":["russian"],"спонсор":["russian"],"спор":["russian"],"способ":["russian"],"справка":["russian"],"спустя":["russian"],"спутник":["russian"],"сразу":["russian"],"средство":["russian"],"срок":["russian"],"срыв":["russian"],"ссора":["russian"],"ссылка":["russian"],"ставить":["russian"],"стадия":["russian"],"стакан":["russian"],"станция":["russian"],"старый":["russian"],"стая":["russian"],"стебель":["russian"],"стекло":["russian"],"стена":["russian"],"степень":["russian"],"стереть":["russian"],"стиль":["russian"],"стимул":["russian"],"стирать":["russian"],"стихи":["russian"],"стоить":["russian"],"стойка":["russian"],"стол":["russian"],"стонать":["russian"],"стопа":["russian"],"сторона":["russian"],"стоянка":["russian"],"страна":["russian"],"стричь":["russian"],"строгий":["russian"],"струя":["russian"],"студент":["russian"],"стук":["russian"],"ступня":["russian"],"стыдно":["russian"],"суббота":["russian"],"субъект":["russian"],"сувенир":["russian"],"сугроб":["russian"],"сугубо":["russian"],"судить":["russian"],"судно":["russian"],"судьба":["russian"],"суета":["russian"],"суметь":["russian"],"сумма":["russian"],"сумрак":["russian"],"сундук":["russian"],"супруг":["russian"],"суровый":["russian"],"сутки":["russian"],"сухой":["russian"],"суша":["russian"],"существо":["russian"],"сфера":["russian"],"схема":["russian"],"схожий":["russian"],"сценарий":["russian"],"счастье":["russian"],"считать":["russian"],"съезд":["russian"],"сыграть":["russian"],"сырой":["russian"],"сытый":["russian"],"сыщик":["russian"],"сюда":["russian"],"сюжет":["russian"],"сюрприз":["russian"],"тайна":["russian"],"также":["russian"],"такой":["russian"],"такси":["russian"],"тактика":["russian"],"талия":["russian"],"таможня":["russian"],"танец":["russian"],"таракан":["russian"],"тарелка":["russian"],"тариф":["russian"],"тащить":["russian"],"таять":["russian"],"тварь":["russian"],"театр":["russian"],"тезис":["russian"],"текст":["russian"],"текущий":["russian"],"телефон":["russian"],"тема":["russian"],"темнота":["russian"],"теневой":["russian"],"теннис":["russian"],"теория":["russian"],"теперь":["russian"],"тепло":["russian"],"терапия":["russian"],"терзать":["russian"],"термин":["russian"],"терпеть":["russian"],"терраса":["russian"],"терять":["russian"],"тесный":["russian"],"тетрадь":["russian"],"техника":["russian"],"течение":["russian"],"тигр":["russian"],"типовой":["russian"],"тираж":["russian"],"титул":["russian"],"тихий":["russian"],"ткань":["russian"],"товарищ":["russian"],"тоже":["russian"],"толпа":["russian"],"толстый":["russian"],"толчок":["russian"],"толщина":["russian"],"только":["russian"],"тонкий":["russian"],"тонна":["russian"],"топить":["russian"],"топор":["russian"],"торговля":["russian"],"тормоз":["russian"],"торчать":["russian"],"тотчас":["russian"],"точка":["russian"],"точно":["russian"],"тощий":["russian"],"трава":["russian"],"традиция":["russian"],"трактор":["russian"],"трамвай":["russian"],"траншея":["russian"],"трасса":["russian"],"тревога":["russian"],"трезвый":["russian"],"тренер":["russian"],"трепет":["russian"],"треск":["russian"],"третий":["russian"],"трещина":["russian"],"трибуна":["russian"],"тридцать":["russian"],"триста":["russian"],"триумф":["russian"],"трогать":["russian"],"тройка":["russian"],"тронуть":["russian"],"тропа":["russian"],"тротуар":["russian"],"трубка":["russian"],"труд":["russian"],"трюк":["russian"],"тряпка":["russian"],"туго":["russian"],"туловище":["russian"],"туман":["russian"],"тумбочка":["russian"],"тундра":["russian"],"тупик":["russian"],"турист":["russian"],"турнир":["russian"],"тусклый":["russian"],"туфля":["russian"],"туча":["russian"],"тысяча":["russian"],"тяга":["russian"],"тяжело":["russian"],"убежать":["russian"],"убогий":["russian"],"уборка":["russian"],"уважение":["russian"],"увезти":["russian"],"уволить":["russian"],"угадать":["russian"],"угол":["russian"],"угощать":["russian"],"угроза":["russian"],"угрюмый":["russian"],"удар":["russian"],"удачный":["russian"],"уделять":["russian"],"удивить":["russian"],"удобный":["russian"],"удочка":["russian"],"уезжать":["russian"],"ужин":["russian"],"узел":["russian"],"узкий":["russian"],"уйти":["russian"],"указание":["russian"],"уклон":["russian"],"украсть":["russian"],"укусить":["russian"],"улетать":["russian"],"улица":["russian"],"улыбка":["russian"],"умело":["russian"],"умение":["russian"],"умный":["russian"],"умолять":["russian"],"унести":["russian"],"унижать":["russian"],"унылый":["russian"],"упаковка":["russian"],"упасть":["russian"],"упорно":["russian"],"упрек":["russian"],"урна":["russian"],"уровень":["russian"],"урожай":["russian"],"уронить":["russian"],"усадьба":["russian"],"усатый":["russian"],"усвоить":["russian"],"усилие":["russian"],"условие":["russian"],"услуга":["russian"],"усмешка":["russian"],"успеть":["russian"],"устав":["russian"],"устоять":["russian"],"утечка":["russian"],"утешать":["russian"],"утро":["russian"],"уцелеть":["russian"],"участие":["russian"],"ученик":["russian"],"учесть":["russian"],"ущелье":["russian"],"ущерб":["russian"],"уютный":["russian"],"фабрика":["russian"],"фаворит":["russian"],"факел":["russian"],"факт":["russian"],"фамилия":["russian"],"фантазия":["russian"],"фасад":["russian"],"февраль":["russian"],"феномен":["russian"],"фермер":["russian"],"фигура":["russian"],"физика":["russian"],"филиал":["russian"],"философ":["russian"],"фильм":["russian"],"финал":["russian"],"флаг":["russian"],"флот":["russian"],"фойе":["russian"],"фокус":["russian"],"фонарь":["russian"],"фонд":["russian"],"фонтан":["russian"],"форма":["russian"],"форум":["russian"],"фото":["russian"],"фрагмент":["russian"],"фраза":["russian"],"фракция":["russian"],"фронт":["russian"],"фрукт":["russian"],"функция":["russian"],"фуражка":["russian"],"футбол":["russian"],"футляр":["russian"],"халат":["russian"],"хаос":["russian"],"характер":["russian"],"хата":["russian"],"хвалить":["russian"],"хватать":["russian"],"хвойный":["russian"],"хвост":["russian"],"химия":["russian"],"хирург":["russian"],"хитрый":["russian"],"хищник":["russian"],"хлеб":["russian"],"хлынуть":["russian"],"хмурый":["russian"],"ходить":["russian"],"хозяин":["russian"],"хоккей":["russian"],"холм":["russian"],"холст":["russian"],"хорошо":["russian"],"хотеть":["russian"],"храбрый":["russian"],"храм":["russian"],"хранить":["russian"],"хребет":["russian"],"хрен":["russian"],"хрипло":["russian"],"хроника":["russian"],"хрупкий":["russian"],"художник":["russian"],"худший":["russian"],"хулиган":["russian"],"хутор":["russian"],"царь":["russian"],"цветок":["russian"],"целевой":["russian"],"целиком":["russian"],"целое":["russian"],"цель":["russian"],"цензура":["russian"],"ценить":["russian"],"центр":["russian"],"цепной":["russian"],"цикл":["russian"],"цилиндр":["russian"],"цирк":["russian"],"цитата":["russian"],"цифра":["russian"],"чайник":["russian"],"часы":["russian"],"чашка":["russian"],"человек":["russian"],"челюсть":["russian"],"чемодан":["russian"],"чемпион":["russian"],"чепуха":["russian"],"червь":["russian"],"чердак":["russian"],"через":["russian"],"чернила":["russian"],"черта":["russian"],"чеснок":["russian"],"честно":["russian"],"четверть":["russian"],"четыре":["russian"],"число":["russian"],"чистый":["russian"],"читатель":["russian"],"чтение":["russian"],"чтобы":["russian"],"чувство":["russian"],"чудак":["russian"],"чудный":["russian"],"чудо":["russian"],"чужой":["russian"],"чулок":["russian"],"чума":["russian"],"чушь":["russian"],"чуять":["russian"],"шагать":["russian"],"шанс":["russian"],"шапка":["russian"],"шарик":["russian"],"шарф":["russian"],"шахматы":["russian"],"шашлык":["russian"],"шедевр":["russian"],"шептать":["russian"],"шерсть":["russian"],"шестой":["russian"],"шинель":["russian"],"ширина":["russian"],"шишка":["russian"],"шкаф":["russian"],"школа":["russian"],"шкура":["russian"],"шланг":["russian"],"шлем":["russian"],"шнур":["russian"],"шоколад":["russian"],"шорох":["russian"],"шоссе":["russian"],"шпион":["russian"],"шприц":["russian"],"штаб":["russian"],"штамм":["russian"],"штаны":["russian"],"штатный":["russian"],"штора":["russian"],"штраф":["russian"],"штурм":["russian"],"штык":["russian"],"шумно":["russian"],"шуршать":["russian"],"шутить":["russian"],"шутка":["russian"],"щедрый":["russian"],"щека":["russian"],"щенок":["russian"],"экзамен":["russian"],"экипаж":["russian"],"экономия":["russian"],"экран":["russian"],"эксперт":["russian"],"элемент":["russian"],"элитный":["russian"],"эмоция":["russian"],"энергия":["russian"],"эпизод":["russian"],"эпоха":["russian"],"эскиз":["russian"],"эстрада":["russian"],"этап":["russian"],"этика":["russian"],"этот":["russian"],"эфир":["russian"],"эффект":["russian"],"эшелон":["russian"],"юбилей":["russian"],"юбка":["russian"],"южный":["russian"],"юмор":["russian"],"юность":["russian"],"юрист":["russian"],"юстиция":["russian"],"яблоко":["russian"],"явление":["russian"],"ягода":["russian"],"ядро":["russian"],"язык":["russian"],"яйцо":["russian"],"якобы":["russian"],"якорь":["russian"],"январь":["russian"],"яркий":["russian"],"ярмарка":["russian"],"ярость":["russian"],"ясный":["russian"],"яхта":["russian"],"ячейка":["russian"],"ящик":["russian"],"ábaco":["spanish"],"abdomen":["spanish"],"abeja":["spanish"],"abierto":["spanish"],"abogado":["spanish"],"abono":["spanish"],"aborto":["spanish"],"abrazo":["spanish"],"abrir":["spanish"],"abuelo":["spanish"],"abuso":["spanish"],"acabar":["spanish"],"academia":["spanish"],"acceso":["spanish"],"acción":["spanish"],"aceite":["spanish"],"acelga":["spanish"],"acento":["spanish"],"aceptar":["spanish"],"ácido":["spanish"],"aclarar":["spanish"],"acné":["spanish"],"acoger":["spanish"],"acoso":["spanish"],"activo":["spanish"],"acto":["spanish"],"actriz":["spanish"],"actuar":["spanish"],"acudir":["spanish"],"acuerdo":["spanish"],"acusar":["spanish"],"adicto":["spanish"],"admitir":["spanish"],"adoptar":["spanish"],"adorno":["spanish"],"aduana":["spanish"],"adulto":["spanish"],"aéreo":["spanish"],"afectar":["spanish"],"afición":["spanish"],"afinar":["spanish"],"afirmar":["spanish"],"ágil":["spanish"],"agitar":["spanish"],"agonía":["spanish"],"agosto":["spanish"],"agotar":["spanish"],"agregar":["spanish"],"agrio":["spanish"],"agua":["spanish"],"agudo":["spanish"],"águila":["spanish"],"aguja":["spanish"],"ahogo":["spanish"],"ahorro":["spanish"],"aire":["spanish"],"aislar":["spanish"],"ajedrez":["spanish"],"ajeno":["spanish"],"ajuste":["spanish"],"alacrán":["spanish"],"alambre":["spanish"],"alarma":["spanish"],"alba":["spanish"],"álbum":["spanish"],"alcalde":["spanish"],"aldea":["spanish"],"alegre":["spanish"],"alejar":["spanish"],"alerta":["spanish"],"aleta":["spanish"],"alfiler":["spanish"],"alga":["spanish"],"algodón":["spanish"],"aliado":["spanish"],"aliento":["spanish"],"alivio":["spanish"],"alma":["spanish"],"almeja":["spanish"],"almíbar":["spanish"],"altar":["spanish"],"alteza":["spanish"],"altivo":["spanish"],"alto":["spanish"],"altura":["spanish"],"alumno":["spanish"],"alzar":["spanish"],"amable":["spanish"],"amante":["spanish"],"amapola":["spanish"],"amargo":["spanish"],"amasar":["spanish"],"ámbar":["spanish"],"ámbito":["spanish"],"ameno":["spanish"],"amigo":["spanish","turkish"],"amistad":["spanish"],"amor":["spanish"],"amparo":["spanish"],"amplio":["spanish"],"ancho":["spanish"],"anciano":["spanish"],"ancla":["spanish"],"andar":["spanish"],"andén":["spanish"],"anemia":["spanish"],"ángulo":["spanish"],"anillo":["spanish"],"ánimo":["spanish"],"anís":["spanish"],"anotar":["spanish"],"antena":["spanish"],"antiguo":["spanish"],"antojo":["spanish"],"anual":["spanish"],"anular":["spanish"],"anuncio":["spanish"],"añadir":["spanish"],"añejo":["spanish"],"año":["spanish"],"apagar":["spanish"],"aparato":["spanish"],"apetito":["spanish"],"apio":["spanish"],"aplicar":["spanish"],"apodo":["spanish"],"aporte":["spanish"],"apoyo":["spanish"],"aprender":["spanish"],"aprobar":["spanish"],"apuesta":["spanish"],"apuro":["spanish"],"arado":["spanish"],"araña":["spanish"],"arar":["spanish"],"árbitro":["spanish"],"árbol":["spanish"],"arbusto":["spanish"],"archivo":["spanish"],"arco":["spanish"],"arder":["spanish"],"ardilla":["spanish"],"arduo":["spanish"],"área":["spanish"],"árido":["spanish"],"aries":["spanish"],"armonía":["spanish"],"arnés":["spanish"],"aroma":["spanish","turkish"],"arpa":["spanish"],"arpón":["spanish"],"arreglo":["spanish"],"arroz":["spanish"],"arruga":["spanish"],"arte":["spanish"],"artista":["spanish"],"asa":["spanish"],"asado":["spanish"],"asalto":["spanish"],"ascenso":["spanish"],"asegurar":["spanish"],"aseo":["spanish"],"asesor":["spanish"],"asiento":["spanish"],"asilo":["spanish"],"asistir":["spanish"],"asno":["spanish"],"asombro":["spanish"],"áspero":["spanish"],"astilla":["spanish"],"astro":["spanish"],"astuto":["spanish"],"asumir":["spanish"],"asunto":["spanish"],"atajo":["spanish"],"ataque":["spanish"],"atar":["spanish"],"atento":["spanish"],"ateo":["spanish"],"ático":["spanish"],"atleta":["spanish"],"átomo":["spanish"],"atraer":["spanish"],"atroz":["spanish"],"atún":["spanish"],"audaz":["spanish"],"audio":["spanish"],"auge":["spanish"],"aula":["spanish"],"aumento":["spanish"],"ausente":["spanish"],"autor":["spanish"],"aval":["spanish"],"avance":["spanish"],"avaro":["spanish"],"ave":["spanish"],"avellana":["spanish"],"avena":["spanish"],"avestruz":["spanish"],"avión":["spanish"],"aviso":["spanish"],"ayer":["spanish"],"ayuda":["spanish"],"ayuno":["spanish"],"azafrán":["spanish"],"azar":["spanish"],"azote":["spanish"],"azúcar":["spanish"],"azufre":["spanish"],"azul":["spanish"],"baba":["spanish"],"babor":["spanish"],"bache":["spanish"],"bahía":["spanish"],"baile":["spanish"],"bajar":["spanish"],"balanza":["spanish"],"balcón":["spanish"],"balde":["spanish"],"bambú":["spanish"],"banco":["spanish"],"banda":["spanish"],"baño":["spanish"],"barba":["spanish"],"barco":["spanish"],"barniz":["spanish"],"barro":["spanish"],"báscula":["spanish"],"bastón":["spanish"],"basura":["spanish"],"batalla":["spanish"],"batería":["spanish"],"batir":["spanish"],"batuta":["spanish"],"baúl":["spanish"],"bazar":["spanish"],"bebé":["spanish"],"bebida":["spanish"],"bello":["spanish"],"besar":["spanish"],"beso":["spanish"],"bestia":["spanish"],"bicho":["spanish"],"bien":["spanish"],"bingo":["spanish"],"blanco":["spanish"],"bloque":["spanish"],"blusa":["spanish"],"boa":["spanish"],"bobina":["spanish"],"bobo":["spanish"],"boca":["spanish"],"bocina":["spanish"],"boda":["spanish"],"bodega":["spanish"],"boina":["spanish"],"bola":["spanish"],"bolero":["spanish","turkish"],"bolsa":["spanish"],"bomba":["spanish"],"bondad":["spanish"],"bonito":["spanish"],"bono":["spanish"],"bonsái":["spanish"],"borde":["spanish"],"borrar":["spanish"],"bosque":["spanish"],"bote":["spanish"],"botín":["spanish"],"bóveda":["spanish"],"bozal":["spanish"],"bravo":["spanish"],"brazo":["spanish"],"brecha":["spanish"],"breve":["spanish"],"brillo":["spanish"],"brinco":["spanish"],"brisa":["spanish"],"broca":["spanish"],"broma":["spanish"],"bronce":["spanish"],"brote":["spanish"],"bruja":["spanish"],"brusco":["spanish"],"bruto":["spanish"],"buceo":["spanish"],"bucle":["spanish"],"bueno":["spanish"],"buey":["spanish"],"bufanda":["spanish"],"bufón":["spanish"],"búho":["spanish"],"buitre":["spanish"],"bulto":["spanish"],"burbuja":["spanish"],"burla":["spanish"],"burro":["spanish"],"buscar":["spanish"],"butaca":["spanish"],"buzón":["spanish"],"caballo":["spanish"],"cabeza":["spanish"],"cabina":["spanish"],"cabra":["spanish"],"cacao":["spanish"],"cadáver":["spanish"],"cadena":["spanish"],"caer":["spanish"],"café":["spanish"],"caída":["spanish"],"caimán":["spanish"],"caja":["spanish"],"cajón":["spanish"],"cal":["spanish"],"calamar":["spanish"],"calcio":["spanish"],"caldo":["spanish"],"calidad":["spanish"],"calle":["spanish"],"calma":["spanish"],"calor":["spanish"],"calvo":["spanish"],"cama":["spanish"],"cambio":["spanish"],"camello":["spanish"],"camino":["spanish"],"campo":["spanish"],"cáncer":["spanish"],"candil":["spanish"],"canela":["spanish"],"canguro":["spanish"],"canica":["spanish"],"canto":["spanish"],"caña":["spanish"],"cañón":["spanish"],"caoba":["spanish"],"caos":["spanish"],"capaz":["spanish"],"capitán":["spanish"],"capote":["spanish"],"captar":["spanish"],"capucha":["spanish"],"cara":["spanish"],"carbón":["spanish"],"cárcel":["spanish"],"careta":["spanish"],"carga":["spanish"],"cariño":["spanish"],"carne":["spanish"],"carpeta":["spanish"],"carro":["spanish"],"carta":["spanish"],"casa":["spanish"],"casco":["spanish"],"casero":["spanish"],"caspa":["spanish"],"castor":["spanish"],"catorce":["spanish"],"catre":["spanish"],"caudal":["spanish"],"causa":["spanish"],"cazo":["spanish"],"cebolla":["spanish"],"ceder":["spanish"],"cedro":["spanish"],"celda":["spanish"],"célebre":["spanish"],"celoso":["spanish"],"célula":["spanish"],"cemento":["spanish"],"ceniza":["spanish"],"centro":["spanish"],"cerca":["spanish"],"cerdo":["spanish"],"cereza":["spanish"],"cero":["spanish"],"cerrar":["spanish"],"certeza":["spanish"],"césped":["spanish"],"cetro":["spanish"],"chacal":["spanish"],"chaleco":["spanish"],"champú":["spanish"],"chancla":["spanish"],"chapa":["spanish"],"charla":["spanish"],"chico":["spanish"],"chiste":["spanish"],"chivo":["spanish"],"choque":["spanish"],"choza":["spanish"],"chuleta":["spanish"],"chupar":["spanish"],"ciclón":["spanish"],"ciego":["spanish"],"cielo":["spanish"],"cien":["spanish"],"cierto":["spanish"],"cifra":["spanish"],"cigarro":["spanish"],"cima":["spanish"],"cinco":["spanish"],"cine":["spanish"],"cinta":["spanish"],"ciprés":["spanish"],"circo":["spanish"],"ciruela":["spanish"],"cisne":["spanish"],"cita":["spanish"],"ciudad":["spanish"],"clamor":["spanish"],"clan":["spanish"],"claro":["spanish"],"clase":["spanish"],"clave":["spanish"],"cliente":["spanish"],"clima":["spanish"],"clínica":["spanish"],"cobre":["spanish"],"cocción":["spanish"],"cochino":["spanish"],"cocina":["spanish"],"coco":["spanish"],"código":["spanish"],"codo":["spanish"],"cofre":["spanish"],"coger":["spanish"],"cohete":["spanish"],"cojín":["spanish"],"cojo":["spanish"],"cola":["spanish"],"colcha":["spanish"],"colegio":["spanish"],"colgar":["spanish"],"colina":["spanish"],"collar":["spanish"],"colmo":["spanish"],"columna":["spanish"],"combate":["spanish"],"comer":["spanish"],"comida":["spanish"],"cómodo":["spanish"],"compra":["spanish"],"conde":["spanish"],"conejo":["spanish"],"conga":["spanish"],"conocer":["spanish"],"consejo":["spanish"],"contar":["spanish"],"copa":["spanish"],"copia":["spanish"],"corazón":["spanish"],"corbata":["spanish"],"corcho":["spanish"],"cordón":["spanish"],"corona":["spanish"],"correr":["spanish"],"coser":["spanish"],"cosmos":["spanish"],"costa":["spanish"],"cráneo":["spanish"],"cráter":["spanish"],"crear":["spanish"],"crecer":["spanish"],"creído":["spanish"],"crema":["spanish"],"cría":["spanish"],"crimen":["spanish"],"cripta":["spanish"],"crisis":["spanish"],"cromo":["spanish"],"crónica":["spanish"],"croqueta":["spanish"],"crudo":["spanish"],"cruz":["spanish"],"cuadro":["spanish"],"cuarto":["spanish"],"cuatro":["spanish"],"cubo":["spanish"],"cubrir":["spanish"],"cuchara":["spanish"],"cuello":["spanish"],"cuento":["spanish"],"cuerda":["spanish"],"cuesta":["spanish"],"cueva":["spanish"],"cuidar":["spanish"],"culebra":["spanish"],"culpa":["spanish"],"culto":["spanish"],"cumbre":["spanish"],"cumplir":["spanish"],"cuna":["spanish"],"cuneta":["spanish"],"cuota":["spanish"],"cupón":["spanish"],"cúpula":["spanish"],"curar":["spanish"],"curioso":["spanish"],"curso":["spanish"],"curva":["spanish"],"cutis":["spanish"],"dama":["spanish"],"danza":["spanish"],"dar":["spanish"],"dardo":["spanish"],"dátil":["spanish"],"deber":["spanish"],"débil":["spanish"],"década":["spanish"],"decir":["spanish"],"dedo":["spanish"],"defensa":["spanish"],"definir":["spanish"],"dejar":["spanish"],"delfín":["spanish"],"delgado":["spanish"],"delito":["spanish"],"demora":["spanish"],"denso":["spanish"],"dental":["spanish"],"deporte":["spanish"],"derecho":["spanish"],"derrota":["spanish"],"desayuno":["spanish"],"deseo":["spanish"],"desfile":["spanish"],"desnudo":["spanish"],"destino":["spanish"],"desvío":["spanish"],"detalle":["spanish"],"detener":["spanish"],"deuda":["spanish"],"día":["spanish"],"diablo":["spanish"],"diadema":["spanish"],"diamante":["spanish"],"diana":["spanish"],"diario":["spanish"],"dibujo":["spanish"],"dictar":["spanish"],"diente":["spanish"],"dieta":["spanish"],"diez":["spanish"],"difícil":["spanish"],"digno":["spanish"],"dilema":["spanish"],"diluir":["spanish"],"dinero":["spanish"],"directo":["spanish"],"dirigir":["spanish"],"disco":["spanish"],"diseño":["spanish"],"disfraz":["spanish"],"diva":["spanish"],"divino":["spanish"],"doble":["spanish"],"doce":["spanish"],"dolor":["spanish"],"domingo":["spanish"],"don":["spanish"],"donar":["spanish"],"dorado":["spanish"],"dormir":["spanish"],"dorso":["spanish"],"dos":["spanish"],"dosis":["spanish"],"dragón":["spanish"],"droga":["spanish"],"ducha":["spanish"],"duda":["spanish"],"duelo":["spanish"],"dueño":["spanish"],"dulce":["spanish"],"dúo":["spanish"],"duque":["spanish"],"durar":["spanish"],"dureza":["spanish"],"duro":["spanish"],"ébano":["spanish"],"ebrio":["spanish"],"echar":["spanish"],"eco":["spanish"],"ecuador":["spanish"],"edad":["spanish"],"edición":["spanish"],"edificio":["spanish"],"editor":["spanish"],"educar":["spanish"],"efecto":["spanish"],"eficaz":["spanish"],"eje":["spanish"],"ejemplo":["spanish"],"elefante":["spanish"],"elegir":["spanish"],"elemento":["spanish"],"elevar":["spanish"],"elipse":["spanish"],"élite":["spanish"],"elixir":["spanish"],"elogio":["spanish"],"eludir":["spanish"],"embudo":["spanish"],"emitir":["spanish"],"emoción":["spanish"],"empate":["spanish"],"empeño":["spanish"],"empleo":["spanish"],"empresa":["spanish"],"enano":["spanish"],"encargo":["spanish"],"enchufe":["spanish"],"encía":["spanish"],"enemigo":["spanish"],"enero":["spanish"],"enfado":["spanish"],"enfermo":["spanish"],"engaño":["spanish"],"enigma":["spanish"],"enlace":["spanish"],"enorme":["spanish"],"enredo":["spanish"],"ensayo":["spanish"],"enseñar":["spanish"],"entero":["spanish"],"entrar":["spanish"],"envase":["spanish"],"envío":["spanish"],"época":["spanish"],"equipo":["spanish"],"erizo":["spanish"],"escala":["spanish"],"escena":["spanish"],"escolar":["spanish"],"escribir":["spanish"],"escudo":["spanish"],"esencia":["spanish"],"esfera":["spanish"],"esfuerzo":["spanish"],"espada":["spanish"],"espejo":["spanish"],"espía":["spanish"],"esposa":["spanish"],"espuma":["spanish"],"esquí":["spanish"],"estar":["spanish"],"este":["spanish"],"estilo":["spanish"],"estufa":["spanish"],"etapa":["spanish"],"eterno":["spanish"],"ética":["spanish"],"etnia":["spanish"],"evadir":["spanish"],"evaluar":["spanish"],"evento":["spanish"],"evitar":["spanish"],"exacto":["spanish"],"examen":["spanish"],"exceso":["spanish"],"excusa":["spanish"],"exento":["spanish"],"exigir":["spanish"],"exilio":["spanish"],"existir":["spanish"],"éxito":["spanish"],"experto":["spanish"],"explicar":["spanish"],"exponer":["spanish"],"extremo":["spanish"],"fábrica":["spanish"],"fábula":["spanish"],"fachada":["spanish"],"fácil":["spanish"],"factor":["spanish"],"faena":["spanish"],"faja":["spanish"],"falda":["spanish"],"fallo":["spanish"],"falso":["spanish"],"faltar":["spanish"],"fama":["spanish"],"familia":["spanish"],"famoso":["spanish"],"faraón":["spanish"],"farmacia":["spanish"],"farol":["spanish"],"farsa":["spanish"],"fase":["spanish"],"fatiga":["spanish"],"fauna":["spanish","turkish"],"favor":["spanish"],"fax":["spanish"],"febrero":["spanish"],"fecha":["spanish"],"feliz":["spanish"],"feo":["spanish"],"feria":["spanish"],"feroz":["spanish"],"fértil":["spanish"],"fervor":["spanish"],"festín":["spanish"],"fiable":["spanish"],"fianza":["spanish"],"fiar":["spanish"],"fibra":["spanish"],"ficción":["spanish"],"ficha":["spanish"],"fideo":["spanish"],"fiebre":["spanish"],"fiel":["spanish"],"fiera":["spanish"],"fiesta":["spanish"],"figura":["spanish"],"fijar":["spanish"],"fijo":["spanish"],"fila":["spanish"],"filete":["spanish"],"filial":["spanish"],"filtro":["spanish"],"fin":["spanish"],"finca":["spanish"],"fingir":["spanish"],"finito":["spanish"],"firma":["spanish"],"flaco":["spanish"],"flauta":["spanish"],"flecha":["spanish"],"flor":["spanish"],"flota":["spanish"],"fluir":["spanish"],"flujo":["spanish"],"flúor":["spanish"],"fobia":["spanish"],"foca":["spanish"],"fogata":["spanish"],"fogón":["spanish"],"folio":["spanish"],"folleto":["spanish"],"fondo":["spanish"],"forma":["spanish"],"forro":["spanish"],"fortuna":["spanish"],"forzar":["spanish"],"fosa":["spanish"],"foto":["spanish"],"fracaso":["spanish"],"frágil":["spanish"],"franja":["spanish"],"frase":["spanish"],"fraude":["spanish"],"freír":["spanish"],"freno":["spanish"],"fresa":["spanish"],"frío":["spanish"],"frito":["spanish"],"fruta":["spanish"],"fuego":["spanish"],"fuente":["spanish"],"fuerza":["spanish"],"fuga":["spanish"],"fumar":["spanish"],"función":["spanish"],"funda":["spanish"],"furgón":["spanish"],"furia":["spanish"],"fusil":["spanish"],"fútbol":["spanish"],"futuro":["spanish"],"gacela":["spanish"],"gafas":["spanish"],"gaita":["spanish"],"gajo":["spanish"],"gala":["spanish"],"galería":["spanish"],"gallo":["spanish"],"gamba":["spanish"],"ganar":["spanish"],"gancho":["spanish"],"ganga":["spanish"],"ganso":["spanish"],"garaje":["spanish"],"garza":["spanish"],"gasolina":["spanish"],"gastar":["spanish"],"gato":["spanish"],"gavilán":["spanish"],"gemelo":["spanish"],"gemir":["spanish"],"gen":["spanish"],"género":["spanish"],"genio":["spanish"],"gente":["spanish"],"geranio":["spanish"],"gerente":["spanish"],"germen":["spanish"],"gesto":["spanish"],"gigante":["spanish"],"gimnasio":["spanish"],"girar":["spanish"],"giro":["spanish"],"glaciar":["spanish"],"globo":["spanish"],"gloria":["spanish"],"gol":["spanish"],"golfo":["spanish"],"goloso":["spanish"],"golpe":["spanish"],"goma":["spanish"],"gordo":["spanish"],"gorila":["spanish"],"gorra":["spanish"],"gota":["spanish"],"goteo":["spanish"],"gozar":["spanish"],"grada":["spanish"],"gráfico":["spanish"],"grano":["spanish"],"grasa":["spanish"],"gratis":["spanish"],"grave":["spanish"],"grieta":["spanish"],"grillo":["spanish"],"gripe":["spanish"],"gris":["spanish"],"grito":["spanish"],"grosor":["spanish"],"grúa":["spanish"],"grueso":["spanish"],"grumo":["spanish"],"grupo":["spanish"],"guante":["spanish"],"guapo":["spanish"],"guardia":["spanish"],"guerra":["spanish"],"guía":["spanish"],"guiño":["spanish"],"guion":["spanish"],"guiso":["spanish"],"guitarra":["spanish"],"gusano":["spanish"],"gustar":["spanish"],"haber":["spanish","turkish"],"hábil":["spanish"],"hablar":["spanish"],"hacer":["spanish"],"hacha":["spanish"],"hada":["spanish"],"hallar":["spanish"],"hamaca":["spanish"],"harina":["spanish"],"haz":["spanish"],"hazaña":["spanish"],"hebilla":["spanish"],"hebra":["spanish"],"hecho":["spanish"],"helado":["spanish"],"helio":["spanish"],"hembra":["spanish"],"herir":["spanish"],"hermano":["spanish"],"héroe":["spanish"],"hervir":["spanish"],"hielo":["spanish"],"hierro":["spanish"],"hígado":["spanish"],"higiene":["spanish"],"hijo":["spanish"],"himno":["spanish"],"historia":["spanish"],"hocico":["spanish"],"hogar":["spanish"],"hoguera":["spanish"],"hoja":["spanish"],"hombre":["spanish"],"hongo":["spanish"],"honor":["spanish"],"honra":["spanish"],"hora":["spanish"],"hormiga":["spanish"],"horno":["spanish"],"hostil":["spanish"],"hoyo":["spanish"],"hueco":["spanish"],"huelga":["spanish"],"huerta":["spanish"],"hueso":["spanish"],"huevo":["spanish"],"huida":["spanish"],"huir":["spanish"],"humano":["spanish"],"húmedo":["spanish"],"humilde":["spanish"],"humo":["spanish"],"hundir":["spanish"],"huracán":["spanish"],"hurto":["spanish"],"icono":["spanish"],"ideal":["spanish"],"idioma":["spanish"],"ídolo":["spanish"],"iglesia":["spanish"],"iglú":["spanish"],"igual":["spanish"],"ilegal":["spanish"],"ilusión":["spanish"],"imagen":["spanish"],"imán":["spanish"],"imitar":["spanish"],"impar":["spanish"],"imperio":["spanish"],"imponer":["spanish"],"impulso":["spanish"],"incapaz":["spanish"],"índice":["spanish"],"inerte":["spanish"],"infiel":["spanish"],"informe":["spanish"],"ingenio":["spanish"],"inicio":["spanish"],"inmenso":["spanish"],"inmune":["spanish"],"innato":["spanish"],"insecto":["spanish"],"instante":["spanish"],"interés":["spanish"],"íntimo":["spanish"],"intuir":["spanish"],"inútil":["spanish"],"invierno":["spanish"],"ira":["spanish"],"iris":["spanish"],"ironía":["spanish"],"isla":["spanish"],"islote":["spanish"],"jabalí":["spanish"],"jabón":["spanish"],"jamón":["spanish"],"jarabe":["spanish"],"jardín":["spanish"],"jarra":["spanish"],"jaula":["spanish"],"jazmín":["spanish"],"jefe":["spanish"],"jeringa":["spanish"],"jinete":["spanish"],"jornada":["spanish"],"joroba":["spanish"],"joven":["spanish"],"joya":["spanish"],"juerga":["spanish"],"jueves":["spanish"],"juez":["spanish"],"jugador":["spanish"],"jugo":["spanish"],"juguete":["spanish"],"juicio":["spanish"],"junco":["spanish"],"jungla":["spanish"],"junio":["spanish"],"juntar":["spanish"],"júpiter":["spanish"],"jurar":["spanish"],"justo":["spanish"],"juvenil":["spanish"],"juzgar":["spanish"],"kilo":["spanish"],"koala":["spanish"],"labio":["spanish"],"lacio":["spanish"],"lacra":["spanish"],"lado":["spanish"],"ladrón":["spanish"],"lagarto":["spanish"],"lágrima":["spanish"],"laguna":["spanish"],"laico":["spanish"],"lamer":["spanish"],"lámina":["spanish"],"lámpara":["spanish"],"lana":["spanish"],"lancha":["spanish"],"langosta":["spanish"],"lanza":["spanish"],"lápiz":["spanish"],"largo":["spanish"],"larva":["spanish"],"lástima":["spanish"],"lata":["spanish"],"látex":["spanish"],"latir":["spanish"],"laurel":["spanish"],"lavar":["spanish"],"lazo":["spanish"],"leal":["spanish"],"lección":["spanish"],"leche":["spanish"],"lector":["spanish"],"leer":["spanish"],"legión":["spanish"],"legumbre":["spanish"],"lejano":["spanish"],"lengua":["spanish"],"lento":["spanish"],"leña":["spanish"],"león":["spanish"],"leopardo":["spanish"],"lesión":["spanish"],"letal":["spanish"],"letra":["spanish"],"leve":["spanish"],"leyenda":["spanish"],"libertad":["spanish"],"libro":["spanish"],"licor":["spanish"],"líder":["spanish"],"lidiar":["spanish"],"lienzo":["spanish"],"liga":["spanish"],"ligero":["spanish"],"lima":["spanish"],"límite":["spanish"],"limón":["spanish"],"limpio":["spanish"],"lince":["spanish"],"lindo":["spanish"],"línea":["spanish"],"lingote":["spanish"],"lino":["spanish"],"linterna":["spanish"],"líquido":["spanish"],"liso":["spanish"],"lista":["spanish"],"litera":["spanish"],"litio":["spanish"],"litro":["spanish"],"llaga":["spanish"],"llama":["spanish"],"llanto":["spanish"],"llave":["spanish"],"llegar":["spanish"],"llenar":["spanish"],"llevar":["spanish"],"llorar":["spanish"],"llover":["spanish"],"lluvia":["spanish"],"lobo":["spanish"],"loción":["spanish"],"loco":["spanish"],"locura":["spanish"],"lógica":["spanish"],"logro":["spanish"],"lombriz":["spanish"],"lomo":["spanish"],"lonja":["spanish"],"lote":["spanish"],"lucha":["spanish"],"lucir":["spanish"],"lugar":["spanish"],"lujo":["spanish"],"luna":["spanish"],"lunes":["spanish"],"lupa":["spanish"],"lustro":["spanish"],"luto":["spanish"],"luz":["spanish"],"maceta":["spanish"],"macho":["spanish"],"madera":["spanish"],"madre":["spanish"],"maduro":["spanish"],"maestro":["spanish"],"mafia":["spanish"],"magia":["spanish"],"mago":["spanish"],"maíz":["spanish"],"maldad":["spanish"],"maleta":["spanish"],"malla":["spanish"],"malo":["spanish"],"mamá":["spanish"],"mambo":["spanish"],"mamut":["spanish"],"manco":["spanish"],"mando":["spanish"],"manejar":["spanish"],"manga":["spanish"],"maniquí":["spanish"],"manjar":["spanish"],"mano":["spanish"],"manso":["spanish"],"manta":["spanish"],"mañana":["spanish"],"mapa":["spanish"],"máquina":["spanish"],"mar":["spanish"],"marco":["spanish"],"marea":["spanish"],"marfil":["spanish"],"margen":["spanish"],"marido":["spanish"],"mármol":["spanish"],"marrón":["spanish"],"martes":["spanish"],"marzo":["spanish"],"masa":["spanish"],"máscara":["spanish"],"masivo":["spanish"],"matar":["spanish"],"materia":["spanish"],"matiz":["spanish"],"matriz":["spanish"],"máximo":["spanish"],"mayor":["spanish"],"mazorca":["spanish"],"mecha":["spanish"],"medalla":["spanish"],"medio":["spanish"],"médula":["spanish"],"mejilla":["spanish"],"mejor":["spanish"],"melena":["spanish"],"melón":["spanish"],"memoria":["spanish"],"menor":["spanish"],"mensaje":["spanish"],"mente":["spanish"],"menú":["spanish"],"mercado":["spanish"],"merengue":["spanish"],"mérito":["spanish"],"mes":["spanish"],"mesón":["spanish"],"meta":["spanish"],"meter":["spanish"],"método":["spanish"],"metro":["spanish"],"mezcla":["spanish"],"miedo":["spanish"],"miel":["spanish"],"miembro":["spanish"],"miga":["spanish"],"mil":["spanish"],"milagro":["spanish"],"militar":["spanish"],"millón":["spanish"],"mimo":["spanish"],"mina":["spanish"],"minero":["spanish"],"mínimo":["spanish"],"minuto":["spanish"],"miope":["spanish"],"mirar":["spanish"],"misa":["spanish"],"miseria":["spanish"],"misil":["spanish"],"mismo":["spanish"],"mitad":["spanish"],"mito":["spanish"],"mochila":["spanish"],"moción":["spanish"],"moda":["spanish"],"modelo":["spanish"],"moho":["spanish"],"mojar":["spanish"],"molde":["spanish"],"moler":["spanish"],"molino":["spanish"],"momento":["spanish"],"momia":["spanish"],"monarca":["spanish"],"moneda":["spanish"],"monja":["spanish"],"monto":["spanish"],"moño":["spanish"],"morada":["spanish"],"morder":["spanish"],"moreno":["spanish"],"morir":["spanish"],"morro":["spanish"],"morsa":["spanish"],"mortal":["spanish"],"mosca":["spanish"],"mostrar":["spanish"],"motivo":["spanish"],"mover":["spanish"],"móvil":["spanish"],"mozo":["spanish"],"mucho":["spanish"],"mudar":["spanish"],"mueble":["spanish"],"muela":["spanish"],"muerte":["spanish"],"muestra":["spanish"],"mugre":["spanish"],"mujer":["spanish"],"mula":["spanish"],"muleta":["spanish"],"multa":["spanish"],"mundo":["spanish"],"muñeca":["spanish"],"mural":["spanish"],"muro":["spanish"],"músculo":["spanish"],"museo":["spanish"],"musgo":["spanish"],"música":["spanish"],"muslo":["spanish"],"nácar":["spanish"],"nación":["spanish"],"nadar":["spanish"],"naipe":["spanish"],"naranja":["spanish"],"nariz":["spanish"],"narrar":["spanish"],"nasal":["spanish"],"natal":["spanish"],"nativo":["spanish"],"natural":["spanish"],"náusea":["spanish"],"naval":["spanish"],"nave":["spanish"],"navidad":["spanish"],"necio":["spanish"],"néctar":["spanish"],"negar":["spanish"],"negocio":["spanish"],"negro":["spanish"],"neón":["spanish"],"nervio":["spanish"],"neto":["spanish"],"neutro":["spanish"],"nevar":["spanish"],"nevera":["spanish"],"nicho":["spanish"],"nido":["spanish"],"niebla":["spanish"],"nieto":["spanish"],"niñez":["spanish"],"niño":["spanish"],"nítido":["spanish"],"nivel":["spanish"],"nobleza":["spanish"],"noche":["spanish"],"nómina":["spanish"],"noria":["spanish"],"norma":["spanish"],"norte":["spanish"],"nota":["spanish"],"noticia":["spanish"],"novato":["spanish"],"novela":["spanish"],"novio":["spanish"],"nube":["spanish"],"nuca":["spanish"],"núcleo":["spanish"],"nudillo":["spanish"],"nudo":["spanish"],"nuera":["spanish"],"nueve":["spanish"],"nuez":["spanish"],"nulo":["spanish"],"número":["spanish"],"nutria":["spanish"],"oasis":["spanish"],"obeso":["spanish"],"obispo":["spanish"],"objeto":["spanish"],"obra":["spanish"],"obrero":["spanish"],"observar":["spanish"],"obtener":["spanish"],"obvio":["spanish"],"oca":["spanish"],"ocaso":["spanish"],"océano":["spanish"],"ochenta":["spanish"],"ocho":["spanish"],"ocio":["spanish"],"ocre":["spanish"],"octavo":["spanish"],"octubre":["spanish"],"oculto":["spanish"],"ocupar":["spanish"],"ocurrir":["spanish"],"odiar":["spanish"],"odio":["spanish"],"odisea":["spanish"],"oeste":["spanish"],"ofensa":["spanish"],"oferta":["spanish"],"oficio":["spanish"],"ofrecer":["spanish"],"ogro":["spanish"],"oído":["spanish"],"oír":["spanish"],"ojo":["spanish"],"ola":["spanish"],"oleada":["spanish"],"olfato":["spanish"],"olivo":["spanish"],"olla":["spanish"],"olmo":["spanish"],"olor":["spanish"],"olvido":["spanish"],"ombligo":["spanish"],"onda":["spanish"],"onza":["spanish"],"opaco":["spanish"],"opción":["spanish"],"ópera":["spanish"],"opinar":["spanish"],"oponer":["spanish"],"optar":["spanish"],"óptica":["spanish"],"opuesto":["spanish"],"oración":["spanish"],"orador":["spanish"],"oral":["spanish","turkish"],"órbita":["spanish"],"orca":["spanish"],"orden":["spanish"],"oreja":["spanish"],"órgano":["spanish"],"orgía":["spanish"],"orgullo":["spanish"],"oriente":["spanish"],"origen":["spanish"],"orilla":["spanish"],"oro":["spanish"],"orquesta":["spanish"],"oruga":["spanish"],"osadía":["spanish"],"oscuro":["spanish"],"osezno":["spanish"],"oso":["spanish"],"ostra":["spanish"],"otoño":["spanish"],"otro":["spanish"],"oveja":["spanish"],"óvulo":["spanish"],"óxido":["spanish"],"oxígeno":["spanish"],"oyente":["spanish"],"ozono":["spanish"],"pacto":["spanish"],"padre":["spanish"],"paella":["spanish"],"página":["spanish"],"pago":["spanish"],"país":["spanish"],"pájaro":["spanish"],"palabra":["spanish"],"palco":["spanish"],"paleta":["spanish"],"pálido":["spanish"],"palma":["spanish"],"paloma":["spanish"],"palpar":["spanish"],"pan":["spanish"],"panal":["spanish"],"pánico":["spanish"],"pantera":["spanish"],"pañuelo":["spanish"],"papá":["spanish"],"papel":["spanish"],"papilla":["spanish"],"paquete":["spanish"],"parar":["spanish"],"parcela":["spanish"],"pared":["spanish"],"parir":["spanish"],"paro":["spanish"],"párpado":["spanish"],"parque":["spanish"],"párrafo":["spanish"],"parte":["spanish"],"pasar":["spanish"],"paseo":["spanish"],"pasión":["spanish"],"paso":["spanish"],"pasta":["spanish"],"pata":["spanish"],"patio":["spanish"],"patria":["spanish"],"pausa":["spanish"],"pauta":["spanish"],"pavo":["spanish"],"payaso":["spanish"],"peatón":["spanish"],"pecado":["spanish"],"pecera":["spanish"],"pecho":["spanish"],"pedal":["spanish","turkish"],"pedir":["spanish"],"pegar":["spanish"],"peine":["spanish"],"pelar":["spanish"],"peldaño":["spanish"],"pelea":["spanish"],"peligro":["spanish"],"pellejo":["spanish"],"pelo":["spanish"],"peluca":["spanish"],"pena":["spanish","turkish"],"pensar":["spanish"],"peñón":["spanish"],"peón":["spanish"],"peor":["spanish"],"pepino":["spanish"],"pequeño":["spanish"],"pera":["spanish"],"percha":["spanish"],"perder":["spanish"],"pereza":["spanish"],"perfil":["spanish"],"perico":["spanish"],"perla":["spanish"],"permiso":["spanish"],"perro":["spanish"],"persona":["spanish"],"pesa":["spanish"],"pesca":["spanish"],"pésimo":["spanish"],"pestaña":["spanish"],"pétalo":["spanish"],"petróleo":["spanish"],"pez":["spanish"],"pezuña":["spanish"],"picar":["spanish"],"pichón":["spanish"],"pie":["spanish"],"piedra":["spanish"],"pierna":["spanish"],"pieza":["spanish"],"pijama":["spanish"],"pilar":["spanish"],"piloto":["spanish"],"pimienta":["spanish"],"pino":["spanish"],"pintor":["spanish"],"pinza":["spanish"],"piña":["spanish"],"piojo":["spanish"],"pipa":["spanish"],"pirata":["spanish"],"pisar":["spanish"],"piscina":["spanish"],"piso":["spanish"],"pista":["spanish"],"pitón":["spanish"],"pizca":["spanish"],"placa":["spanish"],"plan":["spanish"],"plata":["spanish"],"playa":["spanish"],"plaza":["spanish"],"pleito":["spanish"],"pleno":["spanish"],"plomo":["spanish"],"pluma":["spanish"],"plural":["spanish"],"pobre":["spanish"],"poco":["spanish"],"poder":["spanish"],"podio":["spanish"],"poema":["spanish"],"poesía":["spanish"],"poeta":["spanish"],"polen":["spanish","turkish"],"policía":["spanish"],"pollo":["spanish"],"polvo":["spanish"],"pomada":["spanish"],"pomelo":["spanish"],"pomo":["spanish"],"pompa":["spanish","turkish"],"poner":["spanish"],"porción":["spanish"],"portal":["spanish"],"posada":["spanish"],"poseer":["spanish"],"posible":["spanish"],"poste":["spanish"],"potencia":["spanish"],"potro":["spanish"],"pozo":["spanish"],"prado":["spanish"],"precoz":["spanish"],"pregunta":["spanish"],"premio":["spanish"],"prensa":["spanish"],"preso":["spanish"],"previo":["spanish"],"primo":["spanish"],"príncipe":["spanish"],"prisión":["spanish"],"privar":["spanish"],"proa":["spanish"],"probar":["spanish"],"proceso":["spanish"],"producto":["spanish"],"proeza":["spanish"],"profesor":["spanish"],"programa":["spanish"],"prole":["spanish"],"promesa":["spanish"],"pronto":["spanish"],"propio":["spanish"],"próximo":["spanish"],"prueba":["spanish"],"público":["spanish"],"puchero":["spanish"],"pudor":["spanish"],"pueblo":["spanish"],"puerta":["spanish"],"puesto":["spanish"],"pulga":["spanish"],"pulir":["spanish"],"pulmón":["spanish"],"pulpo":["spanish"],"pulso":["spanish"],"puma":["spanish"],"punto":["spanish"],"puñal":["spanish"],"puño":["spanish"],"pupa":["spanish"],"pupila":["spanish"],"puré":["spanish"],"quedar":["spanish"],"queja":["spanish"],"quemar":["spanish"],"querer":["spanish"],"queso":["spanish"],"quieto":["spanish"],"química":["spanish"],"quince":["spanish"],"quitar":["spanish"],"rábano":["spanish"],"rabia":["spanish"],"rabo":["spanish"],"ración":["spanish"],"radical":["spanish"],"raíz":["spanish"],"rama":["spanish"],"rampa":["spanish","turkish"],"rancho":["spanish"],"rango":["spanish"],"rapaz":["spanish"],"rápido":["spanish"],"rapto":["spanish"],"rasgo":["spanish"],"raspa":["spanish"],"rato":["spanish"],"rayo":["spanish"],"raza":["spanish"],"razón":["spanish"],"reacción":["spanish"],"realidad":["spanish"],"rebaño":["spanish"],"rebote":["spanish"],"recaer":["spanish"],"receta":["spanish"],"rechazo":["spanish"],"recoger":["spanish"],"recreo":["spanish"],"recto":["spanish"],"recurso":["spanish"],"red":["spanish"],"redondo":["spanish"],"reducir":["spanish"],"reflejo":["spanish"],"reforma":["spanish"],"refrán":["spanish"],"refugio":["spanish"],"regalo":["spanish"],"regir":["spanish"],"regla":["spanish"],"regreso":["spanish"],"rehén":["spanish"],"reino":["spanish"],"reír":["spanish"],"reja":["spanish"],"relato":["spanish"],"relevo":["spanish"],"relieve":["spanish"],"relleno":["spanish"],"reloj":["spanish"],"remar":["spanish"],"remedio":["spanish"],"remo":["spanish"],"rencor":["spanish"],"rendir":["spanish"],"renta":["spanish"],"reparto":["spanish"],"repetir":["spanish"],"reposo":["spanish"],"reptil":["spanish"],"res":["spanish"],"rescate":["spanish"],"resina":["spanish"],"respeto":["spanish"],"resto":["spanish"],"resumen":["spanish"],"retiro":["spanish"],"retorno":["spanish"],"retrato":["spanish"],"reunir":["spanish"],"revés":["spanish"],"revista":["spanish"],"rey":["spanish"],"rezar":["spanish"],"rico":["spanish"],"riego":["spanish"],"rienda":["spanish"],"riesgo":["spanish"],"rifa":["spanish"],"rígido":["spanish"],"rigor":["spanish"],"rincón":["spanish"],"riñón":["spanish"],"río":["spanish"],"riqueza":["spanish"],"risa":["spanish"],"ritmo":["spanish"],"rito":["spanish"],"rizo":["spanish"],"roble":["spanish"],"roce":["spanish"],"rociar":["spanish"],"rodar":["spanish"],"rodeo":["spanish"],"rodilla":["spanish"],"roer":["spanish"],"rojizo":["spanish"],"rojo":["spanish"],"romero":["spanish"],"romper":["spanish"],"ron":["spanish"],"ronco":["spanish"],"ronda":["spanish"],"ropa":["spanish"],"ropero":["spanish"],"rosa":["spanish"],"rosca":["spanish"],"rostro":["spanish"],"rotar":["spanish"],"rubí":["spanish"],"rubor":["spanish"],"rudo":["spanish"],"rueda":["spanish"],"rugir":["spanish"],"ruido":["spanish"],"ruina":["spanish"],"ruleta":["spanish"],"rulo":["spanish","turkish"],"rumbo":["spanish"],"rumor":["spanish"],"ruptura":["spanish"],"ruta":["spanish"],"rutina":["spanish"],"sábado":["spanish"],"saber":["spanish"],"sabio":["spanish"],"sable":["spanish"],"sacar":["spanish"],"sagaz":["spanish"],"sagrado":["spanish"],"sala":["spanish"],"saldo":["spanish"],"salero":["spanish"],"salir":["spanish"],"salmón":["spanish"],"salón":["spanish"],"salsa":["spanish"],"salto":["spanish"],"salud":["spanish"],"salvar":["spanish"],"samba":["spanish"],"sanción":["spanish"],"sandía":["spanish"],"sanear":["spanish"],"sangre":["spanish"],"sanidad":["spanish"],"sano":["spanish"],"santo":["spanish"],"sapo":["spanish"],"saque":["spanish"],"sardina":["spanish"],"sartén":["spanish"],"sastre":["spanish"],"satán":["spanish"],"sauna":["spanish"],"saxofón":["spanish"],"sección":["spanish"],"seco":["spanish"],"secreto":["spanish"],"secta":["spanish"],"sed":["spanish"],"seguir":["spanish"],"seis":["spanish"],"sello":["spanish"],"selva":["spanish"],"semana":["spanish"],"semilla":["spanish"],"senda":["spanish"],"sensor":["spanish"],"señal":["spanish"],"señor":["spanish"],"separar":["spanish"],"sepia":["spanish"],"sequía":["spanish"],"ser":["spanish"],"serie":["spanish"],"sermón":["spanish"],"servir":["spanish"],"sesenta":["spanish"],"sesión":["spanish"],"seta":["spanish"],"setenta":["spanish"],"severo":["spanish"],"sexo":["spanish"],"sexto":["spanish"],"sidra":["spanish"],"siesta":["spanish"],"siete":["spanish"],"siglo":["spanish"],"signo":["spanish"],"sílaba":["spanish"],"silbar":["spanish"],"silencio":["spanish"],"silla":["spanish"],"símbolo":["spanish"],"simio":["spanish"],"sirena":["spanish"],"sistema":["spanish"],"sitio":["spanish"],"situar":["spanish"],"sobre":["spanish"],"socio":["spanish"],"sodio":["spanish"],"sol":["spanish"],"solapa":["spanish"],"soldado":["spanish"],"soledad":["spanish"],"sólido":["spanish"],"soltar":["spanish"],"solución":["spanish"],"sombra":["spanish"],"sondeo":["spanish"],"sonido":["spanish"],"sonoro":["spanish"],"sonrisa":["spanish"],"sopa":["spanish"],"soplar":["spanish"],"soporte":["spanish"],"sordo":["spanish"],"sorpresa":["spanish"],"sorteo":["spanish"],"sostén":["spanish"],"sótano":["spanish"],"suave":["spanish"],"subir":["spanish"],"suceso":["spanish"],"sudor":["spanish"],"suegra":["spanish"],"suelo":["spanish"],"sueño":["spanish"],"suerte":["spanish"],"sufrir":["spanish"],"sujeto":["spanish"],"sultán":["spanish"],"sumar":["spanish"],"superar":["spanish"],"suplir":["spanish"],"suponer":["spanish"],"supremo":["spanish"],"sur":["spanish"],"surco":["spanish"],"sureño":["spanish"],"surgir":["spanish"],"susto":["spanish"],"sutil":["spanish"],"tabaco":["spanish"],"tabique":["spanish"],"tabla":["spanish"],"tabú":["spanish"],"taco":["spanish"],"tacto":["spanish"],"tajo":["spanish"],"talar":["spanish"],"talco":["spanish"],"talento":["spanish"],"talla":["spanish"],"talón":["spanish"],"tamaño":["spanish"],"tambor":["spanish"],"tango":["spanish"],"tanque":["spanish"],"tapa":["spanish"],"tapete":["spanish"],"tapia":["spanish"],"tapón":["spanish"],"taquilla":["spanish"],"tarde":["spanish"],"tarea":["spanish"],"tarifa":["spanish"],"tarjeta":["spanish"],"tarot":["spanish"],"tarro":["spanish"],"tarta":["spanish"],"tatuaje":["spanish"],"tauro":["spanish"],"taza":["spanish"],"tazón":["spanish"],"teatro":["spanish"],"techo":["spanish"],"tecla":["spanish"],"técnica":["spanish"],"tejado":["spanish"],"tejer":["spanish"],"tejido":["spanish"],"tela":["spanish"],"teléfono":["spanish"],"tema":["spanish"],"temor":["spanish"],"templo":["spanish"],"tenaz":["spanish"],"tender":["spanish"],"tener":["spanish"],"tenis":["spanish"],"tenso":["spanish"],"teoría":["spanish"],"terapia":["spanish"],"terco":["spanish"],"término":["spanish"],"ternura":["spanish"],"terror":["spanish"],"tesis":["spanish"],"tesoro":["spanish"],"testigo":["spanish"],"tetera":["spanish"],"texto":["spanish"],"tez":["spanish"],"tibio":["spanish"],"tiburón":["spanish"],"tiempo":["spanish"],"tienda":["spanish"],"tierra":["spanish"],"tieso":["spanish"],"tigre":["spanish"],"tijera":["spanish"],"tilde":["spanish"],"timbre":["spanish"],"tímido":["spanish"],"timo":["spanish"],"tinta":["spanish"],"tío":["spanish"],"típico":["spanish"],"tipo":["spanish"],"tira":["spanish"],"tirón":["spanish"],"titán":["spanish"],"títere":["spanish"],"título":["spanish"],"tiza":["spanish"],"toalla":["spanish"],"tobillo":["spanish"],"tocar":["spanish"],"tocino":["spanish"],"todo":["spanish"],"toga":["spanish"],"toldo":["spanish"],"tomar":["spanish","turkish"],"tono":["spanish"],"tonto":["spanish"],"topar":["spanish"],"tope":["spanish"],"toque":["spanish"],"tórax":["spanish"],"torero":["spanish"],"tormenta":["spanish"],"torneo":["spanish"],"toro":["spanish"],"torpedo":["spanish"],"torre":["spanish"],"torso":["spanish"],"tortuga":["spanish"],"tos":["spanish"],"tosco":["spanish"],"toser":["spanish"],"tóxico":["spanish"],"trabajo":["spanish"],"tractor":["spanish"],"traer":["spanish"],"tráfico":["spanish"],"trago":["spanish"],"traje":["spanish"],"tramo":["spanish"],"trance":["spanish"],"trato":["spanish"],"trauma":["spanish"],"trazar":["spanish"],"trébol":["spanish"],"tregua":["spanish"],"treinta":["spanish"],"tren":["spanish"],"trepar":["spanish"],"tres":["spanish"],"tribu":["spanish"],"trigo":["spanish"],"tripa":["spanish"],"triste":["spanish"],"triunfo":["spanish"],"trofeo":["spanish"],"trompa":["spanish"],"tronco":["spanish"],"tropa":["spanish"],"trote":["spanish"],"trozo":["spanish"],"truco":["spanish"],"trueno":["spanish"],"trufa":["spanish"],"tubería":["spanish"],"tubo":["spanish"],"tuerto":["spanish"],"tumba":["spanish"],"tumor":["spanish"],"túnel":["spanish"],"túnica":["spanish"],"turbina":["spanish"],"turismo":["spanish"],"turno":["spanish"],"tutor":["spanish"],"ubicar":["spanish"],"úlcera":["spanish"],"umbral":["spanish"],"unidad":["spanish"],"unir":["spanish"],"universo":["spanish"],"uno":["spanish"],"untar":["spanish"],"uña":["spanish"],"urbano":["spanish"],"urbe":["spanish"],"urgente":["spanish"],"urna":["spanish"],"usar":["spanish"],"usuario":["spanish"],"útil":["spanish"],"utopía":["spanish"],"uva":["spanish"],"vaca":["spanish"],"vacío":["spanish"],"vacuna":["spanish"],"vagar":["spanish"],"vago":["spanish"],"vaina":["spanish"],"vajilla":["spanish"],"vale":["spanish"],"válido":["spanish"],"valle":["spanish"],"valor":["spanish"],"válvula":["spanish"],"vampiro":["spanish"],"vara":["spanish"],"variar":["spanish"],"varón":["spanish"],"vaso":["spanish"],"vecino":["spanish"],"vector":["spanish"],"vehículo":["spanish"],"veinte":["spanish"],"vejez":["spanish"],"vela":["spanish"],"velero":["spanish"],"veloz":["spanish"],"vena":["spanish"],"vencer":["spanish"],"venda":["spanish"],"veneno":["spanish"],"vengar":["spanish"],"venir":["spanish"],"venta":["spanish"],"venus":["spanish"],"ver":["spanish"],"verano":["spanish"],"verbo":["spanish"],"verde":["spanish"],"vereda":["spanish"],"verja":["spanish"],"verso":["spanish"],"verter":["spanish"],"vía":["spanish"],"viaje":["spanish"],"vibrar":["spanish"],"vicio":["spanish"],"víctima":["spanish"],"vida":["spanish"],"vídeo":["spanish"],"vidrio":["spanish"],"viejo":["spanish"],"viernes":["spanish"],"vigor":["spanish"],"vil":["spanish"],"villa":["spanish"],"vinagre":["spanish"],"vino":["spanish"],"viñedo":["spanish"],"violín":["spanish"],"viral":["spanish"],"virgo":["spanish"],"virtud":["spanish"],"visor":["spanish"],"víspera":["spanish"],"vista":["spanish"],"vitamina":["spanish"],"viudo":["spanish"],"vivaz":["spanish"],"vivero":["spanish"],"vivir":["spanish"],"vivo":["spanish"],"volcán":["spanish"],"volumen":["spanish"],"volver":["spanish"],"voraz":["spanish"],"votar":["spanish"],"voto":["spanish"],"voz":["spanish"],"vuelo":["spanish"],"vulgar":["spanish"],"yacer":["spanish"],"yate":["spanish"],"yegua":["spanish"],"yema":["spanish"],"yerno":["spanish"],"yeso":["spanish"],"yodo":["spanish"],"yoga":["spanish"],"yogur":["spanish"],"zafiro":["spanish"],"zanja":["spanish"],"zapato":["spanish"],"zarza":["spanish"],"zona":["spanish"],"zorro":["spanish"],"zumo":["spanish"],"zurdo":["spanish"],"abajur":["turkish"],"abaküs":["turkish"],"abartı":["turkish"],"abdal":["turkish"],"abdest":["turkish"],"abiye":["turkish"],"abluka":["turkish"],"abone":["turkish"],"absorbe":["turkish"],"absürt":["turkish"],"acayip":["turkish"],"acele":["turkish"],"acemi":["turkish"],"açıkgöz":["turkish"],"adalet":["turkish"],"adam":["turkish"],"adezyon":["turkish"],"adisyon":["turkish"],"adliye":["turkish"],"adres":["turkish"],"afacan":["turkish"],"afili":["turkish"],"afiş":["turkish"],"afiyet":["turkish"],"aforizm":["turkish"],"afra":["turkish"],"ağaç":["turkish"],"ağır":["turkish"],"ahbap":["turkish"],"ahkam":["turkish"],"ahlak":["turkish"],"ahtapot":["turkish"],"aidat":["turkish"],"aile":["turkish"],"ajan":["turkish"],"akademi":["turkish"],"akarsu":["turkish"],"akbaş":["turkish"],"akciğer":["turkish"],"akdeniz":["turkish"],"akıbet":["turkish"],"akıl":["turkish"],"akıntı":["turkish"],"akide":["turkish"],"akrep":["turkish"],"akrobasi":["turkish"],"aksiyon":["turkish"],"akşam":["turkish"],"aktif":["turkish"],"aktör":["turkish"],"aktris":["turkish"],"akustik":["turkish"],"alaca":["turkish"],"albüm":["turkish"],"alçak":["turkish"],"aldanma":["turkish"],"aleni":["turkish"],"alet":["turkish"],"alfabe":["turkish"],"algılama":["turkish"],"alıngan":["turkish"],"alkış":["turkish"],"alkol":["turkish"],"alpay":["turkish"],"alperen":["turkish"],"altın":["turkish"],"altüst":["turkish"],"altyapı":["turkish"],"alyuvar":["turkish"],"amade":["turkish"],"amatör":["turkish"],"amazon":["turkish"],"ambalaj":["turkish"],"amblem":["turkish"],"ambulans":["turkish"],"amca":["turkish"],"amel":["turkish"],"amir":["turkish"],"amiyane":["turkish"],"amorti":["turkish"],"ampul":["turkish"],"anadolu":["turkish"],"anahtar":["turkish"],"anakonda":["turkish"],"anaokul":["turkish"],"anapara":["turkish"],"anarşi":["turkish"],"anatomi":["turkish"],"anayasa":["turkish"],"anekdot":["turkish"],"anestezi":["turkish"],"angaje":["turkish"],"anka":["turkish"],"anket":["turkish"],"anlamlı":["turkish"],"anne":["turkish"],"anomali":["turkish"],"anonim":["turkish"],"anten":["turkish"],"antlaşma":["turkish"],"apse":["turkish"],"araba":["turkish"],"aracı":["turkish"],"araf":["turkish"],"arbede":["turkish"],"arda":["turkish"],"arefe":["turkish"],"argo":["turkish"],"argüman":["turkish"],"arkadaş":["turkish"],"armoni":["turkish"],"arsa":["turkish"],"arsız":["turkish"],"artı":["turkish"],"aruz":["turkish"],"asansör":["turkish"],"asayiş":["turkish"],"asgari":["turkish"],"asil":["turkish"],"asker":["turkish"],"askı":["turkish"],"aslan":["turkish"],"asosyal":["turkish"],"astsubay":["turkish"],"asya":["turkish"],"aşçı":["turkish"],"aşırı":["turkish"],"aşure":["turkish"],"atabey":["turkish"],"ataman":["turkish"],"ateş":["turkish"],"atmaca":["turkish"],"atmosfer":["turkish"],"atölye":["turkish"],"avcı":["turkish"],"avdet":["turkish"],"avize":["turkish"],"avlu":["turkish"],"avokado":["turkish"],"avrupa":["turkish"],"avukat":["turkish"],"ayaz":["turkish"],"ayçiçeği":["turkish"],"aydın":["turkish"],"aygıt":["turkish"],"ayna":["turkish"],"ayran":["turkish"],"ayrıntı":["turkish"],"azim":["turkish"],"baca":["turkish"],"bagaj":["turkish"],"bağlantı":["turkish"],"bahadır":["turkish"],"bahçe":["turkish"],"baki":["turkish"],"bakkal":["turkish"],"baklava":["turkish"],"bakteri":["turkish"],"balçık":["turkish"],"balina":["turkish"],"balo":["turkish"],"balta":["turkish"],"bant":["turkish"],"banyo":["turkish"],"bardak":["turkish"],"barış":["turkish"],"başbuğ":["turkish"],"başıboş":["turkish"],"başkan":["turkish"],"başlık":["turkish"],"bavul":["turkish"],"bayındır":["turkish"],"baykuş":["turkish"],"bazlama":["turkish"],"bedel":["turkish"],"begüm":["turkish"],"bekçi":["turkish"],"bekle":["turkish"],"belge":["turkish"],"belki":["turkish"],"bencil":["turkish"],"benek":["turkish"],"bengi":["turkish"],"berjer":["turkish"],"berk":["turkish"],"berrak":["turkish"],"beşik":["turkish"],"beyin":["turkish"],"beyoğlu":["turkish"],"bıçak":["turkish"],"biberiye":["turkish"],"bidon":["turkish"],"bihaber":["turkish"],"bikini":["turkish"],"bilezik":["turkish"],"bilinç":["turkish"],"bilye":["turkish"],"bina":["turkish"],"binbaşı":["turkish"],"binyıl":["turkish"],"bisiklet":["turkish"],"bisküvi":["turkish"],"bitki":["turkish"],"bizzat":["turkish"],"bodrum":["turkish"],"boğaz":["turkish"],"bohça":["turkish"],"boncuk":["turkish"],"bonfile":["turkish"],"borsa":["turkish"],"boru":["turkish"],"bostan":["turkish"],"boşboğaz":["turkish"],"botanik":["turkish"],"boya":["turkish"],"boykot":["turkish"],"boynuz":["turkish"],"bozgun":["turkish"],"bozkır":["turkish"],"bölüm":["turkish"],"börek":["turkish"],"buçuk":["turkish"],"bugün":["turkish"],"buğday":["turkish"],"buhar":["turkish"],"buhran":["turkish"],"bulvar":["turkish"],"buram":["turkish"],"burçak":["turkish"],"burs":["turkish"],"burun":["turkish"],"buzdağı":["turkish"],"buzkıran":["turkish"],"bücür":["turkish"],"büfe":["turkish"],"bülten":["turkish"],"bütçe":["turkish"],"bütün":["turkish"],"büyük":["turkish"],"cacık":["turkish"],"cadı":["turkish"],"cahil":["turkish"],"cambaz":["turkish"],"canhıraş":["turkish"],"casus":["turkish"],"cazibe":["turkish"],"cehalet":["turkish"],"cehennem":["turkish"],"ceket":["turkish"],"cemre":["turkish"],"cenin":["turkish"],"cennet":["turkish"],"cepken":["turkish"],"cerrah":["turkish"],"cesur":["turkish"],"cetvel":["turkish"],"cevher":["turkish"],"ceylan":["turkish"],"cılız":["turkish"],"cıva":["turkish"],"cilt":["turkish"],"cisim":["turkish"],"ciyak":["turkish"],"coğrafya":["turkish"],"cömert":["turkish"],"cumba":["turkish"],"cüzdan":["turkish"],"çabucak":["turkish"],"çadır":["turkish"],"çağdaş":["turkish"],"çağlayan":["turkish"],"çağrı":["turkish"],"çakmak":["turkish"],"çalışkan":["turkish"],"çamaşır":["turkish"],"çapa":["turkish"],"çaput":["turkish"],"çarık":["turkish"],"çarpan":["turkish"],"çarşaf":["turkish"],"çayhane":["turkish"],"çekirdek":["turkish"],"çelebi":["turkish"],"çember":["turkish"],"çenet":["turkish"],"çengel":["turkish"],"çerçeve":["turkish"],"çerez":["turkish"],"çeşit":["turkish"],"çeşme":["turkish"],"çete":["turkish"],"çevre":["turkish"],"çeyiz":["turkish"],"çeyrek":["turkish"],"çığır":["turkish"],"çılgın":["turkish"],"çıngırak":["turkish"],"çift":["turkish"],"çiğdem":["turkish"],"çikolata":["turkish"],"çilek":["turkish"],"çimen":["turkish"],"çivi":["turkish"],"çoban":["turkish"],"çocuk":["turkish"],"çokgen":["turkish"],"çomak":["turkish"],"çorba":["turkish"],"çözelti":["turkish"],"çubuk":["turkish"],"çukur":["turkish"],"çuval":["turkish"],"çürük":["turkish"],"dağbaşı":["turkish"],"dağılım":["turkish"],"daktilo":["turkish"],"daldırış":["turkish"],"dalga":["turkish"],"dalkavuk":["turkish"],"damak":["turkish"],"damıtma":["turkish"],"damla":["turkish"],"dana":["turkish"],"dandik":["turkish"],"danışman":["turkish"],"daniska":["turkish"],"dantel":["turkish"],"dargeçit":["turkish"],"darphane":["turkish"],"davet":["turkish"],"dayı":["turkish"],"defter":["turkish"],"değer":["turkish"],"değirmen":["turkish"],"dehşet":["turkish"],"delgeç":["turkish"],"demir":["turkish"],"deneyim":["turkish"],"denge":["turkish"],"depo":["turkish"],"deprem":["turkish"],"derdest":["turkish"],"dere":["turkish"],"derhal":["turkish"],"derman":["turkish"],"dernek":["turkish"],"derviş":["turkish"],"desen":["turkish"],"destan":["turkish"],"dışarı":["turkish"],"dışbükey":["turkish"],"dijital":["turkish"],"dikbaşlı":["turkish"],"dilekçe":["turkish"],"dimağ":["turkish"],"dinamik":["turkish"],"dindar":["turkish"],"dinleme":["turkish"],"dinozor":["turkish"],"dipçik":["turkish"],"dipnot":["turkish"],"direniş":["turkish"],"dirsek":["turkish"],"disiplin":["turkish"],"divriği":["turkish"],"dizüstü":["turkish"],"dobra":["turkish"],"dodurga":["turkish"],"doğalgaz":["turkish"],"doküman":["turkish"],"dolap":["turkish"],"donanım":["turkish"],"dondurma":["turkish"],"donör":["turkish"],"doruk":["turkish"],"dosdoğru":["turkish"],"dost":["turkish"],"dosya":["turkish"],"dozer":["turkish"],"döküm":["turkish"],"dönence":["turkish"],"dörtyol":["turkish"],"dövme":["turkish"],"dram":["turkish"],"dublaj":["turkish"],"durum":["turkish"],"duvak":["turkish"],"duyarga":["turkish"],"duyma":["turkish"],"duyuru":["turkish"],"düğme":["turkish"],"düğüm":["turkish"],"dükkan":["turkish"],"dünür":["turkish"],"düpedüz":["turkish"],"dürbün":["turkish"],"düşünür":["turkish"],"düzayak":["turkish"],"düzeltme":["turkish"],"ebeveyn":["turkish"],"ebru":["turkish"],"ecel":["turkish"],"ecnebi":["turkish"],"ecza":["turkish"],"edat":["turkish"],"edilgen":["turkish"],"efendi":["turkish"],"efor":["turkish"],"efsane":["turkish"],"egemen":["turkish"],"egzersiz":["turkish"],"eğrelti":["turkish"],"ekarte":["turkish"],"ekip":["turkish"],"eklem":["turkish"],"ekmek":["turkish"],"ekol":["turkish"],"ekonomi":["turkish"],"ekose":["turkish"],"ekran":["turkish"],"ekvator":["turkish"],"elaman":["turkish"],"elastik":["turkish"],"elbet":["turkish"],"elbise":["turkish"],"elçi":["turkish"],"eldiven":["turkish"],"elebaşı":["turkish"],"eleştiri":["turkish"],"elma":["turkish"],"eloğlu":["turkish"],"elveda":["turkish"],"emare":["turkish"],"emekçi":["turkish"],"emisyon":["turkish"],"emniyet":["turkish"],"empati":["turkish"],"emsal":["turkish"],"emzik":["turkish"],"endüstri":["turkish"],"enerji":["turkish"],"engebe":["turkish"],"enişte":["turkish"],"enkaz":["turkish"],"entari":["turkish"],"entegre":["turkish"],"entrika":["turkish"],"enzim":["turkish"],"erdem":["turkish"],"ergen":["turkish"],"erguvan":["turkish"],"erkek":["turkish"],"erozyon":["turkish"],"ertesi":["turkish"],"erzak":["turkish"],"esaret":["turkish"],"esenlik":["turkish"],"eser":["turkish"],"eski":["turkish"],"esnek":["turkish"],"eşarp":["turkish"],"eşofman":["turkish"],"eşraf":["turkish"],"eşya":["turkish"],"eşzaman":["turkish"],"etik":["turkish"],"etken":["turkish"],"etkinlik":["turkish"],"etüt":["turkish"],"evet":["turkish"],"evire":["turkish"],"evrak":["turkish"],"evrim":["turkish"],"eyalet":["turkish"],"eyvah":["turkish"],"ezber":["turkish"],"fabrika":["turkish"],"fanus":["turkish"],"fason":["turkish"],"fasulye":["turkish"],"fatih":["turkish"],"fatura":["turkish"],"fayans":["turkish"],"fayton":["turkish"],"fazıl":["turkish"],"fazilet":["turkish"],"felsefe":["turkish"],"fener":["turkish"],"feribot":["turkish"],"fersah":["turkish"],"fesih":["turkish"],"feveran":["turkish"],"feza":["turkish"],"fıçı":["turkish"],"fıldır":["turkish"],"fındık":["turkish"],"fırça":["turkish"],"fırsat":["turkish"],"fırtına":["turkish"],"fıtık":["turkish"],"fidan":["turkish"],"fidye":["turkish"],"figür":["turkish"],"fihrist":["turkish"],"fikir":["turkish"],"fildişi":["turkish"],"filtre":["turkish"],"fincan":["turkish"],"firuze":["turkish"],"fitil":["turkish"],"fiyaka":["turkish"],"fizik":["turkish"],"flaş":["turkish"],"flüt":["turkish"],"fosil":["turkish"],"fren":["turkish"],"fukara":["turkish"],"futbol":["turkish"],"garabet":["turkish"],"gariban":["turkish"],"garnitür":["turkish"],"gazi":["turkish"],"gece":["turkish"],"gedik":["turkish"],"gelenek":["turkish"],"gelin":["turkish"],"gemi":["turkish"],"genç":["turkish"],"geniş":["turkish"],"geometri":["turkish"],"gerçek":["turkish"],"gevrek":["turkish"],"gezegen":["turkish"],"gezgin":["turkish"],"geziyolu":["turkish"],"gıcık":["turkish"],"gıda":["turkish"],"gıybet":["turkish"],"girdap":["turkish"],"girişim":["turkish"],"gitar":["turkish"],"giyecek":["turkish"],"giysi":["turkish"],"gizem":["turkish"],"gofret":["turkish"],"goril":["turkish"],"göbek":["turkish"],"göçebe":["turkish"],"göğüs":["turkish"],"gökdelen":["turkish"],"gökmen":["turkish"],"gökyüzü":["turkish"],"gölge":["turkish"],"gömlek":["turkish"],"gönül":["turkish"],"görenek":["turkish"],"görkemli":["turkish"],"görsel":["turkish"],"gösteri":["turkish"],"gövde":["turkish"],"gözaltı":["turkish"],"gözcü":["turkish"],"gözdağı":["turkish"],"gözleme":["turkish"],"gözyaşı":["turkish"],"grup":["turkish"],"gurbet":["turkish"],"gusül":["turkish"],"gübre":["turkish"],"güfte":["turkish"],"gümüş":["turkish"],"günaydın":["turkish"],"güncel":["turkish"],"gündüz":["turkish"],"güneş":["turkish"],"günyüzü":["turkish"],"gürbüz":["turkish"],"güvercin":["turkish"],"güzel":["turkish"],"hacamat":["turkish"],"hacim":["turkish"],"hademe":["turkish"],"hafız":["turkish"],"hafriyat":["turkish"],"hafta":["turkish"],"hakan":["turkish"],"hakem":["turkish"],"hakikat":["turkish"],"haksever":["turkish"],"halı":["turkish"],"hançer":["turkish"],"hane":["turkish"],"hapis":["turkish"],"hapşırık":["turkish"],"harf":["turkish"],"haseki":["turkish"],"hasret":["turkish"],"hatun":["turkish"],"havuç":["turkish"],"haylaz":["turkish"],"haysiyet":["turkish"],"hayvan":["turkish"],"hedef":["turkish"],"hemen":["turkish"],"hemfikir":["turkish"],"hendek":["turkish"],"hepsi":["turkish"],"hergele":["turkish"],"herhangi":["turkish"],"hesap":["turkish"],"heyecan":["turkish"],"heykel":["turkish"],"hezimet":["turkish"],"hıçkırık":["turkish"],"hızölçer":["turkish"],"hicviye":["turkish"],"hikaye":["turkish"],"hikmet":["turkish"],"hile":["turkish"],"hisse":["turkish"],"hobi":["turkish"],"hoca":["turkish"],"horlama":["turkish"],"hoşbeş":["turkish"],"hoşgörü":["turkish"],"hoyrat":["turkish"],"hörgüç":["turkish"],"höyük":["turkish"],"hudut":["turkish"],"hukuk":["turkish"],"hunhar":["turkish"],"hurda":["turkish"],"huysuz":["turkish"],"huzur":["turkish"],"hücum":["turkish"],"hükümet":["turkish"],"hünkar":["turkish"],"hüviyet":["turkish"],"ırmak":["turkish"],"ısıölçer":["turkish"],"ısıtıcı":["turkish"],"ıspanak":["turkish"],"ısrar":["turkish"],"ışıldak":["turkish"],"ızdırap":["turkish"],"ızgara":["turkish"],"ibadet":["turkish"],"icat":["turkish"],"içbükey":["turkish"],"içecek":["turkish"],"içgüdü":["turkish"],"içsel":["turkish"],"idman":["turkish"],"iftihar":["turkish"],"iğne":["turkish"],"ihanet":["turkish"],"ihbar":["turkish"],"ihdas":["turkish"],"ihmal":["turkish"],"ihracat":["turkish"],"ihsan":["turkish"],"ikilem":["turkish"],"ikindi":["turkish"],"ikircik":["turkish"],"iklim":["turkish"],"iksir":["turkish"],"iktibas":["turkish"],"ilaç":["turkish"],"ilçe":["turkish"],"ileri":["turkish"],"iletişim":["turkish"],"ilgi":["turkish"],"ilhak":["turkish"],"ilkbahar":["turkish"],"ilkokul":["turkish"],"ilmek":["turkish"],"imkan":["turkish"],"imleç":["turkish"],"imsak":["turkish"],"imtihan":["turkish"],"imza":["turkish"],"ince":["turkish"],"inkar":["turkish"],"inşa":["turkish"],"ipek":["turkish"],"ipucu":["turkish"],"irade":["turkish"],"irfan":["turkish"],"irmik":["turkish"],"isabet":["turkish"],"iskele":["turkish"],"israf":["turkish"],"isyan":["turkish"],"işçi":["turkish"],"işgal":["turkish"],"işgüzar":["turkish"],"işlem":["turkish"],"itibar":["turkish"],"itiraf":["turkish"],"ivedi":["turkish"],"ivme":["turkish"],"iyileşme":["turkish"],"iyimser":["turkish"],"izbandut":["turkish"],"izci":["turkish"],"izdiham":["turkish"],"izin":["turkish"],"jakoben":["turkish"],"jandarma":["turkish"],"jargon":["turkish"],"kabadayı":["turkish"],"kablo":["turkish"],"kabus":["turkish"],"kaçamak":["turkish"],"kadeh":["turkish"],"kadın":["turkish"],"kadraj":["turkish"],"kafa":["turkish"],"kafkas":["turkish"],"kağıt":["turkish"],"kağnı":["turkish"],"kahkaha":["turkish"],"kahraman":["turkish"],"kahvaltı":["turkish"],"kakül":["turkish"],"kaldırım":["turkish"],"kale":["turkish"],"kalibre":["turkish"],"kalkan":["turkish"],"kalpak":["turkish"],"kamış":["turkish"],"kamyon":["turkish"],"kanat":["turkish"],"kandaş":["turkish"],"kanepe":["turkish"],"kanser":["turkish"],"kanun":["turkish"],"kaos":["turkish"],"kapı":["turkish"],"kaplıca":["turkish"],"kaptan":["turkish"],"karanlık":["turkish"],"kardeş":["turkish"],"karga":["turkish"],"karınca":["turkish"],"karmaşa":["turkish"],"karşıt":["turkish"],"kasırga":["turkish"],"kask":["turkish"],"kasvet":["turkish"],"katkı":["turkish"],"katman":["turkish"],"kavram":["turkish"],"kaygan":["turkish"],"kaynakça":["turkish"],"kayyum":["turkish"],"kedi":["turkish"],"kehanet":["turkish"],"kekik":["turkish"],"kelebek":["turkish"],"kenar":["turkish"],"kerkenez":["turkish"],"kerpiç":["turkish"],"kesirli":["turkish"],"kesmece":["turkish"],"kestane":["turkish"],"keşkek":["turkish"],"ketçap":["turkish"],"keyfiyet":["turkish"],"kıble":["turkish"],"kıdemli":["turkish"],"kılavuz":["turkish"],"kılçık":["turkish"],"kılıf":["turkish"],"kıraç":["turkish"],"kırmızı":["turkish"],"kırsal":["turkish"],"kısayol":["turkish"],"kısım":["turkish"],"kıskanç":["turkish"],"kısmet":["turkish"],"kışla":["turkish"],"kıvanç":["turkish"],"kıvılcım":["turkish"],"kıvrık":["turkish"],"kıyafet":["turkish"],"kıymetli":["turkish"],"kızak":["turkish"],"kızılcık":["turkish"],"kibar":["turkish"],"kinaye":["turkish"],"kira":["turkish"],"kiremit":["turkish"],"kirli":["turkish"],"kirpik":["turkish"],"kişisel":["turkish"],"kitap":["turkish"],"koçbaşı":["turkish"],"kodaman":["turkish"],"koğuş":["turkish"],"kokteyl":["turkish"],"kolaycı":["turkish"],"kolbastı":["turkish"],"kolonya":["turkish"],"koltuk":["turkish"],"kolye":["turkish"],"kombine":["turkish"],"komedyen":["turkish"],"komiser":["turkish"],"komposto":["turkish"],"komşu":["turkish"],"komuta":["turkish"],"konak":["turkish"],"konfor":["turkish"],"koni":["turkish"],"konsül":["turkish"],"kopya":["turkish"],"korkusuz":["turkish"],"korna":["turkish"],"korse":["turkish"],"korunak":["turkish"],"korvet":["turkish"],"kostüm":["turkish"],"koşul":["turkish"],"koyu":["turkish"],"kozmik":["turkish"],"köfte":["turkish"],"kökensel":["turkish"],"köprücük":["turkish"],"köpük":["turkish"],"kördüğüm":["turkish"],"körfez":["turkish"],"köstebek":["turkish"],"köşegen":["turkish"],"kötü":["turkish"],"kravat":["turkish"],"kriter":["turkish"],"kuantum":["turkish"],"kudurma":["turkish"],"kuluçka":["turkish"],"kulübe":["turkish"],"kumanya":["turkish"],"kumbara":["turkish"],"kumlu":["turkish"],"kumpir":["turkish"],"kumral":["turkish"],"kundura":["turkish"],"kupa":["turkish"],"kupkuru":["turkish"],"kuramsal":["turkish"],"kurbağa":["turkish"],"kurdele":["turkish"],"kurgu":["turkish"],"kurmay":["turkish"],"kurşun":["turkish"],"kurtuluş":["turkish"],"kurultay":["turkish"],"kurye":["turkish"],"kusursuz":["turkish"],"kuşak":["turkish"],"kuşbaşı":["turkish"],"kuşkulu":["turkish"],"kutlama":["turkish"],"kutsal":["turkish"],"kutup":["turkish"],"kuver":["turkish"],"kuyruk":["turkish"],"kuzey":["turkish"],"kuzgun":["turkish"],"küçük":["turkish"],"külçe":["turkish"],"külfet":["turkish"],"külliye":["turkish"],"kültürel":["turkish"],"kümes":["turkish"],"künefe":["turkish"],"küresel":["turkish"],"kütle":["turkish"],"lahana":["turkish"],"lahmacun":["turkish"],"lamba":["turkish"],"lansman":["turkish"],"lavaş":["turkish"],"layık":["turkish"],"leğen":["turkish"],"levent":["turkish"],"leziz":["turkish"],"lezzet":["turkish"],"lider":["turkish"],"likide":["turkish"],"liman":["turkish"],"liste":["turkish"],"litre":["turkish"],"liyakat":["turkish"],"lodos":["turkish"],"lokanta":["turkish"],"lokman":["turkish"],"lokum":["turkish"],"lunapark":["turkish"],"lütfen":["turkish"],"lüzum":["turkish"],"nokta":["turkish"],"mabet":["turkish"],"macera":["turkish"],"macun":["turkish"],"madalya":["turkish"],"madde":["turkish"],"madem":["turkish"],"mağara":["turkish"],"mağdur":["turkish"],"mağfiret":["turkish"],"mağlup":["turkish"],"mahalle":["turkish"],"mahcup":["turkish"],"mahir":["turkish"],"mahkeme":["turkish"],"mahlas":["turkish"],"mahrum":["turkish"],"mahsul":["turkish"],"makas":["turkish"],"makbuz":["turkish"],"makine":["turkish"],"makro":["turkish"],"maksat":["turkish"],"makul":["turkish"],"maliye":["turkish"],"manav":["turkish"],"mangal":["turkish"],"manidar":["turkish"],"manken":["turkish"],"mantık":["turkish"],"manzara":["turkish"],"mareşal":["turkish"],"margarin":["turkish"],"marifet":["turkish"],"marmelat":["turkish"],"masaüstü":["turkish"],"masmavi":["turkish"],"masraf":["turkish"],"masum":["turkish"],"matah":["turkish"],"materyal":["turkish"],"matrak":["turkish"],"maval":["turkish"],"mavra":["turkish"],"maydanoz":["turkish"],"mayhoş":["turkish"],"maytap":["turkish"],"mazbata":["turkish"],"mazeret":["turkish"],"mazlum":["turkish"],"mazot":["turkish"],"mazur":["turkish"],"meblağ":["turkish"],"mebus":["turkish"],"mecaz":["turkish"],"mecbur":["turkish"],"meclis":["turkish"],"mecmua":["turkish"],"mecnun":["turkish"],"meçhul":["turkish"],"medeni":["turkish"],"mehtap":["turkish"],"mekanik":["turkish"],"melodi":["turkish"],"meltem":["turkish"],"memur":["turkish"],"mendil":["turkish"],"menekşe":["turkish"],"menteşe":["turkish"],"meraklı":["turkish"],"mercek":["turkish"],"merdiven":["turkish"],"merhaba":["turkish"],"merinos":["turkish"],"merkez":["turkish"],"mermi":["turkish"],"mert":["turkish"],"mesafe":["turkish"],"mesele":["turkish"],"mesken":["turkish"],"meslek":["turkish"],"meşale":["turkish"],"meşgul":["turkish"],"meşhur":["turkish"],"metafor":["turkish"],"metin":["turkish"],"metre":["turkish"],"mevcut":["turkish"],"mevkidaş":["turkish"],"meydan":["turkish"],"meyil":["turkish"],"meyve":["turkish"],"meziyet":["turkish"],"mezun":["turkish"],"mıknatıs":["turkish"],"mısra":["turkish"],"mızıka":["turkish"],"miğfer":["turkish"],"mihrak":["turkish"],"miktar":["turkish"],"milat":["turkish"],"milli":["turkish"],"mimar":["turkish"],"minare":["turkish"],"mineral":["turkish"],"minik":["turkish"],"minyon":["turkish"],"mirliva":["turkish"],"misafir":["turkish"],"miskin":["turkish"],"miting":["turkish"],"miyop":["turkish"],"mizah":["turkish"],"mobilya":["turkish"],"monitör":["turkish"],"morötesi":["turkish"],"motive":["turkish"],"mozaik":["turkish"],"muavin":["turkish"],"mucize":["turkish"],"muhafız":["turkish"],"muhteşem":["turkish"],"mukayese":["turkish"],"mumya":["turkish"],"musluk":["turkish"],"muşamba":["turkish"],"mutabık":["turkish"],"mutfak":["turkish"],"mutlu":["turkish"],"muzaffer":["turkish"],"muzdarip":["turkish"],"mübarek":["turkish"],"mücadele":["turkish"],"müdür":["turkish"],"müfredat":["turkish"],"müftü":["turkish"],"mühendis":["turkish"],"mühim":["turkish"],"mühlet":["turkish"],"mükemmel":["turkish"],"mülk":["turkish"],"mümkün":["turkish"],"mümtaz":["turkish"],"müsrif":["turkish"],"müstesna":["turkish"],"müşahit":["turkish"],"müşteri":["turkish"],"mütercim":["turkish"],"müthiş":["turkish"],"müze":["turkish"],"müzik":["turkish"],"nabız":["turkish"],"nadas":["turkish"],"nadir":["turkish"],"nahoş":["turkish"],"nakarat":["turkish"],"nakış":["turkish"],"nalbur":["turkish"],"namlu":["turkish"],"namus":["turkish"],"nankör":["turkish"],"nargile":["turkish"],"narkoz":["turkish"],"nasıl":["turkish"],"nasip":["turkish"],"naylon":["turkish"],"nazar":["turkish"],"nazım":["turkish"],"nazik":["turkish"],"neden":["turkish"],"nefes":["turkish"],"negatif":["turkish"],"neon":["turkish"],"neptün":["turkish"],"nerede":["turkish"],"nesil":["turkish"],"nesnel":["turkish"],"neşeli":["turkish"],"netice":["turkish"],"nevresim":["turkish"],"neyse":["turkish"],"neyzen":["turkish"],"nezaket":["turkish"],"nezih":["turkish"],"nezle":["turkish"],"nicel":["turkish"],"nilüfer":["turkish"],"nimet":["turkish"],"nisan":["turkish"],"nispet":["turkish"],"nitekim":["turkish"],"nizam":["turkish"],"nohut":["turkish"],"noksan":["turkish"],"nostalji":["turkish"],"noter":["turkish"],"nöbet":["turkish"],"numara":["turkish"],"numune":["turkish"],"nutuk":["turkish"],"nüfus":["turkish"],"obabaşı":["turkish"],"obez":["turkish"],"obje":["turkish"],"ocak":["turkish"],"odun":["turkish"],"ofansif":["turkish"],"ofis":["turkish"],"oğlak":["turkish"],"oğuz":["turkish"],"okçu":["turkish"],"oklava":["turkish"],"oksijen":["turkish"],"okul":["turkish"],"okumuş":["turkish"],"okutman":["turkish"],"okuyucu":["turkish"],"okyanus":["turkish"],"olağan":["turkish"],"olanak":["turkish"],"olası":["turkish"],"olay":["turkish"],"olgun":["turkish"],"olimpik":["turkish"],"olumlu":["turkish"],"omlet":["turkish"],"omurga":["turkish"],"onarım":["turkish"],"onursal":["turkish"],"optik":["turkish"],"orantı":["turkish"],"ordu":["turkish"],"organik":["turkish"],"orijin":["turkish"],"orkide":["turkish"],"orman":["turkish"],"orta":["turkish"],"oruç":["turkish"],"otağ":["turkish"],"otantik":["turkish"],"otel":["turkish"],"otoban":["turkish"],"otogar":["turkish"],"otomobil":["turkish"],"otonom":["turkish"],"otopark":["turkish"],"otorite":["turkish"],"otoyol":["turkish"],"oturum":["turkish"],"oyuk":["turkish"],"oyuncak":["turkish"],"ozan":["turkish"],"ödeme":["turkish"],"ödenek":["turkish"],"ödev":["turkish"],"ödül":["turkish"],"ödünç":["turkish"],"öfke":["turkish"],"öğlen":["turkish"],"öğrenci":["turkish"],"öğün":["turkish"],"öğütücü":["turkish"],"öksürük":["turkish"],"ölçme":["turkish"],"ölçü":["turkish"],"ölümsüz":["turkish"],"ömür":["turkish"],"önayak":["turkish"],"öncü":["turkish"],"önder":["turkish"],"önem":["turkish"],"önerge":["turkish"],"öngörü":["turkish"],"önlük":["turkish"],"önsezi":["turkish"],"öpücük":["turkish"],"ördek":["turkish"],"örgü":["turkish"],"örtbas":["turkish"],"örtme":["turkish"],"örtü":["turkish"],"örümcek":["turkish"],"örüntü":["turkish"],"öteberi":["turkish"],"öteki":["turkish"],"övünç":["turkish"],"öykü":["turkish"],"öyleyse":["turkish"],"özçekim":["turkish"],"özdeyiş":["turkish"],"özel":["turkish"],"özenti":["turkish"],"özerk":["turkish"],"özgürlük":["turkish"],"özlem":["turkish"],"özlü":["turkish"],"özne":["turkish"],"özsever":["turkish"],"özümseme":["turkish"],"özür":["turkish"],"özveri":["turkish"],"pabuç":["turkish"],"padişah":["turkish"],"palamut":["turkish"],"palmiye":["turkish"],"palto":["turkish"],"palyaço":["turkish"],"pamuk":["turkish"],"panayır":["turkish"],"pancar":["turkish"],"panik":["turkish"],"panjur":["turkish"],"pankart":["turkish"],"pano":["turkish"],"pansuman":["turkish"],"pantolon":["turkish"],"panzehir":["turkish"],"papatya":["turkish"],"papyon":["turkish"],"paraşüt":["turkish"],"parça":["turkish"],"pardösü":["turkish"],"parfüm":["turkish"],"parıltı":["turkish"],"parkur":["turkish"],"parmak":["turkish"],"parodi":["turkish"],"parsel":["turkish"],"partner":["turkish"],"pasaport":["turkish"],"pasif":["turkish"],"paskalya":["turkish"],"pastırma":["turkish"],"paşa":["turkish"],"patates":["turkish"],"paten":["turkish"],"patika":["turkish"],"patlıcan":["turkish"],"patolog":["turkish"],"payanda":["turkish"],"paydaş":["turkish"],"payidar":["turkish"],"paylaşma":["turkish"],"paytak":["turkish"],"peçete":["turkish"],"peder":["turkish"],"pehlivan":["turkish"],"pekala":["turkish"],"pekmez":["turkish"],"pelerin":["turkish"],"pelikan":["turkish"],"pelüş":["turkish"],"pembe":["turkish"],"pencere":["turkish"],"pense":["turkish"],"perçin":["turkish"],"perde":["turkish"],"pergel":["turkish"],"perişan":["turkish"],"peron":["turkish"],"personel":["turkish"],"perşembe":["turkish"],"peruk":["turkish"],"pervane":["turkish"],"pespaye":["turkish"],"pestil":["turkish"],"peşin":["turkish"],"petek":["turkish"],"petrol":["turkish"],"petunya":["turkish"],"peynir":["turkish"],"peyzaj":["turkish"],"pınar":["turkish"],"pırasa":["turkish"],"pırlanta":["turkish"],"pide":["turkish"],"pikap":["turkish"],"pilav":["turkish"],"piliç":["turkish"],"pipet":["turkish"],"pipo":["turkish"],"piramit":["turkish"],"pirinç":["turkish"],"pirzola":["turkish"],"pist":["turkish"],"pişik":["turkish"],"pişman":["turkish"],"piyasa":["turkish"],"piyes":["turkish"],"plaj":["turkish"],"plaket":["turkish"],"planlama":["turkish"],"platform":["turkish"],"plazma":["turkish"],"podyum":["turkish"],"poğaça":["turkish"],"polat":["turkish"],"politika":["turkish"],"popüler":["turkish"],"porselen":["turkish"],"portakal":["turkish"],"poster":["turkish"],"poşet":["turkish"],"poyraz":["turkish"],"pozitif":["turkish"],"pranga":["turkish"],"pratik":["turkish"],"prenses":["turkish"],"prim":["turkish"],"profil":["turkish"],"proje":["turkish"],"protokol":["turkish"],"puan":["turkish"],"pudra":["turkish"],"pusula":["turkish"],"püre":["turkish"],"pürüz":["turkish"],"püstül":["turkish"],"püsür":["turkish"],"racon":["turkish"],"radikal":["turkish"],"radyo":["turkish"],"rafadan":["turkish"],"rafine":["turkish"],"rağbet":["turkish"],"rahat":["turkish"],"rahle":["turkish"],"rakam":["turkish"],"raket":["turkish"],"rakip":["turkish"],"rakun":["turkish"],"ralli":["turkish"],"randevu":["turkish"],"ranza":["turkish"],"rapor":["turkish"],"rastgele":["turkish"],"rasyonel":["turkish"],"razı":["turkish"],"realite":["turkish"],"reçine":["turkish"],"refah":["turkish"],"referans":["turkish"],"refik":["turkish"],"rehber":["turkish"],"rehin":["turkish"],"reis":["turkish"],"rekabet":["turkish"],"reklam":["turkish"],"rekor":["turkish"],"rektör":["turkish"],"renk":["turkish"],"resim":["turkish"],"resmen":["turkish"],"restoran":["turkish"],"retorik":["turkish"],"revaç":["turkish"],"reyon":["turkish"],"rezalet":["turkish"],"rezerv":["turkish"],"rezil":["turkish"],"rıhtım":["turkish"],"rıza":["turkish"],"ritim":["turkish"],"ritüel":["turkish"],"rivayet":["turkish"],"roman":["turkish"],"rozet":["turkish"],"röportaj":["turkish"],"rötar":["turkish"],"ruble":["turkish"],"ruhban":["turkish"],"ruhsat":["turkish"],"rulet":["turkish"],"runik":["turkish"],"rutin":["turkish"],"rutubet":["turkish"],"rüşvet":["turkish"],"rütbe":["turkish"],"rüya":["turkish"],"rüzgar":["turkish"],"sabah":["turkish"],"sabıka":["turkish"],"sabit":["turkish"],"sabun":["turkish"],"saçma":["turkish"],"sade":["turkish"],"sadık":["turkish"],"safahat":["turkish"],"safdil":["turkish"],"safkan":["turkish"],"sağanak":["turkish"],"sağduyu":["turkish"],"sağlam":["turkish"],"saha":["turkish"],"sahiden":["turkish"],"sahne":["turkish"],"sakal":["turkish"],"sakız":["turkish"],"sakin":["turkish"],"saklama":["turkish"],"saksağan":["turkish"],"salamura":["turkish"],"salça":["turkish"],"salgı":["turkish"],"salınım":["turkish"],"salkım":["turkish"],"saltanat":["turkish"],"sanatçı":["turkish"],"sancak":["turkish"],"sandalye":["turkish"],"saniye":["turkish"],"saplantı":["turkish"],"sapsız":["turkish"],"saray":["turkish"],"sarışın":["turkish"],"sarkık":["turkish"],"sarmaşık":["turkish"],"satır":["turkish"],"savaşım":["turkish"],"savunma":["turkish"],"saydam":["turkish"],"sayfa":["turkish"],"saygın":["turkish"],"sayısal":["turkish"],"sebep":["turkish"],"seçenek":["turkish"],"seçim":["turkish"],"seçkin":["turkish"],"seçmen":["turkish"],"sedir":["turkish"],"sedye":["turkish"],"sefer":["turkish"],"sehpa":["turkish"],"sekizgen":["turkish"],"selektör":["turkish"],"selvi":["turkish"],"semavi":["turkish"],"sembol":["turkish"],"seminer":["turkish"],"senaryo":["turkish"],"sendika":["turkish"],"senkron":["turkish"],"sensör":["turkish"],"sentez":["turkish"],"sepet":["turkish"],"seramik":["turkish"],"serbest":["turkish"],"serdar":["turkish"],"seremoni":["turkish"],"sergi":["turkish"],"serhat":["turkish"],"serin":["turkish"],"sermaye":["turkish"],"serpuş":["turkish"],"sersem":["turkish"],"serüven":["turkish"],"sesli":["turkish"],"sesteş":["turkish"],"sevap":["turkish"],"seviye":["turkish"],"seyahat":["turkish"],"seyirci":["turkish"],"sezon":["turkish"],"sıcak":["turkish"],"sıfat":["turkish"],"sıhhi":["turkish"],"sınanma":["turkish"],"sınır":["turkish"],"sıradan":["turkish"],"sırdaş":["turkish"],"sırma":["turkish"],"sırtüstü":["turkish"],"sızgıt":["turkish"],"siftah":["turkish"],"sigorta":["turkish"],"sihirbaz":["turkish"],"silah":["turkish"],"silecek":["turkish"],"silindir":["turkish"],"simetri":["turkish"],"simge":["turkish"],"simit":["turkish"],"sincap":["turkish"],"sindirim":["turkish"],"sinema":["turkish"],"sinirli":["turkish"],"sipariş":["turkish"],"sirke":["turkish"],"siroz":["turkish"],"sistem":["turkish"],"sivilce":["turkish"],"siyasi":["turkish"],"soba":["turkish"],"sofra":["turkish"],"soğuk":["turkish"],"sohbet":["turkish"],"sokak":["turkish"],"solfej":["turkish"],"solunum":["turkish"],"somut":["turkish"],"sonbahar":["turkish"],"sonraki":["turkish"],"sonsuz":["turkish"],"sorunsuz":["turkish"],"sosyete":["turkish"],"soyağacı":["turkish"],"soydaş":["turkish"],"soygun":["turkish"],"soytarı":["turkish"],"söğüş":["turkish"],"sömürge":["turkish"],"sönük":["turkish"],"söylem":["turkish"],"sözcük":["turkish"],"sözde":["turkish"],"spatula":["turkish"],"spektrum":["turkish"],"spiker":["turkish"],"sporcu":["turkish"],"sprey":["turkish"],"stabil":["turkish"],"statü":["turkish"],"stok":["turkish"],"stopaj":["turkish"],"strateji":["turkish"],"subay":["turkish"],"sucuk":["turkish"],"suçüstü":["turkish"],"suhulet":["turkish"],"sulama":["turkish"],"sungur":["turkish"],"sunucu":["turkish"],"surat":["turkish"],"susam":["turkish"],"suskun":["turkish"],"sükse":["turkish"],"sükut":["turkish"],"sülale":["turkish"],"sünger":["turkish"],"süpürge":["turkish"],"sürahi":["turkish"],"süreç":["turkish"],"sürgün":["turkish"],"sürüm":["turkish"],"süsleme":["turkish"],"sütanne":["turkish"],"sütlaç":["turkish"],"sütun":["turkish"],"süvari":["turkish"],"şahane":["turkish"],"şahbaz":["turkish"],"şahit":["turkish"],"şahsiyet":["turkish"],"şakıma":["turkish"],"şaklaban":["turkish"],"şakrak":["turkish"],"şamar":["turkish"],"şampiyon":["turkish"],"şanslı":["turkish"],"şantiye":["turkish"],"şapka":["turkish"],"şarkıcı":["turkish"],"şartname":["turkish"],"şaşırma":["turkish"],"şaşkın":["turkish"],"şatafat":["turkish"],"şayet":["turkish"],"şebeke":["turkish"],"şefkat":["turkish"],"şeftali":["turkish"],"şehir":["turkish"],"şehvet":["turkish"],"şeker":["turkish"],"şekil":["turkish"],"şelale":["turkish"],"şema":["turkish"],"şemsiye":["turkish"],"şerbet":["turkish"],"şeref":["turkish"],"şerit":["turkish"],"şımarık":["turkish"],"şıpıdık":["turkish"],"şifre":["turkish"],"şimdi":["turkish"],"şimşek":["turkish"],"şipşak":["turkish"],"şirin":["turkish"],"şişe":["turkish"],"şişirme":["turkish"],"şofben":["turkish"],"şöhret":["turkish"],"şölen":["turkish"],"şüphe":["turkish"],"tabaka":["turkish"],"tabure":["turkish"],"tadilat":["turkish"],"taharet":["turkish"],"tahıl":["turkish"],"tahkim":["turkish"],"tahlil":["turkish"],"tahmin":["turkish"],"tahrifat":["turkish"],"tahsilat":["turkish"],"tahta":["turkish"],"taklit":["turkish"],"takoz":["turkish"],"taksici":["turkish"],"taktik":["turkish"],"takvim":["turkish"],"talebe":["turkish"],"talip":["turkish"],"tamamen":["turkish"],"tamirci":["turkish"],"tamtakır":["turkish"],"tandır":["turkish"],"tanecik":["turkish"],"tanıtım":["turkish"],"tanrı":["turkish"],"tansiyon":["turkish"],"tapan":["turkish"],"tapınak":["turkish"],"taptaze":["turkish"],"tapu":["turkish"],"tarafgir":["turkish"],"tarhana":["turkish"],"tarım":["turkish"],"tarih":["turkish"],"tarla":["turkish"],"tartak":["turkish"],"tarumar":["turkish"],"tasarım":["turkish"],"tasdik":["turkish"],"taslak":["turkish"],"tastamam":["turkish"],"taşeron":["turkish"],"taşınmaz":["turkish"],"taşra":["turkish"],"tatava":["turkish"],"tatbikat":["turkish"],"tatil":["turkish"],"tatlı":["turkish"],"tavsiye":["turkish"],"tavşan":["turkish"],"tavuk":["turkish"],"taze":["turkish"],"taziye":["turkish"],"tazminat":["turkish"],"tebeşir":["turkish"],"tebrik":["turkish"],"tecrübe":["turkish"],"teçhizat":["turkish"],"tedarik":["turkish"],"tedbir":["turkish"],"teftiş":["turkish"],"teğet":["turkish"],"teğmen":["turkish"],"tehdit":["turkish"],"tehlike":["turkish"],"tekdüze":["turkish"],"tekerlek":["turkish"],"tekme":["turkish"],"teknik":["turkish"],"tekrar":["turkish"],"telef":["turkish"],"telsiz":["turkish"],"telve":["turkish"],"temas":["turkish"],"tembel":["turkish"],"temiz":["turkish"],"temkin":["turkish"],"temsilci":["turkish"],"tendon":["turkish"],"teneke":["turkish"],"tenha":["turkish"],"tenkit":["turkish"],"tepegöz":["turkish"],"tepki":["turkish"],"terazi":["turkish"],"terbiye":["turkish"],"tercih":["turkish"],"tereyağı":["turkish"],"terfi":["turkish"],"terim":["turkish"],"terminal":["turkish"],"tersane":["turkish"],"tertip":["turkish"],"tesadüf":["turkish"],"tescil":["turkish"],"tesir":["turkish"],"teslimat":["turkish"],"tespit":["turkish"],"testere":["turkish"],"teşekkür":["turkish"],"teşhir":["turkish"],"teşrif":["turkish"],"teşvik":["turkish"],"teyze":["turkish"],"tezahür":["turkish"],"tezgah":["turkish"],"tıbbi":["turkish"],"tıkaç":["turkish"],"tıkışık":["turkish"],"tıknaz":["turkish"],"tılsım":["turkish"],"tıpkı":["turkish"],"tıraş":["turkish"],"tırışka":["turkish"],"tırmanış":["turkish"],"tırnak":["turkish"],"tırpan":["turkish"],"tıslama":["turkish"],"ticaret":["turkish"],"tilki":["turkish"],"tiryaki":["turkish"],"titreşim":["turkish"],"tohum":["turkish"],"tokat":["turkish"],"tolere":["turkish"],"tombak":["turkish"],"tomurcuk":["turkish"],"topaç":["turkish"],"toplum":["turkish"],"toprak":["turkish"],"toptan":["turkish"],"toraman":["turkish"],"torpido":["turkish"],"tortu":["turkish"],"tosbağa":["turkish"],"toynak":["turkish"],"tören":["turkish"],"trafik":["turkish"],"trajedi":["turkish"],"tramvay":["turkish"],"tribün":["turkish"],"triko":["turkish"],"tugay":["turkish"],"tuğla":["turkish"],"tuğrul":["turkish"],"tuhaf":["turkish"],"tulumba":["turkish"],"tunç":["turkish"],"turan":["turkish"],"turkuaz":["turkish"],"turnusol":["turkish"],"turşu":["turkish"],"turuncu":["turkish"],"tutanak":["turkish"],"tutkal":["turkish"],"tutsak":["turkish"],"tutum":["turkish"],"tuyuğ":["turkish"],"tuzlu":["turkish"],"tüccar":["turkish"],"tüfek":["turkish"],"tükenmez":["turkish"],"tülbent":["turkish"],"tümleç":["turkish"],"tünel":["turkish"],"türbin":["turkish"],"türev":["turkish"],"türk":["turkish"],"tüzük":["turkish"],"ucube":["turkish"],"ucuz":["turkish"],"uçak":["turkish"],"uçurtma":["turkish"],"ufuk":["turkish"],"uğrak":["turkish"],"uğur":["turkish"],"ukala":["turkish"],"ulaşım":["turkish"],"ulema":["turkish"],"ulus":["turkish"],"ulvi":["turkish"],"umursama":["turkish"],"umut":["turkish"],"unutkan":["turkish"],"uslu":["turkish"],"ustabaşı":["turkish"],"ustura":["turkish"],"usul":["turkish"],"utangaç":["turkish"],"uyanık":["turkish"],"uyarı":["turkish"],"uydu":["turkish"],"uygar":["turkish"],"uygulama":["turkish"],"uykusuz":["turkish"],"uysal":["turkish"],"uyuşma":["turkish"],"uzantı":["turkish"],"uzay":["turkish"],"uzgören":["turkish"],"uzlaşma":["turkish"],"uzman":["turkish"],"uzun":["turkish"],"ücra":["turkish"],"ücret":["turkish"],"üçbudak":["turkish"],"üçgen":["turkish"],"üçkağıt":["turkish"],"üçleme":["turkish"],"üfürük":["turkish"],"ülke":["turkish"],"ümit":["turkish"],"üniforma":["turkish"],"ünite":["turkish"],"ünlem":["turkish"],"üretken":["turkish"],"ürün":["turkish"],"üslup":["turkish"],"üstel":["turkish"],"üstün":["turkish"],"üşengeç":["turkish"],"üşüme":["turkish"],"ütopya":["turkish"],"üvey":["turkish"],"üzengi":["turkish"],"üzgün":["turkish"],"üzüm":["turkish"],"vaka":["turkish"],"vakfiye":["turkish"],"vakıf":["turkish"],"vakit":["turkish"],"vakum":["turkish"],"vapur":["turkish"],"varil":["turkish"],"varlık":["turkish"],"varsayım":["turkish"],"varyemez":["turkish"],"vasıta":["turkish"],"vasiyet":["turkish"],"vatandaş":["turkish"],"vazife":["turkish"],"vazo":["turkish"],"veciz":["turkish"],"vefa":["turkish"],"vehim":["turkish"],"veliaht":["turkish"],"veresiye":["turkish"],"verimli":["turkish"],"verkaç":["turkish"],"vernik":["turkish"],"vertigo":["turkish"],"vesait":["turkish"],"vesika":["turkish"],"vestiyer":["turkish"],"veznedar":["turkish"],"vicdan":["turkish"],"vilayet":["turkish"],"virane":["turkish"],"virgül":["turkish"],"vişne":["turkish"],"vites":["turkish"],"vokal":["turkish"],"volkan":["turkish"],"vurma":["turkish"],"vurucu":["turkish"],"vücut":["turkish"],"yabancı":["turkish"],"yabgu":["turkish"],"yağış":["turkish"],"yağlı":["turkish"],"yağmur":["turkish"],"yakamoz":["turkish"],"yakın":["turkish"],"yaklaşık":["turkish"],"yalçın":["turkish"],"yalıtım":["turkish"],"yaman":["turkish"],"yanardağ":["turkish"],"yangın":["turkish"],"yanıt":["turkish"],"yankı":["turkish"],"yanlış":["turkish"],"yansıma":["turkish"],"yapay":["turkish"],"yapboz":["turkish"],"yapımcı":["turkish"],"yaprak":["turkish"],"yaratık":["turkish"],"yarbay":["turkish"],"yardım":["turkish"],"yargıç":["turkish"],"yarıçap":["turkish"],"yasemin":["turkish"],"yastık":["turkish"],"yaşam":["turkish"],"yatak":["turkish"],"yatırım":["turkish"],"yavru":["turkish"],"yaygara":["turkish"],"yayıncı":["turkish"],"yayla":["turkish"],"yazılım":["turkish"],"yekpare":["turkish"],"yekvücut":["turkish"],"yelkovan":["turkish"],"yelpaze":["turkish"],"yemek":["turkish"],"yemiş":["turkish"],"yengeç":["turkish"],"yeniçeri":["turkish"],"yeraltı":["turkish"],"yerküre":["turkish"],"yerleşke":["turkish"],"yeryüzü":["turkish"],"yeşil":["turkish"],"yetenek":["turkish"],"yetkili":["turkish"],"yığınak":["turkish"],"yıkama":["turkish"],"yılbaşı":["turkish"],"yıldırım":["turkish"],"yılkı":["turkish"],"yılmaz":["turkish"],"yırtıcı":["turkish"],"yiğit":["turkish"],"yoğurt":["turkish"],"yokuş":["turkish"],"yolcu":["turkish"],"yoldaş":["turkish"],"yolgeçen":["turkish"],"yolkesen":["turkish"],"yolüstü":["turkish"],"yordam":["turkish"],"yorgan":["turkish"],"yorumcu":["turkish"],"yosun":["turkish"],"yöndeş":["turkish"],"yönetim":["turkish"],"yönlü":["turkish"],"yöntem":["turkish"],"yöresel":["turkish"],"yörünge":["turkish"],"yufka":["turkish"],"yukarı":["turkish"],"yumruk":["turkish"],"yumurta":["turkish"],"yuvarlak":["turkish"],"yücelme":["turkish"],"yükçeker":["turkish"],"yüklem":["turkish"],"yüksek":["turkish"],"yürek":["turkish"],"yürütme":["turkish"],"yüzde":["turkish"],"yüzeysel":["turkish"],"yüzgeç":["turkish"],"yüzüstü":["turkish"],"yüzyıl":["turkish"],"zabıta":["turkish"],"zafer":["turkish"],"zahmet":["turkish"],"zambak":["turkish"],"zaptiye":["turkish"],"zarafet":["turkish"],"zaruret":["turkish"],"zeka":["turkish"],"zekice":["turkish"],"zemberek":["turkish"],"zemin":["turkish"],"zencefil":["turkish"],"zeplin":["turkish"],"zeytin":["turkish"],"zıbın":["turkish"],"zılgıt":["turkish"],"zımbırtı":["turkish"],"zımpara":["turkish"],"zıpkın":["turkish"],"zigon":["turkish"],"zihinsel":["turkish"],"zihniyet":["turkish"],"zincir":["turkish"],"zindan":["turkish"],"zirzop":["turkish"],"ziyaret":["turkish"],"ziynet":["turkish"],"zoraki":["turkish"],"zorlu":["turkish"],"zorunlu":["turkish"],"züğürt":["turkish"],"zümre":["turkish"]}
},{}],119:[function(require,module,exports){
module.exports=["abacate","abaixo","abalar","abater","abduzir","abelha","aberto","abismo","abotoar","abranger","abreviar","abrigar","abrupto","absinto","absoluto","absurdo","abutre","acabado","acalmar","acampar","acanhar","acaso","aceitar","acelerar","acenar","acervo","acessar","acetona","achatar","acidez","acima","acionado","acirrar","aclamar","aclive","acolhida","acomodar","acoplar","acordar","acumular","acusador","adaptar","adega","adentro","adepto","adequar","aderente","adesivo","adeus","adiante","aditivo","adjetivo","adjunto","admirar","adorar","adquirir","adubo","adverso","advogado","aeronave","afastar","aferir","afetivo","afinador","afivelar","aflito","afluente","afrontar","agachar","agarrar","agasalho","agenciar","agilizar","agiota","agitado","agora","agradar","agreste","agrupar","aguardar","agulha","ajoelhar","ajudar","ajustar","alameda","alarme","alastrar","alavanca","albergue","albino","alcatra","aldeia","alecrim","alegria","alertar","alface","alfinete","algum","alheio","aliar","alicate","alienar","alinhar","aliviar","almofada","alocar","alpiste","alterar","altitude","alucinar","alugar","aluno","alusivo","alvo","amaciar","amador","amarelo","amassar","ambas","ambiente","ameixa","amenizar","amido","amistoso","amizade","amolador","amontoar","amoroso","amostra","amparar","ampliar","ampola","anagrama","analisar","anarquia","anatomia","andaime","anel","anexo","angular","animar","anjo","anomalia","anotado","ansioso","anterior","anuidade","anunciar","anzol","apagador","apalpar","apanhado","apego","apelido","apertada","apesar","apetite","apito","aplauso","aplicada","apoio","apontar","aposta","aprendiz","aprovar","aquecer","arame","aranha","arara","arcada","ardente","areia","arejar","arenito","aresta","argiloso","argola","arma","arquivo","arraial","arrebate","arriscar","arroba","arrumar","arsenal","arterial","artigo","arvoredo","asfaltar","asilado","aspirar","assador","assinar","assoalho","assunto","astral","atacado","atadura","atalho","atarefar","atear","atender","aterro","ateu","atingir","atirador","ativo","atoleiro","atracar","atrevido","atriz","atual","atum","auditor","aumentar","aura","aurora","autismo","autoria","autuar","avaliar","avante","avaria","avental","avesso","aviador","avisar","avulso","axila","azarar","azedo","azeite","azulejo","babar","babosa","bacalhau","bacharel","bacia","bagagem","baiano","bailar","baioneta","bairro","baixista","bajular","baleia","baliza","balsa","banal","bandeira","banho","banir","banquete","barato","barbado","baronesa","barraca","barulho","baseado","bastante","batata","batedor","batida","batom","batucar","baunilha","beber","beijo","beirada","beisebol","beldade","beleza","belga","beliscar","bendito","bengala","benzer","berimbau","berlinda","berro","besouro","bexiga","bezerro","bico","bicudo","bienal","bifocal","bifurcar","bigorna","bilhete","bimestre","bimotor","biologia","biombo","biosfera","bipolar","birrento","biscoito","bisneto","bispo","bissexto","bitola","bizarro","blindado","bloco","bloquear","boato","bobagem","bocado","bocejo","bochecha","boicotar","bolada","boletim","bolha","bolo","bombeiro","bonde","boneco","bonita","borbulha","borda","boreal","borracha","bovino","boxeador","branco","brasa","braveza","breu","briga","brilho","brincar","broa","brochura","bronzear","broto","bruxo","bucha","budismo","bufar","bule","buraco","busca","busto","buzina","cabana","cabelo","cabide","cabo","cabrito","cacau","cacetada","cachorro","cacique","cadastro","cadeado","cafezal","caiaque","caipira","caixote","cajado","caju","calafrio","calcular","caldeira","calibrar","calmante","calota","camada","cambista","camisa","camomila","campanha","camuflar","canavial","cancelar","caneta","canguru","canhoto","canivete","canoa","cansado","cantar","canudo","capacho","capela","capinar","capotar","capricho","captador","capuz","caracol","carbono","cardeal","careca","carimbar","carneiro","carpete","carreira","cartaz","carvalho","casaco","casca","casebre","castelo","casulo","catarata","cativar","caule","causador","cautelar","cavalo","caverna","cebola","cedilha","cegonha","celebrar","celular","cenoura","censo","centeio","cercar","cerrado","certeiro","cerveja","cetim","cevada","chacota","chaleira","chamado","chapada","charme","chatice","chave","chefe","chegada","cheiro","cheque","chicote","chifre","chinelo","chocalho","chover","chumbo","chutar","chuva","cicatriz","ciclone","cidade","cidreira","ciente","cigana","cimento","cinto","cinza","ciranda","circuito","cirurgia","citar","clareza","clero","clicar","clone","clube","coado","coagir","cobaia","cobertor","cobrar","cocada","coelho","coentro","coeso","cogumelo","coibir","coifa","coiote","colar","coleira","colher","colidir","colmeia","colono","coluna","comando","combinar","comentar","comitiva","comover","complexo","comum","concha","condor","conectar","confuso","congelar","conhecer","conjugar","consumir","contrato","convite","cooperar","copeiro","copiador","copo","coquetel","coragem","cordial","corneta","coronha","corporal","correio","cortejo","coruja","corvo","cosseno","costela","cotonete","couro","couve","covil","cozinha","cratera","cravo","creche","credor","creme","crer","crespo","criada","criminal","crioulo","crise","criticar","crosta","crua","cruzeiro","cubano","cueca","cuidado","cujo","culatra","culminar","culpar","cultura","cumprir","cunhado","cupido","curativo","curral","cursar","curto","cuspir","custear","cutelo","damasco","datar","debater","debitar","deboche","debulhar","decalque","decimal","declive","decote","decretar","dedal","dedicado","deduzir","defesa","defumar","degelo","degrau","degustar","deitado","deixar","delator","delegado","delinear","delonga","demanda","demitir","demolido","dentista","depenado","depilar","depois","depressa","depurar","deriva","derramar","desafio","desbotar","descanso","desenho","desfiado","desgaste","desigual","deslize","desmamar","desova","despesa","destaque","desviar","detalhar","detentor","detonar","detrito","deusa","dever","devido","devotado","dezena","diagrama","dialeto","didata","difuso","digitar","dilatado","diluente","diminuir","dinastia","dinheiro","diocese","direto","discreta","disfarce","disparo","disquete","dissipar","distante","ditador","diurno","diverso","divisor","divulgar","dizer","dobrador","dolorido","domador","dominado","donativo","donzela","dormente","dorsal","dosagem","dourado","doutor","drenagem","drible","drogaria","duelar","duende","dueto","duplo","duquesa","durante","duvidoso","eclodir","ecoar","ecologia","edificar","edital","educado","efeito","efetivar","ejetar","elaborar","eleger","eleitor","elenco","elevador","eliminar","elogiar","embargo","embolado","embrulho","embutido","emenda","emergir","emissor","empatia","empenho","empinado","empolgar","emprego","empurrar","emulador","encaixe","encenado","enchente","encontro","endeusar","endossar","enfaixar","enfeite","enfim","engajado","engenho","englobar","engomado","engraxar","enguia","enjoar","enlatar","enquanto","enraizar","enrolado","enrugar","ensaio","enseada","ensino","ensopado","entanto","enteado","entidade","entortar","entrada","entulho","envergar","enviado","envolver","enxame","enxerto","enxofre","enxuto","epiderme","equipar","ereto","erguido","errata","erva","ervilha","esbanjar","esbelto","escama","escola","escrita","escuta","esfinge","esfolar","esfregar","esfumado","esgrima","esmalte","espanto","espelho","espiga","esponja","espreita","espumar","esquerda","estaca","esteira","esticar","estofado","estrela","estudo","esvaziar","etanol","etiqueta","euforia","europeu","evacuar","evaporar","evasivo","eventual","evidente","evoluir","exagero","exalar","examinar","exato","exausto","excesso","excitar","exclamar","executar","exemplo","exibir","exigente","exonerar","expandir","expelir","expirar","explanar","exposto","expresso","expulsar","externo","extinto","extrato","fabricar","fabuloso","faceta","facial","fada","fadiga","faixa","falar","falta","familiar","fandango","fanfarra","fantoche","fardado","farelo","farinha","farofa","farpa","fartura","fatia","fator","favorita","faxina","fazenda","fechado","feijoada","feirante","felino","feminino","fenda","feno","fera","feriado","ferrugem","ferver","festejar","fetal","feudal","fiapo","fibrose","ficar","ficheiro","figurado","fileira","filho","filme","filtrar","firmeza","fisgada","fissura","fita","fivela","fixador","fixo","flacidez","flamingo","flanela","flechada","flora","flutuar","fluxo","focal","focinho","fofocar","fogo","foguete","foice","folgado","folheto","forjar","formiga","forno","forte","fosco","fossa","fragata","fralda","frango","frasco","fraterno","freira","frente","fretar","frieza","friso","fritura","fronha","frustrar","fruteira","fugir","fulano","fuligem","fundar","fungo","funil","furador","furioso","futebol","gabarito","gabinete","gado","gaiato","gaiola","gaivota","galega","galho","galinha","galocha","ganhar","garagem","garfo","gargalo","garimpo","garoupa","garrafa","gasoduto","gasto","gata","gatilho","gaveta","gazela","gelado","geleia","gelo","gemada","gemer","gemido","generoso","gengiva","genial","genoma","genro","geologia","gerador","germinar","gesso","gestor","ginasta","gincana","gingado","girafa","girino","glacial","glicose","global","glorioso","goela","goiaba","golfe","golpear","gordura","gorjeta","gorro","gostoso","goteira","governar","gracejo","gradual","grafite","gralha","grampo","granada","gratuito","graveto","graxa","grego","grelhar","greve","grilo","grisalho","gritaria","grosso","grotesco","grudado","grunhido","gruta","guache","guarani","guaxinim","guerrear","guiar","guincho","guisado","gula","guloso","guru","habitar","harmonia","haste","haver","hectare","herdar","heresia","hesitar","hiato","hibernar","hidratar","hiena","hino","hipismo","hipnose","hipoteca","hoje","holofote","homem","honesto","honrado","hormonal","hospedar","humorado","iate","ideia","idoso","ignorado","igreja","iguana","ileso","ilha","iludido","iluminar","ilustrar","imagem","imediato","imenso","imersivo","iminente","imitador","imortal","impacto","impedir","implante","impor","imprensa","impune","imunizar","inalador","inapto","inativo","incenso","inchar","incidir","incluir","incolor","indeciso","indireto","indutor","ineficaz","inerente","infantil","infestar","infinito","inflamar","informal","infrator","ingerir","inibido","inicial","inimigo","injetar","inocente","inodoro","inovador","inox","inquieto","inscrito","inseto","insistir","inspetor","instalar","insulto","intacto","integral","intimar","intocado","intriga","invasor","inverno","invicto","invocar","iogurte","iraniano","ironizar","irreal","irritado","isca","isento","isolado","isqueiro","italiano","janeiro","jangada","janta","jararaca","jardim","jarro","jasmim","jato","javali","jazida","jejum","joaninha","joelhada","jogador","joia","jornal","jorrar","jovem","juba","judeu","judoca","juiz","julgador","julho","jurado","jurista","juro","justa","labareda","laboral","lacre","lactante","ladrilho","lagarta","lagoa","laje","lamber","lamentar","laminar","lampejo","lanche","lapidar","lapso","laranja","lareira","largura","lasanha","lastro","lateral","latido","lavanda","lavoura","lavrador","laxante","lazer","lealdade","lebre","legado","legendar","legista","leigo","leiloar","leitura","lembrete","leme","lenhador","lentilha","leoa","lesma","leste","letivo","letreiro","levar","leveza","levitar","liberal","libido","liderar","ligar","ligeiro","limitar","limoeiro","limpador","linda","linear","linhagem","liquidez","listagem","lisura","litoral","livro","lixa","lixeira","locador","locutor","lojista","lombo","lona","longe","lontra","lorde","lotado","loteria","loucura","lousa","louvar","luar","lucidez","lucro","luneta","lustre","lutador","luva","macaco","macete","machado","macio","madeira","madrinha","magnata","magreza","maior","mais","malandro","malha","malote","maluco","mamilo","mamoeiro","mamute","manada","mancha","mandato","manequim","manhoso","manivela","manobrar","mansa","manter","manusear","mapeado","maquinar","marcador","maresia","marfim","margem","marinho","marmita","maroto","marquise","marreco","martelo","marujo","mascote","masmorra","massagem","mastigar","matagal","materno","matinal","matutar","maxilar","medalha","medida","medusa","megafone","meiga","melancia","melhor","membro","memorial","menino","menos","mensagem","mental","merecer","mergulho","mesada","mesclar","mesmo","mesquita","mestre","metade","meteoro","metragem","mexer","mexicano","micro","migalha","migrar","milagre","milenar","milhar","mimado","minerar","minhoca","ministro","minoria","miolo","mirante","mirtilo","misturar","mocidade","moderno","modular","moeda","moer","moinho","moita","moldura","moleza","molho","molinete","molusco","montanha","moqueca","morango","morcego","mordomo","morena","mosaico","mosquete","mostarda","motel","motim","moto","motriz","muda","muito","mulata","mulher","multar","mundial","munido","muralha","murcho","muscular","museu","musical","nacional","nadador","naja","namoro","narina","narrado","nascer","nativa","natureza","navalha","navegar","navio","neblina","nebuloso","negativa","negociar","negrito","nervoso","neta","neural","nevasca","nevoeiro","ninar","ninho","nitidez","nivelar","nobreza","noite","noiva","nomear","nominal","nordeste","nortear","notar","noticiar","noturno","novelo","novilho","novo","nublado","nudez","numeral","nupcial","nutrir","nuvem","obcecado","obedecer","objetivo","obrigado","obscuro","obstetra","obter","obturar","ocidente","ocioso","ocorrer","oculista","ocupado","ofegante","ofensiva","oferenda","oficina","ofuscado","ogiva","olaria","oleoso","olhar","oliveira","ombro","omelete","omisso","omitir","ondulado","oneroso","ontem","opcional","operador","oponente","oportuno","oposto","orar","orbitar","ordem","ordinal","orfanato","orgasmo","orgulho","oriental","origem","oriundo","orla","ortodoxo","orvalho","oscilar","ossada","osso","ostentar","otimismo","ousadia","outono","outubro","ouvido","ovelha","ovular","oxidar","oxigenar","pacato","paciente","pacote","pactuar","padaria","padrinho","pagar","pagode","painel","pairar","paisagem","palavra","palestra","palheta","palito","palmada","palpitar","pancada","panela","panfleto","panqueca","pantanal","papagaio","papelada","papiro","parafina","parcial","pardal","parede","partida","pasmo","passado","pastel","patamar","patente","patinar","patrono","paulada","pausar","peculiar","pedalar","pedestre","pediatra","pedra","pegada","peitoral","peixe","pele","pelicano","penca","pendurar","peneira","penhasco","pensador","pente","perceber","perfeito","pergunta","perito","permitir","perna","perplexo","persiana","pertence","peruca","pescado","pesquisa","pessoa","petiscar","piada","picado","piedade","pigmento","pilastra","pilhado","pilotar","pimenta","pincel","pinguim","pinha","pinote","pintar","pioneiro","pipoca","piquete","piranha","pires","pirueta","piscar","pistola","pitanga","pivete","planta","plaqueta","platina","plebeu","plumagem","pluvial","pneu","poda","poeira","poetisa","polegada","policiar","poluente","polvilho","pomar","pomba","ponderar","pontaria","populoso","porta","possuir","postal","pote","poupar","pouso","povoar","praia","prancha","prato","praxe","prece","predador","prefeito","premiar","prensar","preparar","presilha","pretexto","prevenir","prezar","primata","princesa","prisma","privado","processo","produto","profeta","proibido","projeto","prometer","propagar","prosa","protetor","provador","publicar","pudim","pular","pulmonar","pulseira","punhal","punir","pupilo","pureza","puxador","quadra","quantia","quarto","quase","quebrar","queda","queijo","quente","querido","quimono","quina","quiosque","rabanada","rabisco","rachar","racionar","radial","raiar","rainha","raio","raiva","rajada","ralado","ramal","ranger","ranhura","rapadura","rapel","rapidez","raposa","raquete","raridade","rasante","rascunho","rasgar","raspador","rasteira","rasurar","ratazana","ratoeira","realeza","reanimar","reaver","rebaixar","rebelde","rebolar","recado","recente","recheio","recibo","recordar","recrutar","recuar","rede","redimir","redonda","reduzida","reenvio","refinar","refletir","refogar","refresco","refugiar","regalia","regime","regra","reinado","reitor","rejeitar","relativo","remador","remendo","remorso","renovado","reparo","repelir","repleto","repolho","represa","repudiar","requerer","resenha","resfriar","resgatar","residir","resolver","respeito","ressaca","restante","resumir","retalho","reter","retirar","retomada","retratar","revelar","revisor","revolta","riacho","rica","rigidez","rigoroso","rimar","ringue","risada","risco","risonho","robalo","rochedo","rodada","rodeio","rodovia","roedor","roleta","romano","roncar","rosado","roseira","rosto","rota","roteiro","rotina","rotular","rouco","roupa","roxo","rubro","rugido","rugoso","ruivo","rumo","rupestre","russo","sabor","saciar","sacola","sacudir","sadio","safira","saga","sagrada","saibro","salada","saleiro","salgado","saliva","salpicar","salsicha","saltar","salvador","sambar","samurai","sanar","sanfona","sangue","sanidade","sapato","sarda","sargento","sarjeta","saturar","saudade","saxofone","sazonal","secar","secular","seda","sedento","sediado","sedoso","sedutor","segmento","segredo","segundo","seiva","seleto","selvagem","semanal","semente","senador","senhor","sensual","sentado","separado","sereia","seringa","serra","servo","setembro","setor","sigilo","silhueta","silicone","simetria","simpatia","simular","sinal","sincero","singular","sinopse","sintonia","sirene","siri","situado","soberano","sobra","socorro","sogro","soja","solda","soletrar","solteiro","sombrio","sonata","sondar","sonegar","sonhador","sono","soprano","soquete","sorrir","sorteio","sossego","sotaque","soterrar","sovado","sozinho","suavizar","subida","submerso","subsolo","subtrair","sucata","sucesso","suco","sudeste","sufixo","sugador","sugerir","sujeito","sulfato","sumir","suor","superior","suplicar","suposto","suprimir","surdina","surfista","surpresa","surreal","surtir","suspiro","sustento","tabela","tablete","tabuada","tacho","tagarela","talher","talo","talvez","tamanho","tamborim","tampa","tangente","tanto","tapar","tapioca","tardio","tarefa","tarja","tarraxa","tatuagem","taurino","taxativo","taxista","teatral","tecer","tecido","teclado","tedioso","teia","teimar","telefone","telhado","tempero","tenente","tensor","tentar","termal","terno","terreno","tese","tesoura","testado","teto","textura","texugo","tiara","tigela","tijolo","timbrar","timidez","tingido","tinteiro","tiragem","titular","toalha","tocha","tolerar","tolice","tomada","tomilho","tonel","tontura","topete","tora","torcido","torneio","torque","torrada","torto","tostar","touca","toupeira","toxina","trabalho","tracejar","tradutor","trafegar","trajeto","trama","trancar","trapo","traseiro","tratador","travar","treino","tremer","trepidar","trevo","triagem","tribo","triciclo","tridente","trilogia","trindade","triplo","triturar","triunfal","trocar","trombeta","trova","trunfo","truque","tubular","tucano","tudo","tulipa","tupi","turbo","turma","turquesa","tutelar","tutorial","uivar","umbigo","unha","unidade","uniforme","urologia","urso","urtiga","urubu","usado","usina","usufruir","vacina","vadiar","vagaroso","vaidoso","vala","valente","validade","valores","vantagem","vaqueiro","varanda","vareta","varrer","vascular","vasilha","vassoura","vazar","vazio","veado","vedar","vegetar","veicular","veleiro","velhice","veludo","vencedor","vendaval","venerar","ventre","verbal","verdade","vereador","vergonha","vermelho","verniz","versar","vertente","vespa","vestido","vetorial","viaduto","viagem","viajar","viatura","vibrador","videira","vidraria","viela","viga","vigente","vigiar","vigorar","vilarejo","vinco","vinheta","vinil","violeta","virada","virtude","visitar","visto","vitral","viveiro","vizinho","voador","voar","vogal","volante","voleibol","voltagem","volumoso","vontade","vulto","vuvuzela","xadrez","xarope","xeque","xeretar","xerife","xingar","zangado","zarpar","zebu","zelador","zombar","zoologia","zumbido"]
},{}],120:[function(require,module,exports){
module.exports=["абзац","абонент","абсурд","авангард","авария","август","авиация","автор","агент","агитация","агрегат","адвокат","адмирал","адрес","азарт","азот","академия","аквариум","аксиома","акула","акцент","акция","аллея","алмаз","алтарь","альбом","альянс","амбиция","анализ","анекдот","анкета","ансамбль","антенна","апельсин","аппарат","аппетит","апрель","аптека","арбуз","аргумент","аренда","арест","армия","аромат","арсенал","артерия","артист","архив","аспирант","асфальт","атака","атомный","атрибут","аукцион","афиша","аэропорт","бабочка","бабушка","багаж","база","бактерия","баланс","балерина","балкон","бандит","банк","барабан","барон","барышня","барьер","бассейн","батарея","башмак","башня","бедный","беженец","бездна","белка","белый","бензин","берег","беседа","бешеный","билет","бинокль","биржа","битва","благо","блеск","близкий","блин","блок","блюдо","богатый","бодрый","боец","бокал","боковой","бокс","более","болото","болтать","большой","бомба","борт","борьба","босой","ботинок","бояться","брак","брать","бревно","бред","бригада","бродяга","броня","бросить","брызги","брюки","брюхо","бугор","будка","будни","будущее","буква","букет","бульвар","бумага","бунт","бурный","буря","бутылка","бухта","бывший","быстро","бытовой","быть","бюджет","бюро","бюст","вагон","важный","вакцина","валенок","вальс","валюта","ванная","варенье","вариант","вблизи","вверх","вводить","вдали","вдвое","вдова","вдоль","вдруг","ведро","ведущий","ведьма","вежливо","везде","веко","вексель","велеть","великий","венец","веник","веранда","верблюд","верить","верный","версия","вертеть","верхний","вершина","весело","весна","весомый","вести","весь","ветеран","ветхий","вечер","вечно","вешалка","вещество","взамен","взгляд","вздох","взнос","взойти","взор","взрыв","взять","видеть","видимо","визг","визит","вилка","вина","вирус","висок","витамин","витрина","вихрь","вишня","вкус","влага","владелец","власть","влево","влияние","вложить","вместе","внешний","вникать","внимание","вновь","внук","внутри","внучка","внушать","вовлечь","вовремя","вовсю","вода","водород","водяной","воевать","возврат","возглас","воздух","возить","возле","возня","возраст","война","войско","вокзал","волос","волчий","вольный","воля","вообще","вопль","вопрос","ворота","восемь","восток","вплоть","вполне","вправе","впредь","впрочем","врач","вредный","время","вручить","всадник","всегда","вскоре","вскрыть","всплеск","вспышка","встреча","всюду","всякий","второй","вход","вчера","выбор","вывод","выгнать","выдать","выехать","вызов","выйти","выкуп","вылезти","вымыть","выпасть","выпить","выплата","выпуск","вырасти","выручка","выслать","высокий","выставка","вышка","вязать","вялый","газета","газовый","галерея","галстук","гамма","гарантия","гармония","гарнизон","гастроли","гвардия","гвоздь","гектар","генерал","гений","геном","геолог","герб","герой","гибкий","гигант","гимн","гипотеза","гитара","главный","глагол","гладить","глаз","глина","глоток","глубокий","глупый","глухой","глыба","глядеть","гнев","гнездо","гнилой","годовой","голова","голубой","голый","гонорар","гордость","горизонт","горло","горный","город","горшок","горький","горючее","горячий","готовый","градус","грамм","граница","граф","гребень","гриб","гримаса","грозить","грохот","грош","грубый","грудь","груз","грунт","группа","груша","грязный","губа","гудок","гулкий","гулять","гусеница","густо","гусь","давление","давно","даже","дальний","данный","дарить","датчик","дать","дача","двадцать","дважды","дверь","двигать","движение","двойной","двор","дебют","девятый","дежурный","действие","декабрь","деление","дело","дельфин","день","дерево","держать","дерзкий","десять","деталь","детский","дефект","дефицит","деятель","джаз","джинсы","джунгли","диагноз","диалог","диапазон","диван","дивизия","дивный","диета","дизайн","дикарь","дилер","динамика","диплом","директор","дитя","длинный","дневник","добрый","добыча","доверие","догадка","догнать","дождь","доклад","доктор","документ","долго","должен","долина","донос","дорога","досада","доска","достать","досуг","доход","доцент","дощатый","драка","древний","дремать","дробный","дрова","дрожать","другой","дружба","дубовый","дуга","думать","дурной","духи","душный","дуэль","дуэт","дыра","дыхание","дюжина","дядя","едва","единый","ерунда","если","ехать","жадный","жажда","жалеть","жалоба","жанр","жареный","жаркий","жгучий","жевать","желание","желудок","жена","женщина","жертва","жест","жидкость","житель","жить","жрец","жулик","журнал","жуткий","забрать","забыть","завести","завод","завтра","загадка","загнать","заговор","задача","задеть","задний","задолго","заехать","заказ","закон","закрыть","закуска","залезть","залить","залп","замок","замуж","замысел","занавес","заново","занять","заодно","запись","запрос","запуск","запястье","заранее","заросль","зарплата","заря","засада","заслуга","заснуть","застать","затвор","затеять","затрата","затылок","захват","зачем","защита","заявить","заяц","звезда","звено","звонить","здесь","зелень","земля","зеркало","зерно","зима","злой","змея","знамя","знание","значит","золотой","зона","зонтик","зоопарк","зрачок","зрение","зритель","зубной","зубр","игла","идеал","идеолог","идея","идол","идти","изба","избить","избрать","избыток","извлечь","извне","изгиб","изгнать","издание","изделие","изнутри","изобилие","изоляция","изредка","изрядно","изучение","изъять","изящный","икона","икра","иллюзия","именно","иметь","имидж","империя","импульс","иначе","инвалид","индекс","индивид","инерция","инженер","иногда","иной","институт","интерес","интрига","интуиция","инфаркт","инцидент","ирония","искать","испуг","история","итог","июнь","кабель","кабинет","каблук","кавалер","кадр","каждый","кажется","казино","калитка","камень","камин","канал","кандидат","каникулы","канон","капитан","капля","капот","капуста","карандаш","карета","каркас","карман","картина","карьера","каска","кассета","кастрюля","каталог","катер","каток","катушка","кафедра","качество","каша","кашлять","каюта","квадрат","квартира","квота","кепка","кивнуть","километр","кино","киоск","кипяток","кирпич","кислота","кисть","клавиша","клапан","класс","клей","клетка","клиент","климат","клиника","кличка","клоун","клочок","клуб","клумба","ключ","книга","кнопка","кнут","княгиня","князь","кобура","когда","кодекс","кожа","коктейль","колено","коллега","колонна","колпак","кольцо","колючий","коляска","команда","комедия","комиссия","коммуна","комната","комок","компания","комфорт","конвейер","конгресс","конечно","конкурс","контроль","концерт","конь","конюшня","копать","копейка","копыто","корабль","корень","корзина","коридор","кормить","корпус","космос","костюм","косяк","котел","котлета","который","коттедж","кофе","кофта","кошка","кража","край","красный","краткий","кредит","крем","крепкий","кресло","кривой","кризис","кристалл","критерий","кричать","кровь","крокодил","кролик","кроме","крона","круг","кружка","крупный","крутой","крушение","крыло","крыша","крючок","кстати","кубик","куда","кузов","кукла","кулак","кулиса","культура","кумир","купе","купить","купол","купюра","курица","курорт","курс","куртка","кусок","куст","кухня","кушать","лабиринт","лавка","лагерь","ладно","ладонь","лапа","лауреат","лгать","лебедь","левый","легенда","легкий","ледяной","лежать","лезвие","лезть","лекция","ленивый","лента","лепесток","лесной","лестница","лететь","лето","лечить","лига","лидер","лиловый","лимон","линия","липкий","лист","литр","лихой","лицо","лишить","лишний","ловить","логика","лодка","ложь","лозунг","локоть","лопата","лошадь","лукавый","луна","лучший","лысый","льгота","любить","любой","людской","люстра","лютый","лягушка","магазин","магия","майор","майский","максимум","макушка","мало","мальчик","мама","манера","марка","март","маршрут","масса","мастер","масштаб","материал","матч","махать","машина","маяк","мебель","медаль","медведь","медицина","медь","между","мелкий","мелочь","мемуары","меньше","меню","менять","мера","мерцать","место","месяц","металл","метод","метр","механизм","меховой","мечтать","мешать","мешок","миграция","микрофон","милиция","миллион","милость","миля","мимо","минерал","министр","минута","мирный","миска","миссия","митинг","мишень","младший","мнение","мнимый","много","могучий","модель","может","мозг","мокрый","молекула","молния","молодой","молчать","момент","монета","монитор","монолог","монстр","монтаж","мораль","море","морковь","мороз","морщина","мостовая","мотать","мотив","мотор","мохнатый","мрамор","мрачный","мстить","мудрый","мужество","мужчина","музей","музыка","мундир","муравей","мусор","муха","мчаться","мысль","мыться","мышца","мышь","мюзикл","мягкий","мясо","набор","навык","наглый","нагрузка","надежда","надзор","надо","наедине","назад","название","назло","наивный","найти","наконец","налево","наличие","налог","намерен","нанести","напасть","например","народ","наследие","натура","наука","наутро","начать","небо","неважно","невеста","негодяй","недавно","неделя","недолго","недра","недуг","нежный","незачем","некто","нелепый","неловко","нельзя","немало","немой","неплохо","нервный","нередко","нестись","неудача","неужели","нефть","неясный","нигде","низкий","никакой","никогда","никуда","ничто","ничуть","ниша","нищий","новость","новый","нога","ноготь","ножницы","ноздря","номер","носить","носок","ночь","ноябрь","нрав","нуль","нынче","нырять","нюанс","няня","обаяние","обед","обезьяна","обещать","обжечь","обзор","обилие","обитать","область","облик","обложка","обмен","обморок","обожать","обои","оболочка","оборона","обочина","образ","обрести","обрыв","обувь","обучение","обход","общество","общий","объект","обыск","обычно","обязать","овощи","овраг","овца","оговорка","ограда","огурец","одежда","одеяло","один","однако","одолеть","ожидать","озеро","океан","окно","около","окоп","окраина","октябрь","опасный","опека","операция","описание","оплата","опора","оппонент","оптимизм","оптовый","опухоль","опыт","оратор","орбита","орган","орден","орел","оригинал","ориентир","оркестр","оружие","осенний","осколок","осмотр","остров","отбор","отбыть","отвлечь","отдать","отдел","отдых","отель","отец","отзыв","отказ","отклик","открыть","откуда","отличие","отныне","отойти","отпуск","отрасль","отросток","отрывок","отряд","отсек","отставка","отсюда","оттенок","оттого","отчего","отъезд","офис","офицер","охота","охрана","оценка","очаг","очень","очередь","очищать","ошибка","ощущение","павильон","падать","пазуха","пакет","палата","палец","палуба","пальто","память","панель","паника","пара","парень","пароход","партия","парус","паспорт","пассажир","пастух","патент","патрон","пауза","паук","паутина","пафос","пахнуть","пациент","пачка","певец","педагог","пейзаж","пенсия","пепел","первый","перед","период","перо","перрон","персонаж","перчатка","песня","песок","петля","петрушка","петух","пехота","печать","печень","пешком","пещера","пианист","пиджак","пилот","пионер","пирамида","пирожок","письмо","пища","плавание","плакать","пламя","план","пласт","платить","пленный","плечо","плита","плод","плоский","плотный","плохой","площадь","плыть","плюс","пляж","плясать","победа","повар","повод","повсюду","повязка","погода","погреб","подбор","подвиг","подделка","поджать","поднос","подпись","подруга","подход","подчас","подъезд","поединок","поезд","поесть","поехать","пожалуй","пожилой","позади","позвать","поздний","позиция","позор","поиск","поймать","пойти","поклон","покой","покрыть","полдень","полезный","ползти","полк","полный","половина","полтора","польза","поляна","помидор","помнить","помощь","попасть","поперек","поплыть","пополам","поправка","попугай","попытка","порог","портрет","порция","порыв","порядок","после","посол","посреди","постель","посуда","потом","похвала","похожий","поцелуй","почва","почему","пошлина","поэма","поэтому","право","праздник","практика","прах","преграда","предмет","прежде","прелесть","премия","препарат","пресса","прибыть","прижать","прийти","приказ","прилавок","пример","принять","природа","притом","прихожая","прицел","причина","приют","прогноз","продукт","проект","прожить","прокат","промысел","пропуск","просто","против","профиль","процесс","прочий","прошлый","прощать","пружина","прут","прыжок","прямой","птица","публика","пугать","пуговица","пузырь","пульт","пуля","пункт","пускать","пустой","путь","пухлый","пучок","пушистый","пушка","пчела","пшеница","пылать","пыль","пышный","пьеса","пятка","пятно","пятый","пятьсот","работа","равнина","ради","радость","радуга","разбить","развитие","разговор","раздел","различие","размер","разный","разрыв","разум","район","ракета","раковина","рамка","рано","рапорт","распад","рассказ","расти","расход","расцвет","рация","рвануть","рваться","реакция","ребро","реветь","редактор","редкий","реестр","режим","резать","резерв","резина","резко","резной","рейс","реклама","рекорд","религия","рельс","ремень","ремонт","реплика","репортаж","ресница","ресторан","реформа","рецепт","речь","решение","ржавый","риск","рисунок","ритуал","рифма","робко","робот","ровесник","ровно","родной","рождение","роза","розовый","розыск","роль","роман","роскошь","роспись","рост","рубашка","рубеж","рубить","рубрика","рудник","рука","рукопись","румяный","русло","рухнуть","ручей","ручной","рыба","рыжий","рынок","рыхлый","рыцарь","рычаг","рюкзак","рядом","садовый","сажать","салон","салфетка","салют","самец","самовар","самый","сани","санкция","сапог","сарай","сатира","сахар","сбить","сбоку","сборная","сбыт","свадьба","свалка","сварить","свежий","сверху","свет","свеча","свинья","свист","свитер","свобода","сводка","свой","свыше","связь","сдаться","сделать","сегмент","сегодня","седло","седой","седьмой","сезон","сейф","сейчас","секрет","сектор","секунда","семинар","семья","сенатор","сено","сенсация","сентябрь","сервис","сердце","середина","сержант","серия","серый","сессия","сесть","сетевой","сжатый","сжечь","сзади","сигнал","сиденье","сила","силуэт","сильный","символ","симпатия","симфония","синий","синтез","синяк","сирень","система","ситуация","сияние","сказать","скала","скамейка","скандал","скатерть","скачок","скважина","сквер","сквозь","скелет","скидка","склад","сколько","скорый","скосить","скот","скрипка","скудный","скука","слабый","слава","сладкий","слегка","след","слеза","слепой","слесарь","слишком","слово","слог","сложный","сломать","служба","слух","случай","слышать","слюна","смежный","смелый","сменить","смесь","сметана","смех","смола","смуглый","смутный","смущать","смысл","снайпер","снаряд","сначала","снег","снизу","сниться","сно��а","снять","собака","соблазн","собрание","событие","совесть","совсем","согласие","создать","сознание","созреть","сойтись","сокол","солдат","соленый","солнце","солома","сомнение","сонный","соперник","соратник","сорвать","сосед","сосиска","состав","сотня","соус","союз","спад","спальня","спасти","спектр","сперва","спешить","спина","спирт","список","спичка","сплав","спонсор","спор","способ","справка","спустя","спутник","сразу","средство","срок","срыв","ссора","ссылка","ставить","стадия","стакан","станция","старый","стая","стебель","стекло","стена","степень","стереть","стиль","стимул","стирать","стихи","стоить","стойка","стол","стонать","стопа","сторона","стоянка","страна","стричь","строгий","струя","студент","стук","ступня","стыдно","суббота","субъект","сувенир","сугроб","сугубо","судить","судно","судьба","суета","суметь","сумма","сумрак","сундук","супруг","суровый","сутки","сухой","суша","существо","сфера","схема","схожий","сценарий","счастье","считать","съезд","сыграть","сырой","сытый","сыщик","сюда","сюжет","сюрприз","тайна","также","такой","такси","тактика","талия","таможня","танец","таракан","тарелка","тариф","тащить","таять","тварь","театр","тезис","текст","текущий","телефон","тема","темнота","теневой","теннис","теория","теперь","тепло","терапия","терзать","термин","терпеть","терраса","терять","тесный","тетрадь","техника","течение","тигр","типовой","тираж","титул","тихий","ткань","товарищ","тоже","толпа","толстый","толчок","толщина","только","тонкий","тонна","топить","топор","торговля","тормоз","торчать","тотчас","точка","точно","тощий","трава","традиция","трактор","трамвай","траншея","трасса","тревога","трезвый","тренер","трепет","треск","третий","трещина","трибуна","тридцать","триста","триумф","трогать","тройка","тронуть","тропа","тротуар","трубка","труд","трюк","тряпка","туго","туловище","туман","тумбочка","тундра","тупик","турист","турнир","тусклый","туфля","туча","тысяча","тяга","тяжело","убежать","убогий","уборка","уважение","увезти","уволить","угадать","угол","угощать","угроза","угрюмый","удар","удачный","уделять","удивить","удобный","удочка","уезжать","ужин","узел","узкий","уйти","указание","уклон","украсть","укусить","улетать","улица","улыбка","умело","умение","умный","умолять","унести","унижать","унылый","упаковка","упасть","упорно","упрек","урна","уровень","урожай","уронить","усадьба","усатый","усвоить","усилие","условие","услуга","усмешка","успеть","устав","устоять","утечка","утешать","утро","уцелеть","участие","ученик","учесть","ущелье","ущерб","уютный","фабрика","фаворит","факел","факт","фамилия","фантазия","фасад","февраль","феномен","фермер","фигура","физика","филиал","философ","фильм","финал","флаг","флот","фойе","фокус","фонарь","фонд","фонтан","форма","форум","фото","фрагмент","фраза","фракция","фронт","фрукт","функция","фуражка","футбол","футляр","халат","хаос","характер","хата","хвалить","хватать","хвойный","хвост","химия","хирург","хитрый","хищник","хлеб","хлынуть","хмурый","ходить","хозяин","хоккей","холм","холст","хорошо","хотеть","храбрый","храм","хранить","хребет","хрен","хрипло","хроника","хрупкий","художник","худший","хулиган","хутор","царь","цветок","целевой","целиком","целое","цель","цензура","ценить","центр","цепной","цикл","цилиндр","цирк","цитата","цифра","чайник","часы","чашка","человек","челюсть","чемодан","чемпион","чепуха","червь","чердак","через","чернила","черта","чеснок","честно","четверть","четыре","число","чистый","читатель","чтение","чтобы","чувство","чудак","чудный","чудо","чужой","чулок","чума","чушь","чуять","шагать","шанс","шапка","шарик","шарф","шахматы","шашлык","шедевр","шептать","шерсть","шестой","шинель","ширина","шишка","шкаф","школа","шкура","шланг","шлем","шнур","шоколад","шорох","шоссе","шпион","шприц","штаб","штамм","штаны","штатный","штора","штраф","штурм","штык","шумно","шуршать","шутить","шутка","щедрый","щека","щенок","экзамен","экипаж","экономия","экран","эксперт","элемент","элитный","эмоция","энергия","эпизод","эпоха","эскиз","эстрада","этап","этика","этот","эфир","эффект","эшелон","юбилей","юбка","южный","юмор","юность","юрист","юстиция","яблоко","явление","ягода","ядро","язык","яйцо","якобы","якорь","январь","яркий","ярмарка","ярость","ясный","яхта","ячейка","ящик"]
},{}],121:[function(require,module,exports){
module.exports=["ábaco","abdomen","abeja","abierto","abogado","abono","aborto","abrazo","abrir","abuelo","abuso","acabar","academia","acceso","acción","aceite","acelga","acento","aceptar","ácido","aclarar","acné","acoger","acoso","activo","acto","actriz","actuar","acudir","acuerdo","acusar","adicto","admitir","adoptar","adorno","aduana","adulto","aéreo","afectar","afición","afinar","afirmar","ágil","agitar","agonía","agosto","agotar","agregar","agrio","agua","agudo","águila","aguja","ahogo","ahorro","aire","aislar","ajedrez","ajeno","ajuste","alacrán","alambre","alarma","alba","álbum","alcalde","aldea","alegre","alejar","alerta","aleta","alfiler","alga","algodón","aliado","aliento","alivio","alma","almeja","almíbar","altar","alteza","altivo","alto","altura","alumno","alzar","amable","amante","amapola","amargo","amasar","ámbar","ámbito","ameno","amigo","amistad","amor","amparo","amplio","ancho","anciano","ancla","andar","andén","anemia","ángulo","anillo","ánimo","anís","anotar","antena","antiguo","antojo","anual","anular","anuncio","añadir","añejo","año","apagar","aparato","apetito","apio","aplicar","apodo","aporte","apoyo","aprender","aprobar","apuesta","apuro","arado","araña","arar","árbitro","árbol","arbusto","archivo","arco","arder","ardilla","arduo","área","árido","aries","armonía","arnés","aroma","arpa","arpón","arreglo","arroz","arruga","arte","artista","asa","asado","asalto","ascenso","asegurar","aseo","asesor","asiento","asilo","asistir","asno","asombro","áspero","astilla","astro","astuto","asumir","asunto","atajo","ataque","atar","atento","ateo","ático","atleta","átomo","atraer","atroz","atún","audaz","audio","auge","aula","aumento","ausente","autor","aval","avance","avaro","ave","avellana","avena","avestruz","avión","aviso","ayer","ayuda","ayuno","azafrán","azar","azote","azúcar","azufre","azul","baba","babor","bache","bahía","baile","bajar","balanza","balcón","balde","bambú","banco","banda","baño","barba","barco","barniz","barro","báscula","bastón","basura","batalla","batería","batir","batuta","baúl","bazar","bebé","bebida","bello","besar","beso","bestia","bicho","bien","bingo","blanco","bloque","blusa","boa","bobina","bobo","boca","bocina","boda","bodega","boina","bola","bolero","bolsa","bomba","bondad","bonito","bono","bonsái","borde","borrar","bosque","bote","botín","bóveda","bozal","bravo","brazo","brecha","breve","brillo","brinco","brisa","broca","broma","bronce","brote","bruja","brusco","bruto","buceo","bucle","bueno","buey","bufanda","bufón","búho","buitre","bulto","burbuja","burla","burro","buscar","butaca","buzón","caballo","cabeza","cabina","cabra","cacao","cadáver","cadena","caer","café","caída","caimán","caja","cajón","cal","calamar","calcio","caldo","calidad","calle","calma","calor","calvo","cama","cambio","camello","camino","campo","cáncer","candil","canela","canguro","canica","canto","caña","cañón","caoba","caos","capaz","capitán","capote","captar","capucha","cara","carbón","cárcel","careta","carga","cariño","carne","carpeta","carro","carta","casa","casco","casero","caspa","castor","catorce","catre","caudal","causa","cazo","cebolla","ceder","cedro","celda","célebre","celoso","célula","cemento","ceniza","centro","cerca","cerdo","cereza","cero","cerrar","certeza","césped","cetro","chacal","chaleco","champú","chancla","chapa","charla","chico","chiste","chivo","choque","choza","chuleta","chupar","ciclón","ciego","cielo","cien","cierto","cifra","cigarro","cima","cinco","cine","cinta","ciprés","circo","ciruela","cisne","cita","ciudad","clamor","clan","claro","clase","clave","cliente","clima","clínica","cobre","cocción","cochino","cocina","coco","código","codo","cofre","coger","cohete","cojín","cojo","cola","colcha","colegio","colgar","colina","collar","colmo","columna","combate","comer","comida","cómodo","compra","conde","conejo","conga","conocer","consejo","contar","copa","copia","corazón","corbata","corcho","cordón","corona","correr","coser","cosmos","costa","cráneo","cráter","crear","crecer","creído","crema","cría","crimen","cripta","crisis","cromo","crónica","croqueta","crudo","cruz","cuadro","cuarto","cuatro","cubo","cubrir","cuchara","cuello","cuento","cuerda","cuesta","cueva","cuidar","culebra","culpa","culto","cumbre","cumplir","cuna","cuneta","cuota","cupón","cúpula","curar","curioso","curso","curva","cutis","dama","danza","dar","dardo","dátil","deber","débil","década","decir","dedo","defensa","definir","dejar","delfín","delgado","delito","demora","denso","dental","deporte","derecho","derrota","desayuno","deseo","desfile","desnudo","destino","desvío","detalle","detener","deuda","día","diablo","diadema","diamante","diana","diario","dibujo","dictar","diente","dieta","diez","difícil","digno","dilema","diluir","dinero","directo","dirigir","disco","diseño","disfraz","diva","divino","doble","doce","dolor","domingo","don","donar","dorado","dormir","dorso","dos","dosis","dragón","droga","ducha","duda","duelo","dueño","dulce","dúo","duque","durar","dureza","duro","ébano","ebrio","echar","eco","ecuador","edad","edición","edificio","editor","educar","efecto","eficaz","eje","ejemplo","elefante","elegir","elemento","elevar","elipse","élite","elixir","elogio","eludir","embudo","emitir","emoción","empate","empeño","empleo","empresa","enano","encargo","enchufe","encía","enemigo","enero","enfado","enfermo","engaño","enigma","enlace","enorme","enredo","ensayo","enseñar","entero","entrar","envase","envío","época","equipo","erizo","escala","escena","escolar","escribir","escudo","esencia","esfera","esfuerzo","espada","espejo","espía","esposa","espuma","esquí","estar","este","estilo","estufa","etapa","eterno","ética","etnia","evadir","evaluar","evento","evitar","exacto","examen","exceso","excusa","exento","exigir","exilio","existir","éxito","experto","explicar","exponer","extremo","fábrica","fábula","fachada","fácil","factor","faena","faja","falda","fallo","falso","faltar","fama","familia","famoso","faraón","farmacia","farol","farsa","fase","fatiga","fauna","favor","fax","febrero","fecha","feliz","feo","feria","feroz","fértil","fervor","festín","fiable","fianza","fiar","fibra","ficción","ficha","fideo","fiebre","fiel","fiera","fiesta","figura","fijar","fijo","fila","filete","filial","filtro","fin","finca","fingir","finito","firma","flaco","flauta","flecha","flor","flota","fluir","flujo","flúor","fobia","foca","fogata","fogón","folio","folleto","fondo","forma","forro","fortuna","forzar","fosa","foto","fracaso","frágil","franja","frase","fraude","freír","freno","fresa","frío","frito","fruta","fuego","fuente","fuerza","fuga","fumar","función","funda","furgón","furia","fusil","fútbol","futuro","gacela","gafas","gaita","gajo","gala","galería","gallo","gamba","ganar","gancho","ganga","ganso","garaje","garza","gasolina","gastar","gato","gavilán","gemelo","gemir","gen","género","genio","gente","geranio","gerente","germen","gesto","gigante","gimnasio","girar","giro","glaciar","globo","gloria","gol","golfo","goloso","golpe","goma","gordo","gorila","gorra","gota","goteo","gozar","grada","gráfico","grano","grasa","gratis","grave","grieta","grillo","gripe","gris","grito","grosor","grúa","grueso","grumo","grupo","guante","guapo","guardia","guerra","guía","guiño","guion","guiso","guitarra","gusano","gustar","haber","hábil","hablar","hacer","hacha","hada","hallar","hamaca","harina","haz","hazaña","hebilla","hebra","hecho","helado","helio","hembra","herir","hermano","héroe","hervir","hielo","hierro","hígado","higiene","hijo","himno","historia","hocico","hogar","hoguera","hoja","hombre","hongo","honor","honra","hora","hormiga","horno","hostil","hoyo","hueco","huelga","huerta","hueso","huevo","huida","huir","humano","húmedo","humilde","humo","hundir","huracán","hurto","icono","ideal","idioma","ídolo","iglesia","iglú","igual","ilegal","ilusión","imagen","imán","imitar","impar","imperio","imponer","impulso","incapaz","índice","inerte","infiel","informe","ingenio","inicio","inmenso","inmune","innato","insecto","instante","interés","íntimo","intuir","inútil","invierno","ira","iris","ironía","isla","islote","jabalí","jabón","jamón","jarabe","jardín","jarra","jaula","jazmín","jefe","jeringa","jinete","jornada","joroba","joven","joya","juerga","jueves","juez","jugador","jugo","juguete","juicio","junco","jungla","junio","juntar","júpiter","jurar","justo","juvenil","juzgar","kilo","koala","labio","lacio","lacra","lado","ladrón","lagarto","lágrima","laguna","laico","lamer","lámina","lámpara","lana","lancha","langosta","lanza","lápiz","largo","larva","lástima","lata","látex","latir","laurel","lavar","lazo","leal","lección","leche","lector","leer","legión","legumbre","lejano","lengua","lento","leña","león","leopardo","lesión","letal","letra","leve","leyenda","libertad","libro","licor","líder","lidiar","lienzo","liga","ligero","lima","límite","limón","limpio","lince","lindo","línea","lingote","lino","linterna","líquido","liso","lista","litera","litio","litro","llaga","llama","llanto","llave","llegar","llenar","llevar","llorar","llover","lluvia","lobo","loción","loco","locura","lógica","logro","lombriz","lomo","lonja","lote","lucha","lucir","lugar","lujo","luna","lunes","lupa","lustro","luto","luz","maceta","macho","madera","madre","maduro","maestro","mafia","magia","mago","maíz","maldad","maleta","malla","malo","mamá","mambo","mamut","manco","mando","manejar","manga","maniquí","manjar","mano","manso","manta","mañana","mapa","máquina","mar","marco","marea","marfil","margen","marido","mármol","marrón","martes","marzo","masa","máscara","masivo","matar","materia","matiz","matriz","máximo","mayor","mazorca","mecha","medalla","medio","médula","mejilla","mejor","melena","melón","memoria","menor","mensaje","mente","menú","mercado","merengue","mérito","mes","mesón","meta","meter","método","metro","mezcla","miedo","miel","miembro","miga","mil","milagro","militar","millón","mimo","mina","minero","mínimo","minuto","miope","mirar","misa","miseria","misil","mismo","mitad","mito","mochila","moción","moda","modelo","moho","mojar","molde","moler","molino","momento","momia","monarca","moneda","monja","monto","moño","morada","morder","moreno","morir","morro","morsa","mortal","mosca","mostrar","motivo","mover","móvil","mozo","mucho","mudar","mueble","muela","muerte","muestra","mugre","mujer","mula","muleta","multa","mundo","muñeca","mural","muro","músculo","museo","musgo","música","muslo","nácar","nación","nadar","naipe","naranja","nariz","narrar","nasal","natal","nativo","natural","náusea","naval","nave","navidad","necio","néctar","negar","negocio","negro","neón","nervio","neto","neutro","nevar","nevera","nicho","nido","niebla","nieto","niñez","niño","nítido","nivel","nobleza","noche","nómina","noria","norma","norte","nota","noticia","novato","novela","novio","nube","nuca","núcleo","nudillo","nudo","nuera","nueve","nuez","nulo","número","nutria","oasis","obeso","obispo","objeto","obra","obrero","observar","obtener","obvio","oca","ocaso","océano","ochenta","ocho","ocio","ocre","octavo","octubre","oculto","ocupar","ocurrir","odiar","odio","odisea","oeste","ofensa","oferta","oficio","ofrecer","ogro","oído","oír","ojo","ola","oleada","olfato","olivo","olla","olmo","olor","olvido","ombligo","onda","onza","opaco","opción","ópera","opinar","oponer","optar","óptica","opuesto","oración","orador","oral","órbita","orca","orden","oreja","órgano","orgía","orgullo","oriente","origen","orilla","oro","orquesta","oruga","osadía","oscuro","osezno","oso","ostra","otoño","otro","oveja","óvulo","óxido","oxígeno","oyente","ozono","pacto","padre","paella","página","pago","país","pájaro","palabra","palco","paleta","pálido","palma","paloma","palpar","pan","panal","pánico","pantera","pañuelo","papá","papel","papilla","paquete","parar","parcela","pared","parir","paro","párpado","parque","párrafo","parte","pasar","paseo","pasión","paso","pasta","pata","patio","patria","pausa","pauta","pavo","payaso","peatón","pecado","pecera","pecho","pedal","pedir","pegar","peine","pelar","peldaño","pelea","peligro","pellejo","pelo","peluca","pena","pensar","peñón","peón","peor","pepino","pequeño","pera","percha","perder","pereza","perfil","perico","perla","permiso","perro","persona","pesa","pesca","pésimo","pestaña","pétalo","petróleo","pez","pezuña","picar","pichón","pie","piedra","pierna","pieza","pijama","pilar","piloto","pimienta","pino","pintor","pinza","piña","piojo","pipa","pirata","pisar","piscina","piso","pista","pitón","pizca","placa","plan","plata","playa","plaza","pleito","pleno","plomo","pluma","plural","pobre","poco","poder","podio","poema","poesía","poeta","polen","policía","pollo","polvo","pomada","pomelo","pomo","pompa","poner","porción","portal","posada","poseer","posible","poste","potencia","potro","pozo","prado","precoz","pregunta","premio","prensa","preso","previo","primo","príncipe","prisión","privar","proa","probar","proceso","producto","proeza","profesor","programa","prole","promesa","pronto","propio","próximo","prueba","público","puchero","pudor","pueblo","puerta","puesto","pulga","pulir","pulmón","pulpo","pulso","puma","punto","puñal","puño","pupa","pupila","puré","quedar","queja","quemar","querer","queso","quieto","química","quince","quitar","rábano","rabia","rabo","ración","radical","raíz","rama","rampa","rancho","rango","rapaz","rápido","rapto","rasgo","raspa","rato","rayo","raza","razón","reacción","realidad","rebaño","rebote","recaer","receta","rechazo","recoger","recreo","recto","recurso","red","redondo","reducir","reflejo","reforma","refrán","refugio","regalo","regir","regla","regreso","rehén","reino","reír","reja","relato","relevo","relieve","relleno","reloj","remar","remedio","remo","rencor","rendir","renta","reparto","repetir","reposo","reptil","res","rescate","resina","respeto","resto","resumen","retiro","retorno","retrato","reunir","revés","revista","rey","rezar","rico","riego","rienda","riesgo","rifa","rígido","rigor","rincón","riñón","río","riqueza","risa","ritmo","rito","rizo","roble","roce","rociar","rodar","rodeo","rodilla","roer","rojizo","rojo","romero","romper","ron","ronco","ronda","ropa","ropero","rosa","rosca","rostro","rotar","rubí","rubor","rudo","rueda","rugir","ruido","ruina","ruleta","rulo","rumbo","rumor","ruptura","ruta","rutina","sábado","saber","sabio","sable","sacar","sagaz","sagrado","sala","saldo","salero","salir","salmón","salón","salsa","salto","salud","salvar","samba","sanción","sandía","sanear","sangre","sanidad","sano","santo","sapo","saque","sardina","sartén","sastre","satán","sauna","saxofón","sección","seco","secreto","secta","sed","seguir","seis","sello","selva","semana","semilla","senda","sensor","señal","señor","separar","sepia","sequía","ser","serie","sermón","servir","sesenta","sesión","seta","setenta","severo","sexo","sexto","sidra","siesta","siete","siglo","signo","sílaba","silbar","silencio","silla","símbolo","simio","sirena","sistema","sitio","situar","sobre","socio","sodio","sol","solapa","soldado","soledad","sólido","soltar","solución","sombra","sondeo","sonido","sonoro","sonrisa","sopa","soplar","soporte","sordo","sorpresa","sorteo","sostén","sótano","suave","subir","suceso","sudor","suegra","suelo","sueño","suerte","sufrir","sujeto","sultán","sumar","superar","suplir","suponer","supremo","sur","surco","sureño","surgir","susto","sutil","tabaco","tabique","tabla","tabú","taco","tacto","tajo","talar","talco","talento","talla","talón","tamaño","tambor","tango","tanque","tapa","tapete","tapia","tapón","taquilla","tarde","tarea","tarifa","tarjeta","tarot","tarro","tarta","tatuaje","tauro","taza","tazón","teatro","techo","tecla","técnica","tejado","tejer","tejido","tela","teléfono","tema","temor","templo","tenaz","tender","tener","tenis","tenso","teoría","terapia","terco","término","ternura","terror","tesis","tesoro","testigo","tetera","texto","tez","tibio","tiburón","tiempo","tienda","tierra","tieso","tigre","tijera","tilde","timbre","tímido","timo","tinta","tío","típico","tipo","tira","tirón","titán","títere","título","tiza","toalla","tobillo","tocar","tocino","todo","toga","toldo","tomar","tono","tonto","topar","tope","toque","tórax","torero","tormenta","torneo","toro","torpedo","torre","torso","tortuga","tos","tosco","toser","tóxico","trabajo","tractor","traer","tráfico","trago","traje","tramo","trance","trato","trauma","trazar","trébol","tregua","treinta","tren","trepar","tres","tribu","trigo","tripa","triste","triunfo","trofeo","trompa","tronco","tropa","trote","trozo","truco","trueno","trufa","tubería","tubo","tuerto","tumba","tumor","túnel","túnica","turbina","turismo","turno","tutor","ubicar","úlcera","umbral","unidad","unir","universo","uno","untar","uña","urbano","urbe","urgente","urna","usar","usuario","útil","utopía","uva","vaca","vacío","vacuna","vagar","vago","vaina","vajilla","vale","válido","valle","valor","válvula","vampiro","vara","variar","varón","vaso","vecino","vector","vehículo","veinte","vejez","vela","velero","veloz","vena","vencer","venda","veneno","vengar","venir","venta","venus","ver","verano","verbo","verde","vereda","verja","verso","verter","vía","viaje","vibrar","vicio","víctima","vida","vídeo","vidrio","viejo","viernes","vigor","vil","villa","vinagre","vino","viñedo","violín","viral","virgo","virtud","visor","víspera","vista","vitamina","viudo","vivaz","vivero","vivir","vivo","volcán","volumen","volver","voraz","votar","voto","voz","vuelo","vulgar","yacer","yate","yegua","yema","yerno","yeso","yodo","yoga","yogur","zafiro","zanja","zapato","zarza","zona","zorro","zumo","zurdo"]
},{}],122:[function(require,module,exports){
module.exports=["abajur","abaküs","abartı","abdal","abdest","abiye","abluka","abone","absorbe","absürt","acayip","acele","acemi","açıkgöz","adalet","adam","adezyon","adisyon","adliye","adres","afacan","afili","afiş","afiyet","aforizm","afra","ağaç","ağır","ahbap","ahkam","ahlak","ahtapot","aidat","aile","ajan","akademi","akarsu","akbaş","akciğer","akdeniz","akıbet","akıl","akıntı","akide","akrep","akrobasi","aksiyon","akşam","aktif","aktör","aktris","akustik","alaca","albüm","alçak","aldanma","aleni","alet","alfabe","algılama","alıngan","alkış","alkol","alpay","alperen","altın","altüst","altyapı","alyuvar","amade","amatör","amazon","ambalaj","amblem","ambulans","amca","amel","amigo","amir","amiyane","amorti","ampul","anadolu","anahtar","anakonda","anaokul","anapara","anarşi","anatomi","anayasa","anekdot","anestezi","angaje","anka","anket","anlamlı","anne","anomali","anonim","anten","antlaşma","apse","araba","aracı","araf","arbede","arda","arefe","arena","argo","argüman","arkadaş","armoni","aroma","arsa","arsız","artı","artist","aruz","asansör","asayiş","asfalt","asgari","asil","asker","askı","aslan","asosyal","astsubay","asya","aşçı","aşırı","aşure","atabey","ataman","ateş","atmaca","atmosfer","atom","atölye","avcı","avdet","avize","avlu","avokado","avrupa","avukat","ayaz","ayçiçeği","aydın","aygıt","ayna","ayran","ayrıntı","azim","baca","bagaj","bağlantı","bahadır","bahçe","baki","bakkal","baklava","bakteri","balçık","balina","balo","balta","bant","banyo","bardak","barış","başbuğ","başıboş","başkan","başlık","bavul","bayındır","baykuş","bazlama","bedel","begüm","bekçi","bekle","belge","belki","bencil","benek","bengi","benzer","berjer","berk","bermuda","berrak","beşik","beton","beyin","beyoğlu","bıçak","biberiye","bidon","biftek","bihaber","bikini","bilezik","bilinç","bilye","bina","binbaşı","binyıl","bisiklet","bisküvi","bitki","bizzat","bodrum","boğaz","bohça","bolero","boncuk","bonfile","borsa","boru","bostan","boşboğaz","botanik","boya","boykot","boynuz","bozgun","bozkır","bölüm","börek","buçuk","bugün","buğday","buhar","buhran","bulvar","buram","burçak","burs","burun","butik","buzdağı","buzkıran","bücür","büfe","bülten","bütçe","bütün","büyük","cacık","cadı","cahil","cambaz","canhıraş","casus","cazibe","cehalet","cehennem","ceket","cemre","cenin","cennet","cepken","cerrah","cesur","cetvel","cevher","ceylan","cılız","cıva","cilt","cisim","ciyak","coğrafya","cömert","cumba","cüzdan","çabucak","çadır","çağdaş","çağlayan","çağrı","çakmak","çalışkan","çamaşır","çapa","çaput","çarık","çarpan","çarşaf","çayhane","çekirdek","çelebi","çember","çenet","çengel","çerçeve","çerez","çeşit","çeşme","çete","çevre","çeyiz","çeyrek","çığır","çılgın","çıngırak","çift","çiğdem","çikolata","çilek","çimen","çivi","çoban","çocuk","çokgen","çomak","çorba","çözelti","çubuk","çukur","çuval","çürük","dağbaşı","dağılım","daktilo","daldırış","dalga","dalkavuk","damak","damıtma","damla","dana","dandik","danışman","daniska","dantel","dargeçit","darphane","davet","dayı","defter","değer","değirmen","dehşet","delgeç","demir","deneyim","denge","depo","deprem","derdest","dere","derhal","derman","dernek","derviş","desen","destan","dışarı","dışbükey","dijital","dikbaşlı","dilekçe","dimağ","dinamik","dindar","dinleme","dinozor","dipçik","dipnot","direniş","dirsek","disiplin","disk","divriği","dizüstü","dobra","dodurga","doğalgaz","doktor","doküman","dolap","donanım","dondurma","donör","doruk","dosdoğru","dost","dosya","dozer","döküm","dönence","dörtyol","dövme","dram","dublaj","durum","duvak","duyarga","duyma","duyuru","düğme","düğüm","dükkan","dünür","düpedüz","dürbün","düşünür","düzayak","düzeltme","ebeveyn","ebru","ecel","ecnebi","ecza","edat","edilgen","efendi","efor","efsane","egemen","egzersiz","eğrelti","ekarte","ekip","eklem","ekmek","ekol","ekonomi","ekose","ekran","ekvator","elaman","elastik","elbet","elbise","elçi","eldiven","elebaşı","eleştiri","elma","eloğlu","elveda","emare","emekçi","emisyon","emniyet","empati","emsal","emzik","endüstri","enerji","engebe","engin","enişte","enkaz","entari","entegre","entrika","enzim","erdem","ergen","erguvan","erkek","erozyon","ertesi","erzak","esaret","esenlik","eser","eski","esnek","eşarp","eşofman","eşraf","eşya","eşzaman","etik","etken","etkinlik","etüt","evet","evire","evrak","evrim","eyalet","eyvah","ezber","fabrika","fanatik","fanus","fason","fasulye","fatih","fatura","fauna","favori","fayans","fayton","fazıl","fazilet","federal","felsefe","fener","feribot","fersah","fesih","festival","feveran","feza","fıçı","fıldır","fındık","fırça","fırsat","fırtına","fıtık","fidan","fidye","figür","fihrist","fikir","fildişi","filo","filtre","fincan","firuze","fitil","fiyaka","fizik","flaş","flüt","fosil","fren","fukara","futbol","garabet","gariban","garnitür","gazi","gece","gedik","gelenek","gelin","gemi","genç","geniş","geometri","gerçek","gevrek","gezegen","gezgin","geziyolu","gıcık","gıda","gıybet","girdap","girişim","gitar","giyecek","giysi","gizem","gofret","goril","göbek","göçebe","göğüs","gökdelen","gökmen","gökyüzü","gölge","gömlek","gönül","görenek","görkemli","görsel","gösteri","gövde","gözaltı","gözcü","gözdağı","gözleme","gözyaşı","grup","gurbet","gusül","gübre","güfte","gümüş","günaydın","güncel","gündüz","güneş","günyüzü","gürbüz","güvercin","güzel","haber","hacamat","hacim","hademe","hafız","hafriyat","hafta","hakan","hakem","hakikat","haksever","halı","hançer","hane","hangar","hapis","hapşırık","harf","haseki","hasret","hatun","havuç","haylaz","haysiyet","hayvan","hedef","hektar","hemen","hemfikir","hendek","hepsi","hergele","herhangi","hesap","heyecan","heykel","hezimet","hıçkırık","hızölçer","hicviye","hikaye","hikmet","hile","hisse","hobi","hoca","horlama","hormon","hoşbeş","hoşgörü","hoyrat","hörgüç","höyük","hudut","hukuk","hunhar","hurda","huysuz","huzur","hücum","hükümet","hünkar","hüviyet","ırmak","ısıölçer","ısıtıcı","ıspanak","ısrar","ışıldak","ızdırap","ızgara","ibadet","icat","içbükey","içecek","içgüdü","içsel","idman","iftihar","iğne","ihanet","ihbar","ihdas","ihmal","ihracat","ihsan","ikilem","ikindi","ikircik","iklim","iksir","iktibas","ilaç","ilçe","ileri","iletişim","ilgi","ilhak","ilkbahar","ilkokul","ilmek","imkan","imleç","imsak","imtihan","imza","ince","inkar","inşa","ipek","ipucu","irade","irfan","irmik","isabet","iskele","israf","isyan","işçi","işgal","işgüzar","işlem","itibar","itiraf","ivedi","ivme","iyileşme","iyimser","izbandut","izci","izdiham","izin","jakoben","jandarma","jargon","kabadayı","kablo","kabus","kaçamak","kadeh","kadın","kadraj","kafa","kafkas","kağıt","kağnı","kahkaha","kahraman","kahvaltı","kakül","kaldırım","kale","kalibre","kalkan","kalpak","kamış","kamyon","kanat","kandaş","kanepe","kanser","kanun","kaos","kapı","kaplıca","kaptan","karanlık","kardeş","karga","karınca","karmaşa","karşıt","kasırga","kask","kasvet","katkı","katman","kavram","kaygan","kaynakça","kayyum","kedi","kehanet","kekik","kelebek","kenar","kerkenez","kerpiç","kesirli","kesmece","kestane","keşkek","ketçap","keyfiyet","kıble","kıdemli","kılavuz","kılçık","kılıf","kıraç","kırmızı","kırsal","kısayol","kısım","kıskanç","kısmet","kışla","kıvanç","kıvılcım","kıvrık","kıyafet","kıymetli","kızak","kızılcık","kibar","kinaye","kira","kiremit","kirli","kirpik","kişisel","kitap","koçbaşı","kodaman","koğuş","kokteyl","kolaycı","kolbastı","kolonya","koltuk","kolye","kombine","komedyen","komiser","komposto","komşu","komuta","konak","konfor","koni","konsül","kopya","korkusuz","korna","korse","korunak","korvet","kostüm","koşul","koyu","kozmik","köfte","kökensel","köprücük","köpük","kördüğüm","körfez","köstebek","köşegen","kötü","kravat","kriter","kuantum","kudurma","kuluçka","kulübe","kumanya","kumbara","kumlu","kumpir","kumral","kundura","kupa","kupkuru","kuramsal","kurbağa","kurdele","kurgu","kurmay","kurşun","kurtuluş","kurultay","kurye","kusursuz","kuşak","kuşbaşı","kuşkulu","kutlama","kutsal","kutup","kuver","kuyruk","kuzey","kuzgun","küçük","külçe","külfet","külliye","kültürel","kümes","künefe","küresel","kütle","lahana","lahmacun","lamba","lansman","lavaş","layık","leğen","levent","leziz","lezzet","lider","likide","liman","liste","litre","liyakat","lodos","lokanta","lokman","lokum","lunapark","lütfen","lüzum","nokta","mabet","macera","macun","madalya","madde","madem","mağara","mağdur","mağfiret","mağlup","mahalle","mahcup","mahir","mahkeme","mahlas","mahrum","mahsul","makas","makbuz","makine","makro","maksat","makul","maliye","manav","mangal","manidar","manken","mantık","manzara","mareşal","margarin","marifet","market","marmelat","masaüstü","masmavi","masraf","masum","matah","materyal","matrak","maval","mavra","maydanoz","mayhoş","maytap","mazbata","mazeret","mazlum","mazot","mazur","meblağ","mebus","mecaz","mecbur","meclis","mecmua","mecnun","meçhul","medeni","mehtap","mekanik","melodi","meltem","memur","mendil","menekşe","menteşe","meraklı","mercek","merdiven","merhaba","merinos","merkez","mermi","mert","mesafe","mesele","mesken","meslek","meşale","meşgul","meşhur","metafor","metin","metre","mevcut","mevkidaş","meydan","meyil","meyve","meziyet","mezun","mıknatıs","mısra","mızıka","miğfer","mihrak","mikrofon","miktar","milat","milli","mimar","minare","mineral","minik","minyon","mirliva","misafir","miskin","miting","miyop","mizah","mobilya","model","monitör","morötesi","motive","motor","mozaik","muavin","mucize","muhafız","muhteşem","mukayese","mumya","musluk","muşamba","mutabık","mutfak","mutlu","muzaffer","muzdarip","mübarek","mücadele","müdür","müfredat","müftü","mühendis","mühim","mühlet","mükemmel","mülk","mümkün","mümtaz","müsrif","müstesna","müşahit","müşteri","mütercim","müthiş","müze","müzik","nabız","nadas","nadir","nahoş","nakarat","nakış","nalbur","namlu","namus","nankör","nargile","narkoz","nasıl","nasip","naylon","nazar","nazım","nazik","neden","nefes","negatif","neon","neptün","nerede","nesil","nesnel","neşeli","netice","nevresim","neyse","neyzen","nezaket","nezih","nezle","nicel","nilüfer","nimet","nisan","nispet","nitekim","nizam","nohut","noksan","normal","nostalji","noter","nöbet","numara","numune","nutuk","nüfus","obabaşı","obez","obje","ocak","odun","ofansif","ofis","oğlak","oğuz","okçu","oklava","oksijen","okul","okumuş","okutman","okuyucu","okyanus","olağan","olanak","olası","olay","olgun","olimpik","olumlu","omlet","omurga","onarım","onursal","opera","optik","oral","orantı","ordu","organik","orijin","orkide","orman","orta","oruç","otağ","otantik","otel","otoban","otogar","otomobil","otonom","otopark","otorite","otoyol","oturum","oyuk","oyuncak","ozan","ödeme","ödenek","ödev","ödül","ödünç","öfke","öğlen","öğrenci","öğün","öğütücü","öksürük","ölçme","ölçü","ölümsüz","ömür","önayak","öncü","önder","önem","önerge","öngörü","önlük","önsezi","öpücük","ördek","örgü","örtbas","örtme","örtü","örümcek","örüntü","öteberi","öteki","övünç","öykü","öyleyse","özçekim","özdeyiş","özel","özenti","özerk","özgürlük","özlem","özlü","özne","özsever","özümseme","özür","özveri","pabuç","padişah","palamut","palmiye","palto","palyaço","pamuk","panayır","pancar","panda","panel","panik","panjur","pankart","pano","pansuman","pantolon","panzehir","papatya","papyon","paraşüt","parça","pardösü","parfüm","parıltı","parkur","parmak","parodi","parsel","partner","pasaport","pasif","paskalya","pastırma","paşa","patates","paten","patika","patlıcan","patolog","patron","payanda","paydaş","payidar","paylaşma","paytak","peçete","pedal","peder","pehlivan","pekala","pekmez","pelerin","pelikan","pelüş","pembe","pena","pencere","pense","perçin","perde","pergel","perişan","peron","personel","perşembe","peruk","pervane","pespaye","pestil","peşin","petek","petrol","petunya","peynir","peyzaj","pınar","pırasa","pırlanta","pide","pikap","piknik","pilav","piliç","pilot","pipet","pipo","piramit","pirinç","pirzola","pist","pişik","pişman","piyasa","piyes","plaj","plaket","planlama","platform","plazma","podyum","poğaça","polat","polen","politika","pompa","popüler","porselen","portakal","posa","poster","poşet","poyraz","pozitif","pranga","pratik","prenses","prim","problem","profil","program","proje","protokol","prova","puan","pudra","pusula","püre","pürüz","püstül","püsür","racon","radar","radikal","radyo","rafadan","rafine","rağbet","rahat","rahle","rakam","raket","rakip","rakun","ralli","rampa","randevu","ranza","rapor","rastgele","rasyonel","razı","realite","reçine","refah","referans","refik","reform","rehber","rehin","reis","rekabet","reklam","rekor","rektör","renk","resim","resmen","restoran","retorik","revaç","revize","reyon","rezalet","rezerv","rezil","rıhtım","rıza","ritim","ritüel","rivayet","robot","roman","rota","rozet","röportaj","rötar","ruble","ruhban","ruhsat","rulet","rulo","runik","rutin","rutubet","rüşvet","rütbe","rüya","rüzgar","sabah","sabıka","sabit","sabun","saçma","sade","sadık","safahat","safdil","safkan","sağanak","sağduyu","sağlam","saha","sahiden","sahne","sakal","sakız","sakin","saklama","saksağan","salamura","salça","salgı","salınım","salkım","salon","saltanat","sanatçı","sancak","sandalye","saniye","saplantı","sapsız","saray","sarışın","sarkık","sarmaşık","satır","savaşım","savunma","saydam","sayfa","saygın","sayısal","sebep","seçenek","seçim","seçkin","seçmen","seda","sedir","sedye","sefer","sehpa","sekizgen","selektör","selvi","semavi","sembol","seminer","senaryo","sendika","senkron","sensör","sentez","sepet","seramik","serbest","serdar","seremoni","sergi","serhat","serin","sermaye","serpuş","sersem","serüven","servis","sesli","sesteş","sevap","seviye","seyahat","seyirci","sezon","sıcak","sıfat","sıhhi","sınanma","sınır","sıradan","sırdaş","sırma","sırtüstü","sızgıt","siftah","sigorta","sihirbaz","silah","silecek","silindir","simetri","simge","simit","sincap","sindirim","sinema","sinirli","sipariş","sirke","siroz","sistem","sivilce","siyasi","slogan","soba","sofra","soğuk","sohbet","sokak","solfej","solunum","somut","sonbahar","sonraki","sonsuz","sorunsuz","sosyete","soyağacı","soydaş","soygun","soytarı","söğüş","sömürge","sönük","söylem","sözcük","sözde","spatula","spektrum","spiker","spiral","sponsor","sporcu","sprey","stabil","statü","stok","stopaj","strateji","subay","sucuk","suçüstü","suhulet","sulama","sungur","sunucu","surat","susam","suskun","sükse","sükut","sülale","sünger","süpürge","sürahi","süreç","sürgün","sürüm","süsleme","sütanne","sütlaç","sütun","süvari","şahane","şahbaz","şahit","şahsiyet","şakıma","şaklaban","şakrak","şamar","şampiyon","şanslı","şantiye","şapka","şarkıcı","şartname","şaşırma","şaşkın","şatafat","şayet","şebeke","şefkat","şeftali","şehir","şehvet","şeker","şekil","şelale","şema","şemsiye","şerbet","şeref","şerit","şımarık","şıpıdık","şifre","şimdi","şimşek","şipşak","şirin","şişe","şişirme","şofben","şöhret","şölen","şüphe","tabaka","tabela","tabure","tadilat","taharet","tahıl","tahkim","tahlil","tahmin","tahrifat","tahsilat","tahta","taklit","takoz","taksici","taktik","takvim","talebe","talip","tamamen","tamirci","tampon","tamtakır","tandır","tanecik","tanıtım","tanrı","tansiyon","tapan","tapınak","taptaze","tapu","tarafgir","tarhana","tarım","tarih","tarla","tartak","tarumar","tasarım","tasdik","taslak","tastamam","taşeron","taşınmaz","taşra","tatava","tatbikat","tatil","tatlı","tavsiye","tavşan","tavuk","taze","taziye","tazminat","tebeşir","tebrik","tecrübe","teçhizat","tedarik","tedbir","teftiş","teğet","teğmen","tehdit","tehlike","tekdüze","tekerlek","tekme","teknik","tekrar","telef","telsiz","telve","temas","tembel","temiz","temkin","tempo","temsilci","tendon","teneke","tenha","tenkit","tepegöz","tepki","terazi","terbiye","tercih","tereyağı","terfi","terim","terminal","tersane","tertip","tesadüf","tescil","tesir","teslimat","tespit","testere","teşekkür","teşhir","teşrif","teşvik","teyze","tezahür","tezgah","tıbbi","tıkaç","tıkışık","tıknaz","tılsım","tıpkı","tıraş","tırışka","tırmanış","tırnak","tırpan","tıslama","ticaret","tilki","tiryaki","titreşim","tohum","tokat","tolere","tomar","tombak","tomurcuk","topaç","toplum","toprak","toptan","toraman","torpido","tortu","tosbağa","toynak","tören","trafik","trajedi","tramvay","transfer","tribün","triko","tugay","tuğla","tuğrul","tuhaf","tulumba","tunç","turan","turkuaz","turnusol","turşu","turuncu","tutanak","tutkal","tutsak","tutum","tuyuğ","tuzlu","tüccar","tüfek","tükenmez","tülbent","tümleç","tünel","türbin","türev","türk","tüzük","ucube","ucuz","uçak","uçurtma","ufuk","uğrak","uğur","ukala","ulaşım","ulema","ulus","ulvi","umursama","umut","unutkan","uslu","ustabaşı","ustura","usul","utangaç","uyanık","uyarı","uydu","uygar","uygulama","uykusuz","uysal","uyuşma","uzantı","uzay","uzgören","uzlaşma","uzman","uzun","ücra","ücret","üçbudak","üçgen","üçkağıt","üçleme","üfürük","ülke","ümit","üniforma","ünite","ünlem","üretken","ürün","üslup","üstel","üstün","üşengeç","üşüme","ütopya","üvey","üzengi","üzgün","üzüm","vagon","vaka","vakfiye","vakıf","vakit","vakum","vapur","varil","varlık","varsayım","varyemez","vasıta","vasiyet","vatandaş","vazife","vazo","veciz","vefa","vehim","veliaht","veresiye","verimli","verkaç","vernik","vertigo","vesait","vesika","vestiyer","veznedar","vicdan","vilayet","virane","virgül","vişne","vites","vokal","volkan","vurma","vurucu","vücut","yabancı","yabgu","yağış","yağlı","yağmur","yakamoz","yakın","yaklaşık","yalçın","yalıtım","yaman","yanardağ","yangın","yanıt","yankı","yanlış","yansıma","yapay","yapboz","yapımcı","yaprak","yaratık","yarbay","yardım","yargıç","yarıçap","yasemin","yastık","yaşam","yatak","yatırım","yavru","yaygara","yayıncı","yayla","yazılım","yekpare","yekvücut","yelkovan","yelpaze","yemek","yemiş","yengeç","yeniçeri","yeraltı","yerküre","yerleşke","yeryüzü","yeşil","yetenek","yetkili","yığınak","yıkama","yılbaşı","yıldırım","yılkı","yılmaz","yırtıcı","yiğit","yoğurt","yokuş","yolcu","yoldaş","yolgeçen","yolkesen","yolüstü","yordam","yorgan","yorumcu","yosun","yöndeş","yönetim","yönlü","yöntem","yöresel","yörünge","yufka","yukarı","yumruk","yumurta","yuvarlak","yücelme","yükçeker","yüklem","yüksek","yürek","yürütme","yüzde","yüzeysel","yüzgeç","yüzüstü","yüzyıl","zabıta","zafer","zahmet","zambak","zaptiye","zarafet","zaruret","zeka","zekice","zemberek","zemin","zencefil","zeplin","zeytin","zıbın","zılgıt","zımbırtı","zımpara","zıpkın","zigon","zihinsel","zihniyet","zincir","zindan","zirzop","ziyaret","ziynet","zoraki","zorlu","zorunlu","züğürt","zümre"]
},{}],123:[function(require,module,exports){
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __toBinary = /* @__PURE__ */ (() => {
  var table = new Uint8Array(128);
  for (var i = 0; i < 64; i++)
    table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    var n = base64.length, bytes2 = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
    for (var i2 = 0, j = 0; i2 < n; ) {
      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes2[j++] = c0 << 2 | c1 >> 4;
      bytes2[j++] = c1 << 4 | c2 >> 2;
      bytes2[j++] = c2 << 6 | c3;
    }
    return bytes2;
  };
})();

// wasm-binary:./blake2b.wat
var require_blake2b = __commonJS({
  "wasm-binary:./blake2b.wat"(exports2, module2) {
    module2.exports = __toBinary("");
  }
});

// wasm-module:./blake2b.wat
var bytes = require_blake2b();
var compiled = WebAssembly.compile(bytes);
module.exports = async (imports) => {
  const instance = await WebAssembly.instantiate(await compiled, imports);
  return instance.exports;
};

},{}],124:[function(require,module,exports){
var assert = require('nanoassert')
var b4a = require('b4a')

var wasm = null
var wasmPromise = typeof WebAssembly !== "undefined" && require('./blake2b')().then(mod => {
  wasm = mod
})

var head = 64
var freeList = []

module.exports = Blake2b
var BYTES_MIN = module.exports.BYTES_MIN = 16
var BYTES_MAX = module.exports.BYTES_MAX = 64
var BYTES = module.exports.BYTES = 32
var KEYBYTES_MIN = module.exports.KEYBYTES_MIN = 16
var KEYBYTES_MAX = module.exports.KEYBYTES_MAX = 64
var KEYBYTES = module.exports.KEYBYTES = 32
var SALTBYTES = module.exports.SALTBYTES = 16
var PERSONALBYTES = module.exports.PERSONALBYTES = 16

function Blake2b (digestLength, key, salt, personal, noAssert) {
  if (!(this instanceof Blake2b)) return new Blake2b(digestLength, key, salt, personal, noAssert)
  if (!wasm) throw new Error('WASM not loaded. Wait for Blake2b.ready(cb)')
  if (!digestLength) digestLength = 32

  if (noAssert !== true) {
    assert(digestLength >= BYTES_MIN, 'digestLength must be at least ' + BYTES_MIN + ', was given ' + digestLength)
    assert(digestLength <= BYTES_MAX, 'digestLength must be at most ' + BYTES_MAX + ', was given ' + digestLength)
    if (key != null) {
      assert(key instanceof Uint8Array, 'key must be Uint8Array or Buffer')
      assert(key.length >= KEYBYTES_MIN, 'key must be at least ' + KEYBYTES_MIN + ', was given ' + key.length)
      assert(key.length <= KEYBYTES_MAX, 'key must be at least ' + KEYBYTES_MAX + ', was given ' + key.length)
    }
    if (salt != null) {
      assert(salt instanceof Uint8Array, 'salt must be Uint8Array or Buffer')
      assert(salt.length === SALTBYTES, 'salt must be exactly ' + SALTBYTES + ', was given ' + salt.length)
    }
    if (personal != null) {
      assert(personal instanceof Uint8Array, 'personal must be Uint8Array or Buffer')
      assert(personal.length === PERSONALBYTES, 'personal must be exactly ' + PERSONALBYTES + ', was given ' + personal.length)
    }
  }

  if (!freeList.length) {
    freeList.push(head)
    head += 216
  }

  this.digestLength = digestLength
  this.finalized = false
  this.pointer = freeList.pop()
  this._memory = new Uint8Array(wasm.memory.buffer)

  this._memory.fill(0, 0, 64)
  this._memory[0] = this.digestLength
  this._memory[1] = key ? key.length : 0
  this._memory[2] = 1 // fanout
  this._memory[3] = 1 // depth

  if (salt) this._memory.set(salt, 32)
  if (personal) this._memory.set(personal, 48)

  if (this.pointer + 216 > this._memory.length) this._realloc(this.pointer + 216) // we need 216 bytes for the state
  wasm.blake2b_init(this.pointer, this.digestLength)

  if (key) {
    this.update(key)
    this._memory.fill(0, head, head + key.length) // whiteout key
    this._memory[this.pointer + 200] = 128
  }
}

Blake2b.prototype._realloc = function (size) {
  wasm.memory.grow(Math.max(0, Math.ceil(Math.abs(size - this._memory.length) / 65536)))
  this._memory = new Uint8Array(wasm.memory.buffer)
}

Blake2b.prototype.update = function (input) {
  assert(this.finalized === false, 'Hash instance finalized')
  assert(input instanceof Uint8Array, 'input must be Uint8Array or Buffer')

  if (head + input.length > this._memory.length) this._realloc(head + input.length)
  this._memory.set(input, head)
  wasm.blake2b_update(this.pointer, head, head + input.length)
  return this
}

Blake2b.prototype.digest = function (enc) {
  assert(this.finalized === false, 'Hash instance finalized')
  this.finalized = true

  freeList.push(this.pointer)
  wasm.blake2b_final(this.pointer)

  if (!enc || enc === 'binary') {
    return this._memory.slice(this.pointer + 128, this.pointer + 128 + this.digestLength)
  }

  if (typeof enc === 'string') {
    return b4a.toString(this._memory, enc, this.pointer + 128, this.pointer + 128 + this.digestLength)
  }

  assert(enc instanceof Uint8Array && enc.length >= this.digestLength, 'input must be Uint8Array or Buffer')
  for (var i = 0; i < this.digestLength; i++) {
    enc[i] = this._memory[this.pointer + 128 + i]
  }

  return enc
}

// libsodium compat
Blake2b.prototype.final = Blake2b.prototype.digest

Blake2b.WASM = wasm
Blake2b.SUPPORTED = typeof WebAssembly !== 'undefined'

Blake2b.ready = function (cb) {
  if (!cb) cb = noop
  if (!wasmPromise) return cb(new Error('WebAssembly not supported'))
  return wasmPromise.then(() => cb(), cb)
}

Blake2b.prototype.ready = Blake2b.ready

Blake2b.prototype.getPartialHash = function () {
  return this._memory.slice(this.pointer, this.pointer + 216);
}

Blake2b.prototype.setPartialHash = function (ph) {
  this._memory.set(ph, this.pointer);
}

function noop () {}

},{"./blake2b":123,"b4a":102,"nanoassert":390}],125:[function(require,module,exports){
var assert = require('nanoassert')
var b2wasm = require('blake2b-wasm')

// 64-bit unsigned addition
// Sets v[a,a+1] += v[b,b+1]
// v should be a Uint32Array
function ADD64AA (v, a, b) {
  var o0 = v[a] + v[b]
  var o1 = v[a + 1] + v[b + 1]
  if (o0 >= 0x100000000) {
    o1++
  }
  v[a] = o0
  v[a + 1] = o1
}

// 64-bit unsigned addition
// Sets v[a,a+1] += b
// b0 is the low 32 bits of b, b1 represents the high 32 bits
function ADD64AC (v, a, b0, b1) {
  var o0 = v[a] + b0
  if (b0 < 0) {
    o0 += 0x100000000
  }
  var o1 = v[a + 1] + b1
  if (o0 >= 0x100000000) {
    o1++
  }
  v[a] = o0
  v[a + 1] = o1
}

// Little-endian byte access
function B2B_GET32 (arr, i) {
  return (arr[i] ^
  (arr[i + 1] << 8) ^
  (arr[i + 2] << 16) ^
  (arr[i + 3] << 24))
}

// G Mixing function
// The ROTRs are inlined for speed
function B2B_G (a, b, c, d, ix, iy) {
  var x0 = m[ix]
  var x1 = m[ix + 1]
  var y0 = m[iy]
  var y1 = m[iy + 1]

  ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s
  ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits

  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits
  var xor0 = v[d] ^ v[a]
  var xor1 = v[d + 1] ^ v[a + 1]
  v[d] = xor1
  v[d + 1] = xor0

  ADD64AA(v, c, d)

  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits
  xor0 = v[b] ^ v[c]
  xor1 = v[b + 1] ^ v[c + 1]
  v[b] = (xor0 >>> 24) ^ (xor1 << 8)
  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)

  ADD64AA(v, a, b)
  ADD64AC(v, a, y0, y1)

  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits
  xor0 = v[d] ^ v[a]
  xor1 = v[d + 1] ^ v[a + 1]
  v[d] = (xor0 >>> 16) ^ (xor1 << 16)
  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)

  ADD64AA(v, c, d)

  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits
  xor0 = v[b] ^ v[c]
  xor1 = v[b + 1] ^ v[c + 1]
  v[b] = (xor1 >>> 31) ^ (xor0 << 1)
  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)
}

// Initialization Vector
var BLAKE2B_IV32 = new Uint32Array([
  0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85,
  0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A,
  0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C,
  0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19
])

var SIGMA8 = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3
]

// These are offsets into a uint64 buffer.
// Multiply them all by 2 to make them offsets into a uint32 buffer,
// because this is Javascript and we don't have uint64s
var SIGMA82 = new Uint8Array(SIGMA8.map(function (x) { return x * 2 }))

// Compression function. 'last' flag indicates last block.
// Note we're representing 16 uint64s as 32 uint32s
var v = new Uint32Array(32)
var m = new Uint32Array(32)
function blake2bCompress (ctx, last) {
  var i = 0

  // init work variables
  for (i = 0; i < 16; i++) {
    v[i] = ctx.h[i]
    v[i + 16] = BLAKE2B_IV32[i]
  }

  // low 64 bits of offset
  v[24] = v[24] ^ ctx.t
  v[25] = v[25] ^ (ctx.t / 0x100000000)
  // high 64 bits not supported, offset may not be higher than 2**53-1

  // last block flag set ?
  if (last) {
    v[28] = ~v[28]
    v[29] = ~v[29]
  }

  // get little-endian words
  for (i = 0; i < 32; i++) {
    m[i] = B2B_GET32(ctx.b, 4 * i)
  }

  // twelve rounds of mixing
  for (i = 0; i < 12; i++) {
    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])
    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])
    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])
    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])
    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])
    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])
    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])
    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])
  }

  for (i = 0; i < 16; i++) {
    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]
  }
}

// reusable parameter_block
var parameter_block = new Uint8Array([
  0, 0, 0, 0,      //  0: outlen, keylen, fanout, depth
  0, 0, 0, 0,      //  4: leaf length, sequential mode
  0, 0, 0, 0,      //  8: node offset
  0, 0, 0, 0,      // 12: node offset
  0, 0, 0, 0,      // 16: node depth, inner length, rfu
  0, 0, 0, 0,      // 20: rfu
  0, 0, 0, 0,      // 24: rfu
  0, 0, 0, 0,      // 28: rfu
  0, 0, 0, 0,      // 32: salt
  0, 0, 0, 0,      // 36: salt
  0, 0, 0, 0,      // 40: salt
  0, 0, 0, 0,      // 44: salt
  0, 0, 0, 0,      // 48: personal
  0, 0, 0, 0,      // 52: personal
  0, 0, 0, 0,      // 56: personal
  0, 0, 0, 0       // 60: personal
])

// Creates a BLAKE2b hashing context
// Requires an output length between 1 and 64 bytes
// Takes an optional Uint8Array key
function Blake2b (outlen, key, salt, personal) {
  // zero out parameter_block before usage
  parameter_block.fill(0)
  // state, 'param block'

  this.b = new Uint8Array(128)
  this.h = new Uint32Array(16)
  this.t = 0 // input count
  this.c = 0 // pointer within buffer
  this.outlen = outlen // output length in bytes

  parameter_block[0] = outlen
  if (key) parameter_block[1] = key.length
  parameter_block[2] = 1 // fanout
  parameter_block[3] = 1 // depth

  if (salt) parameter_block.set(salt, 32)
  if (personal) parameter_block.set(personal, 48)

  // initialize hash state
  for (var i = 0; i < 16; i++) {
    this.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameter_block, i * 4)
  }

  // key the hash, if applicable
  if (key) {
    blake2bUpdate(this, key)
    // at the end
    this.c = 128
  }
}

Blake2b.prototype.update = function (input) {
  assert(input instanceof Uint8Array, 'input must be Uint8Array or Buffer')
  blake2bUpdate(this, input)
  return this
}

Blake2b.prototype.digest = function (out) {
  var buf = (!out || out === 'binary' || out === 'hex') ? new Uint8Array(this.outlen) : out
  assert(buf instanceof Uint8Array, 'out must be "binary", "hex", Uint8Array, or Buffer')
  assert(buf.length >= this.outlen, 'out must have at least outlen bytes of space')
  blake2bFinal(this, buf)
  if (out === 'hex') return hexSlice(buf)
  return buf
}

Blake2b.prototype.final = Blake2b.prototype.digest

Blake2b.ready = function (cb) {
  b2wasm.ready(function () {
    cb() // ignore the error
  })
}

// Updates a BLAKE2b streaming hash
// Requires hash context and Uint8Array (byte array)
function blake2bUpdate (ctx, input) {
  for (var i = 0; i < input.length; i++) {
    if (ctx.c === 128) { // buffer full ?
      ctx.t += ctx.c // add counters
      blake2bCompress(ctx, false) // compress (not last)
      ctx.c = 0 // counter to zero
    }
    ctx.b[ctx.c++] = input[i]
  }
}

// Completes a BLAKE2b streaming hash
// Returns a Uint8Array containing the message digest
function blake2bFinal (ctx, out) {
  ctx.t += ctx.c // mark last block offset

  while (ctx.c < 128) { // fill up with zeros
    ctx.b[ctx.c++] = 0
  }
  blake2bCompress(ctx, true) // final block flag = 1

  for (var i = 0; i < ctx.outlen; i++) {
    out[i] = ctx.h[i >> 2] >> (8 * (i & 3))
  }
  return out
}

function hexSlice (buf) {
  var str = ''
  for (var i = 0; i < buf.length; i++) str += toHex(buf[i])
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

var Proto = Blake2b

module.exports = function createHash (outlen, key, salt, personal, noAssert) {
  if (noAssert !== true) {
    assert(outlen >= BYTES_MIN, 'outlen must be at least ' + BYTES_MIN + ', was given ' + outlen)
    assert(outlen <= BYTES_MAX, 'outlen must be at most ' + BYTES_MAX + ', was given ' + outlen)
    if (key != null) {
      assert(key instanceof Uint8Array, 'key must be Uint8Array or Buffer')
      assert(key.length >= KEYBYTES_MIN, 'key must be at least ' + KEYBYTES_MIN + ', was given ' + key.length)
      assert(key.length <= KEYBYTES_MAX, 'key must be at most ' + KEYBYTES_MAX + ', was given ' + key.length)
    }
    if (salt != null) {
      assert(salt instanceof Uint8Array, 'salt must be Uint8Array or Buffer')
      assert(salt.length === SALTBYTES, 'salt must be exactly ' + SALTBYTES + ', was given ' + salt.length)
    }
    if (personal != null) {
      assert(personal instanceof Uint8Array, 'personal must be Uint8Array or Buffer')
      assert(personal.length === PERSONALBYTES, 'personal must be exactly ' + PERSONALBYTES + ', was given ' + personal.length)
    }
  }

  return new Proto(outlen, key, salt, personal)
}

module.exports.ready = function (cb) {
  b2wasm.ready(function () { // ignore errors
    cb()
  })
}

module.exports.WASM_SUPPORTED = b2wasm.SUPPORTED
module.exports.WASM_LOADED = false

var BYTES_MIN = module.exports.BYTES_MIN = 16
var BYTES_MAX = module.exports.BYTES_MAX = 64
var BYTES = module.exports.BYTES = 32
var KEYBYTES_MIN = module.exports.KEYBYTES_MIN = 16
var KEYBYTES_MAX = module.exports.KEYBYTES_MAX = 64
var KEYBYTES = module.exports.KEYBYTES = 32
var SALTBYTES = module.exports.SALTBYTES = 16
var PERSONALBYTES = module.exports.PERSONALBYTES = 16

b2wasm.ready(function (err) {
  if (!err) {
    module.exports.WASM_LOADED = true
    module.exports = b2wasm
  }
})

},{"blake2b-wasm":124,"nanoassert":390}],126:[function(require,module,exports){
const { EventEmitter } = require('events')
const sodium = require('sodium-universal')
const crypto = require('hypercore-crypto')
const b4a = require('b4a')
const c = require('compact-encoding')

const {
  Invite,
  ResponsePayload,
  InviteRequest,
  InviteResponse,
  InviteData,
  InviteReceipt,
  PersistedRequest,
  AuthData
} = require('./lib/messages')

const {
  PAIRING_REJECTED,
  INVITE_USED,
  INVITE_EXPIRED
} = require('./lib/errors')

const [
  NS_SIGNATURE,
  NS_TOKEN,
  NS_INVITE_ID,
  NS_REQUEST_ID,
  NS_SESSION,
  NS_SESSION_KEY,
  NS_ENCRYPT,
  NS_NONCE
] = crypto.namespace('blind-pairing', 8)

class CandidateRequest extends EventEmitter {
  constructor (invite, userData, opts = {}) {
    super()

    if (b4a.isBuffer(invite)) {
      invite = c.decode(Invite, invite)
    }

    this.discoveryKey = invite.discoveryKey
    this.seed = invite.seed

    this.keyPair = crypto.keyPair(this.seed)
    this.inviteId = deriveInviteId(this.keyPair.publicKey)
    this.userData = userData

    this.token = deriveToken(this.keyPair.publicKey, userData)
    this.session = opts.session || createSessionToken(this.token)
    this.id = deriveRequestId(this.session)

    this.payload = createAuth(this.userData, this.keyPair, this.session)

    this._encoded = null

    // set in reply
    this.auth = null
  }

  static from (buf) {
    const info = c.decode(PersistedRequest, buf)
    const { seed, discoveryKey, userData } = info
    const request = new CandidateRequest({ discoveryKey, seed }, userData)

    // clear completed request
    if (info.key) {
      request.key = info.key
      request.token = null
      request.payload = null
    }

    return request
  }

  handleResponse (payload) {
    if (b4a.isBuffer(payload)) {
      payload = this._decodeResponse(payload)
    }

    try {
      this._openResponse(payload)
    } catch (err) {
      this.emit('rejected', err)
      return null
    }

    this._onAccept()

    return this.auth
  }

  _openResponse (payload) {
    try {
      const response = openReply(payload, this.payload.session, this.keyPair.publicKey)
      this.response = c.decode(ResponsePayload, response)
    } catch (e) {
      throw new Error('Could not decrypt reply.')
    }

    const { status, key, encryptionKey, additional } = this.response

    if (status !== 0) {
      switch (status) {
        case 1:
          throw PAIRING_REJECTED()

        case 2:
          throw INVITE_USED()

        case 3:
          throw INVITE_EXPIRED()
      }
    }

    if (b4a.compare(crypto.discoveryKey(key), this.discoveryKey)) {
      throw new Error('Invite response does not match discoveryKey')
    }

    if (additional && !crypto.verify(additional.data, additional.signature, this.keyPair.publicKey)) {
      throw new Error('Additional data failed verification')
    }

    this.auth = { key, encryptionKey, data: additional ? additional.data : null }
  }

  _onAccept () {
    this.emit('accepted', this.auth)
    this.destroy()
  }

  _decodeResponse (buf) {
    try {
      const { payload } = c.decode(InviteResponse, buf)
      return payload
    } catch {
      throw new Error('Could not decode response.')
    }
  }

  destroy () {
    this.token = null
    this.payload = null

    this.emit('destroyed')
  }

  encode () {
    if (!this._encoded) this._encoded = c.encode(InviteRequest, this)
    return this._encoded
  }
}

class MemberRequest {
  constructor (inviteId, requestData) {
    this.inviteId = inviteId
    this.requestData = requestData

    this._opened = false
    this._confirmed = false
    this._denied = false

    // set by transport
    this.discoveryKey = null

    // set in open
    this.publicKey = null
    this.userData = null
    this.session = null
    this.id = null
    this.receipt = null

    // set in confirm/respond
    this._payload = null
    this.response = null
  }

  static from (req) {
    if (b4a.isBuffer(req)) {
      return MemberRequest.from(c.decode(InviteRequest, req))
    }

    return new MemberRequest(
      req.inviteId,
      req.payload
    )
  }

  confirm ({ key, encryptionKey, additional }) {
    if (this._confirmed || this._denied || !this._opened) return
    this._confirmed = true

    const payload = c.encode(ResponsePayload, { status: 0, key, encryptionKey, additional })
    this._payload = createReply(payload, this.session, this.publicKey)

    this._respond()
  }

  deny ({ status = 1 } = {}) {
    if (this._confirmed || this._denied) return
    this._denied = true

    if (!status) return

    const payload = c.encode(ResponsePayload, {
      status,
      key: null,
      encryptionKey: null,
      additional: null
    })
    this._payload = createReply(payload, this.session, this.publicKey)

    this._respond()
  }

  respond () {
    return {
      id: this.id,
      payload: this._payload
    }
  }

  _respond () {
    this.response = c.encode(InviteResponse, this.respond())
  }

  open (publicKey) {
    if (this._opened && b4a.equals(this.publicKey, publicKey)) return this.userData

    try {
      this.receipt = openAuth(this.requestData, publicKey)
      const { userData, session } = c.decode(InviteReceipt, this.receipt)

      this.userData = userData
      this.session = session
      this.token = deriveToken(publicKey, userData)
      this.id = deriveRequestId(this.session)
    } catch (e) {
      throw new Error('Failed to open invite with provided key')
    }

    this.publicKey = publicKey
    this._opened = true

    return this.userData
  }
}

module.exports.CandidateRequest = CandidateRequest
module.exports.MemberRequest = MemberRequest
module.exports.createInvite = createInvite
module.exports.decodeInvite = decodeInvite
module.exports.verifyReceipt = verifyReceipt
module.exports.createReceipt = createReceipt
module.exports.Invite = Invite

function createReceipt (invite, userData) {
  const req = new CandidateRequest(invite, userData) // yolo, refactor
  const receipt = openAuth(req.payload, req.keyPair.publicKey)
  return { id: deriveInviteId(req.keyPair.publicKey), receipt }
}

function verifyReceipt (receipt, publicKey) {
  if (b4a.isBuffer(receipt)) {
    receipt = c.decode(InviteReceipt, receipt)
  }

  const { session, signature, userData } = receipt
  const signData = c.encode(AuthData, { userData, session })

  if (!verifySignature(signData, signature, publicKey)) return null

  return userData
}

function deriveInviteId (publicKey) {
  return crypto.hash([NS_INVITE_ID, publicKey])
}

function deriveKey (publicKey) {
  const out = b4a.allocUnsafe(sodium.crypto_aead_xchacha20poly1305_ietf_KEYBYTES)
  return crypto.hash([NS_ENCRYPT, publicKey], out)
}

function deriveNonce (publicKey, sessionToken) {
  const out = b4a.allocUnsafe(sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES)
  return crypto.hash([NS_NONCE, publicKey, sessionToken], out)
}

function deriveToken (publicKey, userData) {
  return crypto.hash([NS_TOKEN, publicKey, userData])
}

function createSessionToken (token) {
  return crypto.hash([NS_SESSION, token])
}

function deriveRequestId (sessionToken) {
  return crypto.hash([NS_REQUEST_ID, sessionToken])
}

function createInvite (key, opts = {}) {
  const {
    discoveryKey = crypto.discoveryKey(key),
    expires = 0,
    seed = crypto.randomBytes(32),
    sensitive = false,
    data,
    testInvitation = false
  } = opts

  const keyPair = crypto.keyPair(seed)
  const additional = data
    ? {
        data,
        signature: crypto.sign(data, keyPair.secretKey)
      }
    : null

  return {
    id: deriveInviteId(keyPair.publicKey),
    invite: c.encode(Invite, { seed, discoveryKey, expires, sensitive, testInvitation }),
    seed,
    publicKey: keyPair.publicKey,
    additional,
    discoveryKey,
    expires,
    sensitive,
    testInvitation
  }
}

function decodeInvite (invite) {
  const data = c.decode(Invite, invite)
  return {
    id: deriveInviteId(crypto.keyPair(data.seed).publicKey),
    ...data
  }
}

function encrypt (data, nonce, secretKey) {
  const output = b4a.allocUnsafe(data.byteLength + sodium.crypto_aead_xchacha20poly1305_ietf_ABYTES)
  sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(output, data, nonce, null, nonce, secretKey)
  return output
}

function decrypt (data, nonce, secretKey) {
  const output = b4a.allocUnsafe(data.byteLength - sodium.crypto_aead_xchacha20poly1305_ietf_ABYTES)
  sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(output, null, data, nonce, nonce, secretKey)
  return output
}

function createAuth (userData, invitationKeyPair, session) {
  const secret = deriveKey(invitationKeyPair.publicKey)

  const nonce = deriveNonce(invitationKeyPair.publicKey, session)
  const signData = c.encode(AuthData, { userData, session })
  const signature = createSignature(signData, invitationKeyPair.secretKey)

  const inviteData = c.encode(InviteData, { userData, signature })
  const data = encrypt(inviteData, nonce, secret)

  return {
    session,
    data
  }
}

function openAuth (payload, invitationKey) {
  const secret = deriveKey(invitationKey)

  const { session, data } = payload

  const nonce = deriveNonce(invitationKey, session)

  let plaintext
  try {
    plaintext = decrypt(data, nonce, secret)
  } catch {
    // todo stronger check
    throw new Error('Decryption failed.')
  }

  const { userData, signature } = c.decode(InviteData, plaintext)
  const receipt = { session, signature, userData }

  if (!verifyReceipt(receipt, invitationKey)) {
    throw new Error('Invalid reply')
  }

  return c.encode(InviteReceipt, { session, signature, userData })
}

function createReply (payload, sessionToken, invitationKey) {
  const sessionKey = crypto.hash([NS_SESSION_KEY, invitationKey, sessionToken])
  const secret = deriveKey(sessionKey)
  const nonce = deriveNonce(sessionKey, sessionToken)

  return encrypt(payload, nonce, secret)
}

function openReply (data, sessionToken, invitationKey) {
  const sessionKey = crypto.hash([NS_SESSION_KEY, invitationKey, sessionToken])
  const secret = deriveKey(sessionKey)
  const nonce = deriveNonce(sessionKey, sessionToken)

  return decrypt(data, nonce, secret)
}

function createSignature (data, secretKey) {
  const signature = b4a.allocUnsafe(sodium.crypto_sign_BYTES)
  const namespaced = b4a.allocUnsafe(32 + data.byteLength)

  namespaced.set(NS_SIGNATURE, 0)
  namespaced.set(data, 32)

  sodium.crypto_sign_detached(signature, namespaced, secretKey)

  return signature
}

function verifySignature (data, signature, publicKey) {
  const namespaced = b4a.allocUnsafe(32 + data.byteLength)

  namespaced.set(NS_SIGNATURE, 0)
  namespaced.set(data, 32)

  return sodium.crypto_sign_verify_detached(signature, namespaced, publicKey)
}

},{"./lib/errors":127,"./lib/messages":128,"b4a":102,"compact-encoding":178,"events":258,"hypercore-crypto":305,"sodium-universal":556}],127:[function(require,module,exports){
module.exports = class PairingError extends Error {
  constructor (msg, code, fn = PairingError) {
    super(`${code}: ${msg}`)
    this.code = code

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, fn)
    }
  }

  get name () {
    return 'PairingError'
  }

  static PAIRING_REJECTED (msg = 'Pairing was rejected') {
    return new PairingError(msg, 'PAIRING_REJECTED', PairingError.PAIRING_REJECTED)
  }

  static INVITE_USED (msg = 'Invite has been used') {
    return new PairingError(msg, 'INVITE_USED', PairingError.INVITE_USED)
  }

  static INVITE_EXPIRED (msg = 'Invite has expireds') {
    return new PairingError(msg, 'INVITE_EXPIRED', PairingError.INVITE_EXPIRED)
  }
}

},{}],128:[function(require,module,exports){
const c = require('compact-encoding')

const Invite = {
  preencode (state, i) {
    state.end++ // version
    state.end++ // flags
    c.fixed32.preencode(state, i.seed)
    if (i.discoveryKey) c.fixed32.preencode(state, i.discoveryKey)
    if (i.expires) c.uint32.preencode(state, Math.floor(i.expires / 1000)) // store as secs
  },
  encode (state, i) {
    c.uint.encode(state, 1) // version
    c.uint.encode(state, (i.discoveryKey ? 1 : 0) | (i.expires ? 2 : 0) | (i.sensitive ? 4 : 0) | (i.testInvitation ? 8 : 0))
    c.fixed32.encode(state, i.seed)
    if (i.discoveryKey) c.fixed32.encode(state, i.discoveryKey)
    if (i.expires) c.uint32.encode(state, Math.floor(i.expires / 1000))
  },
  decode (state) {
    const version = c.uint.decode(state)
    if (version !== 1) {
      throw new Error('Unknown invite version')
    }

    const flags = c.uint.decode(state)

    return {
      seed: c.fixed32.decode(state),
      discoveryKey: (flags & 1) ? c.fixed32.decode(state) : null,
      expires: (flags & 2) ? c.uint32.decode(state) * 1000 : 0,
      sensitive: (flags & 4) !== 0,
      testInvitation: (flags & 8) !== 0
    }
  }
}

const RequestPayload = {
  preencode (state, p) {
    c.buffer.preencode(state, p.session)
    c.buffer.preencode(state, p.data)
  },
  encode (state, p) {
    c.buffer.encode(state, p.session)
    c.buffer.encode(state, p.data)
  },
  decode (state) {
    return {
      session: c.buffer.decode(state),
      data: c.buffer.decode(state)
    }
  }
}

const ResponseStatus = c.uint

const AdditionalData = {
  preencode (state, m) {
    c.buffer.preencode(state, m.data)
    c.fixed64.preencode(state, m.signature)
  },
  encode (state, m) {
    c.buffer.encode(state, m.data)
    c.fixed64.encode(state, m.signature)
  },
  decode (state) {
    return {
      data: c.buffer.decode(state),
      signature: c.fixed64.decode(state)
    }
  }
}

const ResponsePayload = {
  preencode (state, p) {
    ResponseStatus.preencode(state, p.status)
    if (p.status !== 0) return

    let flags = 0
    if (p.encryptionKey) flags |= 1
    if (p.additional) flags |= 2
    c.uint.preencode(state, flags) // flags

    c.fixed32.preencode(state, p.key)
    if (p.encryptionKey) c.fixed32.preencode(state, p.encryptionKey)
    if (p.additional) AdditionalData.preencode(state, p.additional)
  },
  encode (state, p) {
    ResponseStatus.encode(state, p.status)
    if (p.status !== 0) return

    let flags = 0
    if (p.encryptionKey) flags |= 1
    if (p.additional) flags |= 2
    c.uint.encode(state, flags)

    c.fixed32.encode(state, p.key)
    if (p.encryptionKey) c.fixed32.encode(state, p.encryptionKey)
    if (p.additional) AdditionalData.encode(state, p.additional)
  },
  decode (state) {
    const status = ResponseStatus.decode(state)

    if (status !== 0) {
      return {
        status,
        key: null,
        encryptionKey: null,
        additional: null
      }
    }

    const flags = c.uint.decode(state)
    const key = c.fixed32.decode(state)
    const encryptionKey = (flags & 1) !== 0 ? c.fixed32.decode(state) : null
    const additional = (flags & 2) !== 0 ? AdditionalData.decode(state) : null

    return {
      status: 0,
      key,
      encryptionKey,
      additional
    }
  }
}

const InviteRequest = {
  preencode (state, i) {
    c.fixed32.preencode(state, i.inviteId)
    RequestPayload.preencode(state, i.payload)
  },
  encode (state, i) {
    c.fixed32.encode(state, i.inviteId)
    RequestPayload.encode(state, i.payload)
  },
  decode (state) {
    return {
      inviteId: c.fixed32.decode(state),
      payload: RequestPayload.decode(state)
    }
  }
}

const InviteResponse = {
  preencode (state, i) {
    c.fixed32.preencode(state, i.id)
    c.buffer.preencode(state, i.payload)
  },
  encode (state, i) {
    c.fixed32.encode(state, i.id)
    c.buffer.encode(state, i.payload)
  },
  decode (state) {
    return {
      id: c.fixed32.decode(state),
      payload: c.buffer.decode(state)
    }
  }
}

const InviteData = {
  preencode (state, i) {
    c.fixed64.preencode(state, i.signature)
    c.buffer.preencode(state, i.userData)
  },
  encode (state, i) {
    c.fixed64.encode(state, i.signature)
    c.buffer.encode(state, i.userData)
  },
  decode (state) {
    return {
      signature: c.fixed64.decode(state),
      userData: c.buffer.decode(state)
    }
  }
}

const InviteReceipt = {
  preencode (state, i) {
    c.fixed32.preencode(state, i.session)
    c.fixed64.preencode(state, i.signature)
    c.buffer.preencode(state, i.userData)
  },
  encode (state, i) {
    c.fixed32.encode(state, i.session)
    c.fixed64.encode(state, i.signature)
    c.buffer.encode(state, i.userData)
  },
  decode (state) {
    return {
      session: c.fixed32.decode(state),
      signature: c.fixed64.decode(state),
      userData: c.buffer.decode(state)
    }
  }
}

const AuthData = {
  preencode (state, i) {
    c.buffer.preencode(state, i.session)
    c.buffer.preencode(state, i.userData)
  },
  encode (state, i) {
    c.buffer.encode(state, i.session)
    c.buffer.encode(state, i.userData)
  },
  decode (state) {
    return {
      session: c.buffer.decode(state),
      userData: c.buffer.decode(state)
    }
  }
}

module.exports = {
  Invite,
  ResponsePayload,
  InviteRequest,
  InviteResponse,
  InviteData,
  InviteReceipt,
  AuthData
}

},{"compact-encoding":178}],129:[function(require,module,exports){
const crypto = require('hypercore-crypto')
const b4a = require('b4a')
const safetyCatch = require('safety-catch')
const ReadyResource = require('ready-resource')
const Xache = require('xache')
const { MemberRequest, CandidateRequest, createInvite, decodeInvite, verifyReceipt, Invite } = require('blind-pairing-core')
const Protomux = require('protomux')
const c = require('compact-encoding')
const debounce = require('debounceify')
const isOptions = require('is-options')

const [NS_EPHEMERAL, NS_REPLY, NS_DISCOVERY] = crypto.namespace('blind-pairing/dht', 3)

const DEFAULT_POLL = 7 * 60 * 1000
const PEER_INTERVAL = 1000

class TimeoutPromise {
  constructor (ms) {
    this.ms = ms
    this.resolve = null
    this.timeout = null
    this.destroyed = false
    this.suspended = false

    this._resolveBound = this._resolve.bind(this)
    this._ontimerBound = this._ontimer.bind(this)
  }

  wait () {
    if (this.destroyed) return Promise.resolve()
    if (this.resolve) this._resolve()
    return new Promise(this._ontimerBound)
  }

  suspend () {
    this.suspended = true
    if (this.timeout !== null) clearTimeout(this.timeout)
    this.timeout = null
  }

  resume () {
    this.suspended = false
    if (this.resolve) this._resolve()
  }

  destroy () {
    this.destroyed = true
    if (this.resolve) this._resolve()
  }

  _ontimer (resolve) {
    this.resolve = resolve
    if (!this.suspended) this.timeout = setTimeout(this._resolveBound, this.ms)
  }

  _resolve () {
    if (this.timeout !== null) clearTimeout(this.timeout)

    const resolve = this.resolve
    this.timeout = null
    this.resolve = null

    resolve()
  }
}

class BlindPairing extends ReadyResource {
  constructor (swarm, { poll = DEFAULT_POLL, onincoming = noop } = {}) {
    super()

    this.swarm = swarm
    this.poll = poll
    this.active = new Map()
    this.suspended = false

    this._onincoming = onincoming
    this._onconnectionBound = this._onconnection.bind(this)
    this._refreshBound = this.refresh.bind(this)
    this._refreshing = null

    this.swarm.on('connection', this._onconnectionBound)
    this.swarm.dht.on('network-change', this._refreshBound)
  }

  static Invite = Invite

  static createInvite (key, opts) {
    return createInvite(key, opts)
  }

  static decodeInvite (invite) {
    return decodeInvite(invite)
  }

  static verifyReceipt (receipt, publicKey) {
    return verifyReceipt(receipt, publicKey)
  }

  static createRequest (invite, userData) {
    return new CandidateRequest(invite, userData)
  }

  async suspend () {
    if (this.suspended) return
    this.suspended = true

    const all = []

    for (const ref of this.active.values()) {
      if (ref.candidate) all.push(ref.candidate._suspend())
      if (ref.member) all.push(ref.member._suspend())
    }

    await Promise.allSettled(all)
  }

  resume () {
    if (!this.suspended) return
    this.suspended = false
    this.refresh().catch(safetyCatch) // no need to wait for the refreshes
  }

  async refresh () {
    if (this._refreshing) {
      await this._refreshing
      return
    }

    if (this.closing || this.suspended) return

    const r = this._refreshing = this._refresh()

    try {
      await r
    } finally {
      if (r === this._refreshing) this._refreshing = null
    }
  }

  async _refresh () {
    if (this.closing || this.suspended) return

    const all = []

    for (const ref of this.active.values()) {
      if (ref.candidate) all.push(ref.candidate.refresh())
      if (ref.member) all.push(ref.member.refresh())
    }

    await Promise.allSettled(all)
  }

  addMember (opts) {
    return new Member(this, opts)
  }

  addCandidate (request, opts) {
    if (isOptions(request)) return this.addCandidate(null, request)
    if (!request) request = new CandidateRequest(opts.invite, opts.userData)
    return new Candidate(this, request, opts)
  }

  async _close () {
    this.swarm.removeListener('connection', this._onconnectionBound)
    this.swarm.dht.removeListener('network-change', this._refreshBound)

    const all = []

    for (const conn of this.swarm.connections) {
      const mux = getMuxer(conn)
      mux.unpair({ protocol: 'blind-pairing' })
      for (const ref of this.active.values()) mux.unpair({ protocol: 'blind-pairing', id: ref.discoveryKey })
    }

    for (const ref of this.active.values()) {
      if (ref.member) all.push(ref.member.close())
      if (ref.candidate) all.push(ref.candidate.close())
      if (ref.discovery) all.push(ref.discovery.destroy())
    }

    await Promise.allSettled(all)
  }

  _randomPoll () {
    return randomInterval(this.poll)
  }

  _add (discoveryKey) {
    const id = b4a.toString(discoveryKey, 'hex')
    const t = this.active.get(id)
    if (t) return t

    const fresh = {
      id,
      discoveryKey,
      member: null,
      candidate: null,
      channels: new Set(),
      alwaysServer: false,
      alwaysClient: false,
      discovery: null
    }

    this.active.set(id, fresh)
    return fresh
  }

  _swarm (ref) {
    const server = ref.alwaysServer || !!ref.member
    const client = ref.alwaysClient || !!ref.candidate

    if (ref.discovery && ref.discovery.isServer === server && ref.discovery.isClient === client) {
      return
    }

    if (ref.discovery) ref.discovery.destroy().catch(safetyCatch)

    // just a sanity check, not needed but doesnt hurt
    if (!server && !client) return

    ref.discovery = this.swarm.join(ref.discoveryKey, { server, client })
    this._attachToSwarm(ref)
  }

  _attachToSwarm (ref) {
    for (const conn of this.swarm.connections) {
      const mux = getMuxer(conn)
      this._attachToMuxer(mux, ref.discoveryKey, ref)
    }
  }

  _gc (ref) {
    if (ref.member || ref.candidate) {
      if (ref.discovery) this._swarm(ref) // in case it needs updating...
      return false
    }
    this.active.delete(ref.id)
    for (const ch of ref.channels) ch.close()
    for (const conn of this.swarm.connections) {
      const mux = getMuxer(conn)
      mux.unpair({ protocol: 'blind-pairing', id: ref.discoveryKey })
    }
    if (ref.discovery) ref.discovery.destroy().catch(safetyCatch)
    return true
  }

  _onconnection (conn) {
    const mux = getMuxer(conn)

    mux.pair({ protocol: 'blind-pairing' }, this._onincoming)

    for (const ref of this.active.values()) {
      this._attachToMuxer(mux, ref.discoveryKey, ref)
    }
  }

  _attachToMuxer (mux, discoveryKey, ref) {
    if (!ref) ref = this._add(discoveryKey)

    const ch = mux.createChannel({
      protocol: 'blind-pairing',
      id: discoveryKey,
      messages: [
        { encoding: c.buffer, onmessage: (req) => this._onpairingrequest(ch, ref, req) },
        { encoding: c.buffer, onmessage: (res) => this._onpairingresponse(ch, ref, res) }
      ],
      onclose: () => {
        ref.channels.delete(ch)
        if (ref.candidate) ref.candidate.visited.delete(ch)
      }
    })

    if (ch === null) return

    ch.open()
    mux.pair({ protocol: 'blind-pairing', id: discoveryKey }, () => this._attachToMuxer(mux, discoveryKey, null))
    ref.channels.add(ch)

    if (ref.candidate) ref.candidate.broadcast()
  }

  async _onpairingrequest (ch, ref, req) {
    if (!ref.member) return

    const request = await ref.member._addRequest(req)
    if (!request) return

    ch.messages[1].send(request.response)
  }

  async _onpairingresponse (ch, ref, res) {
    if (!ref.candidate) return

    await ref.candidate._addResponse(res, false)
  }
}

class Member extends ReadyResource {
  constructor (blind, { announce = true, discoveryKey, onadd = noop } = {}) {
    super()

    if (!discoveryKey) {
      throw new Error('Must provide discoveryKey')
    }

    const ref = blind._add(discoveryKey)

    if (ref.member) {
      throw new Error('Active member already exist')
    }

    ref.member = this

    this._pendingRequests = new Map()

    this.blind = blind
    this.dht = blind.swarm.dht
    this.discoveryKey = discoveryKey
    this.pairingDiscoveryKey = deriveDiscoveryKey(discoveryKey)
    this.timeout = new TimeoutPromise(blind._randomPoll())
    this.pairing = null
    this.skip = new Xache({ maxSize: 512 })
    this.ref = ref
    this.onadd = onadd

    this._activeQuery = null
    this._activePoll = null
    this._closestNodes = null
    this._autoAnnounce = announce

    this.ready()
  }

  announce () {
    if (this.pairing) return this.pairing

    this.blind._swarm(this.ref)
    this.pairing = this._run()
    this.pairing.catch(safetyCatch)

    return this.pairing
  }

  async flushed () {
    if (!this.ref.discovery) return
    return this.ref.discovery.flushed()
  }

  _open () {
    if (this._autoAnnounce) this.announce()
    else this.blind._attachToSwarm(this.ref)
  }

  _suspend () {
    this.timeout.suspend()
    return this._abort()
  }

  async _abort () {
    if (this._activeQuery) this._activeQuery.destroy()
    while (this._activePoll !== null) await this._activePoll
  }

  async refresh () {
    await this._abort()
    this.timeout.resume()
  }

  async _close () {
    this.ref.member = null
    this.blind._gc(this.ref)
    this.timeout.destroy()
    await this._abort()

    try {
      await this.pairing
    } catch {
      // ignore errors since we teardown
    }
  }

  async _run () {
    while (!this.closing) {
      this._activePoll = this._poll()
      await this._activePoll
      this._activePoll = null
      await this.timeout.wait()
    }
  }

  async _poll () {
    const visited = new Set()
    let alwaysClient = false

    if (this._activeQuery) this._activeQuery.destroy()

    const query = this._activeQuery = this.dht.lookup(this.pairingDiscoveryKey, { closestNodes: this._closestNodes })

    try {
      for await (const data of this._activeQuery) {
        if (this.closing || this.blind.suspended) return

        for (const peer of data.peers) {
          const id = b4a.toString(peer.publicKey, 'hex')

          if (visited.has(id) || this.skip.get(id)) continue
          visited.add(id)

          try {
            if (await this._add(peer.publicKey, id)) alwaysClient = true
          } catch (err) {
            safetyCatch(err)
          }

          if (this.closing || this.blind.suspended) return

          if (alwaysClient && !this.ref.alwaysClient) {
            this.ref.alwaysClient = true
            this.blind._swarm(this.ref)
          }
        }
      }
    } catch {
      // do nothing
    } finally {
      const nodes = this._activeQuery.closestNodes
      if (this._activeQuery === query) this._activeQuery = null
      if (nodes && nodes.length > 0) this._closestNodes = nodes
    }

    if (alwaysClient) this._revertClientAfterFlush() // safe to do in bg
  }

  async _revertClientAfterFlush () {
    try {
      await this.blind.swarm.flush()
    } catch {
      return
    }
    if (this.closing || this.blind.suspended) return

    this.ref.alwaysClient = false
    this.blind._swarm(this.ref)
  }

  async _addRequest (value) {
    let request = null
    try {
      request = MemberRequest.from(value)
    } catch {
      return null
    }

    request.discoveryKey = this.discoveryKey

    const session = b4a.toString(request.requestData.session, 'hex')

    if (!this._pendingRequests.has(session)) {
      this._pendingRequests.set(session, {
        request,
        promise: this.onadd(request)
      })
    }

    // load existing request if it exists
    const pending = this._pendingRequests.get(session)

    try {
      await pending.promise
    } catch (e) {
      safetyCatch(e)
      return null
    }

    this._pendingRequests.delete(session)

    if (!pending.request.response) return null

    return pending.request
  }

  async _add (publicKey, id) {
    const node = await this.dht.mutableGet(publicKey, { latest: false })
    if (!node) return false

    this.skip.set(id, true)

    const request = await this._addRequest(node.value)
    if (!request) return false

    const replyKeyPair = deriveReplyKeyPair(request.token)
    await this.dht.mutablePut(replyKeyPair, request.response)

    return true
  }
}

class Candidate extends ReadyResource {
  constructor (blind, request, { discoveryKey = request.discoveryKey, onadd = noop } = {}) {
    super()

    const ref = blind._add(discoveryKey)
    if (ref.candidate) {
      throw new Error('Active candidate already exist')
    }

    ref.candidate = this

    this.blind = blind
    this.discoveryKey = discoveryKey
    this.pairingDiscoveryKey = deriveDiscoveryKey(discoveryKey)
    this.dht = blind.swarm.dht
    this.request = request
    this.token = request.token
    this.timeout = new TimeoutPromise(blind._randomPoll())
    this.announced = false
    this.gcing = null
    this.ref = ref
    this.paired = null
    this.pairing = null
    this.onadd = onadd

    this.signal = null
    this.visited = new Set()
    this.broadcast = debounce(this._broadcast.bind(this))

    this._activePoll = null

    this.ready()
  }

  _open () {
    this.blind._swarm(this.ref)
    this.pairing = this._run()
    this.broadcast()
  }

  _suspend () {
    this.timeout.suspend()
    // no good way to suspend the mut gets atm unfortunately so we just rely on the polls timing out
  }

  async refresh () {
    while (this._activePoll !== null) await this._activePoll
    this.announced = false
    this.timeout.resume()
  }

  async _close () {
    this.ref.candidate = null
    this.blind._gc(this.ref)
    this.timeout.destroy()
    this.visited.clear()
    await this.pairing
    // gc never throws
    if (this.gcing) await this.gcing
  }

  async _addResponse (value, gc) {
    if (this.paired) return

    const paired = this.request.handleResponse(value)
    if (!paired) return

    this.paired = paired
    if (this.signal) this.signal.destroy()

    if ((gc || this.announced) && !this.gcing) this.gcing = this._gc() // gc in the background
    await this.onadd(paired)
    this.timeout.destroy()
  }

  async _run () {
    while (!this._done()) {
      this._activePoll = this._poll()
      await this._activePoll
      this._activePoll = null
      if (this._done()) break
      await this.timeout.wait()
    }

    this.close().catch(safetyCatch)
    return this.paired
  }

  _done () {
    return !!(this.closing || this.paired)
  }

  async _announce () {
    const eph = deriveEphemeralKeyPair(this.token)

    await this.dht.mutablePut(eph, this.request.encode())
    if (this._done()) return

    await this.dht.announce(this.pairingDiscoveryKey, eph).finished()
    if (this._done()) return

    if (!this.paired) {
      this.ref.alwaysServer = true
      this.blind._swarm(this.ref)
    }

    this.emit('announce')
  }

  async _gc () {
    const eph = deriveEphemeralKeyPair(this.token)

    try {
      await this.dht.unannounce(this.pairingDiscoveryKey, eph)
    } catch (err) {
      safetyCatch(err) // just gc, whatevs
    }
  }

  _sendRequest (ch) {
    ch.messages[0].send(this.request.encode())
    this.visited.add(ch)
  }

  async _broadcast () {
    for (const channel of this.closestPeers()) {
      this.signal = new TimeoutPromise(randomInterval(PEER_INTERVAL))
      if (channel) this._sendRequest(channel)

      await this.signal.wait() // resolves on destroy

      if (this.paired || this.suspended) break
    }
  }

  * closestPeers () {
    while (!this.paired) {
      let closest = Infinity
      let channel = null

      for (const ch of this.ref.channels) {
        if (this.visited.has(ch)) continue

        try {
          const { rtt } = ch._mux.stream.rawStream

          console.log({rtt})
          
          // Handle undefined RTT in browser environment - use 0 as fallback
          const fixed_rtt = (rtt !== undefined && rtt !== null) ? rtt : 0
          
          if ( fixed_rtt < closest) {
            closest = fixed_rtt
            channel = ch
          }
        } catch (error) {
          // If RTT access fails completely, (haven't but still) still use the channel with fallback RTT of 0
          if (0 < closest) {
            closest = 0
            channel = ch
          }
        }
      }

      if (!channel) return

      yield channel
    }
  }

  async _poll () {
    try {
      const value = await this._getReply()
      if (this._done() || this.blind.suspended) return

      if (value) {
        await this._addResponse(value, true)
        if (this._done() || this.blind.suspended) return
      }

      if (!this.announced) {
        this.announced = true
        await this._announce()
      }
    } catch {
      // can run in bg, should never crash it
    }
  }

  async _getReply () {
    const { publicKey } = deriveReplyKeyPair(this.token)
    const node = await this.dht.mutableGet(publicKey, { latest: false })
    if (!node) return null
    return node.value
  }
}

module.exports = BlindPairing

function noop () {}

function deriveReplyKeyPair (token) {
  return crypto.keyPair(crypto.hash([NS_REPLY, token]))
}

function deriveEphemeralKeyPair (token) {
  return crypto.keyPair(crypto.hash([NS_EPHEMERAL, token]))
}

function deriveDiscoveryKey (discoveryKey) {
  return crypto.hash([NS_DISCOVERY, discoveryKey])
}

function getMuxer (stream) {
  if (stream.userData) return stream.userData
  const protocol = Protomux.from(stream)
  stream.setKeepAlive(5000)
  stream.userData = protocol
  return protocol
}

function randomInterval (n) {
  return n + (n * 0.5 * Math.random()) | 0
}

},{"b4a":102,"blind-pairing-core":126,"compact-encoding":178,"debounceify":217,"hypercore-crypto":305,"is-options":371,"protomux":439,"ready-resource":480,"safety-catch":486,"xache":599}],130:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    this.length = num === 0 ? 1 : this.length;

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":132}],131:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":132}],132:[function(require,module,exports){

},{}],133:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":485}],134:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":133,"./ghash":138,"./incr32":139,"buffer-xor":163,"cipher-base":174,"inherits":369,"safe-buffer":485}],135:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":136,"./encrypter":137,"./modes/list.json":147}],136:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":133,"./authCipher":134,"./modes":146,"./streamCipher":149,"cipher-base":174,"evp_bytestokey":259,"inherits":369,"safe-buffer":485}],137:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":133,"./authCipher":134,"./modes":146,"./streamCipher":149,"cipher-base":174,"evp_bytestokey":259,"inherits":369,"safe-buffer":485}],138:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":485}],139:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],140:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":163}],141:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":163,"safe-buffer":485}],142:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":485}],143:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":485}],144:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":139,"buffer-xor":163,"safe-buffer":485}],145:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],146:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":140,"./cfb":141,"./cfb1":142,"./cfb8":143,"./ctr":144,"./ecb":145,"./list.json":147,"./ofb":148}],147:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],148:[function(require,module,exports){
(function (Buffer){(function (){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":164,"buffer-xor":163}],149:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":133,"cipher-base":174,"inherits":369,"safe-buffer":485}],150:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":135,"browserify-aes/modes":146,"browserify-des":151,"browserify-des/modes":152,"evp_bytestokey":259}],151:[function(require,module,exports){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":174,"des.js":219,"inherits":369,"safe-buffer":485}],152:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],153:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var randomBytes = require('randombytes');
var Buffer = require('safe-buffer').Buffer;

function getr(priv) {
	var len = priv.modulus.byteLength();
	var r;
	do {
		r = new BN(randomBytes(len));
	} while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2));
	return r;
}

function blind(priv) {
	var r = getr(priv);
	var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
	return { blinder: blinder, unblinder: r.invm(priv.modulus) };
}

function crt(msg, priv) {
	var blinds = blind(priv);
	var len = priv.modulus.byteLength();
	var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
	var c1 = blinded.toRed(BN.mont(priv.prime1));
	var c2 = blinded.toRed(BN.mont(priv.prime2));
	var qinv = priv.coefficient;
	var p = priv.prime1;
	var q = priv.prime2;
	var m1 = c1.redPow(priv.exponent1).fromRed();
	var m2 = c2.redPow(priv.exponent2).fromRed();
	var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
	return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len);
}
crt.getr = getr;

module.exports = crt;

},{"bn.js":130,"randombytes":465,"safe-buffer":485}],154:[function(require,module,exports){
'use strict';

module.exports = require('./browser/algorithms.json');

},{"./browser/algorithms.json":155}],155:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],156:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],157:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var createHash = require('create-hash');
var stream = require('readable-stream');
var inherits = require('inherits');
var sign = require('./sign');
var verify = require('./verify');

var algorithms = require('./algorithms.json');
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex');
  algorithms[key.toLowerCase()] = algorithms[key];
});

function Sign(algorithm) {
  stream.Writable.call(this);

  var data = algorithms[algorithm];
  if (!data) { throw new Error('Unknown message digest'); }

  this._hashType = data.hash;
  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Sign, stream.Writable);

Sign.prototype._write = function _write(data, _, done) {
  this._hash.update(data);
  done();
};

Sign.prototype.update = function update(data, enc) {
  this._hash.update(typeof data === 'string' ? Buffer.from(data, enc) : data);

  return this;
};

Sign.prototype.sign = function signMethod(key, enc) {
  this.end();
  var hash = this._hash.digest();
  var sig = sign(hash, key, this._hashType, this._signType, this._tag);

  return enc ? sig.toString(enc) : sig;
};

function Verify(algorithm) {
  stream.Writable.call(this);

  var data = algorithms[algorithm];
  if (!data) { throw new Error('Unknown message digest'); }

  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Verify, stream.Writable);

Verify.prototype._write = function _write(data, _, done) {
  this._hash.update(data);
  done();
};

Verify.prototype.update = function update(data, enc) {
  this._hash.update(typeof data === 'string' ? Buffer.from(data, enc) : data);

  return this;
};

Verify.prototype.verify = function verifyMethod(key, sig, enc) {
  var sigBuffer = typeof sig === 'string' ? Buffer.from(sig, enc) : sig;

  this.end();
  var hash = this._hash.digest();
  return verify(sigBuffer, hash, key, this._signType, this._tag);
};

function createSign(algorithm) {
  return new Sign(algorithm);
}

function createVerify(algorithm) {
  return new Verify(algorithm);
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
};

},{"./algorithms.json":155,"./sign":158,"./verify":159,"create-hash":212,"inherits":369,"readable-stream":479,"safe-buffer":485}],158:[function(require,module,exports){
'use strict';

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer;
var createHmac = require('create-hmac');
var crt = require('browserify-rsa');
var EC = require('elliptic').ec;
var BN = require('bn.js');
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');

var RSA_PKCS1_PADDING = 1;

function sign(hash, key, hashType, signType, tag) {
  var priv = parseKeys(key);
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong private key type'); }
    return ecSign(hash, priv);
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') { throw new Error('wrong private key type'); }
    return dsaSign(hash, priv, hashType);
  }
  if (signType !== 'rsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong private key type'); }
  if (key.padding !== undefined && key.padding !== RSA_PKCS1_PADDING) { throw new Error('illegal or unsupported padding mode'); }

  hash = Buffer.concat([tag, hash]);
  var len = priv.modulus.byteLength();
  var pad = [0, 1];
  while (hash.length + pad.length + 1 < len) { pad.push(0xff); }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) { pad.push(hash[i]); }

  var out = crt(pad, priv);
  return out;
}

function ecSign(hash, priv) {
  var curveId = curves[priv.curve.join('.')];
  if (!curveId) { throw new Error('unknown curve ' + priv.curve.join('.')); }

  var curve = new EC(curveId);
  var key = curve.keyFromPrivate(priv.privateKey);
  var out = key.sign(hash);

  return Buffer.from(out.toDER());
}

function dsaSign(hash, priv, algo) {
  var x = priv.params.priv_key;
  var p = priv.params.p;
  var q = priv.params.q;
  var g = priv.params.g;
  var r = new BN(0);
  var k;
  var H = bits2int(hash, q).mod(q);
  var s = false;
  var kv = getKey(x, q, hash, algo);
  while (s === false) {
    k = makeKey(q, kv, algo);
    r = makeR(g, k, p, q);
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
    if (s.cmpn(0) === 0) {
      s = false;
      r = new BN(0);
    }
  }
  return toDER(r, s);
}

function toDER(r, s) {
  r = r.toArray();
  s = s.toArray();

  // Pad values
  if (r[0] & 0x80) { r = [0].concat(r); }
  if (s[0] & 0x80) { s = [0].concat(s); }

  var total = r.length + s.length + 4;
  var res = [
    0x30, total, 0x02, r.length
  ];
  res = res.concat(r, [0x02, s.length], s);
  return Buffer.from(res);
}

function getKey(x, q, hash, algo) {
  x = Buffer.from(x.toArray());
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length);
    x = Buffer.concat([zeros, x]);
  }
  var hlen = hash.length;
  var hbits = bits2octets(hash, q);
  var v = Buffer.alloc(hlen);
  v.fill(1);
  var k = Buffer.alloc(hlen);
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  return { k: k, v: v };
}

function bits2int(obits, q) {
  var bits = new BN(obits);
  var shift = (obits.length << 3) - q.bitLength();
  if (shift > 0) { bits.ishrn(shift); }
  return bits;
}

function bits2octets(bits, q) {
  bits = bits2int(bits, q);
  bits = bits.mod(q);
  var out = Buffer.from(bits.toArray());
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length);
    out = Buffer.concat([zeros, out]);
  }
  return out;
}

function makeKey(q, kv, algo) {
  var t;
  var k;

  do {
    t = Buffer.alloc(0);

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      t = Buffer.concat([t, kv.v]);
    }

    k = bits2int(t, q);
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest();
    kv.v = createHmac(algo, kv.k).update(kv.v).digest();
  } while (k.cmp(q) !== -1);

  return k;
}

function makeR(g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}

module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;

},{"./curves.json":156,"bn.js":130,"browserify-rsa":153,"create-hmac":214,"elliptic":231,"parse-asn1":428,"safe-buffer":485}],159:[function(require,module,exports){
'use strict';

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer;
var BN = require('bn.js');
var EC = require('elliptic').ec;
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');

function verify(sig, hash, key, signType, tag) {
  var pub = parseKeys(key);
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong public key type'); }
    return ecVerify(sig, hash, pub);
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') { throw new Error('wrong public key type'); }
    return dsaVerify(sig, hash, pub);
  }
  if (signType !== 'rsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong public key type'); }

  hash = Buffer.concat([tag, hash]);
  var len = pub.modulus.byteLength();
  var pad = [1];
  var padNum = 0;
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff);
    padNum += 1;
  }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }
  pad = Buffer.from(pad);
  var red = BN.mont(pub.modulus);
  sig = new BN(sig).toRed(red);

  sig = sig.redPow(new BN(pub.publicExponent));
  sig = Buffer.from(sig.fromRed().toArray());
  var out = padNum < 8 ? 1 : 0;
  len = Math.min(sig.length, pad.length);
  if (sig.length !== pad.length) { out = 1; }

  i = -1;
  while (++i < len) { out |= sig[i] ^ pad[i]; }
  return out === 0;
}

function ecVerify(sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')];
  if (!curveId) { throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.')); }

  var curve = new EC(curveId);
  var pubkey = pub.data.subjectPrivateKey.data;

  return curve.verify(hash, sig, pubkey);
}

function dsaVerify(sig, hash, pub) {
  var p = pub.data.p;
  var q = pub.data.q;
  var g = pub.data.g;
  var y = pub.data.pub_key;
  var unpacked = parseKeys.signature.decode(sig, 'der');
  var s = unpacked.s;
  var r = unpacked.r;
  checkValue(s, q);
  checkValue(r, q);
  var montp = BN.mont(p);
  var w = s.invm(q);
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q);
  return v.cmp(r) === 0;
}

function checkValue(b, q) {
  if (b.cmpn(0) <= 0) { throw new Error('invalid sig'); }
  if (b.cmp(q) >= 0) { throw new Error('invalid sig'); }
}

module.exports = verify;

},{"./curves.json":156,"bn.js":130,"elliptic":231,"parse-asn1":428,"safe-buffer":485}],160:[function(require,module,exports){
(function (Buffer){(function (){
function allocUnsafe (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  }

  if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }

  if (Buffer.allocUnsafe) {
    return Buffer.allocUnsafe(size)
  } else {
    return new Buffer(size)
  }
}

module.exports = allocUnsafe

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":164}],161:[function(require,module,exports){
(function (Buffer){(function (){
var bufferFill = require('buffer-fill')
var allocUnsafe = require('buffer-alloc-unsafe')

module.exports = function alloc (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  }

  if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }

  if (Buffer.alloc) {
    return Buffer.alloc(size, fill, encoding)
  }

  var buffer = allocUnsafe(size)

  if (size === 0) {
    return buffer
  }

  if (fill === undefined) {
    return bufferFill(buffer, 0)
  }

  if (typeof encoding !== 'string') {
    encoding = undefined
  }

  return bufferFill(buffer, fill, encoding)
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":164,"buffer-alloc-unsafe":160,"buffer-fill":162}],162:[function(require,module,exports){
(function (Buffer){(function (){
/* Node.js 6.4.0 and up has full support */
var hasFullSupport = (function () {
  try {
    if (!Buffer.isEncoding('latin1')) {
      return false
    }

    var buf = Buffer.alloc ? Buffer.alloc(4) : new Buffer(4)

    buf.fill('ab', 'ucs2')

    return (buf.toString('hex') === '61006200')
  } catch (_) {
    return false
  }
}())

function isSingleByte (val) {
  return (val.length === 1 && val.charCodeAt(0) < 256)
}

function fillWithNumber (buffer, val, start, end) {
  if (start < 0 || end > buffer.length) {
    throw new RangeError('Out of range index')
  }

  start = start >>> 0
  end = end === undefined ? buffer.length : end >>> 0

  if (end > start) {
    buffer.fill(val, start, end)
  }

  return buffer
}

function fillWithBuffer (buffer, val, start, end) {
  if (start < 0 || end > buffer.length) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return buffer
  }

  start = start >>> 0
  end = end === undefined ? buffer.length : end >>> 0

  var pos = start
  var len = val.length
  while (pos <= (end - len)) {
    val.copy(buffer, pos)
    pos += len
  }

  if (pos !== end) {
    val.copy(buffer, pos, 0, end - pos)
  }

  return buffer
}

function fill (buffer, val, start, end, encoding) {
  if (hasFullSupport) {
    return buffer.fill(val, start, end, encoding)
  }

  if (typeof val === 'number') {
    return fillWithNumber(buffer, val, start, end)
  }

  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = buffer.length
    } else if (typeof end === 'string') {
      encoding = end
      end = buffer.length
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }

    if (encoding === 'latin1') {
      encoding = 'binary'
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }

    if (val === '') {
      return fillWithNumber(buffer, 0, start, end)
    }

    if (isSingleByte(val)) {
      return fillWithNumber(buffer, val.charCodeAt(0), start, end)
    }

    val = new Buffer(val, encoding)
  }

  if (Buffer.isBuffer(val)) {
    return fillWithBuffer(buffer, val, start, end)
  }

  // Other values (e.g. undefined, boolean, object) results in zero-fill
  return fillWithNumber(buffer, 0, start, end)
}

module.exports = fill

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":164}],163:[function(require,module,exports){
(function (Buffer){(function (){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":164}],164:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":105,"buffer":164,"ieee754":368}],165:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

var $apply = require('./functionApply');
var $call = require('./functionCall');
var $reflectApply = require('./reflectApply');

/** @type {import('./actualApply')} */
module.exports = $reflectApply || bind.call($call, $apply);

},{"./functionApply":167,"./functionCall":168,"./reflectApply":170,"function-bind":265}],166:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var $apply = require('./functionApply');
var actualApply = require('./actualApply');

/** @type {import('./applyBind')} */
module.exports = function applyBind() {
	return actualApply(bind, $apply, arguments);
};

},{"./actualApply":165,"./functionApply":167,"function-bind":265}],167:[function(require,module,exports){
'use strict';

/** @type {import('./functionApply')} */
module.exports = Function.prototype.apply;

},{}],168:[function(require,module,exports){
'use strict';

/** @type {import('./functionCall')} */
module.exports = Function.prototype.call;

},{}],169:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var $TypeError = require('es-errors/type');

var $call = require('./functionCall');
var $actualApply = require('./actualApply');

/** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */
module.exports = function callBindBasic(args) {
	if (args.length < 1 || typeof args[0] !== 'function') {
		throw new $TypeError('a function is required');
	}
	return $actualApply(bind, $call, args);
};

},{"./actualApply":165,"./functionCall":168,"es-errors/type":254,"function-bind":265}],170:[function(require,module,exports){
'use strict';

/** @type {import('./reflectApply')} */
module.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;

},{}],171:[function(require,module,exports){
'use strict';

var setFunctionLength = require('set-function-length');

var $defineProperty = require('es-define-property');

var callBindBasic = require('call-bind-apply-helpers');
var applyBind = require('call-bind-apply-helpers/applyBind');

module.exports = function callBind(originalFunction) {
	var func = callBindBasic(arguments);
	var adjustedLength = originalFunction.length - (arguments.length - 1);
	return setFunctionLength(
		func,
		1 + (adjustedLength > 0 ? adjustedLength : 0),
		true
	);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"call-bind-apply-helpers":169,"call-bind-apply-helpers/applyBind":166,"es-define-property":248,"set-function-length":488}],172:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBindBasic = require('call-bind-apply-helpers');

/** @type {(thisArg: string, searchString: string, position?: number) => number} */
var $indexOf = callBindBasic([GetIntrinsic('%String.prototype.indexOf%')]);

/** @type {import('.')} */
module.exports = function callBoundIntrinsic(name, allowMissing) {
	/* eslint no-extra-parens: 0 */

	var intrinsic = /** @type {(this: unknown, ...args: unknown[]) => unknown} */ (GetIntrinsic(name, !!allowMissing));
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBindBasic(/** @type {const} */ ([intrinsic]));
	}
	return intrinsic;
};

},{"call-bind-apply-helpers":169,"get-intrinsic":266}],173:[function(require,module,exports){
const assert = require('nanoassert')

module.exports = Chacha20

const constant = [1634760805, 857760878, 2036477234, 1797285236]

function Chacha20 (nonce, key, counter) {
  assert(key.byteLength === 32)
  assert(nonce.byteLength === 8 || nonce.byteLength === 12)

  const n = new Uint32Array(nonce.buffer, nonce.byteOffset, nonce.byteLength / 4)
  const k = new Uint32Array(key.buffer, key.byteOffset, key.byteLength / 4)

  if (!counter) counter = 0
  assert(counter < Number.MAX_SAFE_INTEGER)

  this.finalized = false
  this.pos = 0
  this.state = new Uint32Array(16)

  for (let i = 0; i < 4; i++) this.state[i] = constant[i]
  for (let i = 0; i < 8; i++) this.state[4 + i] = k[i]

  this.state[12] = counter & 0xffffffff

  if (n.byteLength === 8) {
    this.state[13] = (counter && 0xffffffff00000000) >> 32
    this.state[14] = n[0]
    this.state[15] = n[1]
  } else {
    this.state[13] = n[0]
    this.state[14] = n[1]
    this.state[15] = n[2]
  }

  return this
}

Chacha20.prototype.update = function (output, input) {
  assert(!this.finalized, 'cipher finalized.')
  assert(output.byteLength >= input.byteLength,
    'output cannot be shorter than input.')

  let len = input.length
  let offset = this.pos % 64
  this.pos += len

  // input position
  let j = 0

  let keyStream = chacha20Block(this.state)

  // try to finsih the current block
  while (offset > 0 && len > 0) {
    output[j] = input[j++] ^ keyStream[offset]
    offset = (offset + 1) & 0x3f
    if (!offset) this.state[12]++
    len--
  }

  // encrypt rest block at a time
  while (len > 0) {
    keyStream = chacha20Block(this.state)

    // less than a full block remaining
    if (len < 64) {
      for (let i = 0; i < len; i++) {
        output[j] = input[j++] ^ keyStream[offset++]
        offset &= 0x3f
      }

      return
    }

    for (; offset < 64;) {
      output[j] = input[j++] ^ keyStream[offset++]
    }

    this.state[12]++
    offset = 0
    len -= 64
  }
}

Chacha20.prototype.final = function () {
  this.state.fill(0)
  this.pos = 0
  this.finalized = true
}

function chacha20Block (state) {
  // working state
  const ws = new Uint32Array(16)
  for (let i = 16; i--;) ws[i] = state[i]

  for (let i = 0; i < 20; i += 2) {
    QR(ws, 0, 4, 8, 12) // column 0
    QR(ws, 1, 5, 9, 13) // column 1
    QR(ws, 2, 6, 10, 14) // column 2
    QR(ws, 3, 7, 11, 15) // column 3

    QR(ws, 0, 5, 10, 15) // diagonal 1 (main diagonal)
    QR(ws, 1, 6, 11, 12) // diagonal 2
    QR(ws, 2, 7, 8, 13) // diagonal 3
    QR(ws, 3, 4, 9, 14) // diagonal 4
  }

  for (let i = 0; i < 16; i++) {
    ws[i] += state[i]
  }

  return new Uint8Array(ws.buffer, ws.byteOffset, ws.byteLength)
}

function rotl (a, b) {
  return ((a << b) | (a >>> (32 - b)))
}

function QR (obj, a, b, c, d) {
  obj[a] += obj[b]
  obj[d] ^= obj[a]
  obj[d] = rotl(obj[d], 16)

  obj[c] += obj[d]
  obj[b] ^= obj[c]
  obj[b] = rotl(obj[b], 12)

  obj[a] += obj[b]
  obj[d] ^= obj[a]
  obj[d] = rotl(obj[d], 8)

  obj[c] += obj[d]
  obj[b] ^= obj[c]
  obj[b] = rotl(obj[b], 7)
}

},{"nanoassert":390}],174:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var Transform = require('stream').Transform;
var StringDecoder = require('string_decoder').StringDecoder;
var inherits = require('inherits');

function CipherBase(hashMode) {
	Transform.call(this);
	this.hashMode = typeof hashMode === 'string';
	if (this.hashMode) {
		this[hashMode] = this._finalOrDigest;
	} else {
		this['final'] = this._finalOrDigest;
	}
	if (this._final) {
		this.__final = this._final;
		this._final = null;
	}
	this._decoder = null;
	this._encoding = null;
}
inherits(CipherBase, Transform);

var useUint8Array = typeof Uint8Array !== 'undefined';
var useArrayBuffer = typeof ArrayBuffer !== 'undefined'
	&& typeof Uint8Array !== 'undefined'
	&& ArrayBuffer.isView
	&& (Buffer.prototype instanceof Uint8Array || Buffer.TYPED_ARRAY_SUPPORT);

function toBuffer(data, encoding) {
	/*
	 * No need to do anything for exact instance
	 * This is only valid when safe-buffer.Buffer === buffer.Buffer, i.e. when Buffer.from/Buffer.alloc existed
	 */
	if (data instanceof Buffer) {
		return data;
	}

	// Convert strings to Buffer
	if (typeof data === 'string') {
		return Buffer.from(data, encoding);
	}

	/*
	 * Wrap any TypedArray instances and DataViews
	 * Makes sense only on engines with full TypedArray support -- let Buffer detect that
	 */
	if (useArrayBuffer && ArrayBuffer.isView(data)) {
		// Bug in Node.js <6.3.1, which treats this as out-of-bounds
		if (data.byteLength === 0) {
			return Buffer.alloc(0);
		}

		var res = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
		/*
		 * Recheck result size, as offset/length doesn't work on Node.js <5.10
		 * We just go to Uint8Array case if this fails
		 */
		if (res.byteLength === data.byteLength) {
			return res;
		}
	}

	/*
	 * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over
	 * Doesn't make sense with other TypedArray instances
	 */
	if (useUint8Array && data instanceof Uint8Array) {
		return Buffer.from(data);
	}

	/*
	 * Old Buffer polyfill on an engine that doesn't have TypedArray support
	 * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed
	 * Convert to our current Buffer implementation
	 */
	if (
		Buffer.isBuffer(data)
			&& data.constructor
			&& typeof data.constructor.isBuffer === 'function'
			&& data.constructor.isBuffer(data)
	) {
		return Buffer.from(data);
	}

	throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
}

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
	var bufferData = toBuffer(data, inputEnc); // asserts correct input type
	var outData = this._update(bufferData);
	if (this.hashMode) {
		return this;
	}

	if (outputEnc) {
		outData = this._toString(outData, outputEnc);
	}

	return outData;
};

CipherBase.prototype.setAutoPadding = function () {};
CipherBase.prototype.getAuthTag = function () {
	throw new Error('trying to get auth tag in unsupported state');
};

CipherBase.prototype.setAuthTag = function () {
	throw new Error('trying to set auth tag in unsupported state');
};

CipherBase.prototype.setAAD = function () {
	throw new Error('trying to set aad in unsupported state');
};

CipherBase.prototype._transform = function (data, _, next) {
	var err;
	try {
		if (this.hashMode) {
			this._update(data);
		} else {
			this.push(this._update(data));
		}
	} catch (e) {
		err = e;
	} finally {
		next(err);
	}
};
CipherBase.prototype._flush = function (done) {
	var err;
	try {
		this.push(this.__final());
	} catch (e) {
		err = e;
	}

	done(err);
};
CipherBase.prototype._finalOrDigest = function (outputEnc) {
	var outData = this.__final() || Buffer.alloc(0);
	if (outputEnc) {
		outData = this._toString(outData, outputEnc, true);
	}
	return outData;
};

CipherBase.prototype._toString = function (value, enc, fin) {
	if (!this._decoder) {
		this._decoder = new StringDecoder(enc);
		this._encoding = enc;
	}

	if (this._encoding !== enc) {
		throw new Error('can’t switch encodings');
	}

	var out = this._decoder.write(value);
	if (fin) {
		out += this._decoder.end();
	}

	return out;
};

module.exports = CipherBase;

},{"inherits":369,"safe-buffer":485,"stream":563,"string_decoder":579}],175:[function(require,module,exports){
const b4a = require('b4a')

module.exports = codecs

codecs.ascii = createString('ascii')
codecs.utf8 = createString('utf-8')
codecs.hex = createString('hex')
codecs.base64 = createString('base64')
codecs.ucs2 = createString('ucs2')
codecs.utf16le = createString('utf16le')
codecs.ndjson = createJSON(true)
codecs.json = createJSON(false)
codecs.binary = {
  name: 'binary',
  encode: function encodeBinary (obj) {
    return typeof obj === 'string'
      ? b4a.from(obj, 'utf-8')
      : b4a.toBuffer(obj)
  },
  decode: function decodeBinary (buf) {
    return b4a.toBuffer(buf)
  }
}

function isCompactEncoding (c) {
  return !!(c.encode && c.decode && c.preencode)
}

function fromCompactEncoding (c) {
  return {
    name: 'compact-encoding',
    encode: function encodeWithCompact (value) {
      const state = { start: 0, end: 0, buffer: null, cache: null }
      c.preencode(state, value)
      state.buffer = b4a.allocUnsafe(state.end)
      c.encode(state, value)
      return state.buffer
    },
    decode: function decodeWithCompact (buffer) {
      return c.decode({ start: 0, end: buffer.byteLength, buffer, cache: null })
    }
  }
}

function codecs (fmt, fallback) {
  if (typeof fmt === 'object' && fmt) {
    return isCompactEncoding(fmt) ? fromCompactEncoding(fmt) : fmt
  }

  switch (fmt) {
    case 'ndjson': return codecs.ndjson
    case 'json': return codecs.json
    case 'ascii': return codecs.ascii
    case 'utf-8':
    case 'utf8': return codecs.utf8
    case 'hex': return codecs.hex
    case 'base64': return codecs.base64
    case 'ucs-2':
    case 'ucs2': return codecs.ucs2
    case 'utf16-le':
    case 'utf16le': return codecs.utf16le
  }

  return fallback !== undefined ? fallback : codecs.binary
}

function createJSON (newline) {
  return {
    name: newline ? 'ndjson' : 'json',
    encode: newline ? encodeNDJSON : encodeJSON,
    decode: function decodeJSON (buf) {
      return JSON.parse(b4a.toString(buf))
    }
  }

  function encodeJSON (val) {
    return b4a.from(JSON.stringify(val))
  }

  function encodeNDJSON (val) {
    return b4a.from(JSON.stringify(val) + '\n')
  }
}

function createString (type) {
  return {
    name: type,
    encode: function encodeString (val) {
      if (typeof val !== 'string') val = val.toString()
      return b4a.from(val, type)
    },
    decode: function decodeString (buf) {
      return b4a.toString(buf, type)
    }
  }
}

},{"b4a":102}],176:[function(require,module,exports){
const c = require('compact-encoding')

const port = c.uint16

const address = (host, family) => {
  return {
    preencode (state, m) {
      host.preencode(state, m.host)
      port.preencode(state, m.port)
    },
    encode (state, m) {
      host.encode(state, m.host)
      port.encode(state, m.port)
    },
    decode (state) {
      return {
        host: host.decode(state),
        family,
        port: port.decode(state)
      }
    }
  }
}

const ipv4 = {
  preencode (state) {
    state.end += 4
  },
  encode (state, string) {
    const start = state.start
    const end = start + 4

    let i = 0

    while (i < string.length) {
      let n = 0
      let c

      while (i < string.length && (c = string.charCodeAt(i++)) !== /* . */ 0x2e) {
        n = n * 10 + (c - /* 0 */ 0x30)
      }

      state.buffer[state.start++] = n
    }

    state.start = end
  },
  decode (state) {
    if (state.end - state.start < 4) throw new Error('Out of bounds')
    return (
      state.buffer[state.start++] + '.' +
      state.buffer[state.start++] + '.' +
      state.buffer[state.start++] + '.' +
      state.buffer[state.start++]
    )
  }
}

const ipv4Address = address(ipv4, 4)

const ipv6 = {
  preencode (state) {
    state.end += 16
  },
  encode (state, string) {
    const start = state.start
    const end = start + 16

    let i = 0
    let split = null

    while (i < string.length) {
      let n = 0
      let c

      while (i < string.length && (c = string.charCodeAt(i++)) !== /* : */ 0x3a) {
        if (c >= 0x30 && c <= 0x39) n = n * 0x10 + (c - /* 0 */ 0x30)
        else if (c >= 0x41 && c <= 0x46) n = n * 0x10 + (c - /* A */ 0x41 + 10)
        else if (c >= 0x61 && c <= 0x66) n = n * 0x10 + (c - /* a */ 0x61 + 10)
      }

      state.buffer[state.start++] = n >>> 8
      state.buffer[state.start++] = n

      if (i < string.length && string.charCodeAt(i) === /* : */ 0x3a) {
        i++
        split = state.start
      }
    }

    if (split !== null) {
      const offset = end - state.start
      state.buffer
        .copyWithin(split + offset, split)
        .fill(0, split, split + offset)
    }

    state.start = end
  },
  decode (state) {
    if (state.end - state.start < 16) throw new Error('Out of bounds')
    return (
      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +
      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +
      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +
      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +
      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +
      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +
      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +
      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16)
    )
  }
}

const ipv6Address = address(ipv6, 6)

const ip = {
  preencode (state, string) {
    const family = string.includes(':') ? 6 : 4
    c.uint8.preencode(state, family)
    if (family === 4) ipv4.preencode(state)
    else ipv6.preencode(state)
  },
  encode (state, string) {
    const family = string.includes(':') ? 6 : 4
    c.uint8.encode(state, family)
    if (family === 4) ipv4.encode(state, string)
    else ipv6.encode(state, string)
  },
  decode (state) {
    const family = c.uint8.decode(state)
    if (family === 4) return ipv4.decode(state)
    else return ipv6.decode(state)
  }
}

const ipAddress = {
  preencode (state, m) {
    ip.preencode(state, m.host)
    port.preencode(state, m.port)
  },
  encode (state, m) {
    ip.encode(state, m.host)
    port.encode(state, m.port)
  },
  decode (state) {
    const family = c.uint8.decode(state)
    return {
      host: family === 4 ? ipv4.decode(state) : ipv6.decode(state),
      family,
      port: port.decode(state)
    }
  }
}

module.exports = {
  port,
  ipv4,
  ipv4Address,
  ipv6,
  ipv6Address,
  ip,
  ipAddress
}

},{"compact-encoding":178}],177:[function(require,module,exports){
const LE = exports.LE = (new Uint8Array(new Uint16Array([0xff]).buffer))[0] === 0xff

exports.BE = !LE

},{}],178:[function(require,module,exports){
const b4a = require('b4a')

const { BE } = require('./endian')

exports.state = function (start = 0, end = 0, buffer = null) {
  return { start, end, buffer, cache: null }
}

const raw = exports.raw = require('./raw')

const uint = exports.uint = {
  preencode (state, n) {
    state.end += n <= 0xfc ? 1 : n <= 0xffff ? 3 : n <= 0xffffffff ? 5 : 9
  },
  encode (state, n) {
    if (n <= 0xfc) uint8.encode(state, n)
    else if (n <= 0xffff) {
      state.buffer[state.start++] = 0xfd
      uint16.encode(state, n)
    } else if (n <= 0xffffffff) {
      state.buffer[state.start++] = 0xfe
      uint32.encode(state, n)
    } else {
      state.buffer[state.start++] = 0xff
      uint64.encode(state, n)
    }
  },
  decode (state) {
    const a = uint8.decode(state)
    if (a <= 0xfc) return a
    if (a === 0xfd) return uint16.decode(state)
    if (a === 0xfe) return uint32.decode(state)
    return uint64.decode(state)
  }
}

const uint8 = exports.uint8 = {
  preencode (state, n) {
    state.end += 1
  },
  encode (state, n) {
    validateUint(n)
    state.buffer[state.start++] = n
  },
  decode (state) {
    if (state.start >= state.end) throw new Error('Out of bounds')
    return state.buffer[state.start++]
  }
}

const uint16 = exports.uint16 = {
  preencode (state, n) {
    state.end += 2
  },
  encode (state, n) {
    validateUint(n)
    state.buffer[state.start++] = n
    state.buffer[state.start++] = n >>> 8
  },
  decode (state) {
    if (state.end - state.start < 2) throw new Error('Out of bounds')
    return (
      state.buffer[state.start++] +
      state.buffer[state.start++] * 0x100
    )
  }
}

const uint24 = exports.uint24 = {
  preencode (state, n) {
    state.end += 3
  },
  encode (state, n) {
    validateUint(n)
    state.buffer[state.start++] = n
    state.buffer[state.start++] = n >>> 8
    state.buffer[state.start++] = n >>> 16
  },
  decode (state) {
    if (state.end - state.start < 3) throw new Error('Out of bounds')
    return (
      state.buffer[state.start++] +
      state.buffer[state.start++] * 0x100 +
      state.buffer[state.start++] * 0x10000
    )
  }
}

const uint32 = exports.uint32 = {
  preencode (state, n) {
    state.end += 4
  },
  encode (state, n) {
    validateUint(n)
    state.buffer[state.start++] = n
    state.buffer[state.start++] = n >>> 8
    state.buffer[state.start++] = n >>> 16
    state.buffer[state.start++] = n >>> 24
  },
  decode (state) {
    if (state.end - state.start < 4) throw new Error('Out of bounds')
    return (
      state.buffer[state.start++] +
      state.buffer[state.start++] * 0x100 +
      state.buffer[state.start++] * 0x10000 +
      state.buffer[state.start++] * 0x1000000
    )
  }
}

const uint40 = exports.uint40 = {
  preencode (state, n) {
    state.end += 5
  },
  encode (state, n) {
    validateUint(n)
    const r = Math.floor(n / 0x100)
    uint8.encode(state, n)
    uint32.encode(state, r)
  },
  decode (state) {
    if (state.end - state.start < 5) throw new Error('Out of bounds')
    return uint8.decode(state) + 0x100 * uint32.decode(state)
  }
}

const uint48 = exports.uint48 = {
  preencode (state, n) {
    state.end += 6
  },
  encode (state, n) {
    validateUint(n)
    const r = Math.floor(n / 0x10000)
    uint16.encode(state, n)
    uint32.encode(state, r)
  },
  decode (state) {
    if (state.end - state.start < 6) throw new Error('Out of bounds')
    return uint16.decode(state) + 0x10000 * uint32.decode(state)
  }
}

const uint56 = exports.uint56 = {
  preencode (state, n) {
    state.end += 7
  },
  encode (state, n) {
    validateUint(n)
    const r = Math.floor(n / 0x1000000)
    uint24.encode(state, n)
    uint32.encode(state, r)
  },
  decode (state) {
    if (state.end - state.start < 7) throw new Error('Out of bounds')
    return uint24.decode(state) + 0x1000000 * uint32.decode(state)
  }
}

const uint64 = exports.uint64 = {
  preencode (state, n) {
    state.end += 8
  },
  encode (state, n) {
    validateUint(n)
    const r = Math.floor(n / 0x100000000)
    uint32.encode(state, n)
    uint32.encode(state, r)
  },
  decode (state) {
    if (state.end - state.start < 8) throw new Error('Out of bounds')
    return uint32.decode(state) + 0x100000000 * uint32.decode(state)
  }
}

const int = exports.int = zigZagInt(uint)
exports.int8 = zigZagInt(uint8)
exports.int16 = zigZagInt(uint16)
exports.int24 = zigZagInt(uint24)
exports.int32 = zigZagInt(uint32)
exports.int40 = zigZagInt(uint40)
exports.int48 = zigZagInt(uint48)
exports.int56 = zigZagInt(uint56)
exports.int64 = zigZagInt(uint64)

const biguint64 = exports.biguint64 = {
  preencode (state, n) {
    state.end += 8
  },
  encode (state, n) {
    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)
    view.setBigUint64(0, n, true) // little endian
    state.start += 8
  },
  decode (state) {
    if (state.end - state.start < 8) throw new Error('Out of bounds')
    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)
    const n = view.getBigUint64(0, true) // little endian
    state.start += 8
    return n
  }
}

exports.bigint64 = zigZagBigInt(biguint64)

const biguint = exports.biguint = {
  preencode (state, n) {
    let len = 0
    for (let m = n; m; m = m >> 64n) len++
    uint.preencode(state, len)
    state.end += 8 * len
  },
  encode (state, n) {
    let len = 0
    for (let m = n; m; m = m >> 64n) len++
    uint.encode(state, len)
    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8 * len)
    for (let m = n, i = 0; m; m = m >> 64n, i += 8) {
      view.setBigUint64(i, BigInt.asUintN(64, m), true) // little endian
    }
    state.start += 8 * len
  },
  decode (state) {
    const len = uint.decode(state)
    if (state.end - state.start < 8 * len) throw new Error('Out of bounds')
    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8 * len)
    let n = 0n
    for (let i = len - 1; i >= 0; i--) n = (n << 64n) + view.getBigUint64(i * 8, true) // little endian
    state.start += 8 * len
    return n
  }
}

exports.bigint = zigZagBigInt(biguint)

exports.lexint = require('./lexint')

exports.float32 = {
  preencode (state, n) {
    state.end += 4
  },
  encode (state, n) {
    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 4)
    view.setFloat32(0, n, true) // little endian
    state.start += 4
  },
  decode (state) {
    if (state.end - state.start < 4) throw new Error('Out of bounds')
    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 4)
    const float = view.getFloat32(0, true) // little endian
    state.start += 4
    return float
  }
}

exports.float64 = {
  preencode (state, n) {
    state.end += 8
  },
  encode (state, n) {
    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)
    view.setFloat64(0, n, true) // little endian
    state.start += 8
  },
  decode (state) {
    if (state.end - state.start < 8) throw new Error('Out of bounds')
    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)
    const float = view.getFloat64(0, true) // little endian
    state.start += 8
    return float
  }
}

const buffer = exports.buffer = {
  preencode (state, b) {
    if (b) uint8array.preencode(state, b)
    else state.end++
  },
  encode (state, b) {
    if (b) uint8array.encode(state, b)
    else state.buffer[state.start++] = 0
  },
  decode (state) {
    const len = uint.decode(state)
    if (len === 0) return null
    if (state.end - state.start < len) throw new Error('Out of bounds')
    return state.buffer.subarray(state.start, (state.start += len))
  }
}

exports.binary = {
  ...buffer,
  preencode (state, b) {
    if (typeof b === 'string') utf8.preencode(state, b)
    else buffer.preencode(state, b)
  },
  encode (state, b) {
    if (typeof b === 'string') utf8.encode(state, b)
    else buffer.encode(state, b)
  }
}

exports.arraybuffer = {
  preencode (state, b) {
    uint.preencode(state, b.byteLength)
    state.end += b.byteLength
  },
  encode (state, b) {
    uint.encode(state, b.byteLength)

    const view = new Uint8Array(b)

    state.buffer.set(view, state.start)
    state.start += b.byteLength
  },
  decode (state) {
    const len = uint.decode(state)

    const b = new ArrayBuffer(len)
    const view = new Uint8Array(b)

    view.set(state.buffer.subarray(state.start, state.start += len))

    return b
  }
}

function typedarray (TypedArray, swap) {
  const n = TypedArray.BYTES_PER_ELEMENT

  return {
    preencode (state, b) {
      uint.preencode(state, b.length)
      state.end += b.byteLength
    },
    encode (state, b) {
      uint.encode(state, b.length)

      const view = new Uint8Array(b.buffer, b.byteOffset, b.byteLength)

      if (BE && swap) swap(view)

      state.buffer.set(view, state.start)
      state.start += b.byteLength
    },
    decode (state) {
      const len = uint.decode(state)

      let b = state.buffer.subarray(state.start, state.start += len * n)
      if (b.byteLength !== len * n) throw new Error('Out of bounds')
      if ((b.byteOffset % n) !== 0) b = new Uint8Array(b)

      if (BE && swap) swap(b)

      return new TypedArray(b.buffer, b.byteOffset, b.byteLength / n)
    }
  }
}

const uint8array = exports.uint8array = typedarray(Uint8Array)
exports.uint16array = typedarray(Uint16Array, b4a.swap16)
exports.uint32array = typedarray(Uint32Array, b4a.swap32)

exports.int8array = typedarray(Int8Array)
exports.int16array = typedarray(Int16Array, b4a.swap16)
exports.int32array = typedarray(Int32Array, b4a.swap32)

exports.biguint64array = typedarray(BigUint64Array, b4a.swap64)
exports.bigint64array = typedarray(BigInt64Array, b4a.swap64)

exports.float32array = typedarray(Float32Array, b4a.swap32)
exports.float64array = typedarray(Float64Array, b4a.swap64)

function string (encoding) {
  return {
    preencode (state, s) {
      const len = b4a.byteLength(s, encoding)
      uint.preencode(state, len)
      state.end += len
    },
    encode (state, s) {
      const len = b4a.byteLength(s, encoding)
      uint.encode(state, len)
      b4a.write(state.buffer, s, state.start, encoding)
      state.start += len
    },
    decode (state) {
      const len = uint.decode(state)
      if (state.end - state.start < len) throw new Error('Out of bounds')
      return b4a.toString(state.buffer, encoding, state.start, (state.start += len))
    },
    fixed (n) {
      return {
        preencode (state) {
          state.end += n
        },
        encode (state, s) {
          b4a.write(state.buffer, s, state.start, n, encoding)
          state.start += n
        },
        decode (state) {
          if (state.end - state.start < n) throw new Error('Out of bounds')
          return b4a.toString(state.buffer, encoding, state.start, (state.start += n))
        }
      }
    }
  }
}

const utf8 = exports.string = exports.utf8 = string('utf-8')
exports.ascii = string('ascii')
exports.hex = string('hex')
exports.base64 = string('base64')
exports.ucs2 = exports.utf16le = string('utf16le')

exports.bool = {
  preencode (state, b) {
    state.end++
  },
  encode (state, b) {
    state.buffer[state.start++] = b ? 1 : 0
  },
  decode (state) {
    if (state.start >= state.end) throw Error('Out of bounds')
    return state.buffer[state.start++] === 1
  }
}

const fixed = exports.fixed = function fixed (n) {
  return {
    preencode (state, s) {
      if (s.byteLength !== n) throw new Error('Incorrect buffer size')
      state.end += n
    },
    encode (state, s) {
      state.buffer.set(s, state.start)
      state.start += n
    },
    decode (state) {
      if (state.end - state.start < n) throw new Error('Out of bounds')
      return state.buffer.subarray(state.start, (state.start += n))
    }
  }
}

exports.fixed32 = fixed(32)
exports.fixed64 = fixed(64)

exports.array = function array (enc) {
  return {
    preencode (state, list) {
      uint.preencode(state, list.length)
      for (let i = 0; i < list.length; i++) enc.preencode(state, list[i])
    },
    encode (state, list) {
      uint.encode(state, list.length)
      for (let i = 0; i < list.length; i++) enc.encode(state, list[i])
    },
    decode (state) {
      const len = uint.decode(state)
      if (len > 0x100000) throw new Error('Array is too big')
      const arr = new Array(len)
      for (let i = 0; i < len; i++) arr[i] = enc.decode(state)
      return arr
    }
  }
}

exports.frame = function frame (enc) {
  const dummy = exports.state()

  return {
    preencode (state, m) {
      const end = state.end
      enc.preencode(state, m)
      uint.preencode(state, state.end - end)
    },
    encode (state, m) {
      dummy.end = 0
      enc.preencode(dummy, m)
      uint.encode(state, dummy.end)
      enc.encode(state, m)
    },
    decode (state) {
      const end = state.end
      const len = uint.decode(state)
      state.end = state.start + len
      const m = enc.decode(state)
      state.start = state.end
      state.end = end
      return m
    }
  }
}

exports.date = {
  preencode (state, d) {
    int.preencode(state, d.getTime())
  },
  encode (state, d) {
    int.encode(state, d.getTime())
  },
  decode (state, d) {
    return new Date(int.decode(state))
  }
}

exports.json = {
  preencode (state, v) {
    utf8.preencode(state, JSON.stringify(v))
  },
  encode (state, v) {
    utf8.encode(state, JSON.stringify(v))
  },
  decode (state) {
    return JSON.parse(utf8.decode(state))
  }
}

exports.ndjson = {
  preencode (state, v) {
    utf8.preencode(state, JSON.stringify(v) + '\n')
  },
  encode (state, v) {
    utf8.encode(state, JSON.stringify(v) + '\n')
  },
  decode (state) {
    return JSON.parse(utf8.decode(state))
  }
}

// simple helper for when you want to just express nothing
exports.none = {
  preencode (state, n) {
    // do nothing
  },
  encode (state, n) {
    // do nothing
  },
  decode (state) {
    return null
  }
}

// "any" encoders here for helping just structure any object without schematising it

const anyArray = {
  preencode (state, arr) {
    uint.preencode(state, arr.length)
    for (let i = 0; i < arr.length; i++) {
      any.preencode(state, arr[i])
    }
  },
  encode (state, arr) {
    uint.encode(state, arr.length)
    for (let i = 0; i < arr.length; i++) {
      any.encode(state, arr[i])
    }
  },
  decode (state) {
    const arr = []
    let len = uint.decode(state)
    while (len-- > 0) {
      arr.push(any.decode(state))
    }
    return arr
  }
}

const anyObject = {
  preencode (state, o) {
    const keys = Object.keys(o)
    uint.preencode(state, keys.length)
    for (const key of keys) {
      utf8.preencode(state, key)
      any.preencode(state, o[key])
    }
  },
  encode (state, o) {
    const keys = Object.keys(o)
    uint.encode(state, keys.length)
    for (const key of keys) {
      utf8.encode(state, key)
      any.encode(state, o[key])
    }
  },
  decode (state) {
    let len = uint.decode(state)
    const o = {}
    while (len-- > 0) {
      const key = utf8.decode(state)
      o[key] = any.decode(state)
    }
    return o
  }
}

const anyTypes = [
  exports.none,
  exports.bool,
  exports.string,
  exports.buffer,
  exports.uint,
  exports.int,
  exports.float64,
  anyArray,
  anyObject,
  exports.date
]

const any = exports.any = {
  preencode (state, o) {
    const t = getType(o)
    uint.preencode(state, t)
    anyTypes[t].preencode(state, o)
  },
  encode (state, o) {
    const t = getType(o)
    uint.encode(state, t)
    anyTypes[t].encode(state, o)
  },
  decode (state) {
    const t = uint.decode(state)
    if (t >= anyTypes.length) throw new Error('Unknown type: ' + t)
    return anyTypes[t].decode(state)
  }
}

function getType (o) {
  if (o === null || o === undefined) return 0
  if (typeof o === 'boolean') return 1
  if (typeof o === 'string') return 2
  if (b4a.isBuffer(o)) return 3
  if (typeof o === 'number') {
    if (Number.isInteger(o)) return o >= 0 ? 4 : 5
    return 6
  }
  if (Array.isArray(o)) return 7
  if (o instanceof Date) return 9
  if (typeof o === 'object') return 8

  throw new Error('Unsupported type for ' + o)
}

exports.from = function from (enc) {
  if (typeof enc === 'string') return fromNamed(enc)
  if (enc.preencode) return enc
  if (enc.encodingLength) return fromAbstractEncoder(enc)
  return fromCodec(enc)
}

function fromNamed (enc) {
  switch (enc) {
    case 'ascii': return raw.ascii
    case 'utf-8':
    case 'utf8': return raw.utf8
    case 'hex': return raw.hex
    case 'base64': return raw.base64
    case 'utf16-le':
    case 'utf16le':
    case 'ucs-2':
    case 'ucs2': return raw.ucs2
    case 'ndjson': return raw.ndjson
    case 'json': return raw.json
    case 'binary':
    default: return raw.binary
  }
}

function fromCodec (enc) {
  let tmpM = null
  let tmpBuf = null

  return {
    preencode (state, m) {
      tmpM = m
      tmpBuf = enc.encode(m)
      state.end += tmpBuf.byteLength
    },
    encode (state, m) {
      raw.encode(state, m === tmpM ? tmpBuf : enc.encode(m))
      tmpM = tmpBuf = null
    },
    decode (state) {
      return enc.decode(raw.decode(state))
    }
  }
}

function fromAbstractEncoder (enc) {
  return {
    preencode (state, m) {
      state.end += enc.encodingLength(m)
    },
    encode (state, m) {
      enc.encode(m, state.buffer, state.start)
      state.start += enc.encode.bytes
    },
    decode (state) {
      const m = enc.decode(state.buffer, state.start, state.end)
      state.start += enc.decode.bytes
      return m
    }
  }
}

exports.encode = function encode (enc, m) {
  const state = exports.state()
  enc.preencode(state, m)
  state.buffer = b4a.allocUnsafe(state.end)
  enc.encode(state, m)
  return state.buffer
}

exports.decode = function decode (enc, buffer) {
  return enc.decode(exports.state(0, buffer.byteLength, buffer))
}

function zigZagInt (enc) {
  return {
    preencode (state, n) {
      enc.preencode(state, zigZagEncodeInt(n))
    },
    encode (state, n) {
      enc.encode(state, zigZagEncodeInt(n))
    },
    decode (state) {
      return zigZagDecodeInt(enc.decode(state))
    }
  }
}

function zigZagDecodeInt (n) {
  return n === 0 ? n : (n & 1) === 0 ? n / 2 : -(n + 1) / 2
}

function zigZagEncodeInt (n) {
  // 0, -1, 1, -2, 2, ...
  return n < 0 ? (2 * -n) - 1 : n === 0 ? 0 : 2 * n
}

function zigZagBigInt (enc) {
  return {
    preencode (state, n) {
      enc.preencode(state, zigZagEncodeBigInt(n))
    },
    encode (state, n) {
      enc.encode(state, zigZagEncodeBigInt(n))
    },
    decode (state) {
      return zigZagDecodeBigInt(enc.decode(state))
    }
  }
}

function zigZagDecodeBigInt (n) {
  return n === 0n ? n : (n & 1n) === 0n ? n / 2n : -(n + 1n) / 2n
}

function zigZagEncodeBigInt (n) {
  // 0, -1, 1, -2, 2, ...
  return n < 0n ? (2n * -n) - 1n : n === 0n ? 0n : 2n * n
}

function validateUint (n) {
  if ((n >= 0) === false /* Handles NaN as well */) throw new Error('uint must be positive')
}

},{"./endian":177,"./lexint":179,"./raw":180,"b4a":102}],179:[function(require,module,exports){
module.exports = {
  preencode,
  encode,
  decode
}

function preencode (state, num) {
  if (num < 251) {
    state.end++
  } else if (num < 256) {
    state.end += 2
  } else if (num < 0x10000) {
    state.end += 3
  } else if (num < 0x1000000) {
    state.end += 4
  } else if (num < 0x100000000) {
    state.end += 5
  } else {
    state.end++
    const exp = Math.floor(Math.log(num) / Math.log(2)) - 32
    preencode(state, exp)
    state.end += 6
  }
}

function encode (state, num) {
  const max = 251
  const x = num - max

  if (num < max) {
    state.buffer[state.start++] = num
  } else if (num < 256) {
    state.buffer[state.start++] = max
    state.buffer[state.start++] = x
  } else if (num < 0x10000) {
    state.buffer[state.start++] = max + 1
    state.buffer[state.start++] = x >> 8 & 0xff
    state.buffer[state.start++] = x & 0xff
  } else if (num < 0x1000000) {
    state.buffer[state.start++] = max + 2
    state.buffer[state.start++] = x >> 16
    state.buffer[state.start++] = x >> 8 & 0xff
    state.buffer[state.start++] = x & 0xff
  } else if (num < 0x100000000) {
    state.buffer[state.start++] = max + 3
    state.buffer[state.start++] = x >> 24
    state.buffer[state.start++] = x >> 16 & 0xff
    state.buffer[state.start++] = x >> 8 & 0xff
    state.buffer[state.start++] = x & 0xff
  } else {
    // need to use Math here as bitwise ops are 32 bit
    const exp = Math.floor(Math.log(x) / Math.log(2)) - 32
    state.buffer[state.start++] = 0xff

    encode(state, exp)
    const rem = x / Math.pow(2, exp - 11)

    for (let i = 5; i >= 0; i--) {
      state.buffer[state.start++] = rem / Math.pow(2, 8 * i) & 0xff
    }
  }
}

function decode (state) {
  const max = 251

  if (state.end - state.start < 1) throw new Error('Out of bounds')

  const flag = state.buffer[state.start++]

  if (flag < max) return flag

  if (state.end - state.start < flag - max + 1) {
    throw new Error('Out of bounds.')
  }

  if (flag < 252) {
    return state.buffer[state.start++] +
      max
  }

  if (flag < 253) {
    return (state.buffer[state.start++] << 8) +
      state.buffer[state.start++] +
      max
  }

  if (flag < 254) {
    return (state.buffer[state.start++] << 16) +
      (state.buffer[state.start++] << 8) +
      state.buffer[state.start++] +
      max
  }

  // << 24 result may be interpreted as negative
  if (flag < 255) {
    return (state.buffer[state.start++] * 0x1000000) +
      (state.buffer[state.start++] << 16) +
      (state.buffer[state.start++] << 8) +
      state.buffer[state.start++] +
      max
  }

  const exp = decode(state)

  if (state.end - state.start < 6) throw new Error('Out of bounds')

  let rem = 0
  for (let i = 5; i >= 0; i--) {
    rem += state.buffer[state.start++] * Math.pow(2, 8 * i)
  }

  return (rem * Math.pow(2, exp - 11)) + max
}

},{}],180:[function(require,module,exports){
const b4a = require('b4a')

const { BE } = require('./endian')

exports = module.exports = {
  preencode (state, b) {
    state.end += b.byteLength
  },
  encode (state, b) {
    state.buffer.set(b, state.start)
    state.start += b.byteLength
  },
  decode (state) {
    const b = state.buffer.subarray(state.start, state.end)
    state.start = state.end
    return b
  }
}

const buffer = exports.buffer = {
  preencode (state, b) {
    if (b) uint8array.preencode(state, b)
    else state.end++
  },
  encode (state, b) {
    if (b) uint8array.encode(state, b)
    else state.buffer[state.start++] = 0
  },
  decode (state) {
    const b = state.buffer.subarray(state.start)
    if (b.byteLength === 0) return null
    state.start = state.end
    return b
  }
}

exports.binary = {
  ...buffer,
  preencode (state, b) {
    if (typeof b === 'string') utf8.preencode(state, b)
    else buffer.preencode(state, b)
  },
  encode (state, b) {
    if (typeof b === 'string') utf8.encode(state, b)
    else buffer.encode(state, b)
  }
}

exports.arraybuffer = {
  preencode (state, b) {
    state.end += b.byteLength
  },
  encode (state, b) {
    const view = new Uint8Array(b)

    state.buffer.set(view, state.start)
    state.start += b.byteLength
  },
  decode (state) {
    const b = new ArrayBuffer(state.end - state.start)
    const view = new Uint8Array(b)

    view.set(state.buffer.subarray(state.start))

    state.start = state.end

    return b
  }
}

function typedarray (TypedArray, swap) {
  const n = TypedArray.BYTES_PER_ELEMENT

  return {
    preencode (state, b) {
      state.end += b.byteLength
    },
    encode (state, b) {
      const view = new Uint8Array(b.buffer, b.byteOffset, b.byteLength)

      if (BE && swap) swap(view)

      state.buffer.set(view, state.start)
      state.start += b.byteLength
    },
    decode (state) {
      let b = state.buffer.subarray(state.start)
      if ((b.byteOffset % n) !== 0) b = new Uint8Array(b)

      if (BE && swap) swap(b)

      state.start = state.end

      return new TypedArray(b.buffer, b.byteOffset, b.byteLength / n)
    }
  }
}

const uint8array = exports.uint8array = typedarray(Uint8Array)
exports.uint16array = typedarray(Uint16Array, b4a.swap16)
exports.uint32array = typedarray(Uint32Array, b4a.swap32)

exports.int8array = typedarray(Int8Array)
exports.int16array = typedarray(Int16Array, b4a.swap16)
exports.int32array = typedarray(Int32Array, b4a.swap32)

exports.biguint64array = typedarray(BigUint64Array, b4a.swap64)
exports.bigint64array = typedarray(BigInt64Array, b4a.swap64)

exports.float32array = typedarray(Float32Array, b4a.swap32)
exports.float64array = typedarray(Float64Array, b4a.swap64)

function string (encoding) {
  return {
    preencode (state, s) {
      state.end += b4a.byteLength(s, encoding)
    },
    encode (state, s) {
      state.start += b4a.write(state.buffer, s, state.start, encoding)
    },
    decode (state) {
      const s = b4a.toString(state.buffer, encoding, state.start)
      state.start = state.end
      return s
    }
  }
}

const utf8 = exports.string = exports.utf8 = string('utf-8')
exports.ascii = string('ascii')
exports.hex = string('hex')
exports.base64 = string('base64')
exports.ucs2 = exports.utf16le = string('utf16le')

exports.array = function array (enc) {
  return {
    preencode (state, list) {
      for (const value of list) enc.preencode(state, value)
    },
    encode (state, list) {
      for (const value of list) enc.encode(state, value)
    },
    decode (state) {
      const arr = []
      while (state.start < state.end) arr.push(enc.decode(state))
      return arr
    }
  }
}

exports.json = {
  preencode (state, v) {
    utf8.preencode(state, JSON.stringify(v))
  },
  encode (state, v) {
    utf8.encode(state, JSON.stringify(v))
  },
  decode (state) {
    return JSON.parse(utf8.decode(state))
  }
}

exports.ndjson = {
  preencode (state, v) {
    utf8.preencode(state, JSON.stringify(v) + '\n')
  },
  encode (state, v) {
    utf8.encode(state, JSON.stringify(v) + '\n')
  },
  decode (state) {
    return JSON.parse(utf8.decode(state))
  }
}

},{"./endian":177,"b4a":102}],181:[function(require,module,exports){
const safetyCatch = require('safety-catch')

module.exports = class CoreCoupler {
  constructor (target, wakeup) {
    this.target = target
    this.wakeup = wakeup
    this.coupled = new Set()

    this._onpeeraddBound = this._onpeeradd.bind(this)
    this.target.on('peer-add', this._onpeeraddBound)
  }

  add (core) {
    const added = this.coupled.size
    this.coupled.add(core)
    if (added !== this.coupled.size) this._couple(core)
  }

  remove (core) {
    this.coupled.delete(core)
  }

  destroy () {
    this.target.off('peer-add', this._onpeeraddBound)
  }

  async _couple (core) {
    try {
      let wakeup = null

      for (const peer of this.target.peers) {
        if (await this._hasPeer(core, peer)) continue
        if (wakeup === null) wakeup = []
        wakeup.push(peer)
      }

      if (wakeup !== null && this.coupled.has(core)) {
        for (const peer of wakeup) this.wakeup(peer, [core])
      }
    } catch (err) {
      safetyCatch(err)
    }
  }

  async _onpeeradd (peer) {
    try {
      let wakeup = null

      for (const core of this.coupled) {
        if (await this._hasPeer(core, peer)) continue
        if (wakeup === null) wakeup = []
        wakeup.push(core)
      }

      if (wakeup !== null) {
        this.wakeup(peer, wakeup)
      }
    } catch (err) {
      safetyCatch(err)
    }
  }

  _hasPeer (core, peer) { // TODO: make proper
    const ch = peer.protomux.getLastChannel({ protocol: 'hypercore', id: core.discoveryKey })
    if (ch) return ch.fullyOpened()
    return Promise.resolve(false)
  }
}

},{"safety-catch":486}],182:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('buffer').Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

},{"buffer":164}],183:[function(require,module,exports){
const safetyCatch = require('safety-catch')
const crypto = require('hypercore-crypto')
const sodium = require('sodium-universal')
const Hypercore = require('hypercore')
const hypercoreId = require('hypercore-id-encoding')
const Xache = require('xache')
const b4a = require('b4a')
const ReadyResource = require('ready-resource')
const RW = require('read-write-mutexify')

const [NS] = crypto.namespace('corestore', 1)
const DEFAULT_NAMESPACE = b4a.alloc(32) // This is meant to be 32 0-bytes

const CORES_DIR = 'cores'
const PRIMARY_KEY_FILE_NAME = 'primary-key'
const USERDATA_NAME_KEY = 'corestore/name'
const USERDATA_NAMESPACE_KEY = 'corestore/namespace'
const POOL_SIZE = 512 // how many open fds to aim for before cycling them
const DEFAULT_MANIFEST = 0 // bump to 1 when this is more widely deployed
const DEFAULT_COMPAT = true

module.exports = class Corestore extends ReadyResource {
  constructor (storage, opts = {}) {
    super()

    const root = opts._root

    this.storage = Hypercore.defaultStorage(storage, { lock: PRIMARY_KEY_FILE_NAME, poolSize: opts.poolSize || POOL_SIZE, rmdir: true })
    this.cores = root ? root.cores : new Map()
    this.cache = !!opts.cache
    this.primaryKey = opts.primaryKey || null
    this.passive = !!opts.passive
    this.manifestVersion = typeof opts.manifestVersion === 'number' ? opts.manifestVersion : (root ? root.manifestVersion : DEFAULT_MANIFEST)
    this.compat = typeof opts.compat === 'boolean' ? opts.compat : (root ? root.compat : DEFAULT_COMPAT)
    this.inflightRange = opts.inflightRange || null
    this.globalCache = opts.globalCache || null

    this._keyStorage = null
    this._bootstrap = opts._bootstrap || null
    this._namespace = opts.namespace || DEFAULT_NAMESPACE
    this._noCoreCache = root ? root._noCoreCache : new Xache({ maxSize: 65536 })

    this._root = root || this
    this._replicationStreams = root ? root._replicationStreams : []
    this._overwrite = opts.overwrite === true
    this._readonly = opts.writable === false
    this._attached = opts._attached || null
    this._notDownloadingLinger = opts.notDownloadingLinger

    this._sessions = new Set() // sessions for THIS namespace
    this._rootStoreSessions = new Set()
    this._locks = root ? root._locks : new Map()

    this._findingPeersCount = 0
    this._findingPeers = []
    this._isCorestore = true

    if (this._namespace.byteLength !== 32) throw new Error('Namespace must be a 32-byte Buffer or Uint8Array')
    this.ready().catch(safetyCatch)
  }

  static isCorestore (obj) {
    return !!(typeof obj === 'object' && obj && obj._isCorestore)
  }

  static from (storage, opts) {
    return this.isCorestore(storage) ? storage : new this(storage, opts)
  }

  // for now just release the lock...
  async suspend () {
    if (this._root !== this) return this._root.suspend()

    await this.ready()

    if (this._keyStorage !== null) {
      await new Promise((resolve, reject) => {
        this._keyStorage.suspend((err) => {
          if (err) return reject(err)
          resolve()
        })
      })
    }
  }

  async resume () {
    if (this._root !== this) return this._root.resume()

    await this.ready()

    if (this._keyStorage !== null) {
      await new Promise((resolve, reject) => {
        this._keyStorage.open((err) => {
          if (err) return reject(err)
          resolve()
        })
      })
    }
  }

  findingPeers () {
    let done = false
    this._incFindingPeers()

    return () => {
      if (done) return
      done = true
      this._decFindingPeers()
    }
  }

  _emitCore (name, core) {
    this.emit(name, core)
    for (const session of this._root._rootStoreSessions) {
      if (session !== this) {
        session.emit(name, core)
      }
    }
    if (this !== this._root) this._root.emit(name, core)
  }

  _incFindingPeers () {
    if (++this._findingPeersCount !== 1) return

    for (const core of this._sessions) {
      this._findingPeers.push(core.findingPeers())
    }
  }

  _decFindingPeers () {
    if (--this._findingPeersCount !== 0) return

    while (this._findingPeers.length > 0) {
      this._findingPeers.pop()()
    }
  }

  async _openNamespaceFromBootstrap () {
    const ns = await this._bootstrap.getUserData(USERDATA_NAMESPACE_KEY)
    if (ns) {
      this._namespace = ns
    }
  }

  async _open () {
    if (this._root !== this) {
      await this._root.ready()
      if (!this.primaryKey) this.primaryKey = this._root.primaryKey
      if (this._bootstrap) await this._openNamespaceFromBootstrap()
      return
    }

    this._keyStorage = this.storage(PRIMARY_KEY_FILE_NAME)

    this.primaryKey = await new Promise((resolve, reject) => {
      this._keyStorage.stat((err, st) => {
        if (err && err.code !== 'ENOENT') return reject(err)
        if (err || st.size < 32 || this._overwrite) {
          const key = this.primaryKey || crypto.randomBytes(32)
          return this._keyStorage.write(0, key, err => {
            if (err) return reject(err)
            return resolve(key)
          })
        }
        this._keyStorage.read(0, 32, (err, key) => {
          if (err) return reject(err)
          if (this.primaryKey) return resolve(this.primaryKey)
          return resolve(key)
        })
      })
    })

    if (this._bootstrap) await this._openNamespaceFromBootstrap()
  }

  async _exists (discoveryKey) {
    const id = b4a.toString(discoveryKey, 'hex')
    const storageRoot = getStorageRoot(id)

    const st = this.storage(storageRoot + '/oplog')

    const exists = await new Promise((resolve) => st.stat((err, st) => resolve(!err && st.size > 0)))
    await new Promise(resolve => st.close(resolve))

    return exists
  }

  async _generateKeys (opts) {
    if (opts._discoveryKey) {
      return {
        manifest: null,
        keyPair: null,
        key: null,
        discoveryKey: opts._discoveryKey
      }
    }

    const keyPair = opts.name
      ? await this.createKeyPair(opts.name)
      : (opts.secretKey)
          ? { secretKey: opts.secretKey, publicKey: opts.publicKey }
          : null

    if (opts.manifest) {
      const key = Hypercore.key(opts.manifest)

      return {
        manifest: opts.manifest,
        keyPair,
        key,
        discoveryKey: crypto.discoveryKey(key)
      }
    }

    if (opts.key) {
      return {
        manifest: null,
        keyPair,
        key: opts.key,
        discoveryKey: crypto.discoveryKey(opts.key)
      }
    }

    const publicKey = opts.publicKey || keyPair.publicKey

    if (opts.compat === false || (opts.compat !== true && !this.compat)) {
      let manifest = { version: this.manifestVersion, signers: [{ publicKey }] } // default manifest
      let key = Hypercore.key(manifest)
      let discoveryKey = crypto.discoveryKey(key)

      if (!(await this._exists(discoveryKey)) && manifest.version !== 0) {
        const manifestV0 = { version: 0, signers: [{ publicKey }] }
        const keyV0 = Hypercore.key(manifestV0)
        const discoveryKeyV0 = crypto.discoveryKey(keyV0)

        if (await this._exists(discoveryKeyV0)) {
          manifest = manifestV0
          key = keyV0
          discoveryKey = discoveryKeyV0
        }
      }

      return {
        manifest,
        keyPair,
        key,
        discoveryKey
      }
    }

    return {
      manifest: null,
      keyPair,
      key: publicKey,
      discoveryKey: crypto.discoveryKey(publicKey)
    }
  }

  _getPrereadyUserData (core, key) {
    // Need to manually read the header values before the Hypercore is ready, hence the ugliness.
    for (const { key: savedKey, value } of core.core.header.userData) {
      if (key === savedKey) return value
    }
    return null
  }

  async _preready (core) {
    const name = this._getPrereadyUserData(core, USERDATA_NAME_KEY)
    if (!name) return

    const namespace = this._getPrereadyUserData(core, USERDATA_NAMESPACE_KEY)
    const keyPair = await this.createKeyPair(b4a.toString(name), namespace)
    core.setKeyPair(keyPair)
  }

  _getLock (id) {
    let rw = this._locks.get(id)

    if (!rw) {
      rw = new RW()
      this._locks.set(id, rw)
    }

    return rw
  }

  async _preload (id, keys, opts) {
    const { manifest, keyPair, key } = keys

    while (this.cores.has(id)) {
      const existing = this.cores.get(id)
      if (existing.opened && !existing.closing) return { from: existing, keyPair, manifest, cache: !!opts.cache }
      if (existing.closing) {
        await existing.close()
      } else {
        await existing.ready().catch(safetyCatch)
      }
    }

    const hasKeyPair = !!(keyPair && keyPair.secretKey)
    const userData = {}
    if (opts.name) {
      userData[USERDATA_NAME_KEY] = b4a.from(opts.name)
      userData[USERDATA_NAMESPACE_KEY] = this._namespace
    }

    // No more async ticks allowed after this point -- necessary for caching

    const storageRoot = getStorageRoot(id)
    const core = new Hypercore(p => this.storage(storageRoot + '/' + p), {
      _preready: this._preready.bind(this),
      notDownloadingLinger: this._notDownloadingLinger,
      inflightRange: this.inflightRange,
      autoClose: true,
      active: false,
      encryptionKey: opts.encryptionKey || null,
      isBlockKey: !!opts.isBlockKey,
      userData,
      manifest,
      key,
      compat: opts.compat,
      cache: opts.cache,
      globalCache: this.globalCache,
      createIfMissing: opts.createIfMissing === false ? false : !opts._discoveryKey,
      keyPair: hasKeyPair ? keyPair : null
    })

    if (this._root.closing) {
      try {
        await core.close()
      } catch {}
      throw new Error('The corestore is closed')
    }

    this.cores.set(id, core)
    this._noCoreCache.delete(id)
    core.ready().then(() => {
      if (core.closing) return // extra safety here as ready is a tick after open
      if (hasKeyPair) core.setKeyPair(keyPair)
      this._emitCore('core-open', core)
      if (this.passive) return

      const ondownloading = () => {
        for (const { stream } of this._replicationStreams) {
          core.replicate(stream, { session: true })
        }
      }
      // when the replicator says we are downloading, answer the call
      core.replicator.ondownloading = ondownloading
      // trigger once if the condition is already true
      if (core.replicator.downloading) ondownloading()
    }, () => {
      this._noCoreCache.set(id, true)
      this.cores.delete(id)
    })
    core.once('close', () => {
      this._emitCore('core-close', core)
      this.cores.delete(id)
    })
    core.on('conflict', (len, fork, proof) => {
      this.emit('conflict', core, len, fork, proof)
    })

    return { from: core, keyPair, manifest, cache: !!opts.cache }
  }

  async createKeyPair (name, namespace = this._namespace) {
    if (!this.opened) await this.ready()

    const keyPair = {
      publicKey: b4a.allocUnsafeSlow(sodium.crypto_sign_PUBLICKEYBYTES),
      secretKey: b4a.alloc(sodium.crypto_sign_SECRETKEYBYTES)
    }

    const seed = deriveSeed(this.primaryKey, namespace, name)
    sodium.crypto_sign_seed_keypair(keyPair.publicKey, keyPair.secretKey, seed)

    return keyPair
  }

  get (opts = {}) {
    if (this.closing || this._root.closing) throw new Error('The corestore is closed')
    opts = validateGetOptions(opts)

    if (opts.cache !== false) {
      opts.cache = opts.cache === true || (this.cache && !opts.cache) ? defaultCache() : opts.cache
    }
    if (this._readonly && opts.writable !== false) {
      opts.writable = false
    }

    let rw = null
    let id = null

    const core = new Hypercore(null, {
      ...opts,
      globalCache: this.globalCache,
      name: null,
      preload: async () => {
        if (opts.preload) opts = { ...opts, ...(await opts.preload()) }
        if (!this.opened) await this.ready()

        const keys = await this._generateKeys(opts)

        id = b4a.toString(keys.discoveryKey, 'hex')
        rw = (opts.exclusive && opts.writable !== false) ? this._getLock(id) : null

        if (rw) await rw.write.lock()
        return await this._preload(id, keys, opts)
      }
    })

    this._sessions.add(core)
    if (this._findingPeersCount > 0) {
      this._findingPeers.push(core.findingPeers())
    }

    const gc = () => {
      // technically better to also clear _findingPeers if we added it,
      // but the lifecycle for those are pretty short so prob not worth the complexity
      // as _decFindingPeers clear them all.
      this._sessions.delete(core)

      if (!rw) return
      rw.write.unlock()
      if (!rw.write.locked) this._locks.delete(id)
    }

    core.ready().catch(gc)
    core.once('close', gc)

    return core
  }

  replicate (isInitiator, opts) {
    const isExternal = isStream(isInitiator) || !!(opts && opts.stream)
    const stream = Hypercore.createProtocolStream(isInitiator, {
      ...opts,
      ondiscoverykey: async discoveryKey => {
        if (this.closing) return

        const id = b4a.toString(discoveryKey, 'hex')
        if (this._noCoreCache.get(id)) return

        const core = this.get({ _discoveryKey: discoveryKey, active: false })

        try {
          await core.ready()
        } catch {
          return
        }

        // remote is asking for the core so we HAVE to answer even if not downloading
        if (!core.closing) core.replicate(stream, { session: true })
        await core.close()
      }
    })

    if (!this.passive) {
      const muxer = stream.noiseStream.userData
      muxer.cork()
      for (const core of this.cores.values()) {
        // If the core is not opened, it will be replicated in preload.
        if (!core.opened || core.closing || !core.replicator.downloading) continue
        core.replicate(stream, { session: true })
      }
      stream.noiseStream.opened.then(() => muxer.uncork())
    }

    const streamRecord = { stream, isExternal }
    this._replicationStreams.push(streamRecord)

    stream.once('close', () => {
      this._replicationStreams.splice(this._replicationStreams.indexOf(streamRecord), 1)
    })

    return stream
  }

  namespace (name, opts) {
    if (name instanceof Hypercore) {
      return this.session({ ...opts, _bootstrap: name })
    }
    return this.session({ ...opts, namespace: generateNamespace(this._namespace, name) })
  }

  session (opts) {
    const session = new Corestore(this.storage, {
      namespace: this._namespace,
      cache: this.cache,
      writable: !this._readonly,
      _attached: opts && opts.detach === false ? this : null,
      _root: this._root,
      inflightRange: this.inflightRange,
      globalCache: this.globalCache,
      ...opts
    })
    if (this === this._root) this._rootStoreSessions.add(session)
    return session
  }

  _closeNamespace () {
    const closePromises = []
    for (const session of this._sessions) {
      closePromises.push(session.close())
    }
    return Promise.allSettled(closePromises)
  }

  async _closePrimaryNamespace () {
    const closePromises = []
    // At this point, the primary namespace is closing.
    for (const { stream, isExternal } of this._replicationStreams) {
      // Only close streams that were created by the Corestore
      if (!isExternal) stream.destroy()
    }
    for (const core of this.cores.values()) {
      closePromises.push(forceClose(core))
    }
    await Promise.allSettled(closePromises)
    await new Promise((resolve, reject) => {
      this._keyStorage.close(err => {
        if (err) return reject(err)
        return resolve(null)
      })
    })
  }

  async _close () {
    this._root._rootStoreSessions.delete(this)

    await this._closeNamespace()

    if (this._root === this) {
      await this._closePrimaryNamespace()
    } else if (this._attached) {
      await this._attached.close()
    }
  }
}

function validateGetOptions (opts) {
  const key = (b4a.isBuffer(opts) || typeof opts === 'string') ? hypercoreId.decode(opts) : null
  if (key) return { key }

  if (opts.key) {
    opts.key = hypercoreId.decode(opts.key)
  }
  if (opts.keyPair) {
    opts.publicKey = opts.keyPair.publicKey
    opts.secretKey = opts.keyPair.secretKey
  }

  if (opts.name && typeof opts.name !== 'string') throw new Error('name option must be a String')
  if (opts.name && opts.secretKey) throw new Error('Cannot provide both a name and a secret key')
  if (opts.publicKey && !b4a.isBuffer(opts.publicKey)) throw new Error('publicKey option must be a Buffer or Uint8Array')
  if (opts.secretKey && !b4a.isBuffer(opts.secretKey)) throw new Error('secretKey option must be a Buffer or Uint8Array')
  if (!opts._discoveryKey && (!opts.name && !opts.publicKey && !opts.manifest && !opts.key && !opts.preload)) throw new Error('Must provide either a name or a publicKey')
  return opts
}

function generateNamespace (namespace, name) {
  if (!b4a.isBuffer(name)) name = b4a.from(name)
  const out = b4a.allocUnsafeSlow(32)
  sodium.crypto_generichash_batch(out, [namespace, name])
  return out
}

function deriveSeed (primaryKey, namespace, name) {
  if (!b4a.isBuffer(name)) name = b4a.from(name)
  const out = b4a.alloc(32)
  sodium.crypto_generichash_batch(out, [NS, namespace, name], primaryKey)
  return out
}

function defaultCache () {
  return new Xache({ maxSize: 65536, maxAge: 0 })
}

function isStream (s) {
  return typeof s === 'object' && s && typeof s.pipe === 'function'
}

async function forceClose (core) {
  await core.ready()
  return Promise.all(core.sessions.map(s => s.close()))
}

function getStorageRoot (id) {
  return CORES_DIR + '/' + id.slice(0, 2) + '/' + id.slice(2, 4) + '/' + id
}

},{"b4a":102,"hypercore":309,"hypercore-crypto":305,"hypercore-id-encoding":307,"read-write-mutexify":467,"ready-resource":480,"safety-catch":486,"sodium-universal":202,"xache":599}],184:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"./crypto_stream_chacha20":199,"./crypto_verify":200,"./internal/poly1305":205,"dup":35,"nanoassert":390}],185:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"./crypto_verify":200,"dup":36,"nanoassert":390,"sha512-universal":501}],186:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./crypto_generichash":187,"./crypto_hash":188,"./crypto_scalarmult":193,"./crypto_secretbox":194,"./crypto_stream":198,"./randombytes":207,"dup":37,"nanoassert":390,"xsalsa20":600}],187:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"blake2b":125,"dup":38}],188:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39,"nanoassert":390,"sha512-universal":501}],189:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"dup":40,"nanoassert":390,"sha256-universal":497}],190:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"./randombytes":207,"blake2b":125,"dup":41,"nanoassert":390}],191:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"./crypto_generichash":187,"./crypto_scalarmult":193,"./randombytes":207,"dup":42,"nanoassert":390}],192:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"./crypto_verify":200,"./internal/poly1305":205,"dup":43,"nanoassert":390}],193:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"./internal/ed25519":203,"dup":44}],194:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"./crypto_onetimeauth":192,"./crypto_stream":198,"dup":45,"nanoassert":390}],195:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"./crypto_stream_chacha20":199,"./helpers":201,"./internal/hchacha20":204,"./internal/poly1305":205,"./randombytes":207,"dup":46,"nanoassert":390}],196:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"dup":47,"siphash24":511}],197:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"./crypto_hash":188,"./crypto_hash.js":188,"./crypto_scalarmult.js":193,"./crypto_verify":200,"./internal/ed25519":203,"./randombytes":207,"dup":48,"nanoassert":390}],198:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49,"xsalsa20":600}],199:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"chacha20-universal":173,"dup":50,"nanoassert":390}],200:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],201:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./crypto_verify":200,"dup":52,"nanoassert":390}],202:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./crypto_aead":184,"./crypto_auth":185,"./crypto_box":186,"./crypto_generichash":187,"./crypto_hash":188,"./crypto_hash_sha256":189,"./crypto_kdf":190,"./crypto_kx":191,"./crypto_onetimeauth":192,"./crypto_scalarmult":193,"./crypto_secretbox":194,"./crypto_secretstream":195,"./crypto_shorthash":196,"./crypto_sign":197,"./crypto_stream":198,"./crypto_stream_chacha20":199,"./crypto_verify":200,"./helpers":201,"./memory":206,"./randombytes":207,"dup":53}],203:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}],204:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"../memory":206,"dup":55,"nanoassert":390}],205:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"dup":56}],206:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"dup":57}],207:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58,"nanoassert":390}],208:[function(require,module,exports){
/**
 * The JavaScript implementation of CRC32 is a version of the slice-by-16 algorithm
 * as implemented by Stephan Brumme, see https://github.com/stbrumme/crc32.
 *
 * Copyright (c) 2011-2016 Stephan Brumme
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from the
 * use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it freely,
 * subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not claim
 *    that you wrote the original software.
 *    If you use this software in a product, an acknowledgment in the product
 *    documentation would be appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

const lookup = require('./lookup')

exports.crc32 = function crc32 (buffer) {
  let crc = ~0
  let i = 0
  let length = buffer.byteLength

  while (length >= 16) {
    crc = lookup[15][buffer[i++] ^ (crc & 0xff)] ^
          lookup[14][buffer[i++] ^ ((crc >>> 8) & 0xff)] ^
          lookup[13][buffer[i++] ^ ((crc >>> 16) & 0xff)] ^
          lookup[12][buffer[i++] ^ (crc >>> 24)] ^
          lookup[11][buffer[i++]] ^
          lookup[10][buffer[i++]] ^
          lookup[9][buffer[i++]] ^
          lookup[8][buffer[i++]] ^
          lookup[7][buffer[i++]] ^
          lookup[6][buffer[i++]] ^
          lookup[5][buffer[i++]] ^
          lookup[4][buffer[i++]] ^
          lookup[3][buffer[i++]] ^
          lookup[2][buffer[i++]] ^
          lookup[1][buffer[i++]] ^
          lookup[0][buffer[i++]]

    length -= 16
  }

  while (length-- > 0) {
    crc = (crc >>> 8) ^ lookup[0][(crc & 0xff) ^ buffer[i++]]
  }

  return ~crc >>> 0
}

},{"./lookup":209}],209:[function(require,module,exports){
const lookup = new Array(16)

for (let i = 0; i < 16; i++) {
  lookup[i] = new Uint32Array(0x100)
}

for (let i = 0; i <= 0xff; i++) {
  let crc = i

  for (let j = 0; j < 8; j++) {
    crc = (crc >>> 1) ^ ((crc & 1) * 0xedb88320)
  }

  lookup[0][i] = crc
}

for (let i = 0; i <= 0xff; i++) {
  for (let j = 1; j < 16; j++) {
    lookup[j][i] = (lookup[j - 1][i] >>> 8) ^ lookup[0][lookup[j - 1][i] & 0xff]
  }
}

module.exports = lookup

},{}],210:[function(require,module,exports){
(function (Buffer){(function (){
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":211,"buffer":164,"elliptic":231}],211:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"buffer":132,"dup":83}],212:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":174,"inherits":369,"md5.js":382,"ripemd160":482,"sha.js":490}],213:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":382}],214:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":215,"cipher-base":174,"create-hash/md5":213,"inherits":369,"ripemd160":482,"safe-buffer":485,"sha.js":490}],215:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":174,"inherits":369,"safe-buffer":485}],216:[function(require,module,exports){
'use strict';

// eslint-disable-next-line no-multi-assign
exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');

// eslint-disable-next-line no-multi-assign
exports.createHash = exports.Hash = require('create-hash');

// eslint-disable-next-line no-multi-assign
exports.createHmac = exports.Hmac = require('create-hmac');

var algos = require('browserify-sign/algos');
var algoKeys = Object.keys(algos);
var hashes = [
	'sha1',
	'sha224',
	'sha256',
	'sha384',
	'sha512',
	'md5',
	'rmd160'
].concat(algoKeys);

exports.getHashes = function () {
	return hashes;
};

var p = require('pbkdf2');
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;

var aes = require('browserify-cipher');

exports.Cipher = aes.Cipher;
exports.createCipher = aes.createCipher;
exports.Cipheriv = aes.Cipheriv;
exports.createCipheriv = aes.createCipheriv;
exports.Decipher = aes.Decipher;
exports.createDecipher = aes.createDecipher;
exports.Decipheriv = aes.Decipheriv;
exports.createDecipheriv = aes.createDecipheriv;
exports.getCiphers = aes.getCiphers;
exports.listCiphers = aes.listCiphers;

var dh = require('diffie-hellman');

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
exports.getDiffieHellman = dh.getDiffieHellman;
exports.createDiffieHellman = dh.createDiffieHellman;
exports.DiffieHellman = dh.DiffieHellman;

var sign = require('browserify-sign');

exports.createSign = sign.createSign;
exports.Sign = sign.Sign;
exports.createVerify = sign.createVerify;
exports.Verify = sign.Verify;

exports.createECDH = require('create-ecdh');

var publicEncrypt = require('public-encrypt');

exports.publicEncrypt = publicEncrypt.publicEncrypt;
exports.privateEncrypt = publicEncrypt.privateEncrypt;
exports.publicDecrypt = publicEncrypt.publicDecrypt;
exports.privateDecrypt = publicEncrypt.privateDecrypt;

// the least I can do is make error messages for the rest of the node.js/crypto api.
// [
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error('sorry, ' + name + ' is not implemented yet\nwe accept pull requests\nhttps://github.com/browserify/crypto-browserify');
//   };
// });

var rf = require('randomfill');

exports.randomFill = rf.randomFill;
exports.randomFillSync = rf.randomFillSync;

exports.createCredentials = function () {
	throw new Error('sorry, createCredentials is not implemented yet\nwe accept pull requests\nhttps://github.com/browserify/crypto-browserify');
};

exports.constants = {
	DH_CHECK_P_NOT_SAFE_PRIME: 2,
	DH_CHECK_P_NOT_PRIME: 1,
	DH_UNABLE_TO_CHECK_GENERATOR: 4,
	DH_NOT_SUITABLE_GENERATOR: 8,
	NPN_ENABLED: 1,
	ALPN_ENABLED: 1,
	RSA_PKCS1_PADDING: 1,
	RSA_SSLV23_PADDING: 2,
	RSA_NO_PADDING: 3,
	RSA_PKCS1_OAEP_PADDING: 4,
	RSA_X931_PADDING: 5,
	RSA_PKCS1_PSS_PADDING: 6,
	POINT_CONVERSION_COMPRESSED: 2,
	POINT_CONVERSION_UNCOMPRESSED: 4,
	POINT_CONVERSION_HYBRID: 6
};

},{"browserify-cipher":150,"browserify-sign":157,"browserify-sign/algos":154,"create-ecdh":210,"create-hash":212,"create-hmac":214,"diffie-hellman":225,"pbkdf2":429,"public-encrypt":440,"randombytes":465,"randomfill":466}],217:[function(require,module,exports){
module.exports = function debounce (worker, context = null) {
  debounced.running = null
  return debounced

  async function debounced () {
    if (debounced.running !== null) {
      try {
        await debounced.running
      } catch (_) {
        // ignore - do not fail on old errors
      }
    }

    // another "thread" beat us to it, just piggy pack on that one
    if (debounced.running !== null) return debounced.running

    debounced.running = worker.call(context)

    try {
      return await debounced.running
    } finally {
      debounced.running = null
    }
  }
}

},{}],218:[function(require,module,exports){
'use strict';

var $defineProperty = require('es-define-property');

var $SyntaxError = require('es-errors/syntax');
var $TypeError = require('es-errors/type');

var gopd = require('gopd');

/** @type {import('.')} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};

},{"es-define-property":248,"es-errors/syntax":253,"es-errors/type":254,"gopd":272}],219:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":220,"./des/cipher":221,"./des/des":222,"./des/ede":223,"./des/utils":224}],220:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":369,"minimalistic-assert":385}],221:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
  this.padding = options.padding !== false
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":385}],222:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var utils = require('./utils');
var Cipher = require('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  if (this.padding === false) {
    return false;
  }

  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  if (this.padding === false) {
    return buffer;
  }

  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"./cipher":221,"./utils":224,"inherits":369,"minimalistic-assert":385}],223:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var Cipher = require('./cipher');
var DES = require('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"./cipher":221,"./des":222,"inherits":369,"minimalistic-assert":385}],224:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],225:[function(require,module,exports){
(function (Buffer){(function (){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this)}).call(this,require("buffer").Buffer)
},{"./lib/dh":226,"./lib/generatePrime":227,"./lib/primes.json":228,"buffer":164}],226:[function(require,module,exports){
(function (Buffer){(function (){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./generatePrime":227,"bn.js":229,"buffer":164,"miller-rabin":383,"randombytes":465}],227:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":229,"miller-rabin":383,"randombytes":465}],228:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],229:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"buffer":132,"dup":83}],230:[function(require,module,exports){
'use strict';

var callBind = require('call-bind-apply-helpers');
var gOPD = require('gopd');

var hasProtoAccessor;
try {
	// eslint-disable-next-line no-extra-parens, no-proto
	hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ ([]).__proto__ === Array.prototype;
} catch (e) {
	if (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {
		throw e;
	}
}

// eslint-disable-next-line no-extra-parens
var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ ('__proto__'));

var $Object = Object;
var $getPrototypeOf = $Object.getPrototypeOf;

/** @type {import('./get')} */
module.exports = desc && typeof desc.get === 'function'
	? callBind([desc.get])
	: typeof $getPrototypeOf === 'function'
		? /** @type {import('./get')} */ function getDunder(value) {
			// eslint-disable-next-line eqeqeq
			return $getPrototypeOf(value == null ? value : $Object(value));
		}
		: false;

},{"call-bind-apply-helpers":169,"gopd":272}],231:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":247,"./elliptic/curve":234,"./elliptic/curves":237,"./elliptic/ec":238,"./elliptic/eddsa":241,"./elliptic/utils":245,"brorand":131}],232:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":245,"bn.js":246}],233:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":245,"./base":232,"bn.js":246,"inherits":369}],234:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":232,"./edwards":233,"./mont":235,"./short":236}],235:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":245,"./base":232,"bn.js":246,"inherits":369}],236:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":245,"./base":232,"bn.js":246,"inherits":369}],237:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});

},{"./curve":234,"./precomputed/secp256k1":244,"./utils":245,"hash.js":278}],238:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
  var byteLength;
  if (BN.isBN(msg) || typeof msg === 'number') {
    msg = new BN(msg, 16);
    byteLength = msg.byteLength();
  } else if (typeof msg === 'object') {
    // BN assumes an array-like input and asserts length
    byteLength = msg.length;
    msg = new BN(msg, 16);
  } else {
    // BN converts the value to string
    var str = msg.toString();
    // HEX encoding
    byteLength = (str.length + 1) >>> 1;
    msg = new BN(str, 16);
  }
  // Allow overriding
  if (typeof bitLength !== 'number') {
    bitLength = byteLength * 8;
  }
  var delta = bitLength - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  if (typeof msg !== 'string' && typeof msg !== 'number' && !BN.isBN(msg)) {
    assert(typeof msg === 'object' && msg && typeof msg.length === 'number',
      'Expected message to be an array-like, a hex string, or a BN instance');
    assert((msg.length >>> 0) === msg.length); // non-negative 32-bit integer
    for (var i = 0; i < msg.length; i++) assert((msg[i] & 255) === msg[i]);
  }

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(msg, false, options.msgBitLength);

  // Would fail further checks, but let's make the error message clear
  assert(!msg.isNeg(), 'Can not sign a negative message');

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Recheck nonce to be bijective to msg
  assert((new BN(nonce)).eq(msg), 'Can not sign message');

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc, options) {
  if (!options)
    options = {};

  msg = this._truncateToN(msg, false, options.msgBitLength);
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":237,"../utils":245,"./key":239,"./signature":240,"bn.js":246,"brorand":131,"hmac-drbg":291}],239:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature, options) {
  return this.ec.verify(msg, signature, this, undefined, options);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":245,"bn.js":246}],240:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  if(buf[p.place] === 0x00) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  if ((data[p.place] & 128) !== 0) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  if ((data[p.place] & 128) !== 0) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":245,"bn.js":246}],241:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
    return false;
  }
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":237,"../utils":245,"./key":242,"./signature":243,"hash.js":278}],242:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":245}],243:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    assert(sig.length === eddsa.encodingLength * 2, 'Signature has invalid size');
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":245,"bn.js":246}],244:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};

},{}],245:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  var i;
  for (i = 0; i < naf.length; i += 1) {
    naf[i] = 0;
  }

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":246,"minimalistic-assert":385,"minimalistic-crypto-utils":386}],246:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"buffer":132,"dup":83}],247:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "6.6.1",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "lint": "eslint lib test",
    "lint:fix": "npm run lint -- --fix",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "test": "npm run lint && npm run unit",
    "version": "grunt dist && git add dist/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": "Fedor Indutny <fedor@indutny.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "brfs": "^2.0.2",
    "coveralls": "^3.1.0",
    "eslint": "^7.6.0",
    "grunt": "^1.2.1",
    "grunt-browserify": "^5.3.0",
    "grunt-cli": "^1.3.2",
    "grunt-contrib-connect": "^3.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.0.0",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.5",
    "mocha": "^8.0.1"
  },
  "dependencies": {
    "bn.js": "^4.11.9",
    "brorand": "^1.1.0",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.1",
    "inherits": "^2.0.4",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1"
  }
}

},{}],248:[function(require,module,exports){
'use strict';

/** @type {import('.')} */
var $defineProperty = Object.defineProperty || false;
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

module.exports = $defineProperty;

},{}],249:[function(require,module,exports){
'use strict';

/** @type {import('./eval')} */
module.exports = EvalError;

},{}],250:[function(require,module,exports){
'use strict';

/** @type {import('.')} */
module.exports = Error;

},{}],251:[function(require,module,exports){
'use strict';

/** @type {import('./range')} */
module.exports = RangeError;

},{}],252:[function(require,module,exports){
'use strict';

/** @type {import('./ref')} */
module.exports = ReferenceError;

},{}],253:[function(require,module,exports){
'use strict';

/** @type {import('./syntax')} */
module.exports = SyntaxError;

},{}],254:[function(require,module,exports){
'use strict';

/** @type {import('./type')} */
module.exports = TypeError;

},{}],255:[function(require,module,exports){
'use strict';

/** @type {import('./uri')} */
module.exports = URIError;

},{}],256:[function(require,module,exports){
'use strict';

/** @type {import('.')} */
module.exports = Object;

},{}],257:[function(require,module,exports){
module.exports = require('bare-events')

},{"bare-events":103}],258:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],259:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":382,"safe-buffer":485}],260:[function(require,module,exports){
module.exports = class FixedFIFO {
  constructor (hwm) {
    if (!(hwm > 0) || ((hwm - 1) & hwm) !== 0) throw new Error('Max size for a FixedFIFO should be a power of two')
    this.buffer = new Array(hwm)
    this.mask = hwm - 1
    this.top = 0
    this.btm = 0
    this.next = null
  }

  clear () {
    this.top = this.btm = 0
    this.next = null
    this.buffer.fill(undefined)
  }

  push (data) {
    if (this.buffer[this.top] !== undefined) return false
    this.buffer[this.top] = data
    this.top = (this.top + 1) & this.mask
    return true
  }

  shift () {
    const last = this.buffer[this.btm]
    if (last === undefined) return undefined
    this.buffer[this.btm] = undefined
    this.btm = (this.btm + 1) & this.mask
    return last
  }

  peek () {
    return this.buffer[this.btm]
  }

  isEmpty () {
    return this.buffer[this.btm] === undefined
  }
}

},{}],261:[function(require,module,exports){
const FixedFIFO = require('./fixed-size')

module.exports = class FastFIFO {
  constructor (hwm) {
    this.hwm = hwm || 16
    this.head = new FixedFIFO(this.hwm)
    this.tail = this.head
    this.length = 0
  }

  clear () {
    this.head = this.tail
    this.head.clear()
    this.length = 0
  }

  push (val) {
    this.length++
    if (!this.head.push(val)) {
      const prev = this.head
      this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length)
      this.head.push(val)
    }
  }

  shift () {
    if (this.length !== 0) this.length--
    const val = this.tail.shift()
    if (val === undefined && this.tail.next) {
      const next = this.tail.next
      this.tail.next = null
      this.tail = next
      return this.tail.shift()
    }

    return val
  }

  peek () {
    const val = this.tail.peek()
    if (val === undefined && this.tail.next) return this.tail.next.peek()
    return val
  }

  isEmpty () {
    return this.length === 0
  }
}

},{"./fixed-size":260}],262:[function(require,module,exports){
exports.fullRoots = function (index, result) {
  if (index & 1) throw new Error('You can only look up roots for depth(0) blocks')
  if (!result) result = []

  index /= 2

  let offset = 0
  let factor = 1

  while (true) {
    if (!index) return result
    while (factor * 2 <= index) factor *= 2
    result.push(offset + factor - 1)
    offset = offset + 2 * factor
    index -= factor
    factor = 1
  }
}

exports.futureRoots = function (index, result) {
  if (index & 1) throw new Error('You can only look up future roots for depth(0) blocks')
  if (!result) result = []

  let factor = 1

  // make first root
  while (factor * 2 <= index) factor *= 2

  // full factor of 2 - done
  if (factor * 2 - 2 === index) return result

  let pos = factor / 2 - 1

  // while its not a full tree
  while ((pos + factor / 2 - 1) !== index) {
    pos += factor

    // read too far, to to left child
    while ((pos + factor / 2 - 1) > index) {
      factor /= 2
      pos -= factor / 2
    }

    // the "gap" is a future root
    result.push(pos - factor / 2)
  }

  return result
}

exports.patch = function (from, to) {
  if (from === 0 || from >= to) return []

  const roots = exports.fullRoots(from)
  const target = exports.fullRoots(to)

  // first find the first root that is different

  let i = 0
  for (; i < target.length; i++) {
    if (i >= roots.length || roots[i] !== target[i]) break
  }

  const patch = []

  if (i < roots.length) {
    // now we need to grow the newest root until it hits the diff one
    let prev = roots.length - 1

    const ite = exports.iterator(roots[prev--])

    while (ite.index !== target[i]) {
      ite.sibling()

      if (prev >= 0 && ite.index === roots[prev]) {
        prev--
      } else {
        patch.push(ite.index)
      }

      patch.push(ite.parent())
    }

    i++ // patched to next root, so inc
  }

  // include the rest

  for (; i < target.length; i++) patch.push(target[i])

  return patch
}

exports.depth = function (index) {
  let depth = 0

  index += 1
  while (!(index & 1)) {
    depth++
    index = rightShift(index)
  }

  return depth
}

exports.sibling = function (index, depth) {
  if (!depth) depth = exports.depth(index)
  const offset = exports.offset(index, depth)

  return exports.index(depth, offset & 1 ? offset - 1 : offset + 1)
}

exports.parent = function (index, depth) {
  if (!depth) depth = exports.depth(index)
  const offset = exports.offset(index, depth)

  return exports.index(depth + 1, rightShift(offset))
}

exports.leftChild = function (index, depth) {
  if (!(index & 1)) return -1
  if (!depth) depth = exports.depth(index)
  return exports.index(depth - 1, exports.offset(index, depth) * 2)
}

exports.rightChild = function (index, depth) {
  if (!(index & 1)) return -1
  if (!depth) depth = exports.depth(index)
  return exports.index(depth - 1, 1 + (exports.offset(index, depth) * 2))
}

exports.children = function (index, depth) {
  if (!(index & 1)) return null

  if (!depth) depth = exports.depth(index)
  const offset = exports.offset(index, depth) * 2

  return [
    exports.index(depth - 1, offset),
    exports.index(depth - 1, offset + 1)
  ]
}

exports.leftSpan = function (index, depth) {
  if (!(index & 1)) return index
  if (!depth) depth = exports.depth(index)
  return exports.offset(index, depth) * twoPow(depth + 1)
}

exports.rightSpan = function (index, depth) {
  if (!(index & 1)) return index
  if (!depth) depth = exports.depth(index)
  return (exports.offset(index, depth) + 1) * twoPow(depth + 1) - 2
}

exports.nextLeaf = function (index) {
  let factor = 1
  let r = index

  while ((r & 1) === 1) {
    r = (r - 1) / 2
    factor *= 2
  }

  return index + factor + 1
}

exports.count = function (index, depth) {
  if (!(index & 1)) return 1
  if (!depth) depth = exports.depth(index)
  return twoPow(depth + 1) - 1
}

exports.countLeaves = function (index) {
  return (exports.count(index) + 1) / 2
}

exports.spans = function (index, depth) {
  if (!(index & 1)) return [index, index]
  if (!depth) depth = exports.depth(index)

  const offset = exports.offset(index, depth)
  const width = twoPow(depth + 1)

  return [offset * width, (offset + 1) * width - 2]
}

exports.index = function (depth, offset) {
  return (1 + 2 * offset) * twoPow(depth) - 1
}

exports.offset = function (index, depth) {
  if (!(index & 1)) return index / 2
  if (!depth) depth = exports.depth(index)

  return ((index + 1) / twoPow(depth) - 1) / 2
}

exports.iterator = function (index) {
  const ite = new Iterator()
  ite.seek(index || 0)
  return ite
}

function twoPow (n) {
  return n < 31 ? 1 << n : ((1 << 30) * (1 << (n - 30)))
}

function rightShift (n) {
  return (n - (n & 1)) / 2
}

function Iterator () {
  this.index = 0
  this.offset = 0
  this.factor = 0
}

Iterator.prototype.seek = function (index) {
  this.index = index
  if (this.index & 1) {
    this.offset = exports.offset(index)
    this.factor = twoPow(exports.depth(index) + 1)
  } else {
    this.offset = index / 2
    this.factor = 2
  }
}

Iterator.prototype.isLeft = function () {
  return (this.offset & 1) === 0
}

Iterator.prototype.isRight = function () {
  return (this.offset & 1) === 1
}

Iterator.prototype.isRoot = function (length) {
  const currentLength = 1 + (this.index + this.factor / 2 - 1) / 2
  if (length < currentLength) return false

  const factor = this.factor * 2
  const index = (this.offset & 1)
    ? this.index - this.factor / 2
    : this.index + this.factor / 2

  const parentLength = 1 + (index + factor / 2 - 1) / 2
  return parentLength > length
}

Iterator.prototype.contains = function (index) {
  return index > this.index
    ? index < (this.index + this.factor / 2)
    : index < this.index
      ? index > (this.index - this.factor / 2)
      : true
}

Iterator.prototype.prev = function () {
  if (!this.offset) return this.index
  this.offset--
  this.index -= this.factor
  return this.index
}

Iterator.prototype.next = function () {
  this.offset++
  this.index += this.factor
  return this.index
}

Iterator.prototype.count = function () {
  if (!(this.index & 1)) return 1
  return this.factor - 1
}

Iterator.prototype.countLeaves = function () {
  return (this.count() + 1) / 2
}

Iterator.prototype.sibling = function () {
  return this.isLeft() ? this.next() : this.prev()
}

Iterator.prototype.parent = function () {
  if (this.offset & 1) {
    this.index -= this.factor / 2
    this.offset = (this.offset - 1) / 2
  } else {
    this.index += this.factor / 2
    this.offset /= 2
  }
  this.factor *= 2
  return this.index
}

Iterator.prototype.leftSpan = function () {
  this.index = this.index - this.factor / 2 + 1
  this.offset = this.index / 2
  this.factor = 2
  return this.index
}

Iterator.prototype.peekLeftSpan = function () {
  return this.index - this.factor / 2 + 1
}

Iterator.prototype.rightSpan = function () {
  this.index = this.index + this.factor / 2 - 1
  this.offset = this.index / 2
  this.factor = 2
  return this.index
}

Iterator.prototype.peekRightSpan = function () {
  return this.index + this.factor / 2 - 1
}

Iterator.prototype.leftChild = function () {
  if (this.factor === 2) return this.index
  this.factor /= 2
  this.index -= this.factor / 2
  this.offset *= 2
  return this.index
}

Iterator.prototype.rightChild = function () {
  if (this.factor === 2) return this.index
  this.factor /= 2
  this.index += this.factor / 2
  this.offset = 2 * this.offset + 1
  return this.index
}

Iterator.prototype.nextTree = function () {
  this.index = this.index + this.factor / 2 + 1
  this.offset = this.index / 2
  this.factor = 2
  return this.index
}

Iterator.prototype.prevTree = function () {
  if (!this.offset) {
    this.index = 0
    this.factor = 2
  } else {
    this.index = this.index - this.factor / 2 - 1
    this.offset = this.index / 2
    this.factor = 2
  }
  return this.index
}

Iterator.prototype.fullRoot = function (index) {
  if (index <= this.index || (this.index & 1) > 0) return false
  while (index > this.index + this.factor + this.factor / 2) {
    this.index += this.factor / 2
    this.factor *= 2
    this.offset /= 2
  }
  return true
}

},{}],263:[function(require,module,exports){
'use strict';

var isCallable = require('is-callable');

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

/** @type {<This, A extends readonly unknown[]>(arr: A, iterator: (this: This | void, value: A[number], index: number, arr: A) => void, receiver: This | undefined) => void} */
var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

/** @type {<This, S extends string>(string: S, iterator: (this: This | void, value: S[number], index: number, string: S) => void, receiver: This | undefined) => void} */
var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

/** @type {<This, O>(obj: O, iterator: (this: This | void, value: O[keyof O], index: keyof O, obj: O) => void, receiver: This | undefined) => void} */
var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

/** @type {(x: unknown) => x is readonly unknown[]} */
function isArray(x) {
    return toStr.call(x) === '[object Array]';
}

/** @type {import('.')._internal} */
module.exports = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (isArray(list)) {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

},{"is-callable":370}],264:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],265:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":264}],266:[function(require,module,exports){
'use strict';

var undefined;

var $Object = require('es-object-atoms');

var $Error = require('es-errors');
var $EvalError = require('es-errors/eval');
var $RangeError = require('es-errors/range');
var $ReferenceError = require('es-errors/ref');
var $SyntaxError = require('es-errors/syntax');
var $TypeError = require('es-errors/type');
var $URIError = require('es-errors/uri');

var abs = require('math-intrinsics/abs');
var floor = require('math-intrinsics/floor');
var max = require('math-intrinsics/max');
var min = require('math-intrinsics/min');
var pow = require('math-intrinsics/pow');
var round = require('math-intrinsics/round');
var sign = require('math-intrinsics/sign');

var $Function = Function;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = require('gopd');
var $defineProperty = require('es-define-property');

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();

var getProto = require('get-proto');
var $ObjectGPO = require('get-proto/Object.getPrototypeOf');
var $ReflectGPO = require('get-proto/Reflect.getPrototypeOf');

var $apply = require('call-bind-apply-helpers/functionApply');
var $call = require('call-bind-apply-helpers/functionCall');

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	__proto__: null,
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': $Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': $EvalError,
	'%Float16Array%': typeof Float16Array === 'undefined' ? undefined : Float16Array,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': $Object,
	'%Object.getOwnPropertyDescriptor%': $gOPD,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': $RangeError,
	'%ReferenceError%': $ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': $URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,

	'%Function.prototype.call%': $call,
	'%Function.prototype.apply%': $apply,
	'%Object.defineProperty%': $defineProperty,
	'%Object.getPrototypeOf%': $ObjectGPO,
	'%Math.abs%': abs,
	'%Math.floor%': floor,
	'%Math.max%': max,
	'%Math.min%': min,
	'%Math.pow%': pow,
	'%Math.round%': round,
	'%Math.sign%': sign,
	'%Reflect.getPrototypeOf%': $ReflectGPO
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	__proto__: null,
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('hasown');
var $concat = bind.call($call, Array.prototype.concat);
var $spliceApply = bind.call($apply, Array.prototype.splice);
var $replace = bind.call($call, String.prototype.replace);
var $strSlice = bind.call($call, String.prototype.slice);
var $exec = bind.call($call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"call-bind-apply-helpers/functionApply":167,"call-bind-apply-helpers/functionCall":168,"es-define-property":248,"es-errors":250,"es-errors/eval":249,"es-errors/range":251,"es-errors/ref":252,"es-errors/syntax":253,"es-errors/type":254,"es-errors/uri":255,"es-object-atoms":256,"function-bind":265,"get-proto":269,"get-proto/Object.getPrototypeOf":267,"get-proto/Reflect.getPrototypeOf":268,"gopd":272,"has-symbols":274,"hasown":290,"math-intrinsics/abs":374,"math-intrinsics/floor":375,"math-intrinsics/max":377,"math-intrinsics/min":378,"math-intrinsics/pow":379,"math-intrinsics/round":380,"math-intrinsics/sign":381}],267:[function(require,module,exports){
'use strict';

var $Object = require('es-object-atoms');

/** @type {import('./Object.getPrototypeOf')} */
module.exports = $Object.getPrototypeOf || null;

},{"es-object-atoms":256}],268:[function(require,module,exports){
'use strict';

/** @type {import('./Reflect.getPrototypeOf')} */
module.exports = (typeof Reflect !== 'undefined' && Reflect.getPrototypeOf) || null;

},{}],269:[function(require,module,exports){
'use strict';

var reflectGetProto = require('./Reflect.getPrototypeOf');
var originalGetProto = require('./Object.getPrototypeOf');

var getDunderProto = require('dunder-proto/get');

/** @type {import('.')} */
module.exports = reflectGetProto
	? function getProto(O) {
		// @ts-expect-error TS can't narrow inside a closure, for some reason
		return reflectGetProto(O);
	}
	: originalGetProto
		? function getProto(O) {
			if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
				throw new TypeError('getProto: not an object');
			}
			// @ts-expect-error TS can't narrow inside a closure, for some reason
			return originalGetProto(O);
		}
		: getDunderProto
			? function getProto(O) {
				// @ts-expect-error TS can't narrow inside a closure, for some reason
				return getDunderProto(O);
			}
			: null;

},{"./Object.getPrototypeOf":267,"./Reflect.getPrototypeOf":268,"dunder-proto/get":230}],270:[function(require,module,exports){
module.exports = {
  RTCPeerConnection: window.RTCPeerConnection,
  RTCIceCandidate: window.RTCIceCandidate
}

},{}],271:[function(require,module,exports){
'use strict';

/** @type {import('./gOPD')} */
module.exports = Object.getOwnPropertyDescriptor;

},{}],272:[function(require,module,exports){
'use strict';

/** @type {import('.')} */
var $gOPD = require('./gOPD');

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;

},{"./gOPD":271}],273:[function(require,module,exports){
'use strict';

var $defineProperty = require('es-define-property');

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	return !!$defineProperty;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!$defineProperty) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;

},{"es-define-property":248}],274:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

/** @type {import('.')} */
module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":275}],275:[function(require,module,exports){
'use strict';

/** @type {import('./shams')} */
/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	/** @type {{ [k in symbol]?: unknown }} */
	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		// eslint-disable-next-line no-extra-parens
		var descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],276:[function(require,module,exports){
'use strict';

var hasSymbols = require('has-symbols/shams');

/** @type {import('.')} */
module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};

},{"has-symbols/shams":275}],277:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var inherits = require('inherits')

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

var useUint8Array = typeof Uint8Array !== 'undefined'
var useArrayBuffer = typeof ArrayBuffer !== 'undefined' &&
  typeof Uint8Array !== 'undefined' &&
  ArrayBuffer.isView &&
  (Buffer.prototype instanceof Uint8Array || Buffer.TYPED_ARRAY_SUPPORT)

function toBuffer (data, encoding) {
  // No need to do anything for exact instance
  // This is only valid when safe-buffer.Buffer === buffer.Buffer, i.e. when Buffer.from/Buffer.alloc existed
  if (data instanceof Buffer) return data

  // Convert strings to Buffer
  if (typeof data === 'string') return Buffer.from(data, encoding)

  /*
   * Wrap any TypedArray instances and DataViews
   * Makes sense only on engines with full TypedArray support -- let Buffer detect that
   */
  if (useArrayBuffer && ArrayBuffer.isView(data)) {
    if (data.byteLength === 0) return Buffer.alloc(0) // Bug in Node.js <6.3.1, which treats this as out-of-bounds
    var res = Buffer.from(data.buffer, data.byteOffset, data.byteLength)
    // Recheck result size, as offset/length doesn't work on Node.js <5.10
    // We just go to Uint8Array case if this fails
    if (res.byteLength === data.byteLength) return res
  }

  /*
   * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over
   * Doesn't make sense with other TypedArray instances
   */
  if (useUint8Array && data instanceof Uint8Array) return Buffer.from(data)

  /*
   * Old Buffer polyfill on an engine that doesn't have TypedArray support
   * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed
   * Convert to our current Buffer implementation
   */
  if (
    Buffer.isBuffer(data) &&
    data.constructor &&
    typeof data.constructor.isBuffer === 'function' &&
    data.constructor.isBuffer(data)
  ) {
    return Buffer.from(data)
  }

  throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.')
}

HashBase.prototype.update = function (data, encoding) {
  if (this._finalized) throw new Error('Digest already called')

  data = toBuffer(data, encoding) // asserts correct input type

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":369,"safe-buffer":485,"stream":563}],278:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":279,"./hash/hmac":280,"./hash/ripemd":281,"./hash/sha":282,"./hash/utils":289}],279:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":289,"minimalistic-assert":385}],280:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":289,"minimalistic-assert":385}],281:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":279,"./utils":289}],282:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":283,"./sha/224":284,"./sha/256":285,"./sha/384":286,"./sha/512":287}],283:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":279,"../utils":289,"./common":288}],284:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":289,"./256":285}],285:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":279,"../utils":289,"./common":288,"minimalistic-assert":385}],286:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":289,"./512":287}],287:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":279,"../utils":289,"minimalistic-assert":385}],288:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":289}],289:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":369,"minimalistic-assert":385}],290:[function(require,module,exports){
'use strict';

var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = require('function-bind');

/** @type {import('.')} */
module.exports = bind.call(call, $hasOwn);

},{"function-bind":265}],291:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":278,"minimalistic-assert":385,"minimalistic-crypto-utils":386}],292:[function(require,module,exports){
const { RTCPeerConnection, RTCIceCandidate } = require('get-webrtc')
const Protomux = require('protomux')
const c = require('compact-encoding')
const safetyCatch = require('safety-catch')
const WebStream = require('./lib/web-stream.js')

// TODO: Investigate how to deploy STUN servers
const ICES = [
  { urls: 'stun:stun.l.google.com:19302' }
]

module.exports = class WebPeer {
  constructor (relay, opts = {}) {
    this._rtc = new RTCPeerConnection({ iceServers: opts.iceServers || ICES })
    this._relay = relay
    this._mux = Protomux.from(relay)

    this._channel = this._mux.createChannel({ protocol: 'hyper-webrtc/signal' })

    if (this._channel === null) throw new Error('Channel duplicated')

    this._ice = this._channel.addMessage({ encoding: c.json, onmessage: this._onice.bind(this) })
    this._offer = this._channel.addMessage({ encoding: c.json, onmessage: this._onoffer.bind(this) })
    this._answer = this._channel.addMessage({ encoding: c.json, onmessage: this._onanswer.bind(this) })

    this._channel.open()

    this._rtc.onicecandidate = onicecandidate.bind(this)
  }

  static from (relay) {
    const peer = new this(relay)

    const rawStream = peer._rtc.createDataChannel('wire', { negotiated: true, id: 0 })

    const stream = new WebStream(relay.isInitiator, rawStream, {
      publicKey: relay.publicKey,
      remotePublicKey: relay.remotePublicKey,
      handshakeHash: relay.handshakeHash
    })

    relay.on('close', () => {
      peer._rtc.close()
      rawStream.close()
    })

    stream.on('close', () => {
      peer._rtc.close()
      relay.destroy()
    })

    peer.negotiate().catch(safetyCatch)

    return stream
  }

  async negotiate () {
    if (!this._relay.isInitiator) return

    const offer = await this._rtc.createOffer()
    await this._rtc.setLocalDescription(offer)

    this._offer.send({ offer: this._rtc.localDescription })
  }

  async _onice ({ ice }) {
    await this._rtc.addIceCandidate(new RTCIceCandidate(ice))
  }

  async _onoffer ({ offer }) {
    await this._rtc.setRemoteDescription(offer)

    const answer = await this._rtc.createAnswer()
    await this._rtc.setLocalDescription(answer)

    this._answer.send({ answer: this._rtc.localDescription })
  }

  async _onanswer ({ answer }) {
    await this._rtc.setRemoteDescription(answer)
  }
}

function onicecandidate (e) {
  if (e.candidate) this._ice.send({ ice: e.candidate })
}

},{"./lib/web-stream.js":293,"compact-encoding":178,"get-webrtc":270,"protomux":439,"safety-catch":486}],293:[function(require,module,exports){
const { Duplex } = require('streamx')
const b4a = require('b4a')

module.exports = class WebStream extends Duplex {
  constructor (isInitiator, dc, opts = {}) {
    super({ mapWritable: toBuffer })

    this._dc = dc

    this.noiseStream = this
    this.isInitiator = isInitiator
    this.rawStream = this

    this.publicKey = opts.publicKey || null
    this.remotePublicKey = opts.remotePublicKey || null
    this.handshakeHash = opts.handshakeHash || null

    this._opening = null
    this._openedDone = null

    this.opened = new Promise(resolve => { this._openedDone = resolve })
    this.userData = null

    this._onopen = onopen.bind(this)
    this._onmessage = onmessage.bind(this)
    this._onerror = onerror.bind(this)
    this._onclose = onclose.bind(this)

    this._dc.addEventListener('open', this._onopen)
    this._dc.addEventListener('message', this._onmessage)
    this._dc.addEventListener('error', this._onerror)
    this._dc.addEventListener('close', this._onclose)

    this.resume().pause() // Open immediately
  }

  _open (cb) {
    if (this._dc.readyState === 'closed' || this._dc.readyState === 'closing') {
      cb(new Error('Stream is closed'))
      return
    }

    if (this._dc.readyState === 'connecting') {
      this._opening = cb
      return
    }

    this._resolveOpened(true)
    cb(null)
  }

  _continueOpen (err) {
    if (err) this.destroy(err)

    if (this._opening === null) return

    const cb = this._opening
    this._opening = null
    this._open(cb)
  }

  _resolveOpened (opened) {
    const cb = this._openedDone

    if (cb) {
      this._openedDone = null
      cb(opened)

      if (opened) this.emit('connect')
    }
  }

  _write (data, cb) {
    this._dc.send(data)
    cb(null)
  }

  _predestroy () {
    this._continueOpen(new Error('Stream was destroyed'))
  }

  _destroy (cb) {
    this._dc.close()
    this._resolveOpened(false)
    cb(null)
  }

  setKeepAlive () {} // TODO
}

function onopen () {
  this._continueOpen()
}

function onmessage (event) {
  this.push(b4a.from(event.data))
}

function onerror (err) {
  this.destroy(err)
}

function onclose () {
  this._dc.removeEventListener('open', this._onopen)
  this._dc.removeEventListener('message', this._onmessage)
  this._dc.removeEventListener('error', this._onerror)
  this._dc.removeEventListener('close', this._onclose)

  this.destroy()
}

function toBuffer (data) {
  return typeof data === 'string' ? b4a.from(data) : data
}

},{"b4a":102,"streamx":578}],294:[function(require,module,exports){
const codecs = require('codecs')
const { Readable } = require('streamx')
const mutexify = require('mutexify/promise')
const b4a = require('b4a')
const safetyCatch = require('safety-catch')
const ReadyResource = require('ready-resource')
const debounce = require('debounceify')
const Rache = require('rache')
const rrp = require('resolve-reject-promise')

const { all: unslabAll } = require('unslab')

const RangeIterator = require('./iterators/range')
const HistoryIterator = require('./iterators/history')
const DiffIterator = require('./iterators/diff')
const LocalBlockIterator = require('./iterators/local')
const Extension = require('./lib/extension')
const { YoloIndex, Node, Header } = require('./lib/messages')
const { BLOCK_NOT_AVAILABLE, DECODING_ERROR } = require('hypercore-errors')

const T = 5
const MIN_KEYS = T - 1
const MAX_CHILDREN = MIN_KEYS * 2 + 1

const SEP = b4a.alloc(1)
const EMPTY = b4a.alloc(0)

class Key {
  constructor (seq, value) {
    this.seq = seq
    this.value = value
  }
}

class Child {
  constructor (seq, offset, value) {
    this.seq = seq
    this.offset = offset
    this.value = value
  }
}

class Cache {
  constructor (rache) {
    this.keys = rache
    this.length = 0
  }

  get (seq) {
    return this.keys.get(seq) || null
  }

  set (seq, key) {
    this.keys.set(seq, key)
    if (seq >= this.length) this.length = seq + 1
  }

  gc (length) {
    // if we need to "work" more than 128 ticks, just bust the cache...
    if (this.length - length > 128) {
      this.keys.clear()
    } else {
      for (let i = length; i < this.length; i++) {
        this.keys.delete(i)
      }
    }

    this.length = length
  }

  clear () {
    this.keys.clear()
  }
}

class Pointers {
  constructor (decoded) {
    this.levels = decoded.levels.map(l => {
      const children = []
      const keys = []

      for (let i = 0; i < l.keys.length; i++) {
        keys.push(new Key(l.keys[i], null))
      }

      for (let i = 0; i < l.children.length; i += 2) {
        children.push(new Child(l.children[i], l.children[i + 1], null))
      }

      return { keys, children }
    })
  }

  get (i) {
    return this.levels[i]
  }

  hasKey (seq) {
    for (const lvl of this.levels) {
      for (const key of lvl.keys) {
        if (key.seq === seq) return true
      }
    }
    return false
  }
}

function inflate (entry) {
  if (entry.inflated === null) {
    entry.inflated = YoloIndex.decode(entry.index)
    entry.index = null
  }
  return new Pointers(entry.inflated)
}

function deflate (index) {
  const levels = index.map(l => {
    const keys = []
    const children = []

    for (let i = 0; i < l.value.keys.length; i++) {
      keys.push(l.value.keys[i].seq)
    }

    for (let i = 0; i < l.value.children.length; i++) {
      children.push(l.value.children[i].seq, l.value.children[i].offset)
    }

    return { keys, children }
  })

  return YoloIndex.encode({ levels })
}

class TreeNode {
  constructor (block, keys, children, offset) {
    this.block = block
    this.offset = offset
    this.keys = keys
    this.children = children
    this.changed = false

    this.preload()
  }

  preload () {
    if (this.block === null) return

    const core = getBackingCore(this.block.tree.core)
    if (!core) return

    const bitfield = core.core.bitfield
    const blocks = []

    for (let i = 0; i < this.keys.length; i++) {
      const k = this.keys[i]
      if (k.value) continue
      if (k.seq >= core.signedLength || (bitfield && bitfield.get(k.seq))) continue
      blocks.push(k.seq)
    }
    for (let i = 0; i < this.children.length; i++) {
      const c = this.children[i]
      if (c.value) continue
      if (c.seq >= core.signedLength || (bitfield && bitfield.get(c.seq))) continue
      blocks.push(c.seq)
    }

    if (blocks.length) core.download({ blocks })
  }

  async insertKey (key, value, child, node, encoding, cas) {
    let s = 0
    let e = this.keys.length
    let c

    while (s < e) {
      const mid = (s + e) >> 1
      c = b4a.compare(key.value, await this.getKey(mid))

      if (c === 0) {
        if (cas) {
          const prev = await this.getKeyNode(mid)
          if (!(await cas(prev.final(encoding), node))) return true
        }
        if (!this.block.tree.tree.alwaysDuplicate) {
          const prev = await this.getKeyNode(mid)
          if (sameValue(prev.value, value)) return true
        }
        this.changed = true
        this.keys[mid] = key
        return true
      }

      if (c < 0) e = mid
      else s = mid + 1
    }

    const i = c < 0 ? e : s
    this.keys.splice(i, 0, key)
    if (child) this.children.splice(i + 1, 0, new Child(0, 0, child))
    this.changed = true

    return this.keys.length < MAX_CHILDREN
  }

  removeKey (index) {
    this.keys.splice(index, 1)
    if (this.children.length) {
      this.children[index + 1].seq = 0 // mark as freed
      this.children.splice(index + 1, 1)
    }
    this.changed = true
  }

  async siblings (parent) {
    for (let i = 0; i < parent.children.length; i++) {
      if (parent.children[i].value === this) {
        const [left, right] = await Promise.all([
          i ? parent.getChildNode(i - 1) : null,
          i < parent.children.length - 1 ? parent.getChildNode(i + 1) : null
        ])
        return { left, index: i, right }
      }
    }

    throw new Error('Bad parent')
  }

  merge (node, median) {
    this.changed = true
    this.keys.push(median)
    for (let i = 0; i < node.keys.length; i++) this.keys.push(node.keys[i])
    for (let i = 0; i < node.children.length; i++) this.children.push(node.children[i])
  }

  async split () {
    const len = this.keys.length >> 1
    const right = TreeNode.create(this.block)

    while (right.keys.length < len) right.keys.push(this.keys.pop())
    right.keys.reverse()

    await this.getKey(this.keys.length - 1) // make sure the median is loaded
    const median = this.keys.pop()

    if (this.children.length) {
      while (right.children.length < len + 1) right.children.push(this.children.pop())
      right.children.reverse()
    }

    this.changed = true

    return {
      left: this,
      median,
      right
    }
  }

  getKeyNode (index) {
    return this.block.tree.getBlock(this.keys[index].seq)
  }

  async getChildNode (index) {
    const child = this.children[index]
    if (child.value) return child.value
    const block = child.seq === this.block.seq ? this.block : await this.block.tree.getBlock(child.seq)
    return (child.value = block.getTreeNode(child.offset))
  }

  setKey (index, key) {
    this.keys[index] = key
    this.changed = true
  }

  async getKey (index) {
    const key = this.keys[index]
    if (key.value) return key.value
    const k = key.seq === this.block.seq ? this.block.key : await this.block.tree.getKey(key.seq)
    return (key.value = k)
  }

  indexChanges (index, seq) {
    const offset = index.push(null) - 1
    this.changed = false

    for (const child of this.children) {
      if (!child.value || !child.value.changed) continue
      child.seq = seq
      child.offset = child.value.indexChanges(index, seq)
      index[child.offset] = child
    }

    return offset
  }

  updateChildren (seq, block) {
    for (const child of this.children) {
      if (!child.value || child.seq !== seq) continue
      child.value.block = block
      child.value.updateChildren(seq, block)
    }
  }

  static create (block) {
    const node = new TreeNode(block, [], [], 0)
    node.changed = true
    return node
  }
}

class BlockEntry {
  constructor (seq, tree, entry) {
    this.seq = seq
    this.tree = tree
    this.index = null
    this.entry = entry
    this.key = entry.key
    this.value = entry.value
  }

  isTarget (key) {
    return b4a.equals(this.key, key)
  }

  inflate () {
    if (this.index === null) {
      this.index = inflate(this.entry)
    }
  }

  isDeletion () {
    if (this.value !== null) return false

    if (this.index === null) {
      this.index = inflate(this.entry)
    }

    return !this.index.hasKey(this.seq)
  }

  final (encoding) {
    return {
      seq: this.seq,
      key: encoding.key ? encoding.key.decode(this.key) : this.key,
      value: this.value && (encoding.value ? encoding.value.decode(this.value) : this.value)
    }
  }

  getTreeNode (offset) {
    if (this.index === null) {
      this.index = inflate(this.entry)
    }
    const entry = this.index.get(offset)
    return new TreeNode(this, entry.keys, entry.children, offset)
  }
}

class CacheLock {
  constructor () {
    this.map = new Map()
  }

  enter (seq) {
    const pending = this.map.get(seq)

    if (!pending) {
      this.map.set(seq, [])
      return Promise.resolve()
    }

    const { resolve, promise } = rrp()
    pending.push(resolve)
    return promise
  }

  exit (seq) {
    const pending = this.map.get(seq)
    if (!pending.length) {
      this.map.delete(seq)
      return
    }

    pending.pop()()
  }
}

class BatchEntry extends BlockEntry {
  constructor (seq, tree, key, value, index) {
    super(seq, tree, { key, value, index: null, inflated: null })
    this.pendingIndex = index
  }

  isTarget (key) {
    return false
  }

  getTreeNode (offset) {
    return this.pendingIndex[offset].value
  }
}

class Hyperbee extends ReadyResource {
  constructor (core, opts = {}) {
    super()
    // this.feed is now deprecated, and will be this.core going forward
    this.feed = core
    this.core = core

    this.keyEncoding = opts.keyEncoding ? codecs(opts.keyEncoding) : null
    this.valueEncoding = opts.valueEncoding ? codecs(opts.valueEncoding) : null
    this.extension = opts.extension !== false ? getExtension(this, opts) : null
    this.metadata = opts.metadata || null
    this.lock = opts.lock || mutexify()
    this.sep = opts.sep || SEP
    this.readonly = !!opts.readonly
    this.prefix = opts.prefix || null

    // In a future version, this should be false by default
    this.alwaysDuplicate = opts.alwaysDuplicate !== false

    this._unprefixedKeyEncoding = this.keyEncoding
    this._sub = !!this.prefix
    this._checkout = opts.checkout || 0
    this._view = !!opts._view

    this._onappendBound = this._view ? null : this._onappend.bind(this)
    this._ontruncateBound = this._view ? null : this._ontruncate.bind(this)
    this._watchers = this._onappendBound ? [] : null
    this._entryWatchers = this._onappendBound ? [] : null
    this._sessions = opts.sessions !== false

    this._keyCache = null
    this._nodeCache = null
    this._cacheLock = new CacheLock()

    this._batches = []

    if (this._watchers) {
      this.core.on('append', this._onappendBound)
      this.core.on('truncate', this._ontruncateBound)
    }

    if (this.prefix && opts._sub) {
      this.keyEncoding = prefixEncoding(this.prefix, this.keyEncoding)
    }

    this.ready().catch(safetyCatch)
  }

  async _open () {
    if (this.core.opened === false) await this.core.ready()

    // snapshot
    if (this._checkout === -1) this._checkout = Math.max(1, this.core.length)

    const baseCache = Rache.from(this.core.globalCache)
    this._keyCache = new Cache(baseCache)
    this._nodeCache = new Cache(Rache.from(baseCache))
  }

  get version () {
    return Math.max(1, this._checkout || this.core.length)
  }

  get id () {
    return this.core.id
  }

  get key () {
    return this.core.key
  }

  get discoveryKey () {
    return this.core.discoveryKey
  }

  get writable () {
    return this.core.writable
  }

  get readable () {
    return this.core.readable
  }

  replicate (isInitiator, opts) {
    return this.core.replicate(isInitiator, opts)
  }

  update (opts) {
    return this.core.update(opts)
  }

  peek (range, opts) {
    return iteratorPeek(this.createRangeIterator(range, { ...opts, limit: 1 }))
  }

  createRangeIterator (range, opts = {}) {
    // backwards compat range arg
    opts = opts ? { ...opts, ...range } : range

    const extension = (opts.extension === false && opts.limit !== 0) ? null : this.extension
    const keyEncoding = opts.keyEncoding ? codecs(opts.keyEncoding) : this.keyEncoding

    if (extension) {
      const { onseq, onwait } = opts
      let version = 0
      let next = 0

      opts = encRange(keyEncoding, {
        ...opts,
        sub: this._sub,
        onseq (seq) {
          if (!version) version = seq + 1
          if (next) next--
          if (onseq) onseq(seq)
        },
        onwait (seq) {
          if (!next) {
            next = Extension.BATCH_SIZE
            extension.iterator(ite.snapshot(version))
          }
          if (onwait) onwait(seq)
        }
      })
    } else {
      opts = encRange(keyEncoding, { ...opts, sub: this._sub })
    }

    const ite = new RangeIterator(new Batch(this, this._makeSnapshot(), null, false, opts), null, opts)
    return ite
  }

  createReadStream (range, opts) {
    const signal = (opts && opts.signal) || null
    return iteratorToStream(this.createRangeIterator(range, opts), signal)
  }

  createHistoryStream (opts) {
    const session = (opts && opts.live) ? this.core.session() : this._makeSnapshot()
    const signal = (opts && opts.signal) || null
    return iteratorToStream(new HistoryIterator(new Batch(this, session, null, false, opts), opts), signal)
  }

  createDiffStream (right, range, opts) {
    if (typeof right === 'number') right = this.checkout(Math.max(1, right), { reuseSession: true })

    // backwards compat range arg
    opts = opts ? { ...opts, ...range } : range

    const signal = (opts && opts.signal) || null

    const keyEncoding = opts && opts.keyEncoding ? codecs(opts.keyEncoding) : this.keyEncoding
    if (keyEncoding) opts = encRange(keyEncoding, { ...opts, sub: this._sub })

    let done
    let closing
    let ite

    const left = this

    const rs = new Readable({
      signal,
      eagerOpen: true,
      async open (cb) {
        try {
          if (right.opened === false) await right.ready()
          if (left.opened === false) await left.ready()
        } catch (err) {
          cb(err)
          return
        }

        if (closing) {
          cb(null)
          return
        }

        if (left.core.closing || right.core.closing) {
          cb(new Error('Bee closed'))
          return
        }

        const snapshot = right.version > left.version
          ? right._makeSnapshot()
          : left._makeSnapshot()

        done = cb
        ite = new DiffIterator(
          new Batch(left, snapshot, null, false, opts),
          new Batch(right, snapshot, null, false, opts),
          opts
        )
        ite.open().then(fin, fin)
      },
      read (cb) {
        done = cb
        ite.next().then(push, fin)
      },
      predestroy () {
        if (!ite) {
          closing = Promise.resolve()
        } else {
          closing = ite.close()
          closing.catch(noop)
        }
      },
      destroy (cb) {
        done = cb
        if (!closing) closing = ite.close()
        closing.then(fin, fin)
      }
    })

    return rs

    function fin (err) {
      done(err)
    }

    function push (val) {
      rs.push(val)
      done(null)
    }
  }

  get (key, opts) {
    const b = new Batch(this, this._makeSnapshot(), null, true, opts)
    return b.get(key)
  }

  getBySeq (seq, opts) {
    const b = new Batch(this, this._makeSnapshot(), null, true, opts)
    return b.getBySeq(seq)
  }

  put (key, value, opts) {
    const b = new Batch(this, this.core, null, true, opts)
    return b.put(key, value, opts)
  }

  batch (opts) {
    return new Batch(this, this.core, mutexify(), true, opts)
  }

  del (key, opts) {
    const b = new Batch(this, this.core, null, true, opts)
    return b.del(key, opts)
  }

  watch (range, opts) {
    if (!this._watchers) throw new Error('Can only watch the main bee instance')
    return new Watcher(this, range, opts)
  }

  async getAndWatch (key, opts) {
    if (!this._watchers) throw new Error('Can only watch the main bee instance')

    const watcher = new EntryWatcher(this, key, opts)
    await watcher._debouncedUpdate()

    if (this.closing) {
      await watcher.close()
      throw new Error('Bee closed')
    }

    return watcher
  }

  _onappend () {
    for (const watcher of this._watchers) {
      watcher._onappend()
    }

    for (const watcher of this._entryWatchers) {
      watcher._onappend()
    }
  }

  _ontruncate (length) {
    for (const watcher of this._watchers) {
      watcher._ontruncate()
    }

    for (const watcher of this._entryWatchers) {
      watcher._ontruncate()
    }

    this._nodeCache.gc(length)
    this._keyCache.gc(length)
  }

  _makeSnapshot () {
    if (this._sessions === false) return this.core
    // TODO: better if we could encapsulate this in hypercore in the future
    return (this._checkout <= this.core.length || this._checkout <= 1) ? this.core.snapshot() : this.core.session({ snapshot: false })
  }

  async clearUnlinked (options = {}) {
    await this.ready()

    const { gte = 0, lt = this.version - 1, batchSize = 4096, wait = true } = options
    const checkout = this.version

    let prev = this.batch({ wait: false, checkout: gte })
    let b = this.batch({ wait, checkout })

    const iteBatch = this.batch({ wait: false, checkout })
    const ite = new LocalBlockIterator(iteBatch, { gte, lt })
    await ite.open()

    let ticks = 0

    while (true) {
      const data = await ite.next()
      if (!data) break

      if (!(await isLinked(b, data))) {
        if (b.core.closing || this.core.closing || this.closing) break
        await this.core.clear(data.seq)
      }

      const prevNode = await prev.get(data.key, { finalize: false }).catch(toNull)

      if (prevNode && !(await isLinked(b, prevNode))) {
        if (b.core.closing || this.core.closing || this.closing) break
        await this.core.clear(prevNode.seq)
      }

      if (ticks++ >= batchSize) {
        ticks = 0
        await prev.close()
        await b.close()

        prev = this.batch({ wait: false, checkout: gte })
        b = this.batch({ wait, checkout })
      }
    }

    if (b.core.closing || this.core.closing || this.closing) throw new Error('Core is closed')

    await b.close()
    await prev.close()
    await ite.close()
    await iteBatch.close()

    return lt
  }

  checkout (version, opts = {}) {
    if (version === 0) version = 1

    // same as above, just checkout isn't set yet...
    const snap = (opts.reuseSession || this._sessions === false)
      ? this.core
      : (version <= this.core.length || version <= 1) ? this.core.snapshot() : this.core.session({ snapshot: false })

    return new Hyperbee(snap, {
      _view: true,
      _sub: false,
      prefix: this.prefix,
      sep: this.sep,
      lock: this.lock,
      checkout: version,
      keyEncoding: opts.keyEncoding || this.keyEncoding,
      valueEncoding: opts.valueEncoding || this.valueEncoding,
      extension: this.extension !== null ? this.extension : false
    })
  }

  snapshot (opts) {
    return this.checkout((this.core.opened === false || this._checkout <= 0) ? -1 : Math.max(1, this.version), opts)
  }

  sub (prefix, opts = {}) {
    let sep = opts.sep || this.sep
    if (!b4a.isBuffer(sep)) sep = b4a.from(sep)

    prefix = b4a.concat([this.prefix || EMPTY, b4a.from(prefix), sep])

    const valueEncoding = codecs(opts.valueEncoding || this.valueEncoding)
    const keyEncoding = codecs(opts.keyEncoding || this._unprefixedKeyEncoding)

    return new Hyperbee(this.core, {
      _view: true,
      _sub: true,
      prefix,
      sep: this.sep,
      lock: this.lock,
      checkout: this._checkout,
      valueEncoding,
      keyEncoding,
      extension: this.extension !== null ? this.extension : false,
      metadata: this.metadata
    })
  }

  async getHeader (opts) {
    const blk = await this.core.get(0, opts)
    try {
      return blk && Header.decode(blk)
    } catch {
      throw DECODING_ERROR()
    }
  }

  async _close () {
    if (!this._view) {
      if (this._keyCache) this._keyCache.clear()
      if (this._nodeCache) this._nodeCache.clear()
    }

    if (this._watchers) {
      this.core.off('append', this._onappendBound)
      this.core.off('truncate', this._ontruncateBound)

      while (this._watchers.length) {
        await this._watchers[this._watchers.length - 1].close()
      }
    }

    if (this._entryWatchers) {
      while (this._entryWatchers.length) {
        await this._entryWatchers[this._entryWatchers.length - 1].close()
      }
    }

    while (this._batches.length) {
      await this._batches[this._batches.length - 1].close()
    }

    return this.core.close()
  }

  static async isHyperbee (core, opts) {
    await core.ready()

    const blk0 = await core.get(0, opts)
    if (blk0 === null) throw BLOCK_NOT_AVAILABLE()

    try {
      return Header.decode(blk0).protocol === 'hyperbee'
    } catch (err) { // undecodable
      return false
    }
  }
}

class Batch {
  constructor (tree, core, batchLock, cache, options = {}) {
    this.tree = tree
    // this.feed is now deprecated, and will be this.core going forward
    this.feed = core
    this.core = core
    this.index = tree._batches.push(this) - 1
    this.blocks = cache ? new Map() : null
    this.autoFlush = !batchLock
    this.maxBlocksCached = options.maxBlocksCached || 128
    this.rootSeq = 0
    this.root = null
    this.length = 0
    this.checkout = options.checkout === undefined ? -1 : options.checkout
    this.options = options
    this.locked = null
    this.batchLock = batchLock
    this.onseq = this.options.onseq || noop
    this.appending = null
    this.isSnapshot = this.core !== this.tree.core
    this.shouldUpdate = this.options.update !== false
    this.updating = null
    this.encoding = {
      key: options.keyEncoding ? codecs(options.keyEncoding) : tree.keyEncoding,
      value: options.valueEncoding ? codecs(options.valueEncoding) : tree.valueEncoding
    }
  }

  async ready () {
    if (this.core.opened === false) await this.core.ready()
    if (this.tree.opened === false) await this.tree.ready()
  }

  async lock () {
    if (this.tree.readonly) throw new Error('Hyperbee is marked as read-only')
    if (this.locked === null) this.locked = await this.tree.lock()
  }

  get version () {
    if (this.checkout !== -1) return Math.max(1, this.checkout)
    return Math.max(1, this.tree._checkout || (this.core.length + this.length))
  }

  async getRoot (ensureHeader) {
    await this.ready()
    if (ensureHeader) {
      if (this.core.length === 0 && this.core.writable && !this.tree.readonly) {
        await this.core.append(Header.encode({
          protocol: 'hyperbee',
          metadata: this.tree.metadata
        }))
      }
    }
    if (this.tree._checkout === 0 && this.checkout === -1 && this.shouldUpdate) {
      if (this.updating === null) this.updating = this.core.update()
      await this.updating
    }
    if (this.version < 2) return null
    return (await this.getBlock(this.version - 1)).getTreeNode(0)
  }

  async getKey (seq) {
    await this.tree._cacheLock.enter(seq)

    try {
      const k = this.core.fork === this.tree.core.fork ? this.tree._keyCache.get(seq) : null
      if (k !== null) return k
      const key = (await this._getBlock(seq)).key
      if (this.core.fork === this.tree.core.fork) this.tree._keyCache.set(seq, key)
      return key
    } finally {
      this.tree._cacheLock.exit(seq)
    }
  }

  async _getNode (seq) {
    const cached = (this.tree._nodeCache !== null && this.core.fork === this.tree.core.fork) ? this.tree._nodeCache.get(seq) : null
    if (cached !== null) return cached
    const entry = await this.core.get(seq, { ...this.options, valueEncoding: Node })
    if (entry === null) throw BLOCK_NOT_AVAILABLE()
    const wrap = copyEntry(entry)
    if (this.core.fork === this.tree.core.fork && this.tree._nodeCache !== null) this.tree._nodeCache.set(seq, wrap)
    return wrap
  }

  async getBlock (seq) {
    if (this.rootSeq === 0) this.rootSeq = seq
    await this.tree._cacheLock.enter(seq)

    try {
      return await this._getBlock(seq)
    } finally {
      this.tree._cacheLock.exit(seq)
    }
  }

  async _getBlock (seq) {
    let b = this.blocks && this.blocks.get(seq)
    if (b) return b
    this.onseq(seq)
    const entry = await this._getNode(seq)
    b = this.blocks && this.blocks.get(seq)
    if (b) return b
    b = new BlockEntry(seq, this, entry)
    if (this.blocks && (this.blocks.size - this.length) < this.maxBlocksCached) this.blocks.set(seq, b)
    return b
  }

  _onwait (key) {
    this.options.onwait = null
    this.tree.extension.get(this.rootSeq + 1, key)
  }

  _getEncoding (opts) {
    if (!opts) return this.encoding
    return {
      key: opts.keyEncoding ? codecs(opts.keyEncoding) : this.encoding.key,
      value: opts.valueEncoding ? codecs(opts.valueEncoding) : this.encoding.value
    }
  }

  peek (range, opts) {
    return iteratorPeek(this.createRangeIterator(range, { ...opts, limit: 1 }))
  }

  createRangeIterator (range, opts = {}) {
    // backwards compat range arg
    opts = opts ? { ...opts, ...range } : range

    const encoding = this._getEncoding(opts)
    return new RangeIterator(this, encoding, encRange(encoding.key, { ...opts, sub: this.tree._sub }))
  }

  createReadStream (range, opts) {
    const signal = (opts && opts.signal) || null
    return iteratorToStream(this.createRangeIterator(range, opts), signal)
  }

  async getBySeq (seq, opts) {
    const encoding = this._getEncoding(opts)

    try {
      const block = (await this.getBlock(seq)).final(encoding)
      return { key: block.key, value: block.value }
    } finally {
      await this._closeSnapshot()
    }
  }

  async get (key, opts) {
    const encoding = this._getEncoding(opts)
    const finalize = opts ? opts.finalize !== false : true

    try {
      return await this._get(key, encoding, finalize)
    } finally {
      await this._closeSnapshot()
    }
  }

  async _get (key, encoding, finalize) {
    key = enc(encoding.key, key)

    if (this.tree.extension !== null && this.options.extension !== false) {
      this.options.onwait = this._onwait.bind(this, key)
    }

    let node = await this.getRoot(false)
    if (!node) return null

    while (true) {
      if (node.block.isTarget(key)) {
        return node.block.isDeletion() ? null : (finalize ? node.block.final(encoding) : node.block)
      }

      let s = 0
      let e = node.keys.length
      let c

      while (s < e) {
        const mid = (s + e) >> 1

        c = b4a.compare(key, await node.getKey(mid))

        if (c === 0) {
          const block = await this.getBlock(node.keys[mid].seq)
          return finalize ? block.final(encoding) : block
        }

        if (c < 0) e = mid
        else s = mid + 1
      }

      if (!node.children.length) return null

      const i = c < 0 ? e : s
      node = await node.getChildNode(i)
    }
  }

  async links (key, seq) {
    let node = await this.getRoot(false)
    if (!node) return false

    if (node.block.seq === seq) return true

    while (true) {
      if (node.block.isTarget(key)) return false

      let s = 0
      let e = node.keys.length
      let c

      while (s < e) {
        const mid = (s + e) >> 1

        if (node.keys[mid].seq === seq) return true
        c = b4a.compare(key, await node.getKey(mid))

        if (c === 0) return false

        if (c < 0) e = mid
        else s = mid + 1
      }

      if (!node.children.length) return false

      const i = c < 0 ? e : s
      node = await node.getChildNode(i)
      if (node.block.seq === seq) return true
    }
  }

  async put (key, value, opts) {
    const release = this.batchLock ? await this.batchLock() : null

    const cas = (opts && opts.cas) || null
    const encoding = this._getEncoding(opts)

    if (!this.locked) await this.lock()
    if (!release) return this._put(key, value, encoding, cas)

    try {
      return await this._put(key, value, encoding, cas)
    } finally {
      release()
    }
  }

  async _put (key, value, encoding, cas) {
    const newNode = {
      seq: 0,
      key,
      value
    }
    key = enc(encoding.key, key)
    value = enc(encoding.value, value)

    const stack = []

    let root
    let node = root = await this.getRoot(true)
    if (!node) node = root = TreeNode.create(null)

    const seq = newNode.seq = this.core.length + this.length
    const target = new Key(seq, key)

    while (node.children.length) {
      stack.push(node)
      node.changed = true // changed, but compressible

      let s = 0
      let e = node.keys.length
      let c

      while (s < e) {
        const mid = (s + e) >> 1
        c = b4a.compare(target.value, await node.getKey(mid))

        if (c === 0) {
          if (cas) {
            const prev = await node.getKeyNode(mid)
            if (!(await cas(prev.final(encoding), newNode))) return this._unlockMaybe()
          }
          if (!this.tree.alwaysDuplicate) {
            const prev = await node.getKeyNode(mid)
            if (sameValue(prev.value, value)) return this._unlockMaybe()
          }
          node.setKey(mid, target)
          return this._append(root, seq, key, value)
        }

        if (c < 0) e = mid
        else s = mid + 1
      }

      const i = c < 0 ? e : s
      node = await node.getChildNode(i)
    }

    let needsSplit = !(await node.insertKey(target, value, null, newNode, encoding, cas))
    if (!node.changed) return this._unlockMaybe()

    while (needsSplit) {
      const parent = stack.pop()
      const { median, right } = await node.split()

      if (parent) {
        needsSplit = !(await parent.insertKey(median, value, right, null, encoding, null))
        node = parent
      } else {
        root = TreeNode.create(node.block)
        root.changed = true
        root.keys.push(median)
        root.children.push(new Child(0, 0, node), new Child(0, 0, right))
        needsSplit = false
      }
    }

    return this._append(root, seq, key, value)
  }

  async del (key, opts) {
    const release = this.batchLock ? await this.batchLock() : null
    const cas = (opts && opts.cas) || null
    const encoding = this._getEncoding(opts)

    if (!this.locked) await this.lock()
    if (!release) return this._del(key, encoding, cas)

    try {
      return await this._del(key, encoding, cas)
    } finally {
      release()
    }
  }

  async _del (key, encoding, cas) {
    const delNode = {
      seq: 0,
      key,
      value: null
    }

    key = enc(encoding.key, key)

    const stack = []

    let node = await this.getRoot(true)
    if (!node) return this._unlockMaybe()

    const seq = delNode.seq = this.core.length + this.length

    while (true) {
      stack.push(node)

      let s = 0
      let e = node.keys.length
      let c

      while (s < e) {
        const mid = (s + e) >> 1
        c = b4a.compare(key, await node.getKey(mid))

        if (c === 0) {
          if (cas) {
            const prev = await node.getKeyNode(mid)
            if (!(await cas(prev.final(encoding), delNode))) return this._unlockMaybe()
          }
          if (node.children.length) await setKeyToNearestLeaf(node, mid, stack)
          else node.removeKey(mid)
          // we mark these as changed late, so we don't rewrite them if it is a 404
          for (const node of stack) node.changed = true
          return this._append(await rebalance(stack), seq, key, null)
        }

        if (c < 0) e = mid
        else s = mid + 1
      }

      if (!node.children.length) return this._unlockMaybe()

      const i = c < 0 ? e : s
      node = await node.getChildNode(i)
    }
  }

  async _closeSnapshot () {
    if (this.isSnapshot) {
      await this.core.close()
      this._finalize()
    }
  }

  async close () {
    if (this.isSnapshot) return this._closeSnapshot()

    this.root = null
    if (this.blocks) this.blocks.clear()
    this.length = 0
    this._unlock()
  }

  destroy () { // compat, remove later
    this.close().catch(noop)
  }

  toBlocks () {
    if (this.appending) return this.appending

    const batch = new Array(this.length)

    for (let i = 0; i < this.length; i++) {
      const seq = this.core.length + i
      const { pendingIndex, key, value } = this.blocks.get(seq)

      if (i < this.length - 1) {
        pendingIndex[0] = null
        let j = 0

        while (j < pendingIndex.length) {
          const idx = pendingIndex[j]
          if (idx !== null && idx.seq === seq) {
            idx.offset = j++
            continue
          }
          if (j === pendingIndex.length - 1) pendingIndex.pop()
          else pendingIndex[j] = pendingIndex.pop()
        }
      }

      batch[i] = Node.encode({
        key,
        value,
        index: deflate(pendingIndex)
      })
    }

    this.appending = batch
    return batch
  }

  flush () {
    if (!this.length) return this.close()

    const batch = this.toBlocks()

    this.root = null
    this.blocks.clear()
    this.length = 0

    return this._appendBatch(batch)
  }

  _unlockMaybe () {
    if (this.autoFlush) this._unlock()
  }

  _unlock () {
    const locked = this.locked
    this.locked = null
    if (locked !== null) locked()
    this._finalize()
  }

  _finalize () {
    // technically finalize can be called more than once, so here we just check if we already have been removed
    if (this.index >= this.tree._batches.length || this.tree._batches[this.index] !== this) return
    const top = this.tree._batches.pop()
    if (top === this) return
    top.index = this.index
    this.tree._batches[top.index] = top
  }

  _append (root, seq, key, value) {
    const index = []
    root.indexChanges(index, seq)
    index[0] = new Child(seq, 0, root)

    if (!this.autoFlush) {
      const block = new BatchEntry(seq, this, key, value, index)
      root.block = block
      this.root = root
      this.length++
      this.blocks.set(seq, block)

      root.updateChildren(seq, block)
      return
    }

    return this._appendBatch(Node.encode({
      key,
      value,
      index: deflate(index)
    }))
  }

  async _appendBatch (raw) {
    try {
      await this.core.append(raw)
    } finally {
      this._unlock()
    }
  }
}

class EntryWatcher extends ReadyResource {
  constructor (bee, key, opts = {}) {
    super()

    this.keyEncoding = opts.keyEncoding || bee.keyEncoding
    this.valueEncoding = opts.valueEncoding || bee.valueEncoding

    this.index = bee._entryWatchers.push(this) - 1
    this.bee = bee

    this.key = key
    this.node = null

    this._forceUpdate = false
    this._debouncedUpdate = debounce(this._processUpdate.bind(this))
  }

  _close () {
    const top = this.bee._entryWatchers.pop()
    if (top !== this) {
      top.index = this.index
      this.bee._entryWatchers[top.index] = top
    }
  }

  _onappend () {
    this._debouncedUpdate()
  }

  _ontruncate () {
    this._forceUpdate = true
    this._debouncedUpdate()
  }

  async _processUpdate () {
    const force = this._forceUpdate
    this._forceUpdate = false

    let newNode
    try {
      newNode = await this.bee.get(this.key, {
        keyEncoding: this.keyEncoding,
        valueEncoding: this.valueEncoding
      })
    } catch (e) {
      if (e.code === 'SNAPSHOT_NOT_AVAILABLE') {
        // There was a truncate event before the get resolved
        // So this handler will run again anyway
        return
      } else if (this.bee.closing) {
        this.close().catch(safetyCatch)
        return
      }
      this.emit('error', e)
      return
    }

    if (force || newNode?.seq !== this.node?.seq) {
      this.node = newNode
      this.emit('update')
    }
  }
}

class Watcher extends ReadyResource {
  constructor (bee, range, opts = {}) {
    super()

    this.keyEncoding = opts.keyEncoding || bee.keyEncoding
    this.valueEncoding = opts.valueEncoding || bee.valueEncoding
    this.index = bee._watchers.push(this) - 1
    this.bee = bee
    this.core = bee.core

    this.latestDiff = 0
    this.range = range
    this.map = opts.map || defaultWatchMap

    this.current = null
    this.previous = null
    this.currentMapped = null
    this.previousMapped = null
    this.stream = null

    this._lock = mutexify()
    this._flowing = false
    this._resolveOnChange = null
    this._differ = opts.differ || defaultDiffer
    this._eager = !!opts.eager
    this._onchange = opts.onchange || null

    this.on('newListener', autoFlowOnUpdate)

    this.ready().catch(safetyCatch)
  }

  async _consume () {
    if (this._flowing) return
    try {
      for await (const _ of this) {} // eslint-disable-line
    } catch {}
  }

  async _open () {
    await this.bee.ready()

    const opts = {
      keyEncoding: this.keyEncoding,
      valueEncoding: this.valueEncoding
    }

    // Point from which to start watching
    this.current = this._eager ? this.bee.checkout(1, opts) : this.bee.snapshot(opts)
    await this.current.ready()

    if (this._onchange) {
      if (this._eager) await this._onchange()
      this._consume()
    }
  }

  [Symbol.asyncIterator] () {
    this._flowing = true
    return this
  }

  _ontruncate () {
    this._onappend()
  }

  _onappend () {
    const resolve = this._resolveOnChange
    this._resolveOnChange = null
    if (resolve) resolve()
  }

  async _waitForChanges () {
    if (this.current.version < this.bee.version || this.closing) return

    await new Promise(resolve => {
      this._resolveOnChange = resolve
    })
  }

  async next () {
    try {
      return await this._next()
    } catch (err) {
      if (this.closing) return { value: undefined, done: true }
      await this.close()
      throw err
    }
  }

  async _next () {
    const release = await this._lock()

    try {
      if (this.closing) return { value: undefined, done: true }

      if (!this.opened) await this.ready()

      while (true) {
        await this._waitForChanges()

        if (this.closing) return { value: undefined, done: true }

        await this._closePrevious()
        this.previous = this.current.snapshot()

        await this._closeCurrent()
        this.current = this.bee.snapshot({
          keyEncoding: this.keyEncoding,
          valueEncoding: this.valueEncoding
        })

        await this.current.ready()
        await this.previous.ready()

        if (this.current.core.fork !== this.previous.core.fork) {
          return await this._yield()
        }

        this.stream = this._differ(this.current, this.previous, this.range)

        try {
          for await (const data of this.stream) { // eslint-disable-line
            return await this._yield()
          }
        } finally {
          this.stream = null
        }
      }
    } finally {
      release()
    }
  }

  async _yield () {
    this.currentMapped = this.map(this.current)
    this.previousMapped = this.map(this.previous)

    if (this._onchange) {
      try {
        await this._onchange()
      } catch (err) {
        safetyCatch(err)
      }
    }

    this.emit('update')
    return { done: false, value: [this.currentMapped, this.previousMapped] }
  }

  async return () {
    await this.close()
    return { done: true }
  }

  async _close () {
    const top = this.bee._watchers.pop()
    if (top !== this) {
      top.index = this.index
      this.bee._watchers[top.index] = top
    }

    if (this.stream && !this.stream.destroying) {
      this.stream.destroy()
    }

    this._onappend() // Continue execution being closed

    await this._closeCurrent().catch(safetyCatch)
    await this._closePrevious().catch(safetyCatch)

    const release = await this._lock()
    release()
  }

  destroy () {
    return this.close()
  }

  async _closeCurrent () {
    if (this.currentMapped) await this.currentMapped.close()
    if (this.current) await this.current.close()
    this.current = this.currentMapped = null
  }

  async _closePrevious () {
    if (this.previousMapped) await this.previousMapped.close()
    if (this.previous) await this.previous.close()
    this.previous = this.previousMapped = null
  }
}

function autoFlowOnUpdate (name) {
  if (name === 'update') this._consume()
}

function defaultWatchMap (snapshot) {
  return snapshot
}

async function leafSize (node, goLeft) {
  while (node.children.length) node = await node.getChildNode(goLeft ? 0 : node.children.length - 1)
  return node.keys.length
}

async function setKeyToNearestLeaf (node, index, stack) {
  let [left, right] = await Promise.all([node.getChildNode(index), node.getChildNode(index + 1)])
  const [ls, rs] = await Promise.all([leafSize(left, false), leafSize(right, true)])

  if (ls < rs) { // if fewer leaves on the left
    stack.push(right)
    while (right.children.length) stack.push(right = right.children[0].value)
    node.keys[index] = right.keys.shift()
  } else { // if fewer leaves on the right
    stack.push(left)
    while (left.children.length) stack.push(left = left.children[left.children.length - 1].value)
    node.keys[index] = left.keys.pop()
  }
}

async function rebalance (stack) {
  const root = stack[0]

  while (stack.length > 1) {
    const node = stack.pop()
    const parent = stack[stack.length - 1]

    if (node.keys.length >= MIN_KEYS) return root

    let { left, index, right } = await node.siblings(parent)

    // maybe borrow from left sibling?
    if (left && left.keys.length > MIN_KEYS) {
      left.changed = true
      node.keys.unshift(parent.keys[index - 1])
      if (left.children.length) node.children.unshift(left.children.pop())
      parent.keys[index - 1] = left.keys.pop()
      return root
    }

    // maybe borrow from right sibling?
    if (right && right.keys.length > MIN_KEYS) {
      right.changed = true
      node.keys.push(parent.keys[index])
      if (right.children.length) node.children.push(right.children.shift())
      parent.keys[index] = right.keys.shift()
      return root
    }

    // merge node with another sibling
    if (left) {
      index--
      right = node
    } else {
      left = node
    }

    left.merge(right, parent.keys[index])
    parent.removeKey(index)
  }

  // check if the tree shrunk
  if (!root.keys.length && root.children.length) return root.getChildNode(0)
  return root
}

function iteratorToStream (ite, signal) {
  let done
  let closing

  const rs = new Readable({
    signal,
    open (cb) {
      done = cb
      ite.open().then(fin, fin)
    },
    read (cb) {
      done = cb
      ite.next().then(push, fin)
    },
    predestroy () {
      closing = ite.close()
      closing.catch(noop)
    },
    destroy (cb) {
      done = cb
      if (!closing) closing = ite.close()
      closing.then(fin, fin)
    }
  })

  return rs

  function fin (err) {
    done(err)
  }

  function push (val) {
    rs.push(val)
    done(null)
  }
}

async function iteratorPeek (ite) {
  try {
    await ite.open()
    return await ite.next()
  } finally {
    await ite.close()
  }
}

function encRange (e, opts) {
  if (!e) return opts

  if (e.encodeRange) {
    const r = e.encodeRange({ gt: opts.gt, gte: opts.gte, lt: opts.lt, lte: opts.lte })
    opts.gt = r.gt
    opts.gte = r.gte
    opts.lt = r.lt
    opts.lte = r.lte
    return opts
  }

  if (opts.gt !== undefined) opts.gt = enc(e, opts.gt)
  if (opts.gte !== undefined) opts.gte = enc(e, opts.gte)
  if (opts.lt !== undefined) opts.lt = enc(e, opts.lt)
  if (opts.lte !== undefined) opts.lte = enc(e, opts.lte)
  if (opts.sub && !opts.gt && !opts.gte) opts.gt = enc(e, SEP)
  if (opts.sub && !opts.lt && !opts.lte) opts.lt = bump(enc(e, EMPTY))

  return opts
}

function bump (key) {
  // key should have been copied by enc above before hitting this
  key[key.length - 1]++
  return key
}

function enc (e, v) {
  if (v === undefined || v === null) return null
  if (e !== null) return e.encode(v)
  if (typeof v === 'string') return b4a.from(v)
  return v
}

function prefixEncoding (prefix, keyEncoding) {
  return {
    encode (key) {
      return b4a.concat([prefix, b4a.isBuffer(key) ? key : enc(keyEncoding, key)])
    },
    decode (key) {
      const sliced = key.slice(prefix.length, key.length)
      return keyEncoding ? keyEncoding.decode(sliced) : sliced
    }
  }
}

function copyEntry (entry) {
  let key = entry.key
  let value = entry.value
  let index = entry.index

  // key, value and index all refer to the same buffer (one hypercore block)
  // If together they are larger than half the buffer's byteLength,
  // this means that they got their own private slab (see Buffer.allocUnsafe docs)
  // so no need to unslab
  const size = key.byteLength + (value === null ? 0 : value.byteLength) + (index === null ? 0 : index.byteLength)
  if (2 * size < key.buffer.byteLength) {
    const [newKey, newValue, newIndex] = unslabAll([entry.key, entry.value, entry.index])
    key = newKey
    value = newValue
    index = newIndex
  }

  return {
    key,
    value,
    index,
    inflated: null
  }
}

function defaultDiffer (currentSnap, previousSnap, opts) {
  return currentSnap.createDiffStream(previousSnap, opts)
}

function toNull () {
  return null
}

function getBackingCore (core) {
  if (core.core) return core
  if (core.getBackingCore) return core.getBackingCore().session
  return null
}

function sameValue (a, b) {
  return a === b || (a !== null && b !== null && b4a.equals(a, b))
}

function noop () {}

function getExtension (db, opts) {
  if (opts.extension === false) return null
  if (opts.extension && opts.extension !== true) return opts.extension
  return Extension.register(db)
}

async function isLinked (batch, block) {
  const seq = block.seq
  block.inflate()

  const keys = [block.key]
  const wait = batch.options.wait

  for (const l of block.index.levels) {
    if (!l.keys.length) continue
    batch.options.wait = false
    try {
      keys.push(await batch.getKey(l.keys[0].seq))
    } catch {}
    batch.options.wait = wait
  }

  for (const k of keys) {
    if (await batch.links(k, seq)) return true
  }

  if (batch.core.closing) throw new Error('Core is closed')

  return false
}

module.exports = Hyperbee

},{"./iterators/diff":295,"./iterators/history":296,"./iterators/local":297,"./iterators/range":298,"./lib/extension":299,"./lib/messages":300,"b4a":102,"codecs":175,"debounceify":217,"hypercore-errors":306,"mutexify/promise":389,"rache":449,"ready-resource":480,"resolve-reject-promise":481,"safety-catch":486,"streamx":578,"unslab":590}],295:[function(require,module,exports){
const b4a = require('b4a')

class SubTree {
  constructor (node, parent) {
    this.node = node
    this.parent = parent

    this.isKey = node.children.length === 0
    this.i = this.isKey ? 1 : 0
    this.n = 0

    const child = this.isKey ? null : this.node.children[0]
    this.seq = child !== null ? child.seq : this.node.keys[0].seq
    this.offset = child !== null ? child.offset : 0
  }

  next () {
    this.i++
    this.isKey = (this.i & 1) === 1
    if (!this.isKey && !this.node.children.length) this.i++
    return this.update()
  }

  async bisect (key, incl) {
    let s = 0
    let e = this.node.keys.length
    let c

    while (s < e) {
      const mid = (s + e) >> 1
      c = cmp(key, await this.node.getKey(mid))

      if (c === 0) {
        if (incl) this.i = mid * 2 + 1
        else this.i = mid * 2 + (this.node.children.length ? 2 : 3)
        return true
      }

      if (c < 0) e = mid
      else s = mid + 1
    }

    const i = c < 0 ? e : s
    this.i = 2 * i + (this.node.children.length ? 0 : 1)
    return this.node.children.length === 0
  }

  update () {
    this.isKey = (this.i & 1) === 1
    this.n = this.i >> 1
    if (this.n >= (this.isKey ? this.node.keys.length : this.node.children.length)) return false
    const child = this.isKey ? null : this.node.children[this.n]
    this.seq = child !== null ? child.seq : this.node.keys[this.n].seq
    this.offset = child !== null ? child.offset : 0
    return true
  }

  async key () {
    return this.n < this.node.keys.length ? this.node.getKey(this.n) : (this.parent && this.parent.key())
  }

  async compare (tree) {
    const [a, b] = await Promise.all([this.key(), tree.key()])
    return cmp(a, b)
  }
}

class TreeIterator {
  constructor (batch, opts) {
    this.batch = batch
    this.stack = []
    this.lt = opts.lt || opts.lte || null
    this.lte = !!opts.lte
    this.gt = opts.gt || opts.gte || null
    this.gte = !!opts.gte
    this.seeking = !!this.gt
    this.encoding = opts.encoding || batch.encoding
  }

  async open () {
    const node = await this.batch.getRoot(false)
    if (!node || !node.keys.length) return
    const tree = new SubTree(node, null)
    if (this.seeking && !(await this._seek(tree))) return
    this.stack.push(tree)
  }

  async _seek (tree) {
    const done = await tree.bisect(this.gt, this.gte)
    const oob = !tree.update()
    if (done || oob) {
      this.seeking = false
      if (oob) return false
    }
    return true
  }

  peek () {
    if (!this.stack.length) return null
    return this.stack[this.stack.length - 1]
  }

  skip () {
    if (!this.stack.length) return
    if (!this.stack[this.stack.length - 1].next()) this.stack.pop()
  }

  async nextKey () {
    let n = null
    while (this.stack.length && n === null) n = await this.next()
    if (n === null) return null
    if (!this.lt) return n.final(this.encoding)

    const c = cmp(n.key, this.lt)
    if (this.lte ? c <= 0 : c < 0) return n.final(this.encoding)
    this.stack = []
    return null
  }

  async next () {
    if (!this.stack.length) return null

    const top = this.stack[this.stack.length - 1]
    const { isKey, n, seq } = top

    if (!top.next()) {
      this.stack.pop()
    }

    if (isKey) {
      this.seeking = false
      return this.batch.getBlock(seq)
    }

    const child = await top.node.getChildNode(n)
    top.node.children[n] = null // unlink to save memory
    const tree = new SubTree(child, top)
    if (this.seeking && !(await this._seek(tree))) return null
    this.stack.push(tree)

    return null
  }

  close () {
    return this.batch._closeSnapshot()
  }
}

module.exports = class DiffIterator {
  constructor (left, right, opts = {}) {
    this.left = new TreeIterator(left, opts)
    this.right = new TreeIterator(right, opts)
    this.limit = typeof opts.limit === 'number' ? opts.limit : -1
  }

  async open () {
    await Promise.all([this.left.open(), this.right.open()])
  }

  async next () {
    if (this.limit === 0) return null
    const res = await this._next()
    if (!res || (res.left === null && res.right === null)) return null
    this.limit--
    return res
  }

  async _next () {
    const a = this.left
    const b = this.right

    while (true) {
      const [l, r] = await Promise.all([a.peek(), b.peek()])

      if (!l && !r) return null
      if (!l) return { left: null, right: await b.nextKey() }
      if (!r) return { left: await a.nextKey(), right: null }

      if (l.seq === r.seq && l.isKey === r.isKey && l.offset === r.offset) {
        a.skip()
        b.skip()
        continue
      }

      const c = await l.compare(r)

      if (l.isKey && !r.isKey) {
        await b.next()
        continue
      }

      if (!l.isKey && r.isKey) {
        await a.next()
        continue
      }

      if (l.isKey && r.isKey) {
        if (c === 0) return { left: await a.nextKey(), right: await b.nextKey() }
        if (c < 0) return { left: await a.nextKey(), right: null }
        return { left: null, right: await b.nextKey() }
      }

      if (c === 0) await Promise.all([a.next(), b.next()])
      else if (c < 0) await b.next()
      else await a.next()
    }
  }

  async close () {
    await Promise.all([this.left.close(), this.right.close()])
  }
}

function cmp (a, b) {
  if (!a) return b ? 1 : 0
  if (!b) return a ? -1 : 0
  return b4a.compare(a, b)
}

},{"b4a":102}],296:[function(require,module,exports){
module.exports = class HistoryIterator {
  constructor (batch, opts = {}) {
    this.batch = batch
    this.options = opts
    this.live = !!opts.live
    this.gte = 0
    this.lt = 0
    this.reverse = !!opts.reverse
    this.limit = typeof opts.limit === 'number' ? opts.limit : -1
    this.encoding = opts.encoding || batch.encoding
    if (this.live && this.reverse) {
      throw new Error('Cannot have both live and reverse enabled')
    }
  }

  async open () {
    await this.batch.getRoot(false) // does the update dance
    this.gte = gte(this.options, this.batch.version)
    this.lt = this.live ? Infinity : lt(this.options, this.batch.version)
  }

  async next () {
    if (this.limit === 0) return null
    if (this.limit > 0) this.limit--

    if (this.gte >= this.lt) return null

    if (this.reverse) {
      if (this.lt <= 1) return null
      return final(await this.batch.getBlock(--this.lt), this.encoding)
    }

    return final(await this.batch.getBlock(this.gte++), this.encoding)
  }

  close () {
    return this.batch._closeSnapshot()
  }
}

function final (node, encoding) {
  const type = node.isDeletion() ? 'del' : 'put'
  return { type, ...node.final(encoding) }
}

function gte (opts, version) {
  if (opts.gt) return (opts.gt < 0 ? (opts.gt + version) : opts.gt) + 1
  const gte = opts.gte || opts.since || 1
  return gte < 0 ? gte + version : gte
}

function lt (opts, version) {
  if (opts.lte === 0 || opts.lt === 0 || opts.end === 0) return 0
  if (opts.lte) return (opts.lte < 0 ? (opts.lte + version) : opts.lte) + 1
  const lt = opts.lt || opts.end || version
  return lt < 0 ? lt + version : lt
}

},{}],297:[function(require,module,exports){
module.exports = class LocalBlocksIterator {
  constructor (batch, opts = {}) {
    this.batch = batch
    this.options = opts
    this.gte = 0
    this.lt = 0
    this.limit = typeof opts.limit === 'number' ? opts.limit : -1
  }

  async open () {
    await this.batch.getRoot(false) // does the update dance
    this.gte = gte(this.options, this.batch.version)
    this.lt = lt(this.options, this.batch.version)
  }

  async next () {
    if (this.limit === 0) return null
    if (this.limit > 0) this.limit--

    while (this.gte < this.lt) {
      try {
        return await this.batch.getBlock(this.gte++)
      } catch {
        continue
      }
    }

    return null
  }

  close () {
    return this.batch._closeSnapshot()
  }
}

function gte (opts, version) {
  if (opts.gt) return (opts.gt < 0 ? (opts.gt + version) : opts.gt) + 1
  const gte = opts.gte || opts.since || 1
  return gte < 0 ? gte + version : gte
}

function lt (opts, version) {
  if (opts.lte === 0 || opts.lt === 0 || opts.end === 0) return 0
  if (opts.lte) return (opts.lte < 0 ? (opts.lte + version) : opts.lte) + 1
  const lt = opts.lt || opts.end || version
  return lt < 0 ? lt + version : lt
}

},{}],298:[function(require,module,exports){
const b4a = require('b4a')

module.exports = class RangeIterator {
  constructor (batch, encoding, opts = {}) {
    this.batch = batch
    this.stack = []
    this.opened = false
    this.encoding = encoding || batch.encoding

    this._limit = typeof opts.limit === 'number' ? opts.limit : -1
    this._gIncl = !opts.gt
    this._gKey = opts.gt || opts.gte || null
    this._lIncl = !opts.lt
    this._lKey = opts.lt || opts.lte || null
    this._reverse = !!opts.reverse
    this._version = 0
    this._checkpoint = (opts.checkpoint && opts.checkpoint.length) ? opts.checkpoint : null
    this._nexting = false
  }

  snapshot (version = this.batch.version) {
    const checkpoint = []
    for (const s of this.stack) {
      let { node, i } = s
      if (this._nexting && s === this.stack[this.stack.length - 1]) i = this._reverse ? i + 1 : i - 1
      if (!node.block) continue
      if (i < 0) continue
      checkpoint.push(node.block.seq, node.offset, i)
    }

    return {
      version,
      gte: this._gIncl ? this._gKey : null,
      gt: this._gIncl ? null : this._gKey,
      lte: this._lIncl ? this._lKey : null,
      lt: this._lIncl ? null : this._lKey,
      limit: this._limit,
      reverse: this._reverse,
      ended: this.opened && !checkpoint.length,
      checkpoint: this.opened ? checkpoint : []
    }
  }

  async open () {
    await this._open()
    this.opened = true
  }

  async _open () {
    if (this._checkpoint) {
      for (let j = 0; j < this._checkpoint.length; j += 3) {
        const seq = this._checkpoint[j]
        const offset = this._checkpoint[j + 1]
        const i = this._checkpoint[j + 2]
        this.stack.push({
          node: (await this.batch.getBlock(seq)).getTreeNode(offset),
          i
        })
      }
      return
    }

    this._nexting = true

    let node = await this.batch.getRoot(false)
    if (!node) {
      this._nexting = false
      return
    }

    const incl = this._reverse ? this._lIncl : this._gIncl
    const start = this._reverse ? this._lKey : this._gKey

    if (!start) {
      this.stack.push({ node, i: this._reverse ? node.keys.length << 1 : 0 })
      this._nexting = false
      return
    }

    while (true) {
      const entry = { node, i: this._reverse ? node.keys.length << 1 : 0 }

      let s = 0
      let e = node.keys.length
      let c

      while (s < e) {
        const mid = (s + e) >> 1
        c = b4a.compare(start, await node.getKey(mid))

        if (c === 0) {
          if (incl) entry.i = mid * 2 + 1
          else entry.i = mid * 2 + (this._reverse ? 0 : 2)
          this.stack.push(entry)
          this._nexting = false
          return
        }

        if (c < 0) e = mid
        else s = mid + 1
      }

      const i = c < 0 ? e : s
      entry.i = 2 * i + (this._reverse ? -1 : 1)

      if (entry.i >= 0 && entry.i <= (node.keys.length << 1)) this.stack.push(entry)
      if (!node.children.length) {
        this._nexting = false
        return
      }

      node = await node.getChildNode(i)
    }
  }

  async next () {
    // TODO: this nexting flag is only needed if someone asks for a snapshot during
    // a lookup (ie the extension, pretty important...).
    // A better solution would be to refactor this so top.i is incremented eagerly
    // to get the current block instead of the way it is done now (++i vs i++)
    this._nexting = true

    const end = this._reverse ? this._gKey : this._lKey
    const incl = this._reverse ? this._gIncl : this._lIncl

    while (this.stack.length && (this._limit === -1 || this._limit > 0)) {
      const top = this.stack[this.stack.length - 1]
      const isKey = (top.i & 1) === 1
      const n = this._reverse
        ? (top.i < 0 ? top.node.keys.length : top.i-- >> 1)
        : top.i++ >> 1

      if (!isKey) {
        if (!top.node.children.length) continue
        const node = await top.node.getChildNode(n)
        if (top.node.block.seq < this.batch.core.length) {
          top.node.children[n].value = null // unlink it to save memory
        }
        this.stack.push({ i: this._reverse ? node.keys.length << 1 : 0, node })
        continue
      }

      if (n >= top.node.keys.length) {
        this.stack.pop()
        continue
      }

      const key = top.node.keys[n]
      const block = await this.batch.getBlock(key.seq)
      if (end) {
        const c = b4a.compare(block.key, end)
        if (c === 0 ? !incl : (this._reverse ? c < 0 : c > 0)) {
          this._limit = 0
          break
        }
      }
      if (this._limit > 0) this._limit--
      this._nexting = false
      return block.final(this.encoding)
    }

    this._nexting = false
    return null
  }

  close () {
    return this.batch._closeSnapshot()
  }
}

},{"b4a":102}],299:[function(require,module,exports){
const { Extension } = require('./messages')

// const MAX_ACTIVE = 32
const FLUSH_BATCH = 128
const MAX_PASSIVE_BATCH = 2048
const MAX_ACTIVE_BATCH = MAX_PASSIVE_BATCH + FLUSH_BATCH

class Batch {
  constructor (outgoing, from) {
    this.blocks = []
    this.start = 0
    this.end = 0
    this.outgoing = outgoing
    this.from = from
  }

  push (seq) {
    const len = this.blocks.push(seq)
    if (len === 1 || seq < this.start) this.start = seq
    if (len === 1 || seq >= this.end) this.end = seq + 1
    if (len >= FLUSH_BATCH) {
      this.send()
      this.clear()
    }
  }

  send () {
    if (!this.blocks.length) return
    this.outgoing.send(Extension.encode({ cache: { blocks: this.blocks, start: this.start, end: this.end } }), this.from)
  }

  clear () {
    this.start = this.end = 0
    this.blocks = []
  }
}

class HyperbeeExtension {
  constructor (db) {
    this.encoding = null
    this.outgoing = null
    this.db = db
    this.active = 0
  }

  get (version, key) {
    this.outgoing.broadcast(Extension.encode({ get: { version, key } }))
  }

  iterator (snapshot) {
    if (snapshot.ended) return
    if (snapshot.limit === 0) return
    if (snapshot.limit === -1) snapshot.limit = 0
    this.outgoing.broadcast(Extension.encode({ iterator: snapshot }))
  }

  onmessage (buf, from) {
    // TODO: handle max active extension messages
    // this.active++

    const message = decode(buf)
    if (!message) return

    if (message.cache) this.oncache(message.cache, from)
    if (message.get) this.onget(message.get, from)
    if (message.iterator) this.oniterator(message.iterator, from)
  }

  oncache (message, from) {
    if (!message.blocks.length) return
    this.db.core.download(message)
  }

  onget (message, from) {
    if (!message.version || message.version > this.db.version) return

    const b = new Batch(this.outgoing, from)
    const db = this.db.checkout(message.version)

    db.get(message.key, { extension: false, wait: false, update: false, onseq }).then(done, done)

    function done () {
      db.close().catch(noop)
      b.send()
    }

    function onseq (seq) {
      b.push(seq)
    }
  }

  async oniterator (message, from) {
    if (!message.version || message.version > this.db.version) return

    const b = new Batch(this.outgoing, from)
    const seqs = new Set()

    let skip = message.checkpoint.length
    let work = 0

    const db = this.db.checkout(message.version)
    const ite = db.createRangeIterator({
      ...message,
      wait: false,
      extension: false,
      update: false,
      limit: message.limit === 0 ? -1 : message.limit,
      onseq (seq) {
        if (skip && skip--) return
        if (seqs.has(seq)) return
        work++
        seqs.add(seq)
        b.push(seq)
      }
    })

    try {
      await ite.open()
      // eslint-disable-next-line no-unmodified-loop-condition
      while (work < MAX_ACTIVE_BATCH) {
        if (!(await ite.next())) break
      }
    } catch (_) {
      // do nothing
    } finally {
      ite.close().catch(noop)
      db.close().catch(noop)
      b.send()
    }
  }

  static register (db) {
    const e = new this(db)
    e.outgoing = db.core.registerExtension('hyperbee', e)
    return e
  }
}

HyperbeeExtension.BATCH_SIZE = MAX_PASSIVE_BATCH

module.exports = HyperbeeExtension

function decode (buf) {
  try {
    return Extension.decode(buf)
  } catch (err) {
    return null
  }
}

function noop () {}

},{"./messages":300}],300:[function(require,module,exports){
// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */
/* eslint-disable no-var */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var b4a = require('b4a')
var varint = encodings.varint
var skip = encodings.skip

var YoloIndex = exports.YoloIndex = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Header = exports.Header = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Node = exports.Node = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Extension = exports.Extension = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineYoloIndex()
defineHeader()
defineNode()
defineExtension()

function defineYoloIndex () {
  var Level = YoloIndex.Level = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineLevel()

  function defineLevel () {
    Level.encodingLength = encodingLength
    Level.encode = encode
    Level.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.keys)) {
        var packedLen = 0
        for (var i = 0; i < obj.keys.length; i++) {
          if (!defined(obj.keys[i])) continue
          var len = encodings.varint.encodingLength(obj.keys[i])
          packedLen += len
        }
        if (packedLen) {
          length += 1 + packedLen + varint.encodingLength(packedLen)
        }
      }
      if (defined(obj.children)) {
        var packedLen = 0
        for (var i = 0; i < obj.children.length; i++) {
          if (!defined(obj.children[i])) continue
          var len = encodings.varint.encodingLength(obj.children[i])
          packedLen += len
        }
        if (packedLen) {
          length += 1 + packedLen + varint.encodingLength(packedLen)
        }
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.keys)) {
        var packedLen = 0
        for (var i = 0; i < obj.keys.length; i++) {
          if (!defined(obj.keys[i])) continue
          packedLen += encodings.varint.encodingLength(obj.keys[i])
        }
        if (packedLen) {
          buf[offset++] = 10
          varint.encode(packedLen, buf, offset)
          offset += varint.encode.bytes
        }
        for (var i = 0; i < obj.keys.length; i++) {
          if (!defined(obj.keys[i])) continue
          encodings.varint.encode(obj.keys[i], buf, offset)
          offset += encodings.varint.encode.bytes
        }
      }
      if (defined(obj.children)) {
        var packedLen = 0
        for (var i = 0; i < obj.children.length; i++) {
          if (!defined(obj.children[i])) continue
          packedLen += encodings.varint.encodingLength(obj.children[i])
        }
        if (packedLen) {
          buf[offset++] = 18
          varint.encode(packedLen, buf, offset)
          offset += varint.encode.bytes
        }
        for (var i = 0; i < obj.children.length; i++) {
          if (!defined(obj.children[i])) continue
          encodings.varint.encode(obj.children[i], buf, offset)
          offset += encodings.varint.encode.bytes
        }
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        keys: [],
        children: []
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          var packedEnd = varint.decode(buf, offset)
          offset += varint.decode.bytes
          packedEnd += offset
          while (offset < packedEnd) {
            obj.keys.push(encodings.varint.decode(buf, offset))
            offset += encodings.varint.decode.bytes
          }
          break
          case 2:
          var packedEnd = varint.decode(buf, offset)
          offset += varint.decode.bytes
          packedEnd += offset
          while (offset < packedEnd) {
            obj.children.push(encodings.varint.decode(buf, offset))
            offset += encodings.varint.decode.bytes
          }
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  YoloIndex.encodingLength = encodingLength
  YoloIndex.encode = encode
  YoloIndex.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.levels)) {
      for (var i = 0; i < obj.levels.length; i++) {
        if (!defined(obj.levels[i])) continue
        var len = Level.encodingLength(obj.levels[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.levels)) {
      for (var i = 0; i < obj.levels.length; i++) {
        if (!defined(obj.levels[i])) continue
        buf[offset++] = 10
        varint.encode(Level.encodingLength(obj.levels[i]), buf, offset)
        offset += varint.encode.bytes
        Level.encode(obj.levels[i], buf, offset)
        offset += Level.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      levels: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.levels.push(Level.decode(buf, offset, offset + len))
        offset += Level.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineHeader () {
  var Metadata = Header.Metadata = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineMetadata()

  function defineMetadata () {
    Metadata.encodingLength = encodingLength
    Metadata.encode = encode
    Metadata.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.contentFeed)) {
        var len = encodings.bytes.encodingLength(obj.contentFeed)
        length += 1 + len
      }
      if (defined(obj.userData)) {
        var len = encodings.bytes.encodingLength(obj.userData)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.contentFeed)) {
        buf[offset++] = 10
        encodings.bytes.encode(obj.contentFeed, buf, offset)
        offset += encodings.bytes.encode.bytes
      }
      if (defined(obj.userData)) {
        buf[offset++] = 18
        encodings.bytes.encode(obj.userData, buf, offset)
        offset += encodings.bytes.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        contentFeed: null,
        userData: null
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.contentFeed = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          break
          case 2:
          obj.userData = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  Header.encodingLength = encodingLength
  Header.encode = encode
  Header.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.protocol)) throw new Error("protocol is required")
    var len = encodings.string.encodingLength(obj.protocol)
    length += 1 + len
    if (defined(obj.metadata)) {
      var len = Metadata.encodingLength(obj.metadata)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.protocol)) throw new Error("protocol is required")
    buf[offset++] = 10
    encodings.string.encode(obj.protocol, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.metadata)) {
      buf[offset++] = 18
      varint.encode(Metadata.encodingLength(obj.metadata), buf, offset)
      offset += varint.encode.bytes
      Metadata.encode(obj.metadata, buf, offset)
      offset += Metadata.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      protocol: "",
      metadata: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.protocol = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.metadata = Metadata.decode(buf, offset, offset + len)
        offset += Metadata.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineNode () {
  Node.encodingLength = encodingLength
  Node.encode = encode
  Node.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.index)) throw new Error("index is required")
    var len = encodings.bytes.encodingLength(obj.index)
    length += 1 + len
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.bytes.encodingLength(obj.key)
    length += 1 + len
    if (defined(obj.value)) {
      var len = encodings.bytes.encodingLength(obj.value)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.index)) throw new Error("index is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.index, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.key, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (defined(obj.value)) {
      buf[offset++] = 26
      encodings.bytes.encode(obj.value, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      index: null,
      key: null,
      value: null
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.index = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 2:
        obj.key = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        case 3:
        obj.value = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineExtension () {
  var Get = Extension.Get = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Iterator = Extension.Iterator = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Cache = Extension.Cache = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineGet()
  defineIterator()
  defineCache()

  function defineGet () {
    Get.encodingLength = encodingLength
    Get.encode = encode
    Get.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.version)) {
        var len = encodings.varint.encodingLength(obj.version)
        length += 1 + len
      }
      if (defined(obj.key)) {
        var len = encodings.bytes.encodingLength(obj.key)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.version)) {
        buf[offset++] = 8
        encodings.varint.encode(obj.version, buf, offset)
        offset += encodings.varint.encode.bytes
      }
      if (defined(obj.key)) {
        buf[offset++] = 18
        encodings.bytes.encode(obj.key, buf, offset)
        offset += encodings.bytes.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        version: 0,
        key: null
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.version = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          break
          case 2:
          obj.key = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineIterator () {
    Iterator.encodingLength = encodingLength
    Iterator.encode = encode
    Iterator.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.version)) {
        var len = encodings.varint.encodingLength(obj.version)
        length += 1 + len
      }
      if (defined(obj.gte)) {
        var len = encodings.bytes.encodingLength(obj.gte)
        length += 1 + len
      }
      if (defined(obj.gt)) {
        var len = encodings.bytes.encodingLength(obj.gt)
        length += 1 + len
      }
      if (defined(obj.lte)) {
        var len = encodings.bytes.encodingLength(obj.lte)
        length += 1 + len
      }
      if (defined(obj.lt)) {
        var len = encodings.bytes.encodingLength(obj.lt)
        length += 1 + len
      }
      if (defined(obj.limit)) {
        var len = encodings.varint.encodingLength(obj.limit)
        length += 1 + len
      }
      if (defined(obj.reverse)) {
        var len = encodings.bool.encodingLength(obj.reverse)
        length += 1 + len
      }
      if (defined(obj.checkpoint)) {
        var packedLen = 0
        for (var i = 0; i < obj.checkpoint.length; i++) {
          if (!defined(obj.checkpoint[i])) continue
          var len = encodings.varint.encodingLength(obj.checkpoint[i])
          packedLen += len
        }
        if (packedLen) {
          length += 1 + packedLen + varint.encodingLength(packedLen)
        }
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.version)) {
        buf[offset++] = 8
        encodings.varint.encode(obj.version, buf, offset)
        offset += encodings.varint.encode.bytes
      }
      if (defined(obj.gte)) {
        buf[offset++] = 18
        encodings.bytes.encode(obj.gte, buf, offset)
        offset += encodings.bytes.encode.bytes
      }
      if (defined(obj.gt)) {
        buf[offset++] = 26
        encodings.bytes.encode(obj.gt, buf, offset)
        offset += encodings.bytes.encode.bytes
      }
      if (defined(obj.lte)) {
        buf[offset++] = 34
        encodings.bytes.encode(obj.lte, buf, offset)
        offset += encodings.bytes.encode.bytes
      }
      if (defined(obj.lt)) {
        buf[offset++] = 42
        encodings.bytes.encode(obj.lt, buf, offset)
        offset += encodings.bytes.encode.bytes
      }
      if (defined(obj.limit)) {
        buf[offset++] = 48
        encodings.varint.encode(obj.limit, buf, offset)
        offset += encodings.varint.encode.bytes
      }
      if (defined(obj.reverse)) {
        buf[offset++] = 56
        encodings.bool.encode(obj.reverse, buf, offset)
        offset += encodings.bool.encode.bytes
      }
      if (defined(obj.checkpoint)) {
        var packedLen = 0
        for (var i = 0; i < obj.checkpoint.length; i++) {
          if (!defined(obj.checkpoint[i])) continue
          packedLen += encodings.varint.encodingLength(obj.checkpoint[i])
        }
        if (packedLen) {
          buf[offset++] = 66
          varint.encode(packedLen, buf, offset)
          offset += varint.encode.bytes
        }
        for (var i = 0; i < obj.checkpoint.length; i++) {
          if (!defined(obj.checkpoint[i])) continue
          encodings.varint.encode(obj.checkpoint[i], buf, offset)
          offset += encodings.varint.encode.bytes
        }
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        version: 0,
        gte: null,
        gt: null,
        lte: null,
        lt: null,
        limit: 0,
        reverse: false,
        checkpoint: []
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.version = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          break
          case 2:
          obj.gte = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          break
          case 3:
          obj.gt = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          break
          case 4:
          obj.lte = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          break
          case 5:
          obj.lt = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          break
          case 6:
          obj.limit = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          break
          case 7:
          obj.reverse = encodings.bool.decode(buf, offset)
          offset += encodings.bool.decode.bytes
          break
          case 8:
          var packedEnd = varint.decode(buf, offset)
          offset += varint.decode.bytes
          packedEnd += offset
          while (offset < packedEnd) {
            obj.checkpoint.push(encodings.varint.decode(buf, offset))
            offset += encodings.varint.decode.bytes
          }
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineCache () {
    Cache.encodingLength = encodingLength
    Cache.encode = encode
    Cache.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.start)) throw new Error("start is required")
      var len = encodings.varint.encodingLength(obj.start)
      length += 1 + len
      if (!defined(obj.end)) throw new Error("end is required")
      var len = encodings.varint.encodingLength(obj.end)
      length += 1 + len
      if (defined(obj.blocks)) {
        var packedLen = 0
        for (var i = 0; i < obj.blocks.length; i++) {
          if (!defined(obj.blocks[i])) continue
          var len = encodings.varint.encodingLength(obj.blocks[i])
          packedLen += len
        }
        if (packedLen) {
          length += 1 + packedLen + varint.encodingLength(packedLen)
        }
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.start)) throw new Error("start is required")
      buf[offset++] = 8
      encodings.varint.encode(obj.start, buf, offset)
      offset += encodings.varint.encode.bytes
      if (!defined(obj.end)) throw new Error("end is required")
      buf[offset++] = 16
      encodings.varint.encode(obj.end, buf, offset)
      offset += encodings.varint.encode.bytes
      if (defined(obj.blocks)) {
        var packedLen = 0
        for (var i = 0; i < obj.blocks.length; i++) {
          if (!defined(obj.blocks[i])) continue
          packedLen += encodings.varint.encodingLength(obj.blocks[i])
        }
        if (packedLen) {
          buf[offset++] = 26
          varint.encode(packedLen, buf, offset)
          offset += varint.encode.bytes
        }
        for (var i = 0; i < obj.blocks.length; i++) {
          if (!defined(obj.blocks[i])) continue
          encodings.varint.encode(obj.blocks[i], buf, offset)
          offset += encodings.varint.encode.bytes
        }
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        start: 0,
        end: 0,
        blocks: []
      }
      var found0 = false
      var found1 = false
      while (true) {
        if (end <= offset) {
          if (!found0 || !found1) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.start = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          found0 = true
          break
          case 2:
          obj.end = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          found1 = true
          break
          case 3:
          var packedEnd = varint.decode(buf, offset)
          offset += varint.decode.bytes
          packedEnd += offset
          while (offset < packedEnd) {
            obj.blocks.push(encodings.varint.decode(buf, offset))
            offset += encodings.varint.decode.bytes
          }
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  Extension.encodingLength = encodingLength
  Extension.encode = encode
  Extension.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.cache)) {
      var len = Cache.encodingLength(obj.cache)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.get)) {
      var len = Get.encodingLength(obj.get)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.iterator)) {
      var len = Iterator.encodingLength(obj.iterator)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.cache)) {
      buf[offset++] = 10
      varint.encode(Cache.encodingLength(obj.cache), buf, offset)
      offset += varint.encode.bytes
      Cache.encode(obj.cache, buf, offset)
      offset += Cache.encode.bytes
    }
    if (defined(obj.get)) {
      buf[offset++] = 18
      varint.encode(Get.encodingLength(obj.get), buf, offset)
      offset += varint.encode.bytes
      Get.encode(obj.get, buf, offset)
      offset += Get.encode.bytes
    }
    if (defined(obj.iterator)) {
      buf[offset++] = 26
      varint.encode(Iterator.encodingLength(obj.iterator), buf, offset)
      offset += varint.encode.bytes
      Iterator.encode(obj.iterator, buf, offset)
      offset += Iterator.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      cache: null,
      get: null,
      iterator: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.cache = Cache.decode(buf, offset, offset + len)
        offset += Cache.decode.bytes
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.get = Get.decode(buf, offset, offset + len)
        offset += Get.decode.bytes
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.iterator = Iterator.decode(buf, offset, offset + len)
        offset += Iterator.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}

},{"b4a":102,"protocol-buffers-encodings":438}],301:[function(require,module,exports){
const mutexify = require('mutexify')
const b4a = require('b4a')

const { BlobReadStream, BlobWriteStream } = require('./lib/streams')
const Monitor = require('./lib/monitor')

const DEFAULT_BLOCK_SIZE = 2 ** 16

class HyperBlobsBatch {
  constructor (blobs) {
    this.blobs = blobs
    this.blocks = []
    this.bytes = 0
  }

  ready () {
    return this.blobs.ready()
  }

  async put (buffer) {
    if (!this.blobs.core.opened) await this.blobs.core.ready()

    const blockSize = this.blobs.blockSize
    const result = {
      blockOffset: this.blobs.core.length + this.blocks.length,
      blockLength: 0,
      byteOffset: this.blobs.core.byteLength + this.bytes,
      byteLength: 0
    }

    let offset = 0
    while (offset < buffer.byteLength) {
      const blk = buffer.subarray(offset, offset + blockSize)
      offset += blockSize

      result.blockLength++
      result.byteLength += blk.byteLength
      this.bytes += blk.byteLength
      this.blocks.push(blk)
    }

    return result
  }

  async get (id) {
    if (id.blockOffset < this.blobs.core.length) {
      return this.blobs.get(id)
    }

    const bufs = []

    for (let i = id.blockOffset - this.blobs.core.length; i < id.blockOffset + id.blockLength; i++) {
      if (i >= this.blocks.length) return null
      bufs.push(this.blocks[i])
    }

    return bufs.length === 1 ? bufs[0] : b4a.concat(bufs)
  }

  async flush () {
    await this.blobs.core.append(this.blocks)
    this.blocks = []
    this.bytes = 0
  }

  close () {
    // noop, atm nothing to unlink
  }
}

class Hyperblobs {
  constructor (core, opts = {}) {
    this.core = core
    this.blockSize = opts.blockSize || DEFAULT_BLOCK_SIZE

    this._lock = mutexify()
    this._monitors = new Set()

    this._boundUpdatePeers = this._updatePeers.bind(this)
    this._boundOnUpload = this._onUpload.bind(this)
    this._boundOnDownload = this._onDownload.bind(this)
  }

  get key () {
    return this.core.key
  }

  get discoveryKey () {
    return this.core.discoveryKey
  }

  get feed () {
    return this.core
  }

  get locked () {
    return this._lock.locked
  }

  replicate (isInitiator, opts) {
    return this.core.replicate(isInitiator, opts)
  }

  ready () {
    return this.core.ready()
  }

  close () {
    return this.core.close()
  }

  batch () {
    return new HyperBlobsBatch(this)
  }

  snapshot () {
    return new Hyperblobs(this.core.snapshot())
  }

  async put (blob, opts) {
    if (!b4a.isBuffer(blob)) blob = b4a.from(blob)
    const blockSize = (opts && opts.blockSize) || this.blockSize

    const stream = this.createWriteStream(opts)
    for (let i = 0; i < blob.length; i += blockSize) {
      stream.write(blob.subarray(i, i + blockSize))
    }
    stream.end()

    return new Promise((resolve, reject) => {
      stream.once('error', reject)
      stream.once('close', () => resolve(stream.id))
    })
  }

  async _getAll (id, opts) {
    if (id.blockLength === 1) return this.core.get(id.blockOffset, opts)

    const promises = new Array(id.blockLength)
    for (let i = 0; i < id.blockLength; i++) {
      promises[i] = this.core.get(id.blockOffset + i, opts)
    }

    const blocks = await Promise.all(promises)
    for (let i = 0; i < id.blockLength; i++) {
      if (blocks[i] === null) return null
    }
    return b4a.concat(blocks)
  }

  async get (id, opts) {
    const all = !opts || (!opts.start && opts.length === undefined && opts.end === undefined && !opts.core)
    if (all) return this._getAll(id, opts)

    const res = []
    try {
      for await (const block of this.createReadStream(id, opts)) {
        res.push(block)
      }
    } catch (error) {
      if (error.code === 'BLOCK_NOT_AVAILABLE') return null
      throw error
    }

    if (res.length === 1) return res[0]
    return b4a.concat(res)
  }

  async clear (id, opts) {
    return this.core.clear(id.blockOffset, id.blockOffset + id.blockLength, opts)
  }

  createReadStream (id, opts) {
    const core = (opts && opts.core) ? opts.core : this.core
    return new BlobReadStream(core, id, opts)
  }

  createWriteStream (opts) {
    const core = (opts && opts.core) ? opts.core : this.core
    return new BlobWriteStream(core, this._lock, opts)
  }

  monitor (id) {
    const monitor = new Monitor(this, id)
    if (this._monitors.size === 0) this._startListening()
    this._monitors.add(monitor)
    return monitor
  }

  _removeMonitor (mon) {
    this._monitors.delete(mon)
    if (this._monitors.size === 0) this._stopListening()
  }

  _updatePeers () {
    for (const m of this._monitors) m._updatePeers()
  }

  _onUpload (index, bytes, from) {
    for (const m of this._monitors) m._onUpload(index, bytes, from)
  }

  _onDownload (index, bytes, from) {
    for (const m of this._monitors) m._onDownload(index, bytes, from)
  }

  _startListening () {
    this.core.on('peer-add', this._boundUpdatePeers)
    this.core.on('peer-remove', this._boundUpdatePeers)
    this.core.on('upload', this._boundOnUpload)
    this.core.on('download', this._boundOnDownload)
  }

  _stopListening () {
    this.core.off('peer-add', this._boundUpdatePeers)
    this.core.off('peer-remove', this._boundUpdatePeers)
    this.core.off('upload', this._boundOnUpload)
    this.core.off('download', this._boundOnDownload)
  }
}

module.exports = Hyperblobs

},{"./lib/monitor":302,"./lib/streams":304,"b4a":102,"mutexify":388}],302:[function(require,module,exports){
const EventEmitter = require('events')
const speedometer = require('speedometer')

module.exports = class Monitor extends EventEmitter {
  constructor (blobs, id) {
    super()

    if (!id) throw new Error('id is required')

    this.blobs = blobs
    this.id = id
    this.peers = 0
    this.uploadSpeedometer = null
    this.downloadSpeedometer = null

    const stats = {
      startTime: 0,
      percentage: 0,
      peers: 0,
      speed: 0,
      blocks: 0,
      totalBytes: 0, // local + bytes loaded during monitoring
      monitoringBytes: 0, // bytes loaded during monitoring
      targetBytes: 0,
      targetBlocks: 0
    }

    this.uploadStats = { ...stats }
    this.downloadStats = { ...stats }
    this.uploadStats.targetBytes = this.downloadStats.targetBytes = this.id.byteLength
    this.uploadStats.targetBlocks = this.downloadStats.targetBlocks = this.id.blockLength
    this.uploadStats.peers = this.downloadStats.peers = this.peers = this.blobs.core.peers.length

    this.uploadSpeedometer = speedometer()
    this.downloadSpeedometer = speedometer()

    // Handlers
  }

  // just an alias
  destroy () {
    return this.close()
  }

  close () {
    this.blobs._removeMonitor(this)
  }

  _onUpload (index, bytes, from) {
    this._updateStats(this.uploadSpeedometer, this.uploadStats, index, bytes, from)
  }

  _onDownload (index, bytes, from) {
    this._updateStats(this.downloadSpeedometer, this.downloadStats, index, bytes, from)
  }

  _updatePeers () {
    this.uploadStats.peers = this.downloadStats.peers = this.peers = this.blobs.core.peers.length
    this.emit('update')
  }

  _updateStats (speed, stats, index, bytes) {
    if (this.closing) return
    if (!isWithinRange(index, this.id)) return

    if (!stats.startTime) stats.startTime = Date.now()

    stats.speed = speed(bytes)
    stats.blocks++
    stats.totalBytes += bytes
    stats.monitoringBytes += bytes
    stats.percentage = toFixed(stats.blocks / stats.targetBlocks * 100)

    this.emit('update')
  }

  downloadSpeed () {
    return this.downloadSpeedometer ? this.downloadSpeedometer() : 0
  }

  uploadSpeed () {
    return this.uploadSpeedometer ? this.uploadSpeedometer() : 0
  }
}

function isWithinRange (index, { blockOffset, blockLength }) {
  return index >= blockOffset && index < blockOffset + blockLength
}

function toFixed (n) {
  return Math.round(n * 100) / 100
}

},{"events":258,"speedometer":562}],303:[function(require,module,exports){
// should move to hypercore itself

const MAX_READAHEAD_TARGET = 0.05 // aim to buffer 5% always

module.exports = class Prefetcher {
  constructor (core, { max = 64, start = 0, end = core.length, linear = true } = {}) {
    this.core = core
    this.max = max
    this.range = null
    this.startBound = start
    this.endBound = end
    this.maxReadAhead = Math.max(max * 2, Math.floor((end - start) * MAX_READAHEAD_TARGET))

    this.start = start
    this.end = start
    this.linear = linear
    this.missing = 0

    this._ondownloadBound = this._ondownload.bind(this)
    this.core.on('download', this._ondownloadBound)
  }

  _ondownload (index) {
    if (this.range && index < this.end && this.start <= index) {
      this.missing--
      this._update()
    }
  }

  destroy () {
    this.core.off('download', this._ondownloadBound)
    if (this.range) this.range.destroy()
    this.range = null
    this.max = 0
  }

  update (position) {
    this.start = position
    if (!this.range) this._update()
  }

  _update () {
    if (this.missing >= this.max) return
    if (this.range) this.range.destroy()

    let end = this.end

    while (end < this.endBound && this.missing < this.max) {
      end = this.core.core.bitfield.firstUnset(end) + 1
      if (end >= this.endBound) break
      this.missing++
    }

    if (end > this.start + this.maxReadAhead) end = this.start + this.maxReadAhead
    if (end >= this.endBound) end = this.endBound

    this.end = end

    if (this.start >= this.end) return

    this.range = this.core.download({
      start: this.start,
      end: this.end,
      linear: this.linear
    })
  }
}

},{}],304:[function(require,module,exports){
const { Readable, Writable } = require('streamx')
const { BLOCK_NOT_AVAILABLE } = require('hypercore-errors')
const Prefetcher = require('./prefetcher')

class BlobWriteStream extends Writable {
  constructor (core, lock, opts) {
    super(opts)
    this.id = {}
    this.core = core
    this._lock = lock
    this._release = null
    this._batch = []
  }

  _open (cb) {
    this.core.ready().then(() => {
      this._lock(release => {
        this._release = release
        this.id.byteOffset = this.core.byteLength
        this.id.blockOffset = this.core.length
        return cb(null)
      })
    }, err => cb(err))
  }

  _final (cb) {
    this._append(err => {
      if (err) return cb(err)
      this.id.blockLength = this.core.length - this.id.blockOffset
      this.id.byteLength = this.core.byteLength - this.id.byteOffset
      return cb(null)
    })
  }

  _destroy (cb) {
    if (this._release) this._release()
    cb(null)
  }

  _append (cb) {
    if (!this._batch.length) return cb(null)
    return this.core.append(this._batch).then(() => {
      this._batch = []
      return cb(null)
    }, err => {
      this._batch = []
      return cb(err)
    })
  }

  _write (data, cb) {
    this._batch.push(data)
    if (this._batch.length >= 16) return this._append(cb)
    return cb(null)
  }
}

class BlobReadStream extends Readable {
  constructor (core, id, opts = {}) {
    super(opts)
    this.id = id
    this.core = core.session({ wait: opts.wait, timeout: opts.timeout })

    const start = id.blockOffset
    const end = id.blockOffset + id.blockLength
    const noPrefetch = opts.wait === false || opts.prefetch === false || !core.core

    this._prefetch = noPrefetch ? null : new Prefetcher(this.core, { max: opts.prefetch, start, end })
    this._lastPrefetch = null

    this._pos = opts.start !== undefined ? id.byteOffset + opts.start : id.byteOffset

    if (opts.length !== undefined) this._end = this._pos + opts.length
    else if (opts.end !== undefined) this._end = id.byteOffset + opts.end + 1
    else this._end = id.byteOffset + id.byteLength

    this._index = 0
    this._relativeOffset = 0
    this._bytesRead = 0
  }

  _open (cb) {
    if (this._pos === this.id.byteOffset) {
      this._index = this.id.blockOffset
      this._relativeOffset = 0
      return cb(null)
    }

    this.core.seek(this._pos, {
      start: this.id.blockOffset,
      end: this.id.blockOffset + this.id.blockLength
    }).then(result => {
      if (!result) return cb(BLOCK_NOT_AVAILABLE())

      this._index = result[0]
      this._relativeOffset = result[1]
      return cb(null)
    }, err => cb(err))
  }

  _predestroy () {
    if (this._prefetch) this._prefetch.destroy()
    this.core.close().then(noop, noop)
  }

  _destroy (cb) {
    if (this._prefetch) this._prefetch.destroy()
    this.core.close().then(cb, cb)
  }

  _read (cb) {
    if (this._pos >= this._end) {
      this.push(null)
      return cb(null)
    }

    if (this._prefetch) this._prefetch.update(this._index)

    this.core.get(this._index).then(block => {
      if (!block) return cb(BLOCK_NOT_AVAILABLE())

      const remainder = this._end - this._pos
      if (this._relativeOffset || (remainder < block.length)) {
        block = block.subarray(this._relativeOffset, this._relativeOffset + remainder)
      }

      this._index++
      this._relativeOffset = 0
      this._pos += block.length
      this._bytesRead += block.length

      this.push(block)
      return cb(null)
    }, err => cb(err))
  }
}

module.exports = {
  BlobReadStream,
  BlobWriteStream
}

function noop () {}

},{"./prefetcher":303,"hypercore-errors":306,"streamx":578}],305:[function(require,module,exports){
const sodium = require('sodium-universal')
const c = require('compact-encoding')
const b4a = require('b4a')

// https://en.wikipedia.org/wiki/Merkle_tree#Second_preimage_attack
const LEAF_TYPE = b4a.from([0])
const PARENT_TYPE = b4a.from([1])
const ROOT_TYPE = b4a.from([2])

const HYPERCORE = b4a.from('hypercore')

exports.keyPair = function (seed) {
  // key pairs might stay around for a while, so better not to use a default slab to avoid retaining it completely
  const slab = b4a.allocUnsafeSlow(sodium.crypto_sign_PUBLICKEYBYTES + sodium.crypto_sign_SECRETKEYBYTES)
  const publicKey = slab.subarray(0, sodium.crypto_sign_PUBLICKEYBYTES)
  const secretKey = slab.subarray(sodium.crypto_sign_PUBLICKEYBYTES)

  if (seed) sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed)
  else sodium.crypto_sign_keypair(publicKey, secretKey)

  return {
    publicKey,
    secretKey
  }
}

exports.validateKeyPair = function (keyPair) {
  const pk = b4a.allocUnsafe(sodium.crypto_sign_PUBLICKEYBYTES)
  sodium.crypto_sign_ed25519_sk_to_pk(pk, keyPair.secretKey)
  return b4a.equals(pk, keyPair.publicKey)
}

exports.sign = function (message, secretKey) {
  // Dedicated slab for the signature, to avoid retaining unneeded mem and for security
  const signature = b4a.allocUnsafeSlow(sodium.crypto_sign_BYTES)
  sodium.crypto_sign_detached(signature, message, secretKey)
  return signature
}

exports.verify = function (message, signature, publicKey) {
  if (signature.byteLength !== sodium.crypto_sign_BYTES) return false
  if (publicKey.byteLength !== sodium.crypto_sign_PUBLICKEYBYTES) return false
  return sodium.crypto_sign_verify_detached(signature, message, publicKey)
}

exports.encrypt = function (message, publicKey) {
  const ciphertext = b4a.alloc(message.byteLength + sodium.crypto_box_SEALBYTES)
  sodium.crypto_box_seal(ciphertext, message, publicKey)
  return ciphertext
}

exports.decrypt = function (ciphertext, keyPair) {
  if (ciphertext.byteLength < sodium.crypto_box_SEALBYTES) return null

  const plaintext = b4a.alloc(ciphertext.byteLength - sodium.crypto_box_SEALBYTES)

  if (!sodium.crypto_box_seal_open(plaintext, ciphertext, keyPair.publicKey, keyPair.secretKey)) {
    return null
  }

  return plaintext
}

exports.encryptionKeyPair = function (seed) {
  const publicKey = b4a.alloc(sodium.crypto_box_PUBLICKEYBYTES)
  const secretKey = b4a.alloc(sodium.crypto_box_SECRETKEYBYTES)

  if (seed) {
    sodium.crypto_box_seed_keypair(publicKey, secretKey, seed)
  } else {
    sodium.crypto_box_keypair(publicKey, secretKey)
  }

  return {
    publicKey,
    secretKey
  }
}

exports.data = function (data) {
  const out = b4a.allocUnsafe(32)

  sodium.crypto_generichash_batch(out, [
    LEAF_TYPE,
    c.encode(c.uint64, data.byteLength),
    data
  ])

  return out
}

exports.parent = function (a, b) {
  if (a.index > b.index) {
    const tmp = a
    a = b
    b = tmp
  }

  const out = b4a.allocUnsafe(32)

  sodium.crypto_generichash_batch(out, [
    PARENT_TYPE,
    c.encode(c.uint64, a.size + b.size),
    a.hash,
    b.hash
  ])

  return out
}

exports.tree = function (roots, out) {
  const buffers = new Array(3 * roots.length + 1)
  let j = 0

  buffers[j++] = ROOT_TYPE

  for (let i = 0; i < roots.length; i++) {
    const r = roots[i]
    buffers[j++] = r.hash
    buffers[j++] = c.encode(c.uint64, r.index)
    buffers[j++] = c.encode(c.uint64, r.size)
  }

  if (!out) out = b4a.allocUnsafe(32)
  sodium.crypto_generichash_batch(out, buffers)
  return out
}

exports.hash = function (data, out) {
  if (!out) out = b4a.allocUnsafe(32)
  if (!Array.isArray(data)) data = [data]

  sodium.crypto_generichash_batch(out, data)

  return out
}

exports.randomBytes = function (n) {
  const buf = b4a.allocUnsafe(n)
  sodium.randombytes_buf(buf)
  return buf
}

exports.discoveryKey = function (key) {
  if (!key || key.byteLength !== 32) throw new Error('Must pass a 32 byte buffer')
  // Discovery keys might stay around for a while, so better not to use slab memory (for better gc)
  const digest = b4a.allocUnsafeSlow(32)
  sodium.crypto_generichash(digest, HYPERCORE, key)
  return digest
}

if (sodium.sodium_free) {
  exports.free = function (secureBuf) {
    if (secureBuf.secure) sodium.sodium_free(secureBuf)
  }
} else {
  exports.free = function () {}
}

exports.namespace = function (name, count) {
  const ids = typeof count === 'number' ? range(count) : count

  // Namespaces are long-lived, so better to use a dedicated slab
  const buf = b4a.allocUnsafeSlow(32 * ids.length)

  const list = new Array(ids.length)

  // ns is emhemeral, so default slab
  const ns = b4a.allocUnsafe(33)
  sodium.crypto_generichash(ns.subarray(0, 32), typeof name === 'string' ? b4a.from(name) : name)

  for (let i = 0; i < list.length; i++) {
    list[i] = buf.subarray(32 * i, 32 * i + 32)
    ns[32] = ids[i]
    sodium.crypto_generichash(list[i], ns)
  }

  return list
}

function range (count) {
  const arr = new Array(count)
  for (let i = 0; i < count; i++) arr[i] = i
  return arr
}

},{"b4a":102,"compact-encoding":178,"sodium-universal":556}],306:[function(require,module,exports){
const IdEnc = require('hypercore-id-encoding')

module.exports = class HypercoreError extends Error {
  constructor (msg, code, fn = HypercoreError, discoveryKey = null) {
    if (discoveryKey) msg = `${msg} (discovery key: ${IdEnc.normalize(discoveryKey)})`
    super(`${code}: ${msg}`)

    this.code = code
    this.discoveryKey = discoveryKey

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, fn)
    }
  }

  get name () {
    return 'HypercoreError'
  }

  static ASSERTION (msg, discoveryKey = null) { // ERR_ASSERTION is picked up by safety-catch also
    return new HypercoreError(msg, 'ERR_ASSERTION', HypercoreError.ASSERT, discoveryKey)
  }

  static BAD_ARGUMENT (msg, discoveryKey = null) {
    return new HypercoreError(msg, 'BAD_ARGUMENT', HypercoreError.BAD_ARGUMENT, discoveryKey)
  }

  static STORAGE_EMPTY (msg, discoveryKey = null) {
    return new HypercoreError(msg, 'STORAGE_EMPTY', HypercoreError.STORAGE_EMPTY, discoveryKey)
  }

  static STORAGE_CONFLICT (msg, discoveryKey = null) {
    return new HypercoreError(msg, 'STORAGE_CONFLICT', HypercoreError.STORAGE_CONFLICT, discoveryKey)
  }

  static INVALID_SIGNATURE (msg, discoveryKey = null) {
    return new HypercoreError(msg, 'INVALID_SIGNATURE', HypercoreError.INVALID_SIGNATURE, discoveryKey)
  }

  static INVALID_CAPABILITY (msg, discoveryKey = null) {
    return new HypercoreError(msg, 'INVALID_CAPABILITY', HypercoreError.INVALID_CAPABILITY, discoveryKey)
  }

  static INVALID_CHECKSUM (msg = 'Invalid checksum', discoveryKey = null) {
    return new HypercoreError(msg, 'INVALID_CHECKSUM', HypercoreError.INVALID_CHECKSUM, discoveryKey)
  }

  static INVALID_OPERATION (msg, discoveryKey = null) {
    return new HypercoreError(msg, 'INVALID_OPERATION', HypercoreError.INVALID_OPERATION, discoveryKey)
  }

  static INVALID_PROOF (msg = 'Proof not verifiable', discoveryKey = null) {
    return new HypercoreError(msg, 'INVALID_PROOF', HypercoreError.INVALID_PROOF, discoveryKey)
  }

  static BLOCK_NOT_AVAILABLE (msg = 'Block is not available', discoveryKey = null) {
    return new HypercoreError(msg, 'BLOCK_NOT_AVAILABLE', HypercoreError.BLOCK_NOT_AVAILABLE, discoveryKey)
  }

  static SNAPSHOT_NOT_AVAILABLE (msg = 'Snapshot is not available', discoveryKey = null) {
    return new HypercoreError(msg, 'SNAPSHOT_NOT_AVAILABLE', HypercoreError.SNAPSHOT_NOT_AVAILABLE, discoveryKey)
  }

  static REQUEST_CANCELLED (msg = 'Request was cancelled', discoveryKey = null) {
    return new HypercoreError(msg, 'REQUEST_CANCELLED', HypercoreError.REQUEST_CANCELLED, discoveryKey)
  }

  static REQUEST_TIMEOUT (msg = 'Request timed out', discoveryKey = null) {
    return new HypercoreError(msg, 'REQUEST_TIMEOUT', HypercoreError.REQUEST_TIMEOUT, discoveryKey)
  }

  static SESSION_NOT_WRITABLE (msg = 'Session is not writable', discoveryKey = null) {
    return new HypercoreError(msg, 'SESSION_NOT_WRITABLE', HypercoreError.SESSION_NOT_WRITABLE, discoveryKey)
  }

  static SESSION_CLOSED (msg = 'Session is closed', discoveryKey = null) {
    return new HypercoreError(msg, 'SESSION_CLOSED', HypercoreError.SESSION_CLOSED, discoveryKey)
  }

  static BATCH_UNFLUSHED (msg = 'Batch not yet flushed', discoveryKey = null) {
    return new HypercoreError(msg, 'BATCH_UNFLUSHED', HypercoreError.BATCH_UNFLUSHED, discoveryKey)
  }

  static BATCH_ALREADY_EXISTS (msg = 'Batch already exists', discoveryKey = null) {
    return new HypercoreError(msg, 'BATCH_ALREADY_EXISTS', HypercoreError.BATCH_ALREADY_EXISTS, discoveryKey)
  }

  static BATCH_ALREADY_FLUSHED (msg = 'Batch has already been flushed', discoveryKey = null) {
    return new HypercoreError(msg, 'BATCH_ALREADY_FLUSHED', HypercoreError.BATCH_ALREADY_FLUSHED, discoveryKey)
  }

  static OPLOG_CORRUPT (msg = 'Oplog file appears corrupt or out of date', discoveryKey = null) {
    return new HypercoreError(msg, 'OPLOG_CORRUPT', HypercoreError.OPLOG_CORRUPT, discoveryKey)
  }

  static OPLOG_HEADER_OVERFLOW (msg = 'Oplog header exceeds page size', discoveryKey = null) {
    return new HypercoreError(msg, 'OPLOG_HEADER_OVERFLOW', HypercoreError.OPLOG_HEADER_OVERFLOW, discoveryKey)
  }

  static INVALID_OPLOG_VERSION (msg = 'Invalid header version', discoveryKey = null) {
    return new HypercoreError(msg, 'INVALID_OPLOG_VERSION', HypercoreError.INVALID_OPLOG_VERSION, discoveryKey)
  }

  static WRITE_FAILED (msg = 'Write to storage failed', discoveryKey = null) {
    return new HypercoreError(msg, 'WRITE_FAILED', HypercoreError.WRITE_FAILED, discoveryKey)
  }

  static DECODING_ERROR (msg = 'Decoding error', discoveryKey = null) {
    return new HypercoreError(msg, 'DECODING_ERROR', HypercoreError.DECODING_ERROR, discoveryKey)
  }

  static SESSION_MOVED (msg = 'Session moved', discoveryKey = null) {
    return new HypercoreError(msg, 'SESSION_MOVED', HypercoreError.SESSION_MOVED, discoveryKey)
  }
}

},{"hypercore-id-encoding":307}],307:[function(require,module,exports){
const z32 = require('z32')
const b4a = require('b4a')

module.exports = {
  encode,
  decode,
  normalize,
  isValid
}

function encode (key) {
  if (!b4a.isBuffer(key)) throw new Error('Key must be a Buffer')
  if (key.byteLength !== 32) throw new Error('Key must be 32-bytes long')
  return z32.encode(key)
}

function decode (id) {
  if (b4a.isBuffer(id)) {
    if (id.byteLength !== 32) throw new Error('ID must be 32-bytes long')
    return id
  }
  if (typeof id === 'string') {
    if (id.startsWith('pear://')) id = id.slice(7).split('/')[0]
    if (id.length === 52) return z32.decode(id)
    if (id.length === 64) {
      const buf = b4a.from(id, 'hex')
      if (buf.byteLength === 32) return buf
    }
  }
  throw new Error('Invalid Hypercore key')
}

function normalize (any) {
  return encode(decode(any))
}

function isValid (any) {
  try {
    decode(any)
    return true
  } catch {
    return false
  }
}

},{"b4a":102,"z32":602}],308:[function(require,module,exports){
// explicitly exposed as hypercore/errors
module.exports = require('hypercore-errors')

},{"hypercore-errors":306}],309:[function(require,module,exports){
const { EventEmitter } = require('events')
const RAF = require('random-access-file')
const isOptions = require('is-options')
const hypercoreCrypto = require('hypercore-crypto')
const c = require('compact-encoding')
const b4a = require('b4a')
const Xache = require('xache')
const NoiseSecretStream = require('@hyperswarm/secret-stream')
const Protomux = require('protomux')
const z32 = require('z32')
const id = require('hypercore-id-encoding')
const safetyCatch = require('safety-catch')
const unslab = require('unslab')

const Replicator = require('./lib/replicator')
const Core = require('./lib/core')
const BlockEncryption = require('./lib/block-encryption')
const Info = require('./lib/info')
const Download = require('./lib/download')
const Batch = require('./lib/batch')
const { manifestHash, createManifest } = require('./lib/verifier')
const { ReadStream, WriteStream, ByteStream } = require('./lib/streams')
const {
  ASSERTION,
  BAD_ARGUMENT,
  SESSION_CLOSED,
  SESSION_NOT_WRITABLE,
  SNAPSHOT_NOT_AVAILABLE,
  DECODING_ERROR
} = require('hypercore-errors')

const promises = Symbol.for('hypercore.promises')
const inspect = Symbol.for('nodejs.util.inspect.custom')

// Hypercore actually does not have any notion of max/min block sizes
// but we enforce 15mb to ensure smooth replication (each block is transmitted atomically)
const MAX_SUGGESTED_BLOCK_SIZE = 15 * 1024 * 1024

module.exports = class Hypercore extends EventEmitter {
  constructor (storage, key, opts) {
    super()

    if (isOptions(storage)) {
      opts = storage
      storage = null
      key = opts.key || null
    } else if (isOptions(key)) {
      opts = key
      key = opts.key || null
    }

    if (key && typeof key === 'string') key = id.decode(key)
    if (!opts) opts = {}

    if (!storage) storage = opts.storage

    this[promises] = true

    this.storage = null
    this.crypto = opts.crypto || hypercoreCrypto
    this.core = null
    this.replicator = null
    this.encryption = null
    this.extensions = new Map()
    this.cache = createCache(opts.cache)

    this.valueEncoding = null
    this.encodeBatch = null
    this.activeRequests = []

    this.id = null
    this.key = key || null
    this.keyPair = opts.keyPair || null
    this.readable = true
    this.writable = false
    this.opened = false
    this.closed = false
    this.snapshotted = !!opts.snapshot
    this.sparse = opts.sparse !== false
    this.sessions = opts._sessions || [this]
    this.autoClose = !!opts.autoClose
    this.onwait = opts.onwait || null
    this.wait = opts.wait !== false
    this.timeout = opts.timeout || 0
    this.closing = null
    this.opening = null

    this._readonly = opts.writable === false
    this._preappend = preappend.bind(this)
    this._snapshot = null
    this._findingPeers = 0
    this._active = opts.active !== false

    this.opening = this._openSession(key, storage, opts)
    this.opening.catch(safetyCatch)
  }

  [inspect] (depth, opts) {
    let indent = ''
    if (typeof opts.indentationLvl === 'number') {
      while (indent.length < opts.indentationLvl) indent += ' '
    }

    let peers = ''
    const min = Math.min(this.peers.length, 5)

    for (let i = 0; i < min; i++) {
      const peer = this.peers[i]

      peers += indent + '    Peer(\n'
      peers += indent + '      remotePublicKey: ' + opts.stylize(toHex(peer.remotePublicKey), 'string') + '\n'
      peers += indent + '      remoteLength: ' + opts.stylize(peer.remoteLength, 'number') + '\n'
      peers += indent + '      remoteFork: ' + opts.stylize(peer.remoteFork, 'number') + '\n'
      peers += indent + '      remoteCanUpgrade: ' + opts.stylize(peer.remoteCanUpgrade, 'boolean') + '\n'
      peers += indent + '    )' + '\n'
    }

    if (this.peers.length > 5) {
      peers += indent + '  ... and ' + (this.peers.length - 5) + ' more\n'
    }

    if (peers) peers = '[\n' + peers + indent + '  ]'
    else peers = '[ ' + opts.stylize(0, 'number') + ' ]'

    return this.constructor.name + '(\n' +
      indent + '  id: ' + opts.stylize(this.id, 'string') + '\n' +
      indent + '  key: ' + opts.stylize(toHex(this.key), 'string') + '\n' +
      indent + '  discoveryKey: ' + opts.stylize(toHex(this.discoveryKey), 'string') + '\n' +
      indent + '  opened: ' + opts.stylize(this.opened, 'boolean') + '\n' +
      indent + '  closed: ' + opts.stylize(this.closed, 'boolean') + '\n' +
      indent + '  snapshotted: ' + opts.stylize(this.snapshotted, 'boolean') + '\n' +
      indent + '  sparse: ' + opts.stylize(this.sparse, 'boolean') + '\n' +
      indent + '  writable: ' + opts.stylize(this.writable, 'boolean') + '\n' +
      indent + '  length: ' + opts.stylize(this.length, 'number') + '\n' +
      indent + '  fork: ' + opts.stylize(this.fork, 'number') + '\n' +
      indent + '  sessions: [ ' + opts.stylize(this.sessions.length, 'number') + ' ]\n' +
      indent + '  activeRequests: [ ' + opts.stylize(this.activeRequests.length, 'number') + ' ]\n' +
      indent + '  peers: ' + peers + '\n' +
      indent + ')'
  }

  static MAX_SUGGESTED_BLOCK_SIZE = MAX_SUGGESTED_BLOCK_SIZE

  static key (manifest, { compat, version, namespace } = {}) {
    if (b4a.isBuffer(manifest)) manifest = { version, signers: [{ publicKey: manifest, namespace }] }
    return compat ? manifest.signers[0].publicKey : manifestHash(createManifest(manifest))
  }

  static discoveryKey (key) {
    return hypercoreCrypto.discoveryKey(key)
  }

  static getProtocolMuxer (stream) {
    return stream.noiseStream.userData
  }

  static createProtocolStream (isInitiator, opts = {}) {
    let outerStream = Protomux.isProtomux(isInitiator)
      ? isInitiator.stream
      : isStream(isInitiator)
        ? isInitiator
        : opts.stream

    let noiseStream = null

    if (outerStream) {
      noiseStream = outerStream.noiseStream
    } else {
      noiseStream = new NoiseSecretStream(isInitiator, null, opts)
      outerStream = noiseStream.rawStream
    }
    if (!noiseStream) throw BAD_ARGUMENT('Invalid stream')

    if (!noiseStream.userData) {
      const protocol = Protomux.from(noiseStream)

      if (opts.keepAlive !== false) {
        noiseStream.setKeepAlive(5000)
      }
      noiseStream.userData = protocol
    }

    if (opts.ondiscoverykey) {
      noiseStream.userData.pair({ protocol: 'hypercore/alpha' }, opts.ondiscoverykey)
    }

    return outerStream
  }

  static defaultStorage (storage, opts = {}) {
    if (typeof storage !== 'string') {
      if (!isRandomAccessClass(storage)) return storage
      const Cls = storage // just to satisfy standard...
      return name => new Cls(name)
    }

    const directory = storage
    const toLock = opts.unlocked ? null : (opts.lock || 'oplog')
    const pool = opts.pool || (opts.poolSize ? RAF.createPool(opts.poolSize) : null)
    const rmdir = !!opts.rmdir
    const writable = opts.writable !== false

    return createFile

    function createFile (name) {
      const lock = toLock === null ? false : isFile(name, toLock)
      const sparse = isFile(name, 'data') || isFile(name, 'bitfield') || isFile(name, 'tree')
      return new RAF(name, { directory, lock, sparse, pool: lock ? null : pool, rmdir, writable })
    }

    function isFile (name, n) {
      return name === n || name.endsWith('/' + n)
    }
  }

  snapshot (opts) {
    return this.session({ ...opts, snapshot: true })
  }

  session (opts = {}) {
    if (this.closing) {
      // This makes the closing logic a lot easier. If this turns out to be a problem
      // in practice, open an issue and we'll try to make a solution for it.
      throw SESSION_CLOSED('Cannot make sessions on a closing core')
    }

    const sparse = opts.sparse === false ? false : this.sparse
    const wait = opts.wait === false ? false : this.wait
    const writable = opts.writable === false ? false : !this._readonly
    const onwait = opts.onwait === undefined ? this.onwait : opts.onwait
    const timeout = opts.timeout === undefined ? this.timeout : opts.timeout
    const Clz = opts.class || Hypercore
    const s = new Clz(this.storage, this.key, {
      ...opts,
      sparse,
      wait,
      onwait,
      timeout,
      writable,
      _opening: this.opening,
      _sessions: this.sessions
    })

    s._passCapabilities(this)

    // Configure the cache unless explicitly disabled.
    if (opts.cache !== false) {
      s.cache = opts.cache === true || !opts.cache ? this.cache : opts.cache
    }

    if (this.opened) ensureEncryption(s, opts)
    this._addSession(s)

    return s
  }

  _addSession (s) {
    this.sessions.push(s)
    if (this.core) this.core.active++
  }

  async setEncryptionKey (encryptionKey, opts) {
    if (!this.opened) await this.opening
    this.encryption = encryptionKey ? new BlockEncryption(encryptionKey, this.key, { compat: this.core.compat, ...opts }) : null
  }

  setKeyPair (keyPair) {
    this.keyPair = keyPair
    this.writable = this._isWritable()
  }

  setActive (bool) {
    const active = !!bool
    if (active === this._active || this.closing) return
    this._active = active
    if (!this.opened) return
    this.replicator.updateActivity(this._active ? 1 : -1)
  }

  _passCapabilities (o) {
    if (!this.keyPair) this.keyPair = o.keyPair
    this.crypto = o.crypto
    this.id = o.id
    this.key = o.key
    this.core = o.core
    this.replicator = o.replicator
    this.encryption = o.encryption
    this.writable = this._isWritable()
    this.autoClose = o.autoClose

    if (this.snapshotted && this.core && !this._snapshot) this._updateSnapshot()
  }

  async _openFromExisting (from, opts) {
    if (!from.opened) await from.opening

    // includes ourself as well, so the loop below also updates us
    const sessions = this.sessions

    for (const s of sessions) {
      s.sessions = from.sessions
      s._passCapabilities(from)
      s._addSession(s)
    }

    this.storage = from.storage
    this.replicator.findingPeers += this._findingPeers

    ensureEncryption(this, opts)

    // we need to manually fwd the encryption cap as the above removes it potentially
    if (this.encryption && !from.encryption) {
      for (const s of sessions) s.encryption = this.encryption
    }
  }

  async _openSession (key, storage, opts) {
    const isFirst = !opts._opening

    if (!isFirst) {
      await opts._opening
    }
    if (opts.preload) opts = { ...opts, ...(await this._retryPreload(opts.preload)) }
    if (this.cache === null && opts.cache) this.cache = createCache(opts.cache)

    if (isFirst) {
      await this._openCapabilities(key, storage, opts)

      // check we are the actual root and not a opts.from session
      if (!opts.from) {
        // Only the root session should pass capabilities to other sessions.
        for (let i = 0; i < this.sessions.length; i++) {
          const s = this.sessions[i]
          if (s !== this) s._passCapabilities(this)
        }
      }
    } else {
      ensureEncryption(this, opts)
    }

    if (opts.manifest && !this.core.header.manifest) {
      await this.core.setManifest(opts.manifest)
    }

    this.writable = this._isWritable()

    if (opts.valueEncoding) {
      this.valueEncoding = c.from(opts.valueEncoding)
    }
    if (opts.encodeBatch) {
      this.encodeBatch = opts.encodeBatch
    }

    // Start continous replication if not in sparse mode.
    if (!this.sparse) this.download({ start: 0, end: -1 })

    // This is a hidden option that's only used by Corestore.
    // It's required so that corestore can load a name from userData before 'ready' is emitted.
    if (opts._preready) await opts._preready(this)

    this.replicator.updateActivity(this._active ? 1 : 0)

    this.opened = true
    this.emit('ready')
  }

  async _retryPreload (preload) {
    while (true) { // TODO: better long term fix is allowing lib/core.js creation from the outside...
      const result = await preload()
      const from = result && result.from
      if (from) {
        if (!from.opened) await from.ready()
        if (from.closing) continue
      }
      return result
    }
  }

  async _openCapabilities (key, storage, opts) {
    if (opts.from) return this._openFromExisting(opts.from, opts)

    const unlocked = !!opts.unlocked
    this.storage = Hypercore.defaultStorage(opts.storage || storage, { unlocked, writable: !unlocked })

    this.core = await Core.open(this.storage, {
      compat: opts.compat,
      force: opts.force,
      sessions: this.sessions,
      createIfMissing: opts.createIfMissing,
      readonly: unlocked,
      overwrite: opts.overwrite,
      key,
      keyPair: opts.keyPair,
      crypto: this.crypto,
      legacy: opts.legacy,
      manifest: opts.manifest,
      globalCache: opts.globalCache || null, // This is a temp option, not to be relied on unless you know what you are doing (no semver guarantees)
      onupdate: this._oncoreupdate.bind(this),
      onconflict: this._oncoreconflict.bind(this)
    })

    if (opts.userData) {
      for (const [key, value] of Object.entries(opts.userData)) {
        await this.core.userData(key, value)
      }
    }

    this.key = this.core.header.key
    this.keyPair = this.core.header.keyPair
    this.id = z32.encode(this.key)

    this.replicator = new Replicator(this.core, this.key, {
      eagerUpgrade: true,
      notDownloadingLinger: opts.notDownloadingLinger,
      allowFork: opts.allowFork !== false,
      inflightRange: opts.inflightRange,
      onpeerupdate: this._onpeerupdate.bind(this),
      onupload: this._onupload.bind(this),
      oninvalid: this._oninvalid.bind(this)
    })

    this.replicator.findingPeers += this._findingPeers

    if (!this.encryption && opts.encryptionKey) {
      this.encryption = new BlockEncryption(opts.encryptionKey, this.key, { compat: this.core.compat, isBlockKey: opts.isBlockKey })
    }
  }

  _getSnapshot () {
    if (this.sparse) {
      return {
        length: this.core.tree.length,
        byteLength: this.core.tree.byteLength,
        fork: this.core.tree.fork,
        compatLength: this.core.tree.length
      }
    }

    return {
      length: this.core.header.hints.contiguousLength,
      byteLength: 0,
      fork: this.core.tree.fork,
      compatLength: this.core.header.hints.contiguousLength
    }
  }

  _updateSnapshot () {
    const prev = this._snapshot
    const next = this._snapshot = this._getSnapshot()

    if (!prev) return true
    return prev.length !== next.length || prev.fork !== next.fork
  }

  _isWritable () {
    return !this._readonly && !!(this.keyPair && this.keyPair.secretKey)
  }

  close (err) {
    if (this.closing) return this.closing
    this.closing = this._close(err || null)
    return this.closing
  }

  async _close (err) {
    if (this.opened === false) await this.opening

    const i = this.sessions.indexOf(this)
    if (i === -1) return

    this.sessions.splice(i, 1)
    this.core.active--
    this.readable = false
    this.writable = false
    this.closed = true
    this.opened = false

    const gc = []
    for (const ext of this.extensions.values()) {
      if (ext.session === this) gc.push(ext)
    }
    for (const ext of gc) ext.destroy()

    if (this.replicator !== null) {
      this.replicator.findingPeers -= this._findingPeers
      this.replicator.clearRequests(this.activeRequests, err)
      this.replicator.updateActivity(this._active ? -1 : 0)
    }

    this._findingPeers = 0

    if (this.sessions.length || this.core.active > 0) {
      // if this is the last session and we are auto closing, trigger that first to enforce error handling
      if (this.sessions.length === 1 && this.core.active === 1 && this.autoClose) await this.sessions[0].close(err)
      // emit "fake" close as this is a session
      this.emit('close', false)
      return
    }

    if (this.replicator !== null) {
      await this.replicator.destroy()
    }

    await this.core.close()

    this.emit('close', true)
  }

  replicate (isInitiator, opts = {}) {
    // Only limitation here is that ondiscoverykey doesn't work atm when passing a muxer directly,
    // because it doesn't really make a lot of sense.
    if (Protomux.isProtomux(isInitiator)) return this._attachToMuxer(isInitiator, opts)

    // if same stream is passed twice, ignore the 2nd one before we make sessions etc
    if (isStream(isInitiator) && this._isAttached(isInitiator)) return isInitiator

    const protocolStream = Hypercore.createProtocolStream(isInitiator, opts)
    const noiseStream = protocolStream.noiseStream
    const protocol = noiseStream.userData
    const useSession = !!opts.session

    this._attachToMuxer(protocol, useSession)

    return protocolStream
  }

  _isAttached (stream) {
    return stream.userData && this.replicator && this.replicator.attached(stream.userData)
  }

  _attachToMuxer (mux, useSession) {
    if (this.opened) {
      this._attachToMuxerOpened(mux, useSession)
    } else {
      this.opening.then(this._attachToMuxerOpened.bind(this, mux, useSession), mux.destroy.bind(mux))
    }

    return mux
  }

  _attachToMuxerOpened (mux, useSession) {
    // If the user wants to, we can make this replication run in a session
    // that way the core wont close "under them" during replication
    this.replicator.attachTo(mux, useSession)
  }

  get discoveryKey () {
    return this.replicator === null ? null : this.replicator.discoveryKey
  }

  get manifest () {
    return this.core === null ? null : this.core.header.manifest
  }

  get length () {
    if (this._snapshot) return this._snapshot.length
    if (this.core === null) return 0
    if (!this.sparse) return this.contiguousLength
    return this.core.tree.length
  }

  get signedLength () {
    return this.length
  }

  get indexedLength () {
    return this.length
  }

  /**
   * Deprecated. Use `const { byteLength } = await core.info()`.
   */
  get byteLength () {
    if (this._snapshot) return this._snapshot.byteLength
    if (this.core === null) return 0
    if (!this.sparse) return this.contiguousByteLength
    return this.core.tree.byteLength - (this.core.tree.length * this.padding)
  }

  get contiguousLength () {
    return this.core === null ? 0 : Math.min(this.core.tree.length, this.core.header.hints.contiguousLength)
  }

  get contiguousByteLength () {
    return 0
  }

  get fork () {
    return this.core === null ? 0 : this.core.tree.fork
  }

  get peers () {
    return this.replicator === null ? [] : this.replicator.peers
  }

  get encryptionKey () {
    return this.encryption && this.encryption.key
  }

  get padding () {
    return this.encryption === null ? 0 : this.encryption.padding
  }

  get globalCache () {
    return this.core && this.core.globalCache
  }

  ready () {
    return this.opening
  }

  _onupload (index, value, from) {
    const byteLength = value.byteLength - this.padding

    for (let i = 0; i < this.sessions.length; i++) {
      this.sessions[i].emit('upload', index, byteLength, from)
    }
  }

  _oninvalid (err, req, res, from) {
    for (let i = 0; i < this.sessions.length; i++) {
      this.sessions[i].emit('verification-error', err, req, res, from)
    }
  }

  async _oncoreconflict (proof, from) {
    await this.replicator.onconflict(from)

    for (const s of this.sessions) s.emit('conflict', proof.upgrade.length, proof.fork, proof)

    const err = new Error('Two conflicting signatures exist for length ' + proof.upgrade.length)
    await this._closeAllSessions(err)
  }

  async _closeAllSessions (err) {
    // this.sessions modifies itself when a session closes
    // This way we ensure we indeed iterate over all sessions
    const sessions = [...this.sessions]

    const all = []
    for (const s of sessions) all.push(s.close(err))
    await Promise.allSettled(all)
  }

  _oncoreupdate (status, bitfield, value, from) {
    if (status !== 0) {
      const truncatedNonSparse = (status & 0b1000) !== 0
      const appendedNonSparse = (status & 0b0100) !== 0
      const truncated = (status & 0b0010) !== 0
      const appended = (status & 0b0001) !== 0

      if (truncated) {
        this.replicator.ontruncate(bitfield.start, bitfield.length)
      }

      if ((status & 0b10011) !== 0) {
        this.replicator.onupgrade()
      }

      if (status & 0b10000) {
        for (let i = 0; i < this.sessions.length; i++) {
          const s = this.sessions[i]

          if (s.encryption && s.encryption.compat !== this.core.compat) {
            s.encryption = new BlockEncryption(s.encryption.key, this.key, { compat: this.core.compat, isBlockKey: s.encryption.isBlockKey })
          }
        }

        for (let i = 0; i < this.sessions.length; i++) {
          this.sessions[i].emit('manifest')
        }
      }

      for (let i = 0; i < this.sessions.length; i++) {
        const s = this.sessions[i]

        if (truncated) {
          if (s.cache) s.cache.clear()

          // If snapshotted, make sure to update our compat so we can fail gets
          if (s._snapshot && bitfield.start < s._snapshot.compatLength) s._snapshot.compatLength = bitfield.start
        }

        if (s.sparse ? truncated : truncatedNonSparse) {
          s.emit('truncate', bitfield.start, this.core.tree.fork)
        }

        // For sparse sessions, immediately emit appends. If non-sparse, emit if contig length has updated
        if (s.sparse ? appended : appendedNonSparse) {
          s.emit('append')
        }
      }

      const contig = this.core.header.hints.contiguousLength

      // When the contig length catches up, broadcast the non-sparse length to peers
      if (appendedNonSparse && contig === this.core.tree.length) {
        for (const peer of this.peers) {
          if (peer.broadcastedNonSparse) continue

          peer.broadcastRange(0, contig)
          peer.broadcastedNonSparse = true
        }
      }
    }

    if (bitfield) {
      this.replicator.onhave(bitfield.start, bitfield.length, bitfield.drop)
    }

    if (value) {
      const byteLength = value.byteLength - this.padding

      for (let i = 0; i < this.sessions.length; i++) {
        this.sessions[i].emit('download', bitfield.start, byteLength, from)
      }
    }
  }

  _onpeerupdate (added, peer) {
    const name = added ? 'peer-add' : 'peer-remove'

    for (let i = 0; i < this.sessions.length; i++) {
      this.sessions[i].emit(name, peer)

      if (added) {
        for (const ext of this.sessions[i].extensions.values()) {
          peer.extensions.set(ext.name, ext)
        }
      }
    }
  }

  async setUserData (key, value, { flush = false } = {}) {
    if (this.opened === false) await this.opening
    return this.core.userData(key, value, flush)
  }

  async getUserData (key) {
    if (this.opened === false) await this.opening
    for (const { key: savedKey, value } of this.core.header.userData) {
      if (key === savedKey) return value
    }
    return null
  }

  createTreeBatch () {
    return this.core.tree.batch()
  }

  findingPeers () {
    this._findingPeers++
    if (this.replicator !== null && !this.closing) this.replicator.findingPeers++

    let once = true

    return () => {
      if (this.closing || !once) return
      once = false
      this._findingPeers--
      if (this.replicator !== null && --this.replicator.findingPeers === 0) {
        this.replicator.updateAll()
      }
    }
  }

  async info (opts) {
    if (this.opened === false) await this.opening

    return Info.from(this, opts)
  }

  async update (opts) {
    if (this.opened === false) await this.opening
    if (this.closing !== null) return false

    if (this.writable && (!opts || opts.force !== true)) {
      if (!this.snapshotted) return false
      return this._updateSnapshot()
    }

    const remoteWait = this._shouldWait(opts, this.replicator.findingPeers > 0)

    let upgraded = false

    if (await this.replicator.applyPendingReorg()) {
      upgraded = true
    }

    if (!upgraded && remoteWait) {
      const activeRequests = (opts && opts.activeRequests) || this.activeRequests
      const req = this.replicator.addUpgrade(activeRequests)

      upgraded = await req.promise
    }

    if (!upgraded) return false
    if (this.snapshotted) return this._updateSnapshot()
    return true
  }

  batch ({ checkout = -1, autoClose = true, session = true, restore = false, clear = false } = {}) {
    return new Batch(session ? this.session() : this, checkout, autoClose, restore, clear)
  }

  async seek (bytes, opts) {
    if (this.opened === false) await this.opening
    if (!isValidIndex(bytes)) throw ASSERTION('seek is invalid')

    const tree = (opts && opts.tree) || this.core.tree
    const s = tree.seek(bytes, this.padding)

    const offset = await s.update()
    if (offset) return offset

    if (this.closing !== null) throw SESSION_CLOSED()

    if (!this._shouldWait(opts, this.wait)) return null

    const activeRequests = (opts && opts.activeRequests) || this.activeRequests
    const req = this.replicator.addSeek(activeRequests, s)

    const timeout = opts && opts.timeout !== undefined ? opts.timeout : this.timeout
    if (timeout) req.context.setTimeout(req, timeout)

    return req.promise
  }

  async has (start, end = start + 1) {
    if (this.opened === false) await this.opening
    if (!isValidIndex(start) || !isValidIndex(end)) throw ASSERTION('has range is invalid')

    if (end === start + 1) return this.core.bitfield.get(start)

    const i = this.core.bitfield.firstUnset(start)
    return i === -1 || i >= end
  }

  async get (index, opts) {
    if (this.opened === false) await this.opening
    if (!isValidIndex(index)) throw ASSERTION('block index is invalid')

    if (this.closing !== null) throw SESSION_CLOSED()
    if (this._snapshot !== null && index >= this._snapshot.compatLength) throw SNAPSHOT_NOT_AVAILABLE()

    const encoding = (opts && opts.valueEncoding && c.from(opts.valueEncoding)) || this.valueEncoding

    let req = this.cache && this.cache.get(index)
    if (!req) req = this._get(index, opts)

    let block = await req
    if (!block) return null

    if (opts && opts.raw) return block

    if (this.encryption && (!opts || opts.decrypt !== false)) {
      // Copy the block as it might be shared with other sessions.
      block = b4a.from(block)

      this.encryption.decrypt(index, block)
    }

    return this._decode(encoding, block)
  }

  async clear (start, end = start + 1, opts) {
    if (this.opened === false) await this.opening
    if (this.closing !== null) throw SESSION_CLOSED()

    if (typeof end === 'object') {
      opts = end
      end = start + 1
    }

    if (!isValidIndex(start) || !isValidIndex(end)) throw ASSERTION('clear range is invalid')

    const cleared = (opts && opts.diff) ? { blocks: 0 } : null

    if (start >= end) return cleared
    if (start >= this.length) return cleared

    await this.core.clear(start, end, cleared)

    return cleared
  }

  async purge () {
    await this._closeAllSessions(null)
    await this.core.purge()
  }

  async _get (index, opts) {
    let block

    if (this.core.bitfield.get(index)) {
      const tree = (opts && opts.tree) || this.core.tree
      block = this.core.blocks.get(index, tree)

      if (this.cache) this.cache.set(index, block)
    } else {
      if (!this._shouldWait(opts, this.wait)) return null

      if (opts && opts.onwait) opts.onwait(index, this)
      if (this.onwait) this.onwait(index, this)

      const activeRequests = (opts && opts.activeRequests) || this.activeRequests

      const req = this.replicator.addBlock(activeRequests, index)
      req.snapshot = index < this.length

      const timeout = opts && opts.timeout !== undefined ? opts.timeout : this.timeout
      if (timeout) req.context.setTimeout(req, timeout)

      block = this._cacheOnResolve(index, req.promise, this.core.tree.fork)
    }

    return block
  }

  async _cacheOnResolve (index, req, fork) {
    const resolved = await req

    // Unslab only when it takes up less then half the slab
    const block = resolved !== null && 2 * resolved.byteLength < resolved.buffer.byteLength
      ? unslab(resolved)
      : resolved

    if (this.cache && fork === this.core.tree.fork) {
      this.cache.set(index, Promise.resolve(block))
    }

    return block
  }

  _shouldWait (opts, defaultValue) {
    if (opts) {
      if (opts.wait === false) return false
      if (opts.wait === true) return true
    }
    return defaultValue
  }

  createReadStream (opts) {
    return new ReadStream(this, opts)
  }

  createWriteStream (opts) {
    return new WriteStream(this, opts)
  }

  createByteStream (opts) {
    return new ByteStream(this, opts)
  }

  download (range) {
    const req = this._download(range)

    // do not crash in the background...
    req.catch(safetyCatch)

    return new Download(req)
  }

  async _download (range) {
    if (this.opened === false) await this.opening

    const activeRequests = (range && range.activeRequests) || this.activeRequests
    return this.replicator.addRange(activeRequests, range)
  }

  // TODO: get rid of this / deprecate it?
  undownload (range) {
    range.destroy(null)
  }

  // TODO: get rid of this / deprecate it?
  cancel (request) {
    // Do nothing for now
  }

  async truncate (newLength = 0, opts = {}) {
    if (this.opened === false) await this.opening

    const {
      fork = this.core.tree.fork + 1,
      keyPair = this.keyPair,
      signature = null
    } = typeof opts === 'number' ? { fork: opts } : opts

    const writable = !this._readonly && !!(signature || (keyPair && keyPair.secretKey))
    if (writable === false && (newLength > 0 || fork !== this.core.tree.fork)) throw SESSION_NOT_WRITABLE()

    await this.core.truncate(newLength, fork, { keyPair, signature })

    // TODO: Should propagate from an event triggered by the oplog
    this.replicator.updateAll()
  }

  async append (blocks, opts = {}) {
    if (this.opened === false) await this.opening

    const { keyPair = this.keyPair, signature = null } = opts
    const writable = !this._readonly && !!(signature || (keyPair && keyPair.secretKey))

    if (writable === false) throw SESSION_NOT_WRITABLE()

    blocks = Array.isArray(blocks) ? blocks : [blocks]

    const preappend = this.encryption && this._preappend

    const buffers = this.encodeBatch !== null ? this.encodeBatch(blocks) : new Array(blocks.length)

    if (this.encodeBatch === null) {
      for (let i = 0; i < blocks.length; i++) {
        buffers[i] = this._encode(this.valueEncoding, blocks[i])
      }
    }
    for (const b of buffers) {
      if (b.byteLength > MAX_SUGGESTED_BLOCK_SIZE) {
        throw BAD_ARGUMENT('Appended block exceeds the maximum suggested block size')
      }
    }

    return this.core.append(buffers, { keyPair, signature, preappend })
  }

  async treeHash (length) {
    if (length === undefined) {
      await this.ready()
      length = this.core.tree.length
    }

    const roots = await this.core.tree.getRoots(length)
    return this.crypto.tree(roots)
  }

  registerExtension (name, handlers = {}) {
    if (this.extensions.has(name)) {
      const ext = this.extensions.get(name)
      ext.handlers = handlers
      ext.encoding = c.from(handlers.encoding || c.buffer)
      ext.session = this
      return ext
    }

    const ext = {
      name,
      handlers,
      encoding: c.from(handlers.encoding || c.buffer),
      session: this,
      send (message, peer) {
        const buffer = c.encode(this.encoding, message)
        peer.extension(name, buffer)
      },
      broadcast (message) {
        const buffer = c.encode(this.encoding, message)
        for (const peer of this.session.peers) {
          peer.extension(name, buffer)
        }
      },
      destroy () {
        for (const peer of this.session.peers) {
          if (peer.extensions.get(name) === ext) peer.extensions.delete(name)
        }
        this.session.extensions.delete(name)
      },
      _onmessage (state, peer) {
        const m = this.encoding.decode(state)
        if (this.handlers.onmessage) this.handlers.onmessage(m, peer)
      }
    }

    this.extensions.set(name, ext)
    for (const peer of this.peers) {
      peer.extensions.set(name, ext)
    }

    return ext
  }

  _encode (enc, val) {
    const state = { start: this.padding, end: this.padding, buffer: null }

    if (b4a.isBuffer(val)) {
      if (state.start === 0) return val
      state.end += val.byteLength
    } else if (enc) {
      enc.preencode(state, val)
    } else {
      val = b4a.from(val)
      if (state.start === 0) return val
      state.end += val.byteLength
    }

    state.buffer = b4a.allocUnsafe(state.end)

    if (enc) enc.encode(state, val)
    else state.buffer.set(val, state.start)

    return state.buffer
  }

  _decode (enc, block) {
    if (this.padding) block = block.subarray(this.padding)
    try {
      if (enc) return c.decode(enc, block)
    } catch {
      throw DECODING_ERROR()
    }
    return block
  }
}

function isStream (s) {
  return typeof s === 'object' && s && typeof s.pipe === 'function'
}

function isRandomAccessClass (fn) {
  return !!(typeof fn === 'function' && fn.prototype && typeof fn.prototype.open === 'function')
}

function toHex (buf) {
  return buf && b4a.toString(buf, 'hex')
}

function preappend (blocks) {
  const offset = this.core.tree.length
  const fork = this.core.tree.fork

  for (let i = 0; i < blocks.length; i++) {
    this.encryption.encrypt(offset + i, blocks[i], fork)
  }
}

function ensureEncryption (core, opts) {
  if (!opts.encryptionKey) return
  // Only override the block encryption if it's either not already set or if
  // the caller provided a different key.
  if (core.encryption && b4a.equals(core.encryption.key, opts.encryptionKey) && core.encryption.compat === core.core.compat) return
  core.encryption = new BlockEncryption(opts.encryptionKey, core.key, { compat: core.core ? core.core.compat : true, isBlockKey: opts.isBlockKey })
}

function createCache (cache) {
  return cache === true ? new Xache({ maxSize: 65536, maxAge: 0 }) : (cache || null)
}

function isValidIndex (index) {
  return index === 0 || index > 0
}

},{"./lib/batch":311,"./lib/block-encryption":314,"./lib/core":318,"./lib/download":319,"./lib/info":321,"./lib/replicator":329,"./lib/streams":330,"./lib/verifier":331,"@hyperswarm/secret-stream":60,"b4a":102,"compact-encoding":178,"events":258,"hypercore-crypto":305,"hypercore-errors":306,"hypercore-id-encoding":307,"is-options":371,"protomux":439,"random-access-file":452,"safety-catch":486,"unslab":590,"xache":599,"z32":602}],310:[function(require,module,exports){
const hypercoreCrypto = require('hypercore-crypto')
const flat = require('flat-tree')
const c = require('compact-encoding')
const b4a = require('b4a')

const empty = b4a.alloc(32)

// this is optimised for speed over mem atm
// can be tweaked in the future

module.exports = async function auditCore (core) {
  const corrections = {
    tree: 0,
    blocks: 0
  }

  const length = core.header.tree.length

  const data = await readFullStorage(core.blocks.storage)
  const tree = await readFullStorage(core.tree.storage)

  const valid = new Uint8Array(Math.ceil(tree.byteLength / 40))
  const stack = []

  for (const r of core.tree.roots) {
    valid[r.index] = 1
    stack.push(r)
  }

  while (stack.length > 0) {
    const node = stack.pop()
    if ((node.index & 1) === 0) continue

    const [left, right] = flat.children(node.index)
    const leftNode = getNode(left)
    const rightNode = getNode(right)

    if (!rightNode && !leftNode) continue

    stack.push(leftNode, rightNode)

    if (valid[node.index]) {
      const hash = hypercoreCrypto.parent(leftNode, rightNode)
      if (b4a.equals(hash, node.hash) && node.size === (leftNode.size + rightNode.size)) {
        valid[leftNode.index] = 1
        valid[rightNode.index] = 1
        continue
      }
    }

    if (leftNode.size) clearNode(leftNode)
    if (rightNode.size) clearNode(rightNode)
  }

  if (corrections.tree) {
    core.tree.cache.clear()
  }

  let i = 0
  let nextOffset = -1
  while (i < length) {
    const has = core.bitfield.get(i)

    if (!has) {
      if (i + 1 === length) break
      i = core.bitfield.findFirst(true, i + 1)
      if (i < 0) break
      nextOffset = -1
      continue
    }

    if (nextOffset === -1) {
      try {
        nextOffset = await core.tree.byteOffset(i * 2)
      } catch {
        core._setBitfield(i, false)
        corrections.blocks++
        i++
        continue
      }
    }

    const node = getNode(i * 2)
    const blk = data.subarray(nextOffset, nextOffset + node.size)
    const hash = hypercoreCrypto.data(blk)

    nextOffset += blk.byteLength

    if (!b4a.equals(hash, node.hash)) {
      core._setBitfield(i, false)
      corrections.blocks++
    }

    i++
  }

  return corrections

  function getNode (index) {
    if (index * 40 + 40 > tree.byteLength) return null
    const state = { start: index * 40, end: index * 40 + 40, buffer: tree }
    const size = c.uint64.decode(state)
    const hash = c.fixed32.decode(state)
    if (size === 0 && hash.equals(empty)) return null
    return { index, size, hash }
  }

  function clearNode (node) {
    valid[node.index] = 0

    if (node.size) {
      b4a.fill(tree, 0, node.index * 40, node.index * 40 + 40)
      core.tree.unflushed.set(node.index, core.tree.blankNode(node.index))
      corrections.tree++
    }
  }
}

function readFullStorage (storage) {
  return new Promise((resolve, reject) => {
    storage.stat((_, st) => {
      if (!st) return resolve(b4a.alloc(0))
      storage.read(0, st.size, (err, data) => {
        if (err) reject(err)
        else resolve(data)
      })
    })
  })
}

},{"b4a":102,"compact-encoding":178,"flat-tree":262,"hypercore-crypto":305}],311:[function(require,module,exports){
const { BLOCK_NOT_AVAILABLE, SESSION_CLOSED } = require('hypercore-errors')
const EventEmitter = require('events')
const c = require('compact-encoding')
const b4a = require('b4a')
const safetyCatch = require('safety-catch')

module.exports = class HypercoreBatch extends EventEmitter {
  constructor (session, checkoutLength, autoClose, restore, clear) {
    super()

    this.session = session
    this.opened = false
    this.closed = false
    this.opening = null
    this.closing = null
    this.writable = true // always writable...
    this.autoClose = autoClose
    this.restore = restore
    this.fork = 0

    this._appends = []
    this._appendsActual = null
    this._checkoutLength = checkoutLength
    this._byteLength = 0
    this._sessionLength = 0
    this._sessionByteLength = 0
    this._sessionBatch = null
    this._cachedBatch = null
    this._flushing = null
    this._clear = clear

    this.opening = this._open()
    this.opening.catch(safetyCatch)
  }

  get id () {
    return this.session.id
  }

  get key () {
    return this.session.key
  }

  get discoveryKey () {
    return this.session.discoveryKey
  }

  get indexedLength () {
    return Math.min(this._sessionLength, this.session.core === null ? 0 : this.session.core.tree.length)
  }

  get flushedLength () {
    return this._sessionLength
  }

  get indexedByteLength () {
    return this._sessionByteLength
  }

  get length () {
    return this._sessionLength + this._appends.length
  }

  get byteLength () {
    return this._sessionByteLength + this._byteLength
  }

  get core () {
    return this.session.core
  }

  get manifest () {
    return this.session.manifest
  }

  ready () {
    return this.opening
  }

  async _open () {
    await this.session.ready()

    if (this._clear) this._checkoutLength = this.core.tree.length

    if (this._checkoutLength !== -1) {
      const batch = await this.session.core.tree.restoreBatch(this._checkoutLength)
      batch.treeLength = this._checkoutLength
      this._sessionLength = batch.length
      this._sessionByteLength = batch.byteLength
      this._sessionBatch = batch
      if (this._clear) await this.core.clearBatch()
    } else {
      const last = this.restore ? this.session.core.bitfield.findFirst(false, this.session.length) : 0

      if (last > this.session.length) {
        const batch = await this.session.core.tree.restoreBatch(last)
        this._sessionLength = batch.length
        this._sessionByteLength = batch.byteLength - this.session.padding * batch.length
        this._sessionBatch = batch
      } else {
        this._sessionLength = this.session.length
        this._sessionByteLength = this.session.byteLength
        this._sessionBatch = this.session.createTreeBatch()
      }
    }

    this._appendsActual = this.session.encryption ? [] : this._appends
    this.fork = this.session.fork
    this.opened = true
    this.emit('ready')
  }

  async has (index) {
    if (this.opened === false) await this.ready()
    if (index >= this._sessionLength) return index < this.length
    return this.session.has(index)
  }

  async update (opts) {
    if (this.opened === false) await this.ready()
    await this.session.update(opts)
  }

  treeHash () {
    return this._sessionBatch.hash()
  }

  setUserData (key, value, opts) {
    return this.session.setUserData(key, value, opts)
  }

  getUserData (key, opts) {
    return this.session.getUserData(key, opts)
  }

  async info (opts) {
    const session = this.session
    const info = await session.info(opts)

    info.length = this._sessionLength

    if (info.contiguousLength >= info.length) {
      info.contiguousLength = info.length += this._appends.length
    } else {
      info.length += this._appends.length
    }

    info.byteLength = this._sessionByteLength + this._byteLength

    return info
  }

  async seek (bytes, opts = {}) {
    if (this.opened === false) await this.opening
    if (this.closing) throw SESSION_CLOSED()

    if (bytes < this._sessionByteLength) return await this.session.seek(bytes, { ...opts, tree: this._sessionBatch })

    bytes -= this._sessionByteLength

    let i = 0

    for (const blk of this._appends) {
      if (bytes < blk.byteLength) return [this._sessionLength + i, bytes]
      i++
      bytes -= blk.byteLength
    }

    if (bytes === 0) return [this._sessionLength + i, 0]

    throw BLOCK_NOT_AVAILABLE()
  }

  async get (index, opts = {}) {
    if (this.opened === false) await this.opening
    if (this.closing) throw SESSION_CLOSED()

    const length = this._sessionLength

    if (index < length) {
      return this.session.get(index, { ...opts, tree: this._sessionBatch })
    }

    if (opts && opts.raw) {
      return this._appendsActual[index - length] || null
    }

    const buffer = this._appends[index - length] || null
    if (!buffer) throw BLOCK_NOT_AVAILABLE()

    const encoding = (opts && opts.valueEncoding && c.from(opts.valueEncoding)) || this.session.valueEncoding
    if (!encoding) return buffer

    return c.decode(encoding, buffer)
  }

  async _waitForFlush () {
    // wait for any pending flush...
    while (this._flushing) {
      await this._flushing
      await Promise.resolve() // yield in case a new flush is queued
    }
  }

  async restoreBatch (length, blocks) {
    if (this.opened === false) await this.opening
    if (length >= this._sessionLength) return this.createTreeBatch(length, blocks)
    return this.session.core.tree.restoreBatch(length)
  }

  _catchupBatch (clone) {
    if (this._cachedBatch === null) this._cachedBatch = this._sessionBatch.clone()

    if (this.length > this._cachedBatch.length) {
      const offset = this._cachedBatch.length - this._sessionBatch.length

      for (let i = offset; i < this._appendsActual.length; i++) {
        this._cachedBatch.append(this._appendsActual[i])
      }
    }

    return clone ? this._cachedBatch.clone() : this._cachedBatch
  }

  createTreeBatch (length, opts = {}) {
    if (Array.isArray(opts)) opts = { blocks: opts }

    const { blocks = [], clone = true } = opts
    if (!length && length !== 0) length = this.length + blocks.length

    const maxLength = this.length + blocks.length
    const b = this._catchupBatch(clone || (blocks.length > 0 || length !== this.length))
    const len = Math.min(length, this.length)

    if (len < this._sessionLength || length > maxLength) return null
    if (len < b.length) b.checkout(len, this._sessionBatch.roots)

    for (let i = 0; i < length - len; i++) {
      b.append(this._appendsActual === this._appends ? blocks[i] : this._encrypt(b.length, blocks[i]))
    }

    return b
  }

  async truncate (newLength = 0, opts = {}) {
    if (this.opened === false) await this.opening
    if (this.closing) throw SESSION_CLOSED()

    // wait for any pending flush... (prop needs a lock)
    await this._waitForFlush()

    if (typeof opts === 'number') opts = { fork: opts }
    const { fork = this.fork + 1, force = false } = opts

    this._cachedBatch = null

    const length = this._sessionLength
    if (newLength < length) {
      if (!force) throw new Error('Cannot truncate committed blocks')
      this._appends.length = 0
      this._byteLength = 0
      await this.session.truncate(newLength, { fork, force: true, ...opts })
      this._sessionLength = this.session.length
      this._sessionByteLength = this.session.byteLength
      this._sessionBatch = this.session.createTreeBatch()
    } else {
      for (let i = newLength - length; i < this._appends.length; i++) this._byteLength -= this._appends[i].byteLength
      this._appends.length = newLength - length
    }

    this.fork = fork

    this.emit('truncate', newLength, this.fork)
  }

  async append (blocks) {
    const session = this.session

    if (this.opened === false) await this.opening
    if (this.closing) throw SESSION_CLOSED()

    // wait for any pending flush... (prop needs a lock)
    await this._waitForFlush()

    blocks = Array.isArray(blocks) ? blocks : [blocks]

    const buffers = session.encodeBatch !== null
      ? session.encodeBatch(blocks)
      : new Array(blocks.length)

    if (session.encodeBatch === null) {
      for (let i = 0; i < blocks.length; i++) {
        const buffer = this._encode(session.valueEncoding, blocks[i])
        buffers[i] = buffer
        this._byteLength += buffer.byteLength
      }
    }
    if (this._appends !== this._appendsActual) {
      for (let i = 0; i < buffers.length; i++) {
        this._appendsActual.push(this._encrypt(this._sessionLength + this._appendsActual.length, buffers[i]))
      }
    }

    for (const b of buffers) this._appends.push(b)

    const info = { length: this.length, byteLength: this.byteLength }
    this.emit('append')

    return info
  }

  _encode (enc, val) {
    const state = { start: 0, end: 0, buffer: null }

    if (b4a.isBuffer(val)) {
      if (state.start === 0) return val
      state.end += val.byteLength
    } else if (enc) {
      enc.preencode(state, val)
    } else {
      val = b4a.from(val)
      if (state.start === 0) return val
      state.end += val.byteLength
    }

    state.buffer = b4a.allocUnsafe(state.end)

    if (enc) enc.encode(state, val)
    else state.buffer.set(val, state.start)

    return state.buffer
  }

  _encrypt (index, buffer) {
    const block = b4a.allocUnsafe(buffer.byteLength + 8)
    block.set(buffer, 8)
    this.session.encryption.encrypt(index, block, this.fork)
    return block
  }

  async flush (opts = {}) {
    if (this.opened === false) await this.opening
    if (this.closing) throw SESSION_CLOSED()

    const { length = this.length, keyPair = this.session.keyPair, signature = null, pending = !signature && !keyPair } = opts

    while (this._flushing) await this._flushing
    this._flushing = this._flush(length, keyPair, signature, pending)

    let flushed = false

    try {
      flushed = await this._flushing
    } finally {
      this._flushing = null
    }

    if (this.autoClose) await this.close()

    return flushed
  }

  async _flush (length, keyPair, signature, pending) { // TODO: make this safe to interact with a parallel truncate...
    if (this._sessionBatch.fork !== this.session.fork) return false // no truncs supported atm

    if (this.session.replicator._upgrade) {
      for (const req of this.session.replicator._upgrade.inflight) {
        // yield to the remote inflight upgrade, TODO: if the remote upgrade fails, retry flushing...
        if (req.upgrade && (req.upgrade.start + req.upgrade.length) > length) {
          return false
        }
      }
    }

    const flushingLength = Math.min(length - this._sessionLength, this._appends.length)
    if (flushingLength <= 0) {
      if (this._sessionLength > this.core.tree.length && length > this.core.tree.length && !pending) {
        const batch = await this.restoreBatch(length)
        const info = await this.core.insertBatch(batch, [], { keyPair, signature, pending, treeLength: length })
        return info !== null
      }
      return true
    }

    const batch = this.createTreeBatch(this._sessionLength + flushingLength)
    if (batch === null) return false

    const info = await this.core.insertBatch(batch, this._appendsActual, { keyPair, signature, pending, treeLength: this._sessionLength })
    if (info === null) return false

    const delta = info.byteLength - this._sessionByteLength
    const newBatch = info.length !== this.session.length ? await this.session.core.tree.restoreBatch(info.length) : this.session.createTreeBatch()

    this._sessionLength = info.length
    this._sessionByteLength = info.byteLength
    this._sessionBatch = newBatch

    if (this._cachedBatch !== null) this._cachedBatch.prune(info.length)

    const same = this._appends === this._appendsActual

    this._appends = this._appends.slice(flushingLength)
    this._appendsActual = same ? this._appends : this._appendsActual.slice(flushingLength)
    this._byteLength -= delta

    this.emit('flush')

    return true
  }

  close () {
    if (!this.closing) this.closing = this._close()
    return this.closing
  }

  async _close () {
    this._clearAppends()

    await this.session.close()

    this.closed = true
    this.emit('close')
  }

  _clearAppends () {
    this._appends = []
    this._appendsActual = []
    this._byteLength = 0
    this.fork = 0
  }
}

},{"b4a":102,"compact-encoding":178,"events":258,"hypercore-errors":306,"safety-catch":486}],312:[function(require,module,exports){
const c = require('compact-encoding')
const { oplog } = require('./messages')

module.exports = class BigHeader {
  constructor (storage) {
    this.storage = storage
  }

  async load (external) {
    const buf = await new Promise((resolve, reject) => {
      this.storage.read(external.start, external.length, (err, buf) => {
        if (err) return reject(err)
        resolve(buf)
      })
    })

    const header = c.decode(oplog.header, buf)
    header.external = external
    return header
  }

  async flush (header) {
    const external = header.external || { start: 0, length: 0 }
    header.external = null

    const buf = c.encode(oplog.header, header)

    let start = 0
    if (buf.byteLength > external.start) {
      start = external.start + external.length
      const rem = start & 4095
      if (rem > 0) start += (4096 - rem)
    }

    header.external = { start, length: buf.byteLength }

    await new Promise((resolve, reject) => {
      this.storage.write(start, buf, (err) => {
        if (err) return reject(err)
        resolve()
      })
    })

    return header
  }

  close () {
    return new Promise((resolve, reject) => {
      this.storage.close((err) => {
        if (err) return reject(err)
        resolve()
      })
    })
  }
}

},{"./messages":323,"compact-encoding":178}],313:[function(require,module,exports){
const BigSparseArray = require('big-sparse-array')
const b4a = require('b4a')
const quickbit = require('./compat').quickbit

const BITS_PER_PAGE = 32768
const BYTES_PER_PAGE = BITS_PER_PAGE / 8
const WORDS_PER_PAGE = BYTES_PER_PAGE / 4
const BITS_PER_SEGMENT = 2097152
const BYTES_PER_SEGMENT = BITS_PER_SEGMENT / 8
const WORDS_PER_SEGMENT = BYTES_PER_SEGMENT / 4
const INITIAL_WORDS_PER_SEGMENT = 1024
const PAGES_PER_SEGMENT = BITS_PER_SEGMENT / BITS_PER_PAGE
const SEGMENT_GROWTH_FACTOR = 4

class BitfieldPage {
  constructor (index, segment) {
    this.dirty = false
    this.index = index
    this.offset = index * BYTES_PER_PAGE - segment.offset
    this.bitfield = null
    this.segment = segment

    segment.add(this)
  }

  get tree () {
    return this.segment.tree
  }

  get (index) {
    return quickbit.get(this.bitfield, index)
  }

  set (index, val) {
    if (quickbit.set(this.bitfield, index, val)) {
      this.tree.update(this.offset * 8 + index)
    }
  }

  setRange (start, length, val) {
    quickbit.fill(this.bitfield, val, start, start + length)

    let i = Math.floor(start / 128)
    const n = i + Math.ceil(length / 128)

    while (i <= n) this.tree.update(this.offset * 8 + i++ * 128)
  }

  findFirst (val, position) {
    return quickbit.findFirst(this.bitfield, val, position)
  }

  findLast (val, position) {
    return quickbit.findLast(this.bitfield, val, position)
  }

  count (start, length, val) {
    const end = start + length

    let i = start
    let c = 0

    while (length > 0) {
      const l = this.findFirst(val, i)
      if (l === -1 || l >= end) return c

      const h = this.findFirst(!val, l + 1)
      if (h === -1 || h >= end) return c + end - l

      c += h - l
      length -= h - i
      i = h
    }

    return c
  }
}

class BitfieldSegment {
  constructor (index, bitfield) {
    this.index = index
    this.offset = index * BYTES_PER_SEGMENT
    this.tree = quickbit.Index.from(bitfield, BYTES_PER_SEGMENT)
    this.pages = new Array(PAGES_PER_SEGMENT)
  }

  get bitfield () {
    return this.tree.field
  }

  add (page) {
    const i = page.index - this.index * PAGES_PER_SEGMENT
    this.pages[i] = page

    const start = i * WORDS_PER_PAGE
    const end = start + WORDS_PER_PAGE

    if (end >= this.bitfield.length) this.reallocate(end)

    page.bitfield = this.bitfield.subarray(start, end)
  }

  reallocate (length) {
    let target = this.bitfield.length
    while (target < length) target *= SEGMENT_GROWTH_FACTOR

    const bitfield = new Uint32Array(target)
    bitfield.set(this.bitfield)

    this.tree = quickbit.Index.from(bitfield, BYTES_PER_SEGMENT)

    for (let i = 0; i < this.pages.length; i++) {
      const page = this.pages[i]
      if (!page) continue

      const start = i * WORDS_PER_PAGE
      const end = start + WORDS_PER_PAGE

      page.bitfield = bitfield.subarray(start, end)
    }
  }

  findFirst (val, position) {
    position = this.tree.skipFirst(!val, position)

    let j = position & (BITS_PER_PAGE - 1)
    let i = (position - j) / BITS_PER_PAGE

    if (i >= PAGES_PER_SEGMENT) return -1

    while (i < this.pages.length) {
      const p = this.pages[i]

      let index = -1

      if (p) index = p.findFirst(val, j)
      else if (!val) index = j

      if (index !== -1) return i * BITS_PER_PAGE + index

      j = 0
      i++
    }

    return -1
  }

  findLast (val, position) {
    position = this.tree.skipLast(!val, position)

    let j = position & (BITS_PER_PAGE - 1)
    let i = (position - j) / BITS_PER_PAGE

    if (i >= PAGES_PER_SEGMENT) return -1

    while (i >= 0) {
      const p = this.pages[i]

      let index = -1

      if (p) index = p.findLast(val, j)
      else if (!val) index = j

      if (index !== -1) return i * BITS_PER_PAGE + index

      j = BITS_PER_PAGE - 1
      i--
    }

    return -1
  }
}

module.exports = class Bitfield {
  constructor (storage, buffer) {
    this.unflushed = []
    this.storage = storage
    this.resumed = !!(buffer && buffer.byteLength >= 4)

    this._pages = new BigSparseArray()
    this._segments = new BigSparseArray()

    const view = this.resumed
      ? new Uint32Array(
        buffer.buffer,
        buffer.byteOffset,
        Math.floor(buffer.byteLength / 4)
      )
      : new Uint32Array(INITIAL_WORDS_PER_SEGMENT)

    for (let i = 0; i < view.length; i += WORDS_PER_SEGMENT) {
      let bitfield = view.subarray(i, i + (WORDS_PER_SEGMENT))
      let length = WORDS_PER_SEGMENT

      if (i === 0) {
        length = INITIAL_WORDS_PER_SEGMENT
        while (length < bitfield.length) length *= SEGMENT_GROWTH_FACTOR
      }

      if (bitfield.length !== length) {
        const copy = new Uint32Array(length)
        copy.set(bitfield, 0)
        bitfield = copy
      }

      const segment = new BitfieldSegment(i / (WORDS_PER_SEGMENT), bitfield)
      this._segments.set(segment.index, segment)

      for (let j = 0; j < bitfield.length; j += WORDS_PER_PAGE) {
        const page = new BitfieldPage((i + j) / WORDS_PER_PAGE, segment)
        this._pages.set(page.index, page)
      }
    }
  }

  toBuffer (length) {
    const pages = Math.ceil(length / BITS_PER_PAGE)
    const buffer = b4a.allocUnsafe(pages * BYTES_PER_PAGE)

    for (let i = 0; i < pages; i++) {
      const page = this._pages.get(i)
      const offset = i * BYTES_PER_PAGE

      if (page) {
        const buf = b4a.from(
          page.bitfield.buffer,
          page.bitfield.byteOffset,
          page.bitfield.byteLength
        )

        buffer.set(buf, offset)
      } else {
        buffer.fill(0, offset, offset + BYTES_PER_PAGE)
      }
    }

    return buffer
  }

  getBitfield (index) {
    const j = index & (BITS_PER_PAGE - 1)
    const i = (index - j) / BITS_PER_PAGE

    const p = this._pages.get(i)
    return p || null
  }

  get (index) {
    const j = index & (BITS_PER_PAGE - 1)
    const i = (index - j) / BITS_PER_PAGE

    const p = this._pages.get(i)

    return p ? p.get(j) : false
  }

  set (index, val) {
    const j = index & (BITS_PER_PAGE - 1)
    const i = (index - j) / BITS_PER_PAGE

    let p = this._pages.get(i)

    if (!p && val) {
      const k = Math.floor(i / PAGES_PER_SEGMENT)
      const s = this._segments.get(k) || this._segments.set(k, new BitfieldSegment(k, new Uint32Array(k === 0 ? INITIAL_WORDS_PER_SEGMENT : WORDS_PER_SEGMENT)))

      p = this._pages.set(i, new BitfieldPage(i, s))
    }

    if (p) {
      p.set(j, val)

      if (!p.dirty) {
        p.dirty = true
        this.unflushed.push(p)
      }
    }
  }

  setRange (start, length, val) {
    let j = start & (BITS_PER_PAGE - 1)
    let i = (start - j) / BITS_PER_PAGE

    while (length > 0) {
      let p = this._pages.get(i)

      if (!p && val) {
        const k = Math.floor(i / PAGES_PER_SEGMENT)
        const s = this._segments.get(k) || this._segments.set(k, new BitfieldSegment(k, new Uint32Array(k === 0 ? INITIAL_WORDS_PER_SEGMENT : WORDS_PER_SEGMENT)))

        p = this._pages.set(i, new BitfieldPage(i, s))
      }

      const end = Math.min(j + length, BITS_PER_PAGE)
      const range = end - j

      if (p) {
        p.setRange(j, range, val)

        if (!p.dirty) {
          p.dirty = true
          this.unflushed.push(p)
        }
      }

      j = 0
      i++
      length -= range
    }
  }

  findFirst (val, position) {
    let j = position & (BITS_PER_SEGMENT - 1)
    let i = (position - j) / BITS_PER_SEGMENT

    while (i < this._segments.maxLength) {
      const s = this._segments.get(i)

      let index = -1

      if (s) index = s.findFirst(val, j)
      else if (!val) index = j

      if (index !== -1) return i * BITS_PER_SEGMENT + index

      j = 0
      i++
    }

    return val ? -1 : this._segments.maxLength * BITS_PER_SEGMENT
  }

  firstSet (position) {
    return this.findFirst(true, position)
  }

  firstUnset (position) {
    return this.findFirst(false, position)
  }

  findLast (val, position) {
    let j = position & (BITS_PER_SEGMENT - 1)
    let i = (position - j) / BITS_PER_SEGMENT

    while (i >= 0) {
      const s = this._segments.get(i)

      let index = -1

      if (s) index = s.findLast(val, j)
      else if (!val) index = j

      if (index !== -1) return i * BITS_PER_SEGMENT + index

      j = BITS_PER_SEGMENT - 1
      i--
    }

    return -1
  }

  lastSet (position) {
    return this.findLast(true, position)
  }

  lastUnset (position) {
    return this.findLast(false, position)
  }

  count (start, length, val) {
    let j = start & (BITS_PER_PAGE - 1)
    let i = (start - j) / BITS_PER_PAGE
    let c = 0

    while (length > 0) {
      const p = this._pages.get(i)

      const end = Math.min(j + length, BITS_PER_PAGE)
      const range = end - j

      if (p) c += p.count(j, range, val)
      else if (!val) c += range

      j = 0
      i++
      length -= range
    }

    return c
  }

  countSet (start, length) {
    return this.count(start, length, true)
  }

  countUnset (start, length) {
    return this.count(start, length, false)
  }

  * want (start, length) {
    const j = start & (BITS_PER_SEGMENT - 1)
    let i = (start - j) / BITS_PER_SEGMENT

    while (length > 0) {
      const s = this._segments.get(i)

      if (s) {
        // We always send at least 4 KiB worth of bitfield in a want, rounding
        // to the nearest 4 KiB.
        const end = ceilTo(clamp(length / 8, 4096, BYTES_PER_SEGMENT), 4096)

        yield {
          start: i * BITS_PER_SEGMENT,
          bitfield: s.bitfield.subarray(0, end / 4)
        }
      }

      i++
      length -= BITS_PER_SEGMENT
    }
  }

  clear () {
    return new Promise((resolve, reject) => {
      this.storage.truncate(0, (err) => {
        if (err) return reject(err)
        this._pages = new BigSparseArray()
        this.unflushed = []
        resolve()
      })
    })
  }

  close () {
    return new Promise((resolve, reject) => {
      this.storage.close((err) => {
        if (err) reject(err)
        else resolve()
      })
    })
  }

  flush () {
    return new Promise((resolve, reject) => {
      if (!this.unflushed.length) return resolve()

      const self = this
      let missing = this.unflushed.length
      let error = null

      for (const page of this.unflushed) {
        const buf = b4a.from(
          page.bitfield.buffer,
          page.bitfield.byteOffset,
          page.bitfield.byteLength
        )

        page.dirty = false
        this.storage.write(page.index * BYTES_PER_PAGE, buf, done)
      }

      function done (err) {
        if (err) error = err
        if (--missing) return
        if (error) return reject(error)
        self.unflushed = []
        resolve()
      }
    })
  }

  static open (storage, tree = null) {
    return new Promise((resolve, reject) => {
      storage.stat((err, st) => {
        if (err) return resolve(new Bitfield(storage, null))
        let size = st.size - (st.size & 3)
        if (!size) return resolve(new Bitfield(storage, null))
        if (tree) size = Math.min(size, ceilTo(tree.length / 8, 4096))
        storage.read(0, size, (err, data) => {
          if (err) return reject(err)
          resolve(new Bitfield(storage, data))
        })
      })
    })
  }
}

function clamp (n, min, max) {
  return Math.min(Math.max(n, min), max)
}

function ceilTo (n, multiple = 1) {
  const remainder = n % multiple
  if (remainder === 0) return n
  return n + multiple - remainder
}

},{"./compat":317,"b4a":102,"big-sparse-array":106}],314:[function(require,module,exports){
const sodium = require('sodium-universal')
const c = require('compact-encoding')
const b4a = require('b4a')
const { BLOCK_ENCRYPTION } = require('./caps')

const nonce = b4a.alloc(sodium.crypto_stream_NONCEBYTES)

module.exports = class BlockEncryption {
  constructor (encryptionKey, hypercoreKey, { isBlockKey = false, compat = true } = {}) {
    const subKeys = b4a.alloc(2 * sodium.crypto_stream_KEYBYTES)

    this.key = encryptionKey
    this.blockKey = isBlockKey ? encryptionKey : subKeys.subarray(0, sodium.crypto_stream_KEYBYTES)
    this.blindingKey = subKeys.subarray(sodium.crypto_stream_KEYBYTES)
    this.padding = 8
    this.compat = compat
    this.isBlockKey = isBlockKey

    if (!isBlockKey) {
      if (compat) sodium.crypto_generichash_batch(this.blockKey, [encryptionKey], hypercoreKey)
      else sodium.crypto_generichash_batch(this.blockKey, [BLOCK_ENCRYPTION, hypercoreKey, encryptionKey])
    }

    sodium.crypto_generichash(this.blindingKey, this.blockKey)
  }

  encrypt (index, block, fork) {
    const padding = block.subarray(0, this.padding)
    block = block.subarray(this.padding)

    c.uint64.encode({ start: 0, end: 8, buffer: padding }, fork)
    c.uint64.encode({ start: 0, end: 8, buffer: nonce }, index)

    // Zero out any previous padding.
    nonce.fill(0, 8, 8 + padding.byteLength)

    // Blind the fork ID, possibly risking reusing the nonce on a reorg of the
    // Hypercore. This is fine as the blinding is best-effort and the latest
    // fork ID shared on replication anyway.
    sodium.crypto_stream_xor(
      padding,
      padding,
      nonce,
      this.blindingKey
    )

    nonce.set(padding, 8)

    // The combination of a (blinded) fork ID and a block index is unique for a
    // given Hypercore and is therefore a valid nonce for encrypting the block.
    sodium.crypto_stream_xor(
      block,
      block,
      nonce,
      this.blockKey
    )
  }

  decrypt (index, block) {
    const padding = block.subarray(0, this.padding)
    block = block.subarray(this.padding)

    c.uint64.encode({ start: 0, end: 8, buffer: nonce }, index)

    nonce.set(padding, 8)

    // Decrypt the block using the blinded fork ID.
    sodium.crypto_stream_xor(
      block,
      block,
      nonce,
      this.blockKey
    )
  }
}

},{"./caps":316,"b4a":102,"compact-encoding":178,"sodium-universal":350}],315:[function(require,module,exports){
const b4a = require('b4a')
const { WRITE_FAILED } = require('hypercore-errors')

module.exports = class BlockStore {
  constructor (storage, tree) {
    this.storage = storage
    this.tree = tree
  }

  async get (i, tree) {
    if (!tree) tree = this.tree
    const [offset, size] = await tree.byteRange(2 * i)
    return this._read(offset, size)
  }

  async put (i, data, offset) {
    return this._write(offset, data)
  }

  putBatch (i, batch, offset) {
    if (batch.length === 0) return Promise.resolve()
    return this.put(i, batch.length === 1 ? batch[0] : b4a.concat(batch), offset)
  }

  clear (offset = 0, length = -1) {
    return new Promise((resolve, reject) => {
      if (length === -1) this.storage.truncate(offset, done)
      else this.storage.del(offset, length, done)

      function done (err) {
        if (err) reject(err)
        else resolve()
      }
    })
  }

  close () {
    return new Promise((resolve, reject) => {
      this.storage.close((err) => {
        if (err) reject(err)
        else resolve()
      })
    })
  }

  _read (offset, size) {
    return new Promise((resolve, reject) => {
      this.storage.read(offset, size, (err, data) => {
        if (err) reject(err)
        else resolve(data)
      })
    })
  }

  _write (offset, data) {
    return new Promise((resolve, reject) => {
      this.storage.write(offset, data, (err) => {
        if (err) reject(WRITE_FAILED(err.message))
        else resolve(offset + data.byteLength)
      })
    })
  }
}

},{"b4a":102,"hypercore-errors":306}],316:[function(require,module,exports){
const crypto = require('hypercore-crypto')
const sodium = require('sodium-universal')
const b4a = require('b4a')
const c = require('compact-encoding')

// TODO: rename this to "crypto" and move everything hashing related etc in here
// Also lets move the tree stuff from hypercore-crypto here

const [
  TREE,
  REPLICATE_INITIATOR,
  REPLICATE_RESPONDER,
  MANIFEST,
  DEFAULT_NAMESPACE,
  BLOCK_ENCRYPTION
] = crypto.namespace('hypercore', 6)

exports.MANIFEST = MANIFEST
exports.DEFAULT_NAMESPACE = DEFAULT_NAMESPACE
exports.BLOCK_ENCRYPTION = BLOCK_ENCRYPTION

exports.replicate = function (isInitiator, key, handshakeHash) {
  const out = b4a.allocUnsafe(32)
  sodium.crypto_generichash_batch(out, [isInitiator ? REPLICATE_INITIATOR : REPLICATE_RESPONDER, key], handshakeHash)
  return out
}

exports.treeSignable = function (manifestHash, treeHash, length, fork) {
  const state = { start: 0, end: 112, buffer: b4a.allocUnsafe(112) }
  c.fixed32.encode(state, TREE)
  c.fixed32.encode(state, manifestHash)
  c.fixed32.encode(state, treeHash)
  c.uint64.encode(state, length)
  c.uint64.encode(state, fork)
  return state.buffer
}

exports.treeSignableCompat = function (hash, length, fork, noHeader) {
  const end = noHeader ? 48 : 80
  const state = { start: 0, end, buffer: b4a.allocUnsafe(end) }
  if (!noHeader) c.fixed32.encode(state, TREE) // ultra legacy mode, kill in future major
  c.fixed32.encode(state, hash)
  c.uint64.encode(state, length)
  c.uint64.encode(state, fork)
  return state.buffer
}

},{"b4a":102,"compact-encoding":178,"hypercore-crypto":305,"sodium-universal":350}],317:[function(require,module,exports){
// Export the appropriate version of `quickbit-universal` as the plain import
// may resolve to an older version in some environments
let quickbit = require('quickbit-universal')
if (
  typeof quickbit.findFirst !== 'function' ||
  typeof quickbit.findLast !== 'function' ||
  typeof quickbit.clear !== 'function'
) {
  // This should always load the fallback from the locally installed version
  quickbit = require('quickbit-universal/fallback')
}
exports.quickbit = quickbit

},{"quickbit-universal":448,"quickbit-universal/fallback":448}],318:[function(require,module,exports){
const hypercoreCrypto = require('hypercore-crypto')
const b4a = require('b4a')
const unslab = require('unslab')
const Oplog = require('./oplog')
const BigHeader = require('./big-header')
const Mutex = require('./mutex')
const MerkleTree = require('./merkle-tree')
const BlockStore = require('./block-store')
const Bitfield = require('./bitfield')
const RemoteBitfield = require('./remote-bitfield')
const Info = require('./info')
const { BAD_ARGUMENT, STORAGE_EMPTY, STORAGE_CONFLICT, INVALID_OPERATION, INVALID_SIGNATURE, INVALID_CHECKSUM } = require('hypercore-errors')
const m = require('./messages')
const Verifier = require('./verifier')
const audit = require('./audit')

module.exports = class Core {
  constructor (header, compat, crypto, oplog, bigHeader, tree, blocks, bitfield, verifier, sessions, legacy, globalCache, onupdate, onconflict) {
    this.onupdate = onupdate
    this.onconflict = onconflict
    this.preupdate = null
    this.header = header
    this.compat = compat
    this.crypto = crypto
    this.oplog = oplog
    this.bigHeader = bigHeader
    this.tree = tree
    this.blocks = blocks
    this.bitfield = bitfield
    this.verifier = verifier
    this.truncating = 0
    this.updating = false
    this.closed = false
    this.skipBitfield = null
    this.active = sessions.length
    this.sessions = sessions
    this.globalCache = globalCache

    this._manifestFlushed = !!header.manifest
    this._maxOplogSize = 65536
    this._autoFlush = 1
    this._verifies = null
    this._verifiesFlushed = null
    this._mutex = new Mutex()
    this._legacy = legacy
  }

  static async open (storage, opts = {}) {
    const oplogFile = storage('oplog')
    const treeFile = storage('tree')
    const bitfieldFile = storage('bitfield')
    const dataFile = storage('data')
    const headerFile = storage('header')

    try {
      return await this.resume(oplogFile, treeFile, bitfieldFile, dataFile, headerFile, opts)
    } catch (err) {
      await closeAll(oplogFile, treeFile, bitfieldFile, dataFile, headerFile)
      throw err
    }
  }

  static async resume (oplogFile, treeFile, bitfieldFile, dataFile, headerFile, opts) {
    let overwrite = opts.overwrite === true

    const force = opts.force === true
    const createIfMissing = opts.createIfMissing !== false
    const crypto = opts.crypto || hypercoreCrypto
    // kill this flag soon
    const legacy = !!opts.legacy

    const oplog = new Oplog(oplogFile, {
      headerEncoding: m.oplog.header,
      entryEncoding: m.oplog.entry,
      readonly: opts.readonly
    })

    // default to true for now if no manifest is provided
    let compat = opts.compat === true || (opts.compat !== false && !opts.manifest)

    let { header, entries } = await oplog.open()

    if (force && opts.key && header && !b4a.equals(header.key, opts.key)) {
      overwrite = true
    }

    const bigHeader = new BigHeader(headerFile)

    if (!header || overwrite) {
      if (!createIfMissing) {
        throw STORAGE_EMPTY('No Hypercore is stored here')
      }

      if (compat) {
        if (opts.key && opts.keyPair && !b4a.equals(opts.key, opts.keyPair.publicKey)) {
          throw BAD_ARGUMENT('Key must match publicKey when in compat mode')
        }
      }

      const keyPair = opts.keyPair || (opts.key ? null : crypto.keyPair())
      const defaultManifest = !opts.manifest && (!!opts.compat || !opts.key || !!(keyPair && b4a.equals(opts.key, keyPair.publicKey)))
      const manifest = defaultManifest ? Verifier.defaultSignerManifest(opts.key || keyPair.publicKey) : Verifier.createManifest(opts.manifest)

      header = {
        external: null,
        key: opts.key || (compat ? manifest.signers[0].publicKey : Verifier.manifestHash(manifest)),
        manifest,
        keyPair: keyPair ? { publicKey: keyPair.publicKey, secretKey: keyPair.secretKey || null } : null,
        userData: [],
        tree: {
          fork: 0,
          length: 0,
          rootHash: null,
          signature: null
        },
        hints: {
          reorgs: [],
          contiguousLength: 0
        }
      }

      await flushHeader(oplog, bigHeader, header)
    } else if (header.external) {
      header = await bigHeader.load(header.external)
    }

    // unslab the long lived buffers to avoid keeping the slab alive
    header.key = unslab(header.key)
    header.tree.rootHash = unslab(header.tree.rootHash)
    header.tree.signature = unslab(header.tree.signature)

    if (header.keyPair) {
      header.keyPair.publicKey = unslab(header.keyPair.publicKey)
      header.keyPair.secretKey = unslab(header.keyPair.secretKey)
    }

    if (opts.manifest) {
      // if we provide a manifest and no key, verify that the stored key is the same
      if (!opts.key && !Verifier.isValidManifest(header.key, Verifier.createManifest(opts.manifest))) {
        throw STORAGE_CONFLICT('Manifest does not hash to provided key')
      }

      if (!header.manifest) header.manifest = opts.manifest
    }

    if (opts.key && !b4a.equals(header.key, opts.key)) {
      throw STORAGE_CONFLICT('Another Hypercore is stored here')
    }

    // if we signalled compat, but already now this core isn't disable it
    if (compat && header.manifest && !Verifier.isCompat(header.key, header.manifest)) {
      compat = false
    } else if (!compat && header.manifest && Verifier.isCompat(header.key, header.manifest)) {
      compat = true
    }

    const prologue = header.manifest ? header.manifest.prologue : null

    const tree = await MerkleTree.open(treeFile, { crypto, prologue, ...header.tree })
    const bitfield = await Bitfield.open(bitfieldFile)
    const blocks = new BlockStore(dataFile, tree)

    if (overwrite) {
      await tree.clear()
      await blocks.clear()
      await bitfield.clear()
      entries = []
    }

    // compat from earlier version that do not store contig length
    if (header.hints.contiguousLength === 0) {
      while (bitfield.get(header.hints.contiguousLength)) header.hints.contiguousLength++
    }

    // to unslab
    if (header.manifest) header.manifest = Verifier.createManifest(header.manifest)

    const verifier = header.manifest ? new Verifier(header.key, header.manifest, { crypto, legacy }) : null

    for (const e of entries) {
      if (e.userData) {
        updateUserData(header.userData, e.userData.key, e.userData.value)
      }

      if (e.treeNodes) {
        for (const node of e.treeNodes) {
          tree.addNode(node)
        }
      }

      if (e.bitfield) {
        bitfield.setRange(e.bitfield.start, e.bitfield.length, !e.bitfield.drop)
        updateContig(header, e.bitfield, bitfield)
      }

      if (e.treeUpgrade) {
        const batch = await tree.truncate(e.treeUpgrade.length, e.treeUpgrade.fork)
        batch.ancestors = e.treeUpgrade.ancestors
        batch.signature = unslab(e.treeUpgrade.signature)
        addReorgHint(header.hints.reorgs, tree, batch)
        batch.commit()

        header.tree.length = tree.length
        header.tree.fork = tree.fork
        header.tree.rootHash = tree.hash()
        header.tree.signature = tree.signature
      }
    }

    for (const entry of header.userData) {
      entry.value = unslab(entry.value)
    }

    return new this(header, compat, crypto, oplog, bigHeader, tree, blocks, bitfield, verifier, opts.sessions || [], legacy, opts.globalCache || null, opts.onupdate || noop, opts.onconflict || noop)
  }

  async audit () {
    await this._mutex.lock()

    try {
      await this._flushOplog()
      const corrections = await audit(this)
      if (corrections.blocks || corrections.tree) await this._flushOplog()
      return corrections
    } finally {
      await this._mutex.unlock()
    }
  }

  async setManifest (manifest) {
    await this._mutex.lock()

    try {
      if (manifest && this.header.manifest === null) {
        if (!Verifier.isValidManifest(this.header.key, manifest)) throw INVALID_CHECKSUM('Manifest hash does not match')
        this._setManifest(Verifier.createManifest(manifest), null)
        await this._flushOplog()
      }
    } finally {
      this._mutex.unlock()
    }
  }

  _setManifest (manifest, keyPair) {
    if (!manifest && b4a.equals(keyPair.publicKey, this.header.key)) manifest = Verifier.defaultSignerManifest(this.header.key)
    if (!manifest) return

    const verifier = new Verifier(this.header.key, manifest, { crypto: this.crypto, legacy: this._legacy })

    if (verifier.prologue) this.tree.setPrologue(verifier.prologue)

    this.header.manifest = manifest
    this.compat = verifier.compat
    this.verifier = verifier
    this._manifestFlushed = false

    this.onupdate(0b10000, null, null, null)
  }

  _shouldFlush () {
    // TODO: make something more fancy for auto flush mode (like fibonacci etc)
    if (--this._autoFlush <= 0 || this.oplog.byteLength >= this._maxOplogSize) {
      this._autoFlush = 4
      return true
    }

    if (!this._manifestFlushed && this.header.manifest) {
      this._manifestFlushed = true
      return true
    }

    return false
  }

  async copyPrologue (src, { additional = [] } = {}) {
    await this._mutex.lock()

    try {
      await src._mutex.lock()
    } catch (err) {
      this._mutex.unlock()
      throw err
    }

    try {
      const prologue = this.header.manifest && this.header.manifest.prologue
      if (!prologue) throw INVALID_OPERATION('No prologue present')

      const srcLength = prologue.length - additional.length
      const srcBatch = srcLength !== src.tree.length ? await src.tree.truncate(srcLength) : src.tree.batch()
      const srcRoots = srcBatch.roots.slice(0)
      const srcByteLength = srcBatch.byteLength

      for (const blk of additional) srcBatch.append(blk)

      if (!b4a.equals(srcBatch.hash(), prologue.hash)) throw INVALID_OPERATION('Source tree is conflicting')

      // all hashes are correct, lets copy

      const entry = {
        userData: null,
        treeNodes: srcRoots,
        treeUpgrade: null,
        bitfield: null
      }

      if (additional.length) {
        await this.blocks.putBatch(srcLength, additional, srcByteLength)
        entry.treeNodes = entry.treeNodes.concat(srcBatch.nodes)
        entry.bitfield = {
          drop: false,
          start: srcLength,
          length: additional.length
        }
      }

      await this.oplog.append([entry], false)
      this.tree.addNodes(entry.treeNodes)

      if (this.header.tree.length < srcBatch.length) {
        this.header.tree.length = srcBatch.length
        this.header.tree.rootHash = srcBatch.hash()

        this.tree.length = srcBatch.length
        this.tree.byteLength = srcBatch.byteLength
        this.tree.roots = srcBatch.roots
        this.onupdate(0b0001, null, null, null)
      }

      if (entry.bitfield) {
        this._setBitfieldRange(entry.bitfield.start, entry.bitfield.length, true)
        this.onupdate(0, entry.bitfield, null, null)
      }

      await this._flushOplog()

      // no more additional blocks now and we should be consistant on disk
      // copy over all existing segments...

      let segmentEnd = 0

      while (segmentEnd < srcLength) {
        const segmentStart = maximumSegmentStart(segmentEnd, src.bitfield, this.bitfield)
        if (segmentStart >= srcLength || segmentStart < 0) break

        // max segment is 65536 to avoid running out of memory
        segmentEnd = Math.min(segmentStart + 65536, srcLength, minimumSegmentEnd(segmentStart, src.bitfield, this.bitfield))

        const treeNodes = await src.tree.getNeededNodes(srcLength, segmentStart, segmentEnd)
        const bitfield = {
          drop: false,
          start: segmentStart,
          length: segmentEnd - segmentStart
        }

        const segment = []
        for (let i = segmentStart; i < segmentEnd; i++) {
          const blk = await src.blocks.get(i)
          segment.push(blk)
        }

        const offset = await src.tree.byteOffset(2 * segmentStart)
        await this.blocks.putBatch(segmentStart, segment, offset)

        const entry = {
          userData: null,
          treeNodes,
          treeUpgrade: null,
          bitfield
        }

        await this.oplog.append([entry], false)
        this.tree.addNodes(treeNodes)
        this._setBitfieldRange(bitfield.start, bitfield.length, true)
        this.onupdate(0, bitfield, null, null)
        await this._flushOplog()
      }

      this.header.userData = src.header.userData.slice(0)
      const contig = Math.min(src.header.hints.contiguousLength, srcBatch.length)
      if (this.header.hints.contiguousLength < contig) this.header.hints.contiguousLength = contig

      await this._flushOplog()
    } finally {
      src._mutex.unlock()
      this._mutex.unlock()
    }
  }

  async flush () {
    await this._mutex.lock()
    try {
      this._manifestFlushed = true
      this._autoFlush = 4
      await this._flushOplog()
    } finally {
      this._mutex.unlock()
    }
  }

  async _flushOplog () {
    // TODO: the apis using this, actually do not need to wait for the bitfields, tree etc to flush
    // as their mutations are already stored in the oplog. We could potentially just run this in the
    // background. Might be easier to impl that where it is called instead and keep this one simple.
    await this.bitfield.flush()
    await this.tree.flush()

    return flushHeader(this.oplog, this.bigHeader, this.header)
  }

  _appendBlocks (values) {
    return this.blocks.putBatch(this.tree.length, values, this.tree.byteLength)
  }

  async _writeBlock (batch, index, value) {
    const byteOffset = await batch.byteOffset(index * 2)
    await this.blocks.put(index, value, byteOffset)
  }

  async userData (key, value, flush) {
    // TODO: each oplog append can set user data, so we should have a way
    // to just hitch a ride on one of the other ongoing appends?
    await this._mutex.lock()

    try {
      let empty = true

      for (const u of this.header.userData) {
        if (u.key !== key) continue
        if (value && b4a.equals(u.value, value)) return
        empty = false
        break
      }

      if (empty && !value) return

      const entry = {
        userData: { key, value },
        treeNodes: null,
        treeUpgrade: null,
        bitfield: null
      }

      await this.oplog.append([entry], false)

      updateUserData(this.header.userData, key, value)

      if (this._shouldFlush() || flush) await this._flushOplog()
    } finally {
      this._mutex.unlock()
    }
  }

  async truncate (length, fork, { signature, keyPair = this.header.keyPair } = {}) {
    if (this.tree.prologue && length < this.tree.prologue.length) {
      throw INVALID_OPERATION('Truncation breaks prologue')
    }

    this.truncating++
    await this._mutex.lock()

    // upsert compat manifest
    if (this.verifier === null && keyPair) this._setManifest(null, keyPair)

    try {
      const batch = await this.tree.truncate(length, fork)
      if (length > 0) batch.signature = signature || this.verifier.sign(batch, keyPair)
      await this._truncate(batch, null)
    } finally {
      this.truncating--
      this._mutex.unlock()
    }
  }

  async clearBatch () {
    await this._mutex.lock()

    try {
      const len = this.bitfield.findFirst(false, this.tree.length)
      if (len <= this.tree.length) return

      const batch = await this.tree.truncate(this.tree.length, this.tree.fork)

      batch.signature = this.tree.signature // same sig

      const entry = {
        userData: null,
        treeNodes: batch.nodes,
        treeUpgrade: batch,
        bitfield: {
          drop: true,
          start: batch.ancestors,
          length: len - batch.ancestors
        }
      }

      await this.oplog.append([entry], false)

      this._setBitfieldRange(batch.ancestors, len - batch.ancestors, false)
      batch.commit()

      // TODO: (see below todo)
      await this._flushOplog()
    } finally {
      this._mutex.unlock()
    }
  }

  async clear (start, end, cleared) {
    await this._mutex.lock()

    try {
      const entry = {
        userData: null,
        treeNodes: null,
        treeUpgrade: null,
        bitfield: {
          start,
          length: end - start,
          drop: true
        }
      }

      await this.oplog.append([entry], false)

      this._setBitfieldRange(start, end - start, false)

      if (start < this.header.hints.contiguousLength) {
        this.header.hints.contiguousLength = start
      }

      start = this.bitfield.lastSet(start) + 1
      end = this.bitfield.firstSet(end)

      if (end === -1) end = this.tree.length
      if (start >= end || start >= this.tree.length) return

      const offset = await this.tree.byteOffset(start * 2)
      const endOffset = await this.tree.byteOffset(end * 2)
      const length = endOffset - offset

      const before = cleared ? await Info.bytesUsed(this.blocks.storage) : null

      await this.blocks.clear(offset, length)

      const after = cleared ? await Info.bytesUsed(this.blocks.storage) : null

      if (cleared) cleared.blocks = Math.max(before - after, 0)

      this.onupdate(0, entry.bitfield, null, null)

      if (this._shouldFlush()) await this._flushOplog()
    } finally {
      this._mutex.unlock()
    }
  }

  async purge () {
    return new Promise((resolve, reject) => {
      let missing = 4
      let error = null

      this.oplog.storage.unlink(done)
      this.tree.storage.unlink(done)
      this.bitfield.storage.unlink(done)
      this.blocks.storage.unlink(done)

      function done (err) {
        if (err) error = err
        if (--missing) return
        if (error) reject(error)
        else resolve()
      }
    })
  }

  async insertBatch (batch, values, { signature, keyPair = this.header.keyPair, pending = false, treeLength = batch.treeLength } = {}) {
    await this._mutex.lock()

    try {
      // upsert compat manifest
      if (this.verifier === null && keyPair) this._setManifest(null, keyPair)

      if (this.tree.fork !== batch.fork) return null

      if (this.tree.length > batch.treeLength) {
        if (this.tree.length > batch.length) return null // TODO: partial commit in the future if possible

        for (const root of this.tree.roots) {
          const batchRoot = await batch.get(root.index)
          if (batchRoot.size !== root.size || !b4a.equals(batchRoot.hash, root.hash)) {
            return null
          }
        }
      }

      const adding = batch.length - treeLength

      batch.upgraded = !pending && batch.length > this.tree.length
      batch.treeLength = this.tree.length
      batch.ancestors = this.tree.length
      if (batch.upgraded && !pending) batch.signature = signature || this.verifier.sign(batch, keyPair)

      let byteOffset = batch.byteLength
      for (let i = 0; i < adding; i++) byteOffset -= values[i].byteLength

      if (pending === true) batch.upgraded = false

      const entry = {
        userData: null,
        treeNodes: batch.nodes,
        treeUpgrade: batch.upgraded ? batch : null,
        bitfield: {
          drop: false,
          start: treeLength,
          length: adding
        }
      }

      await this.blocks.putBatch(treeLength, adding < values.length ? values.slice(0, adding) : values, byteOffset)
      await this.oplog.append([entry], false)

      this._setBitfieldRange(entry.bitfield.start, entry.bitfield.length, true)
      batch.commit()

      if (batch.upgraded) {
        this.header.tree.length = batch.length
        this.header.tree.rootHash = batch.hash()
        this.header.tree.signature = batch.signature
      }

      const status = (batch.upgraded ? 0b0001 : 0) | updateContig(this.header, entry.bitfield, this.bitfield)
      if (!pending) {
        // we already commit this, and now we signed it, so tell others
        if (entry.treeUpgrade && treeLength > batch.treeLength) {
          entry.bitfield.start = batch.treeLength
          entry.bitfield.length = treeLength - batch.treeLength
        }

        this.onupdate(status, entry.bitfield, null, null)
      }

      if (this._shouldFlush()) await this._flushOplog()
    } finally {
      this._mutex.unlock()
    }

    return { length: batch.length, byteLength: batch.byteLength }
  }

  async append (values, { signature, keyPair = this.header.keyPair, preappend } = {}) {
    await this._mutex.lock()

    try {
      // upsert compat manifest
      if (this.verifier === null && keyPair) this._setManifest(null, keyPair)

      if (preappend) await preappend(values)

      if (!values.length) {
        return { length: this.tree.length, byteLength: this.tree.byteLength }
      }

      const batch = this.tree.batch()
      for (const val of values) batch.append(val)

      // only multisig can have prologue so signature is always present
      if (this.tree.prologue && batch.length < this.tree.prologue.length) {
        throw INVALID_OPERATION('Append is not consistent with prologue')
      }

      batch.signature = signature || this.verifier.sign(batch, keyPair)

      const entry = {
        userData: null,
        treeNodes: batch.nodes,
        treeUpgrade: batch,
        bitfield: {
          drop: false,
          start: batch.ancestors,
          length: values.length
        }
      }

      const byteLength = await this._appendBlocks(values)

      await this.oplog.append([entry], false)

      this._setBitfieldRange(batch.ancestors, batch.length - batch.ancestors, true)
      batch.commit()

      this.header.tree.length = batch.length
      this.header.tree.rootHash = batch.hash()
      this.header.tree.signature = batch.signature

      const status = 0b0001 | updateContig(this.header, entry.bitfield, this.bitfield)
      this.onupdate(status, entry.bitfield, null, null)

      if (this._shouldFlush()) await this._flushOplog()

      return { length: batch.length, byteLength }
    } finally {
      this._mutex.unlock()
    }
  }

  _verifyBatchUpgrade (batch, manifest) {
    if (!this.header.manifest) {
      if (!manifest && this.compat) manifest = Verifier.defaultSignerManifest(this.header.key)

      if (!manifest || !(Verifier.isValidManifest(this.header.key, manifest) || (this.compat && Verifier.isCompat(this.header.key, manifest)))) {
        throw INVALID_SIGNATURE('Proof contains an invalid manifest') // TODO: proper error type
      }
    }

    manifest = Verifier.createManifest(manifest) // To unslab

    const verifier = this.verifier || new Verifier(this.header.key, manifest, { crypto: this.crypto, legacy: this._legacy })

    if (!verifier.verify(batch, batch.signature)) {
      throw INVALID_SIGNATURE('Proof contains an invalid signature')
    }

    if (!this.header.manifest) {
      this.header.manifest = manifest
      this.compat = verifier.compat
      this.verifier = verifier
      this.onupdate(0b10000, null, null, null)
    }
  }

  async _verifyExclusive ({ batch, bitfield, value, manifest, from }) {
    this._verifyBatchUpgrade(batch, manifest)

    await this._mutex.lock()

    try {
      if (!batch.commitable()) return false
      this.updating = true

      const entry = {
        userData: null,
        treeNodes: batch.nodes,
        treeUpgrade: batch,
        bitfield
      }

      if (this.preupdate !== null) await this.preupdate(batch, this.header.key)
      if (bitfield) await this._writeBlock(batch, bitfield.start, value)

      await this.oplog.append([entry], false)

      let status = 0b0001

      if (bitfield) {
        this._setBitfield(bitfield.start, true)
        status |= updateContig(this.header, bitfield, this.bitfield)
      }

      batch.commit()

      this.header.tree.fork = batch.fork
      this.header.tree.length = batch.length
      this.header.tree.rootHash = batch.hash()
      this.header.tree.signature = batch.signature

      this.onupdate(status, bitfield, value, from)

      if (this._shouldFlush()) await this._flushOplog()
    } finally {
      this.updating = false
      this._mutex.unlock()
    }

    return true
  }

  async _verifyShared () {
    if (!this._verifies.length) return false

    await this._mutex.lock()

    const verifies = this._verifies
    this._verifies = null
    this._verified = null

    try {
      const entries = []

      for (const { batch, bitfield, value } of verifies) {
        if (!batch.commitable()) continue

        if (bitfield) {
          await this._writeBlock(batch, bitfield.start, value)
        }

        entries.push({
          userData: null,
          treeNodes: batch.nodes,
          treeUpgrade: null,
          bitfield
        })
      }

      await this.oplog.append(entries, false)

      for (let i = 0; i < verifies.length; i++) {
        const { batch, bitfield, value, manifest, from } = verifies[i]

        if (!batch.commitable()) {
          verifies[i] = null // signal that we cannot commit this one
          continue
        }

        let status = 0

        if (bitfield) {
          this._setBitfield(bitfield.start, true)
          status = updateContig(this.header, bitfield, this.bitfield)
        }

        // if we got a manifest AND its strictly a non compat one, lets store it
        if (manifest && this.header.manifest === null) {
          if (!Verifier.isValidManifest(this.header.key, manifest)) throw INVALID_CHECKSUM('Manifest hash does not match')
          this._setManifest(manifest, null)
        }

        batch.commit()

        this.onupdate(status, bitfield, value, from)
      }

      if (this._shouldFlush()) await this._flushOplog()
    } finally {
      this._mutex.unlock()
    }

    return verifies[0] !== null
  }

  async checkConflict (proof, from) {
    if (this.tree.length < proof.upgrade.length || proof.fork !== this.tree.fork) {
      // out of date this proof - ignore for now
      return false
    }

    const batch = this.tree.verifyFullyRemote(proof)

    try {
      this._verifyBatchUpgrade(batch, proof.manifest)
    } catch {
      return true
    }

    const remoteTreeHash = this.crypto.tree(proof.upgrade.nodes)
    const localTreeHash = this.crypto.tree(await this.tree.getRoots(proof.upgrade.length))

    if (b4a.equals(localTreeHash, remoteTreeHash)) return false

    await this.onconflict(proof)
    return true
  }

  async verifyReorg (proof) {
    const batch = await this.tree.reorg(proof)

    this._verifyBatchUpgrade(batch, proof.manifest)

    return batch
  }

  async verify (proof, from) {
    // We cannot apply "other forks" atm.
    // We should probably still try and they are likely super similar for non upgrades
    // but this is easy atm (and the above layer will just retry)
    if (proof.fork !== this.tree.fork) return false

    const batch = await this.tree.verify(proof)
    if (!batch.commitable()) return false

    const value = (proof.block && proof.block.value) || null
    const op = {
      batch,
      bitfield: value && { drop: false, start: proof.block.index, length: 1 },
      value,
      manifest: proof.manifest,
      from
    }

    if (batch.upgraded) return this._verifyExclusive(op)

    if (this._verifies !== null) {
      const verifies = this._verifies
      const i = verifies.push(op)
      await this._verified
      return verifies[i] !== null
    }

    this._verifies = [op]
    this._verified = this._verifyShared()
    return this._verified
  }

  async reorg (batch, from) {
    if (!batch.commitable()) return false

    this.truncating++
    await this._mutex.lock()

    try {
      if (!batch.commitable()) return false
      await this._truncate(batch, from)
    } finally {
      this.truncating--
      this._mutex.unlock()
    }

    return true
  }

  async _truncate (batch, from) {
    const entry = {
      userData: null,
      treeNodes: batch.nodes,
      treeUpgrade: batch,
      bitfield: {
        drop: true,
        start: batch.ancestors,
        length: this.tree.length - batch.ancestors
      }
    }

    await this.oplog.append([entry], false)

    this._setBitfieldRange(batch.ancestors, this.tree.length - batch.ancestors, false)
    addReorgHint(this.header.hints.reorgs, this.tree, batch)
    batch.commit()

    const contigStatus = updateContig(this.header, entry.bitfield, this.bitfield)
    const status = ((batch.length > batch.ancestors) ? 0b0011 : 0b0010) | contigStatus

    this.header.tree.fork = batch.fork
    this.header.tree.length = batch.length
    this.header.tree.rootHash = batch.hash()
    this.header.tree.signature = batch.signature

    this.onupdate(status, entry.bitfield, null, from)

    // TODO: there is a bug in the merkle tree atm where it cannot handle unflushed
    // truncates if we append or download anything after the truncation point later on
    // This is because tree.get checks the truncated flag. We should fix this so we can do
    // the later flush here as well
    // if (this._shouldFlush()) await this._flushOplog()
    await this._flushOplog()
  }

  openSkipBitfield () {
    if (this.skipBitfield !== null) return this.skipBitfield
    this.skipBitfield = new RemoteBitfield()
    const buf = this.bitfield.toBuffer(this.tree.length)
    const bitfield = new Uint32Array(buf.buffer, buf.byteOffset, buf.byteLength / 4)
    this.skipBitfield.insert(0, bitfield)
    return this.skipBitfield
  }

  _setBitfield (index, value) {
    this.bitfield.set(index, value)
    if (this.skipBitfield !== null) this.skipBitfield.set(index, value)
  }

  _setBitfieldRange (start, length, value) {
    this.bitfield.setRange(start, length, value)
    if (this.skipBitfield !== null) this.skipBitfield.setRange(start, length, value)
  }

  async close () {
    this.closed = true
    await this._mutex.destroy()
    await Promise.allSettled([
      this.oplog.close(),
      this.bitfield.close(),
      this.tree.close(),
      this.blocks.close(),
      this.bigHeader.close()
    ])
  }
}

function updateContig (header, upd, bitfield) {
  const end = upd.start + upd.length

  let c = header.hints.contiguousLength

  if (upd.drop) {
    // If we dropped a block in the current contig range, "downgrade" it
    if (c <= end && c > upd.start) {
      c = upd.start
    }
  } else {
    if (c <= end && c >= upd.start) {
      c = end
      while (bitfield.get(c)) c++
    }
  }

  if (c === header.hints.contiguousLength) {
    return 0b0000
  }

  if (c > header.hints.contiguousLength) {
    header.hints.contiguousLength = c
    return 0b0100
  }

  header.hints.contiguousLength = c
  return 0b1000
}

function addReorgHint (list, tree, batch) {
  if (tree.length === 0 || tree.fork === batch.fork) return

  while (list.length >= 4) list.shift() // 4 here is arbitrary, just want it to be small (hints only)
  while (list.length > 0) {
    if (list[list.length - 1].ancestors > batch.ancestors) list.pop()
    else break
  }

  list.push({ from: tree.fork, to: batch.fork, ancestors: batch.ancestors })
}

function updateUserData (list, key, value) {
  value = unslab(value)

  for (let i = 0; i < list.length; i++) {
    if (list[i].key === key) {
      if (value) list[i].value = value
      else list.splice(i, 1)
      return
    }
  }
  if (value) list.push({ key, value })
}

function closeAll (...storages) {
  let missing = 1
  let error = null

  return new Promise((resolve, reject) => {
    for (const s of storages) {
      missing++
      s.close(done)
    }

    done(null)

    function done (err) {
      if (err) error = err
      if (--missing) return
      if (error) reject(error)
      else resolve()
    }
  })
}

async function flushHeader (oplog, bigHeader, header) {
  if (header.external) {
    await bigHeader.flush(header)
  }

  try {
    await oplog.flush(header)
  } catch (err) {
    if (err.code !== 'OPLOG_HEADER_OVERFLOW') throw err
    await bigHeader.flush(header)
    await oplog.flush(header)
  }
}

function noop () {}

function maximumSegmentStart (start, src, dst) {
  while (true) {
    const a = src.firstSet(start)
    const b = dst.firstUnset(start)

    if (a === -1) return -1
    if (b === -1) return a

    // if dst has the segment, restart
    if (a < b) {
      start = b
      continue
    }

    return a
  }
}

function minimumSegmentEnd (start, src, dst) {
  const a = src.firstUnset(start)
  const b = dst.firstSet(start)

  if (a === -1) return -1
  if (b === -1) return a
  return a < b ? a : b
}

},{"./audit":310,"./big-header":312,"./bitfield":313,"./block-store":315,"./info":321,"./merkle-tree":322,"./messages":323,"./mutex":325,"./oplog":326,"./remote-bitfield":328,"./verifier":331,"b4a":102,"hypercore-crypto":305,"hypercore-errors":306,"unslab":590}],319:[function(require,module,exports){
module.exports = class Download {
  constructor (req) {
    this.req = req
  }

  async done () {
    return (await this.req).promise
  }

  /**
   * Deprecated. Use `range.done()`.
   */
  downloaded () {
    return this.done()
  }

  destroy () {
    this.req.then(req => req.context && req.context.detach(req), noop)
  }
}

function noop () {}

},{}],320:[function(require,module,exports){
const TICKS = 16

module.exports = class HotswapQueue {
  constructor () {
    this.priorities = [[], [], []]
  }

  * pick (peer) {
    for (let i = 0; i < this.priorities.length; i++) {
      // try first one more than second one etc etc
      let ticks = (this.priorities.length - i) * TICKS
      const queue = this.priorities[i]

      for (let j = 0; j < queue.length; j++) {
        const r = j + Math.floor(Math.random() * queue.length - j)
        const a = queue[j]
        const b = queue[r]

        if (r !== j) {
          queue[(b.hotswap.index = j)] = b
          queue[(a.hotswap.index = r)] = a
        }

        if (hasInflight(b, peer)) continue

        yield b

        if (--ticks <= 0) break
      }
    }
  }

  add (block) {
    if (block.hotswap !== null) this.remove(block)
    if (block.inflight.length === 0 || block.inflight.length >= 3) return

    // TODO: also use other stuff to determine queue prio
    const queue = this.priorities[block.inflight.length - 1]

    const index = queue.push(block) - 1
    block.hotswap = { ref: this, queue, index }
  }

  remove (block) {
    const hotswap = block.hotswap
    if (hotswap === null) return

    block.hotswap = null
    const head = hotswap.queue.pop()
    if (head === block) return
    hotswap.queue[(head.hotswap.index = hotswap.index)] = head
  }
}

function hasInflight (block, peer) {
  for (let j = 0; j < block.inflight.length; j++) {
    if (block.inflight[j].peer === peer) return true
  }
  return false
}

},{}],321:[function(require,module,exports){
module.exports = class Info {
  constructor (opts = {}) {
    this.key = opts.key
    this.discoveryKey = opts.discoveryKey
    this.length = opts.length || 0
    this.contiguousLength = opts.contiguousLength || 0
    this.byteLength = opts.byteLength || 0
    this.fork = opts.fork || 0
    this.padding = opts.padding || 0
    this.storage = opts.storage || null
  }

  static async from (session, opts = {}) {
    return new Info({
      key: session.key,
      discoveryKey: session.discoveryKey,
      length: session.length,
      contiguousLength: session.contiguousLength,
      byteLength: session.byteLength,
      fork: session.fork,
      padding: session.padding,
      storage: opts.storage ? await this.storage(session) : null
    })
  }

  static async storage (session) {
    const { oplog, tree, blocks, bitfield } = session.core
    try {
      return {
        oplog: await Info.bytesUsed(oplog.storage),
        tree: await Info.bytesUsed(tree.storage),
        blocks: await Info.bytesUsed(blocks.storage),
        bitfield: await Info.bytesUsed(bitfield.storage)
      }
    } catch {
      return null
    }
  }

  static bytesUsed (file) {
    return new Promise((resolve, reject) => {
      file.stat((err, st) => {
        if (err) {
          resolve(0) // prob just file not found (TODO, improve)
        } else if (typeof st.blocks !== 'number') {
          reject(new Error('cannot determine bytes used'))
        } else {
          resolve(st.blocks * 512)
        }
      })
    })
  }
}

},{}],322:[function(require,module,exports){
const flat = require('flat-tree')
const crypto = require('hypercore-crypto')
const c = require('compact-encoding')
const Xache = require('xache')
const b4a = require('b4a')
const unslab = require('unslab')
const caps = require('./caps')
const { INVALID_PROOF, INVALID_CHECKSUM, INVALID_OPERATION, BAD_ARGUMENT, ASSERTION } = require('hypercore-errors')

const BLANK_HASH = b4a.alloc(32)
const OLD_TREE = b4a.from([5, 2, 87, 2, 0, 0, 40, 7, 66, 76, 65, 75, 69, 50, 98])
const TREE_CACHE = 128 // speeds up linear scans by A LOT

class NodeQueue {
  constructor (nodes, extra = null) {
    this.i = 0
    this.nodes = nodes
    this.extra = extra
    this.length = nodes.length + (this.extra === null ? 0 : 1)
  }

  shift (index) {
    if (this.extra !== null && this.extra.index === index) {
      const node = this.extra
      this.extra = null
      this.length--
      return node
    }

    if (this.i >= this.nodes.length) {
      throw INVALID_OPERATION('Expected node ' + index + ', got (nil)')
    }

    const node = this.nodes[this.i++]
    if (node.index !== index) {
      throw INVALID_OPERATION('Expected node ' + index + ', got node ' + node.index)
    }

    this.length--
    return node
  }
}

class MerkleTreeBatch {
  constructor (tree) {
    this.fork = tree.fork
    this.roots = [...tree.roots]
    this.length = tree.length
    this.ancestors = tree.length
    this.byteLength = tree.byteLength
    this.signature = null
    this.hashCached = null

    this.treeLength = tree.length
    this.treeFork = tree.fork
    this.tree = tree
    this.nodes = []
    this.upgraded = false
  }

  checkout (length, additionalRoots) {
    const roots = []
    let r = 0

    const head = 2 * length - 2
    const gaps = new Set()
    const all = new Map()

    // additional roots is so the original roots can be passed (we mutate the array in appendRoot)
    if (additionalRoots) {
      for (const node of additionalRoots) all.set(node.index, node)
    }

    for (const node of this.nodes) all.set(node.index, node)

    for (const index of flat.fullRoots(head + 2)) {
      const left = flat.leftSpan(index)
      if (left !== 0) gaps.add(left - 1)

      if (r < this.roots.length && this.roots[r].index === index) {
        roots.push(this.roots[r++])
        continue
      }
      const node = all.get(index)
      if (!node) throw new BAD_ARGUMENT('root missing for given length')
      roots.push(node)
    }

    this.roots = roots
    this.length = length
    this.byteLength = totalSize(roots)
    this.hashCached = null
    this.signature = null

    for (let i = 0; i < this.nodes.length; i++) {
      const index = this.nodes[i].index
      if (index <= head && !gaps.has(index)) continue
      const last = this.nodes.pop()
      if (i < this.nodes.length) this.nodes[i--] = last
    }
  }

  prune (length) {
    if (length === 0) return

    const head = 2 * length - 2
    const gaps = new Set()

    // TODO: make a function for this in flat-tree
    for (const index of flat.fullRoots(head + 2)) {
      const left = flat.leftSpan(index)
      if (left !== 0) gaps.add(left - 1)
    }

    for (let i = 0; i < this.nodes.length; i++) {
      const index = this.nodes[i].index
      if (index > head || gaps.has(index)) continue
      const last = this.nodes.pop()
      if (i < this.nodes.length) this.nodes[i--] = last
    }
  }

  clone () {
    const b = new MerkleTreeBatch(this.tree)

    b.fork = this.fork
    b.roots = [...this.roots]
    b.length = this.length
    b.byteLength = this.byteLength
    b.signature = this.signature
    b.treeLength = this.treeLength
    b.treeFork = this.treeFork
    b.tree = this.tree
    b.nodes = [...this.nodes]
    b.upgraded = this.upgraded

    return b
  }

  hash () {
    if (this.hashCached === null) this.hashCached = unslab(this.tree.crypto.tree(this.roots))
    return this.hashCached
  }

  signable (manifestHash) {
    return caps.treeSignable(manifestHash, this.hash(), this.length, this.fork)
  }

  signableCompat (noHeader) {
    return caps.treeSignableCompat(this.hash(), this.length, this.fork, noHeader)
  }

  get (index, error) {
    if (index >= this.length * 2) {
      return null
    }

    for (const n of this.nodes) {
      if (n.index === index) return n
    }

    return this.tree.get(index, error)
  }

  proof ({ block, hash, seek, upgrade }) {
    return generateProof(this, block, hash, seek, upgrade)
  }

  verifyUpgrade (proof) {
    const unverified = verifyTree(proof, this.tree.crypto, this.nodes)

    if (!proof.upgrade) throw INVALID_OPERATION('Expected upgrade proof')

    return verifyUpgrade(proof, unverified, this)
  }

  append (buf) {
    const head = this.length * 2
    const ite = flat.iterator(head)
    const node = blockNode(this.tree.crypto, head, buf)

    this.appendRoot(node, ite)
  }

  appendRoot (node, ite) {
    node = unslabNode(node)
    this.hashCached = null
    this.upgraded = true
    this.length += ite.factor / 2
    this.byteLength += node.size
    this.roots.push(node)
    this.nodes.push(node)

    while (this.roots.length > 1) {
      const a = this.roots[this.roots.length - 1]
      const b = this.roots[this.roots.length - 2]

      // TODO: just have a peek sibling instead? (pretty sure it's always the left sib as well)
      if (ite.sibling() !== b.index) {
        ite.sibling() // unset so it always points to last root
        break
      }

      const node = unslabNode(parentNode(this.tree.crypto, ite.parent(), a, b))
      this.nodes.push(node)
      this.roots.pop()
      this.roots.pop()
      this.roots.push(node)
    }
  }

  commitable () {
    return this.treeFork === this.tree.fork && (
      this.upgraded
        ? this.treeLength === this.tree.length
        : this.treeLength <= this.tree.length
    )
  }

  commit () {
    if (!this.commitable()) throw INVALID_OPERATION('Tree was modified during batch, refusing to commit')

    if (this.upgraded) this._commitUpgrade()

    for (let i = 0; i < this.nodes.length; i++) {
      const node = this.nodes[i]
      this.tree.unflushed.set(node.index, node)
    }
  }

  _commitUpgrade () {
    // TODO: If easy to detect, we should refuse an trunc+append here without a fork id
    // change. Will only happen on user error so mostly to prevent that.

    if (this.ancestors < this.treeLength) {
      if (this.ancestors > 0) {
        const head = 2 * this.ancestors
        const ite = flat.iterator(head - 2)

        while (true) {
          if (ite.contains(head) && ite.index < head) {
            this.tree.unflushed.set(ite.index, blankNode(ite.index))
          }
          if (ite.offset === 0) break
          ite.parent()
        }
      }

      this.tree.truncateTo = this.tree.truncated
        ? Math.min(this.tree.truncateTo, this.ancestors)
        : this.ancestors

      this.tree.truncated = true
      this.tree.cache = new Xache({ maxSize: this.tree.cache.maxSize })
      truncateMap(this.tree.unflushed, this.ancestors)
      if (this.tree.flushing !== null) truncateMap(this.tree.flushing, this.ancestors)
    }

    this.tree.roots = this.roots
    this.tree.length = this.length
    this.tree.byteLength = this.byteLength
    this.tree.fork = this.fork
    this.tree.signature = this.signature
  }

  seek (bytes, padding) {
    return new ByteSeeker(this, bytes, padding)
  }

  byteRange (index) {
    return getByteRange(this, index)
  }

  byteOffset (index) {
    if (index === 2 * this.tree.length) return this.tree.byteLength
    return getByteOffset(this, index)
  }
}

class ReorgBatch extends MerkleTreeBatch {
  constructor (tree) {
    super(tree)
    this.roots = []
    this.length = 0
    this.byteLength = 0
    this.diff = null
    this.ancestors = 0
    // We set upgraded because reorgs are signed so hit will
    // hit the same code paths (like the treeLength check in commit)
    this.upgraded = true
    this.want = {
      nodes: 0,
      start: 0,
      end: 0
    }
  }

  get finished () {
    return this.want === null
  }

  update (proof) {
    if (this.want === null) return true

    const nodes = []
    const root = verifyTree(proof, this.tree.crypto, nodes)

    if (root === null || !b4a.equals(root.hash, this.diff.hash)) return false

    this.nodes.push(...nodes)
    return this._update(nodes)
  }

  async _update (nodes) {
    const n = new Map()
    for (const node of nodes) n.set(node.index, node)

    let diff = null
    const ite = flat.iterator(this.diff.index)
    const startingDiff = this.diff

    while ((ite.index & 1) !== 0) {
      const left = n.get(ite.leftChild())
      if (!left) break

      const existing = await this.tree.get(left.index, false)
      if (!existing || !b4a.equals(existing.hash, left.hash)) {
        diff = left
      } else {
        diff = n.get(ite.sibling())
      }
    }

    if ((this.diff.index & 1) === 0) return true
    if (diff === null) return false
    if (startingDiff !== this.diff) return false

    return this._updateDiffRoot(diff)
  }

  _updateDiffRoot (diff) {
    if (this.want === null) return true

    const spans = flat.spans(diff.index)
    const start = spans[0] / 2
    const end = Math.min(this.treeLength, spans[1] / 2 + 1)
    const len = end - start

    this.ancestors = start
    this.diff = diff

    if ((diff.index & 1) === 0 || this.want.start >= this.treeLength || len <= 0) {
      this.want = null
      return true
    }

    this.want.start = start
    this.want.end = end
    this.want.nodes = log2(spans[1] - spans[0] + 2) - 1

    return false
  }
}

class ByteSeeker {
  constructor (tree, bytes, padding = 0) {
    this.tree = tree
    this.bytes = bytes
    this.padding = padding

    const size = tree.byteLength - (tree.length * padding)

    this.start = bytes >= size ? tree.length : 0
    this.end = bytes < size ? tree.length : 0
  }

  async _seek (bytes) {
    if (!bytes) return [0, 0]

    for (const node of this.tree.roots) { // all async ticks happen once we find the root so safe
      const size = getUnpaddedSize(node, this.padding, null)

      if (bytes === size) return [flat.rightSpan(node.index) + 2, 0]
      if (bytes > size) {
        bytes -= size
        continue
      }

      const ite = flat.iterator(node.index)

      while ((ite.index & 1) !== 0) {
        const l = await this.tree.get(ite.leftChild(), false)

        if (l) {
          const size = getUnpaddedSize(l, this.padding, ite)

          if (size === bytes) return [ite.rightSpan() + 2, 0]
          if (size > bytes) continue
          bytes -= size
          ite.sibling()
        } else {
          ite.parent()
          return [ite.index, bytes]
        }
      }

      return [ite.index, bytes]
    }

    return null
  }

  async update () { // TODO: combine _seek and this, much simpler
    const res = await this._seek(this.bytes)
    if (!res) return null
    if ((res[0] & 1) === 0) return [res[0] / 2, res[1]]

    const span = flat.spans(res[0])
    this.start = span[0] / 2
    this.end = span[1] / 2 + 1

    return null
  }
}

module.exports = class MerkleTree {
  constructor (storage, roots, fork, signature, prologue) {
    this.crypto = crypto
    this.fork = fork
    this.roots = roots
    this.length = roots.length ? totalSpan(roots) / 2 : 0
    this.byteLength = totalSize(roots)
    this.signature = signature
    this.prologue = prologue

    this.storage = storage
    this.unflushed = new Map()
    this.cache = new Xache({ maxSize: TREE_CACHE })
    this.flushing = null
    this.truncated = false
    this.truncateTo = 0
  }

  addNode (node) {
    if (node.size === 0 && b4a.equals(node.hash, BLANK_HASH)) node = blankNode(node.index)
    this.unflushed.set(node.index, node)
  }

  batch () {
    return new MerkleTreeBatch(this)
  }

  async restoreBatch (length) {
    const batch = new MerkleTreeBatch(this)
    if (length === this.length) return batch

    const roots = unslabNodes(await this.getRoots(length))

    batch.roots = roots
    batch.length = length
    batch.byteLength = 0
    batch.ancestors = length

    for (const node of roots) batch.byteLength += node.size

    return batch
  }

  seek (bytes, padding) {
    return new ByteSeeker(this, bytes, padding)
  }

  hash () {
    return unslab(this.crypto.tree(this.roots))
  }

  signable (namespace) {
    return caps.treeSignable(namespace, this.hash(), this.length, this.fork)
  }

  getRoots (length) {
    const indexes = flat.fullRoots(2 * length)
    const roots = new Array(indexes.length)

    for (let i = 0; i < indexes.length; i++) {
      roots[i] = this.get(indexes[i], true)
    }

    return Promise.all(roots)
  }

  setPrologue ({ hash, length }) {
    this.prologue = { hash, length }
  }

  addNodes (nodes) {
    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i]
      this.unflushed.set(node.index, node)
    }
  }

  getNeededNodes (length, start, end) {
    const nodes = new Map()
    const head = length * 2

    for (let i = start; i < end; i++) {
      const ite = flat.iterator(i * 2)

      while (true) {
        if (nodes.has(ite.index)) break
        nodes.set(ite.index, this.get(ite.index, true))

        const sibling = ite.sibling()

        ite.parent()
        if (ite.contains(head)) break

        if (nodes.has(sibling)) break
        nodes.set(sibling, this.get(sibling, true))
      }
    }

    return Promise.all([...nodes.values()])
  }

  async upgradeable (length) {
    const indexes = flat.fullRoots(2 * length)
    const roots = new Array(indexes.length)

    for (let i = 0; i < indexes.length; i++) {
      roots[i] = this.get(indexes[i], false)
    }

    for (const node of await Promise.all(roots)) {
      if (node === null) return false
    }

    return true
  }

  blankNode (index) {
    return blankNode(index)
  }

  get (index, error = true) {
    const c = this.cache.get(index)
    if (c) return c

    let node = this.unflushed.get(index)

    if (this.flushing !== null && node === undefined) {
      node = this.flushing.get(index)
    }

    // TODO: test this
    if (this.truncated && node !== undefined && node.index >= 2 * this.truncateTo) {
      node = blankNode(index)
    }

    if (node !== undefined) {
      if (node.hash === BLANK_HASH) {
        if (error) throw INVALID_OPERATION('Could not load node: ' + index)
        return Promise.resolve(null)
      }
      return Promise.resolve(node)
    }

    return getStoredNode(this.storage, index, this.cache, error)
  }

  async flush () {
    this.flushing = this.unflushed
    this.unflushed = new Map()

    try {
      if (this.truncated) await this._flushTruncation()
      await this._flushNodes()
    } catch (err) {
      for (const node of this.flushing.values()) {
        if (!this.unflushed.has(node.index)) this.unflushed.set(node.index, node)
      }
      throw err
    } finally {
      this.flushing = null
    }
  }

  _flushTruncation () {
    return new Promise((resolve, reject) => {
      const t = this.truncateTo
      const offset = t === 0 ? 0 : (t - 1) * 80 + 40

      this.storage.truncate(offset, (err) => {
        if (err) return reject(err)

        if (this.truncateTo === t) {
          this.truncateTo = 0
          this.truncated = false
        }

        resolve()
      })
    })
  }

  _flushNodes () {
    // TODO: write neighbors together etc etc
    // TODO: bench loading a full disk page and copy to that instead
    return new Promise((resolve, reject) => {
      const slab = b4a.allocUnsafe(40 * this.flushing.size)

      let error = null
      let missing = this.flushing.size + 1
      let offset = 0

      for (const node of this.flushing.values()) {
        const state = {
          start: 0,
          end: 40,
          buffer: slab.subarray(offset, offset += 40)
        }

        c.uint64.encode(state, node.size)
        c.raw.encode(state, node.hash)

        this.storage.write(node.index * 40, state.buffer, done)
      }

      done(null)

      function done (err) {
        if (err) error = err
        if (--missing > 0) return
        if (error) reject(error)
        else resolve()
      }
    })
  }

  clear () {
    this.cache = new Xache({ maxSize: this.cache.maxSize })
    this.truncated = true
    this.truncateTo = 0
    this.roots = []
    this.length = 0
    this.byteLength = 0
    this.fork = 0
    this.signature = null
    if (this.flushing !== null) this.flushing.clear()
    this.unflushed.clear()
    return this.flush()
  }

  close () {
    return new Promise((resolve, reject) => {
      this.storage.close(err => {
        if (err) reject(err)
        else resolve()
      })
    })
  }

  async truncate (length, fork = this.fork) {
    const head = length * 2
    const batch = new MerkleTreeBatch(this)
    const fullRoots = flat.fullRoots(head)

    for (let i = 0; i < fullRoots.length; i++) {
      const root = fullRoots[i]
      if (i < batch.roots.length && batch.roots[i].index === root) continue

      while (batch.roots.length > i) batch.roots.pop()
      batch.roots.push(unslabNode(await this.get(root)))
    }

    while (batch.roots.length > fullRoots.length) {
      batch.roots.pop()
    }

    batch.fork = fork
    batch.length = length
    batch.ancestors = length
    batch.byteLength = totalSize(batch.roots)
    batch.upgraded = true

    return batch
  }

  async reorg (proof) {
    const batch = new ReorgBatch(this)

    let unverified = null

    if (proof.block || proof.hash || proof.seek) {
      unverified = verifyTree(proof, this.crypto, batch.nodes)
    }

    if (!verifyUpgrade(proof, unverified, batch)) {
      throw INVALID_PROOF('Fork proof not verifiable')
    }

    for (const root of batch.roots) {
      const existing = await this.get(root.index, false)
      if (existing && b4a.equals(existing.hash, root.hash)) continue
      batch._updateDiffRoot(root)
      break
    }

    if (batch.diff !== null) {
      await batch._update(batch.nodes)
    } else {
      batch.want = null
      batch.ancestors = batch.length
    }

    return batch
  }

  verifyFullyRemote (proof) {
    // TODO: impl this less hackishly
    const batch = new MerkleTreeBatch(this)

    batch.fork = proof.fork
    batch.roots = []
    batch.length = 0
    batch.ancestors = 0
    batch.byteLength = 0

    let unverified = verifyTree(proof, this.crypto, batch.nodes)

    if (proof.upgrade) {
      if (verifyUpgrade(proof, unverified, batch)) {
        unverified = null
      }
    }

    return batch
  }

  async verify (proof) {
    const batch = new MerkleTreeBatch(this)

    let unverified = verifyTree(proof, this.crypto, batch.nodes)

    if (proof.upgrade) {
      if (verifyUpgrade(proof, unverified, batch)) {
        unverified = null
      }
    }

    if (unverified) {
      const verified = await this.get(unverified.index)
      if (!b4a.equals(verified.hash, unverified.hash)) {
        throw INVALID_CHECKSUM('Invalid checksum at node ' + unverified.index)
      }
    }

    return batch
  }

  proof ({ block, hash, seek, upgrade }) {
    return generateProof(this, block, hash, seek, upgrade)
  }

  // Successor to .nodes()
  async missingNodes (index) {
    const head = 2 * this.length
    const ite = flat.iterator(index)

    // See iterator.rightSpan()
    const iteRightSpan = ite.index + ite.factor / 2 - 1
    // If the index is not in the current tree, we do not know how many missing nodes there are...
    if (iteRightSpan >= head) return 0

    let cnt = 0
    while (!ite.contains(head) && (await this.get(ite.index, false)) === null) {
      cnt++
      ite.parent()
    }

    return cnt
  }

  // Deprecated
  async nodes (index) {
    const head = 2 * this.length
    const ite = flat.iterator(index)

    let cnt = 0
    while (!ite.contains(head) && (await this.get(ite.index, false)) === null) {
      cnt++
      ite.parent()
    }

    return cnt
  }

  byteRange (index) {
    return getByteRange(this, index)
  }

  byteOffset (index) {
    return getByteOffset(this, index)
  }

  static async open (storage, opts = {}) {
    await new Promise((resolve, reject) => {
      storage.read(0, OLD_TREE.length, (err, buf) => {
        if (err) return resolve()
        if (b4a.equals(buf, OLD_TREE)) return reject(new Error('Storage contains an incompatible merkle tree'))
        resolve()
      })
    })

    const length = typeof opts.length === 'number'
      ? opts.length
      : await autoLength(storage)

    const roots = []
    for (const index of flat.fullRoots(2 * length)) {
      roots.push(unslabNode(await getStoredNode(storage, index, null, true)))
    }

    return new MerkleTree(storage, roots, opts.fork || 0, opts.signature || null, opts.prologue || null)
  }
}

async function getByteRange (tree, index) {
  const head = 2 * tree.length
  if (((index & 1) === 0 ? index : flat.rightSpan(index)) >= head) {
    throw BAD_ARGUMENT('Index is out of bounds')
  }
  return [await tree.byteOffset(index), (await tree.get(index)).size]
}

async function getByteOffset (tree, index) {
  if (index === 2 * tree.length) return tree.byteLength
  if ((index & 1) === 1) index = flat.leftSpan(index)

  let head = 0
  let offset = 0

  for (const node of tree.roots) { // all async ticks happen once we find the root so safe
    head += 2 * ((node.index - head) + 1)

    if (index >= head) {
      offset += node.size
      continue
    }

    const ite = flat.iterator(node.index)

    while (ite.index !== index) {
      if (index < ite.index) {
        ite.leftChild()
      } else {
        offset += (await tree.get(ite.leftChild())).size
        ite.sibling()
      }
    }

    return offset
  }

  throw ASSERTION('Failed to find offset')
}

// All the methods needed for proof verification

function verifyTree ({ block, hash, seek }, crypto, nodes) {
  const untrustedNode = block
    ? { index: 2 * block.index, value: block.value, nodes: block.nodes }
    : hash
      ? { index: hash.index, value: null, nodes: hash.nodes }
      : null

  if (untrustedNode === null && (!seek || !seek.nodes.length)) return null

  let root = null

  if (seek && seek.nodes.length) {
    const ite = flat.iterator(seek.nodes[0].index)
    const q = new NodeQueue(seek.nodes)

    root = q.shift(ite.index)
    nodes.push(root)

    while (q.length > 0) {
      const node = q.shift(ite.sibling())

      root = parentNode(crypto, ite.parent(), root, node)
      nodes.push(node)
      nodes.push(root)
    }
  }

  if (untrustedNode === null) return root

  const ite = flat.iterator(untrustedNode.index)
  const blockHash = untrustedNode.value && blockNode(crypto, ite.index, untrustedNode.value)

  const q = new NodeQueue(untrustedNode.nodes, root)

  root = blockHash || q.shift(ite.index)
  nodes.push(root)

  while (q.length > 0) {
    const node = q.shift(ite.sibling())

    root = parentNode(crypto, ite.parent(), root, node)
    nodes.push(node)
    nodes.push(root)
  }

  return root
}

function verifyUpgrade ({ fork, upgrade }, blockRoot, batch) {
  const prologue = batch.tree.prologue

  if (prologue) {
    const { start, length } = upgrade
    if (start < prologue.length && (start !== 0 || length < prologue.length)) {
      throw INVALID_PROOF('Upgrade does not satisfy prologue')
    }
  }

  const q = new NodeQueue(upgrade.nodes, blockRoot)

  let grow = batch.roots.length > 0
  let i = 0

  const to = 2 * (upgrade.start + upgrade.length)
  const ite = flat.iterator(0)

  for (; ite.fullRoot(to); ite.nextTree()) {
    if (i < batch.roots.length && batch.roots[i].index === ite.index) {
      i++
      continue
    }

    if (grow) {
      grow = false
      const root = ite.index
      if (i < batch.roots.length) {
        ite.seek(batch.roots[batch.roots.length - 1].index)
        while (ite.index !== root) {
          batch.appendRoot(q.shift(ite.sibling()), ite)
        }
        continue
      }
    }

    batch.appendRoot(q.shift(ite.index), ite)
  }

  if (prologue && batch.length === prologue.length) {
    if (!b4a.equals(prologue.hash, batch.hash())) {
      throw INVALID_PROOF('Invalid hash')
    }
  }

  const extra = upgrade.additionalNodes

  ite.seek(batch.roots[batch.roots.length - 1].index)
  i = 0

  while (i < extra.length && extra[i].index === ite.sibling()) {
    batch.appendRoot(extra[i++], ite)
  }

  while (i < extra.length) {
    const node = extra[i++]

    while (node.index !== ite.index) {
      if (ite.factor === 2) throw INVALID_OPERATION('Unexpected node: ' + node.index)
      ite.leftChild()
    }

    batch.appendRoot(node, ite)
    ite.sibling()
  }

  batch.signature = unslab(upgrade.signature)
  batch.fork = fork

  return q.extra === null
}

async function seekFromHead (tree, head, bytes, padding) {
  const roots = flat.fullRoots(head)

  for (let i = 0; i < roots.length; i++) {
    const root = roots[i]
    const node = await tree.get(root)
    const size = getUnpaddedSize(node, padding, null)

    if (bytes === size) return root
    if (bytes > size) {
      bytes -= size
      continue
    }

    return seekTrustedTree(tree, root, bytes, padding)
  }

  return head
}

// trust that bytes are within the root tree and find the block at bytes

async function seekTrustedTree (tree, root, bytes, padding) {
  if (!bytes) return root

  const ite = flat.iterator(root)

  while ((ite.index & 1) !== 0) {
    const l = await tree.get(ite.leftChild(), false)
    if (l) {
      const size = getUnpaddedSize(l, padding, ite)
      if (size === bytes) return ite.index
      if (size > bytes) continue
      bytes -= size
      ite.sibling()
    } else {
      ite.parent()
      return ite.index
    }
  }

  return ite.index
}

// try to find the block at bytes without trusting that is *is* within the root passed

async function seekUntrustedTree (tree, root, bytes, padding) {
  const offset = await tree.byteOffset(root) - (padding ? padding * flat.leftSpan(root) / 2 : 0)

  if (offset > bytes) throw INVALID_OPERATION('Invalid seek')
  if (offset === bytes) return root

  bytes -= offset

  const node = await tree.get(root)

  if (getUnpaddedSize(node, padding, null) <= bytes) throw INVALID_OPERATION('Invalid seek')

  return seekTrustedTree(tree, root, bytes, padding)
}

// Below is proof production, ie, construct proofs to verify a request
// Note, that all these methods are sync as we can statically infer which nodes
// are needed for the remote to verify given they arguments they passed us

function seekProof (tree, seekRoot, root, p) {
  const ite = flat.iterator(seekRoot)

  p.seek = []
  p.seek.push(tree.get(ite.index))

  while (ite.index !== root) {
    ite.sibling()
    p.seek.push(tree.get(ite.index))
    ite.parent()
  }
}

function blockAndSeekProof (tree, node, seek, seekRoot, root, p) {
  if (!node) return seekProof(tree, seekRoot, root, p)

  const ite = flat.iterator(node.index)

  p.node = []
  if (!node.value) p.node.push(tree.get(ite.index))

  while (ite.index !== root) {
    ite.sibling()

    if (seek && ite.contains(seekRoot) && ite.index !== seekRoot) {
      seekProof(tree, seekRoot, ite.index, p)
    } else {
      p.node.push(tree.get(ite.index))
    }

    ite.parent()
  }
}

function upgradeProof (tree, node, seek, from, to, subTree, p) {
  if (from === 0) p.upgrade = []

  for (const ite = flat.iterator(0); ite.fullRoot(to); ite.nextTree()) {
    // check if they already have the node
    if (ite.index + ite.factor / 2 < from) continue

    // connect existing tree
    if (p.upgrade === null && ite.contains(from - 2)) {
      p.upgrade = []

      const root = ite.index
      const target = from - 2

      ite.seek(target)

      while (ite.index !== root) {
        ite.sibling()
        if (ite.index > target) {
          if (p.node === null && p.seek === null && ite.contains(subTree)) {
            blockAndSeekProof(tree, node, seek, subTree, ite.index, p)
          } else {
            p.upgrade.push(tree.get(ite.index))
          }
        }
        ite.parent()
      }

      continue
    }

    if (p.upgrade === null) {
      p.upgrade = []
    }

    // if the subtree included is a child of this tree, include that one
    // instead of a dup node
    if (p.node === null && p.seek === null && ite.contains(subTree)) {
      blockAndSeekProof(tree, node, seek, subTree, ite.index, p)
      continue
    }

    // add root (can be optimised since the root might be in tree.roots)
    p.upgrade.push(tree.get(ite.index))
  }
}

function additionalUpgradeProof (tree, from, to, p) {
  if (from === 0) p.additionalUpgrade = []

  for (const ite = flat.iterator(0); ite.fullRoot(to); ite.nextTree()) {
    // check if they already have the node
    if (ite.index + ite.factor / 2 < from) continue

    // connect existing tree
    if (p.additionalUpgrade === null && ite.contains(from - 2)) {
      p.additionalUpgrade = []

      const root = ite.index
      const target = from - 2

      ite.seek(target)

      while (ite.index !== root) {
        ite.sibling()
        if (ite.index > target) {
          p.additionalUpgrade.push(tree.get(ite.index))
        }
        ite.parent()
      }

      continue
    }

    if (p.additionalUpgrade === null) {
      p.additionalUpgrade = []
    }

    // add root (can be optimised since the root is in tree.roots)
    p.additionalUpgrade.push(tree.get(ite.index))
  }
}

function nodesToRoot (index, nodes, head) {
  const ite = flat.iterator(index)

  for (let i = 0; i < nodes; i++) {
    ite.parent()
    if (ite.contains(head)) throw BAD_ARGUMENT('Nodes is out of bounds')
  }

  return ite.index
}

function totalSize (nodes) {
  let s = 0
  for (const node of nodes) s += node.size
  return s
}

function totalSpan (nodes) {
  let s = 0
  for (const node of nodes) s += 2 * ((node.index - s) + 1)
  return s
}

function blockNode (crypto, index, value) {
  return { index, size: value.byteLength, hash: crypto.data(value) }
}

function parentNode (crypto, index, a, b) {
  return { index, size: a.size + b.size, hash: crypto.parent(a, b) }
}

function blankNode (index) {
  return { index, size: 0, hash: BLANK_HASH }
}

// Storage methods

function getStoredNode (storage, index, cache, error) {
  return new Promise((resolve, reject) => {
    storage.read(40 * index, 40, (err, data) => {
      if (err) {
        if (error) return reject(err)
        else resolve(null)
        return
      }

      const hash = data.subarray(8)
      const size = c.decode(c.uint64, data)

      if (size === 0 && b4a.compare(hash, BLANK_HASH) === 0) {
        if (error) reject(new Error('Could not load node: ' + index))
        else resolve(null)
        return
      }

      const node = { index, size, hash }

      if (cache !== null) {
        // Copy hash to a new buffer to avoid blocking gc of its original slab
        node.hash = unslab(hash)
        cache.set(index, node)
      }

      resolve(node)
    })
  })
}

function storedNodes (storage) {
  return new Promise((resolve) => {
    storage.stat((_, st) => {
      if (!st) return resolve(0)
      resolve((st.size - (st.size % 40)) / 40)
    })
  })
}

async function autoLength (storage) {
  const nodes = await storedNodes(storage)
  if (!nodes) return 0
  const ite = flat.iterator(nodes - 1)
  let index = nodes - 1
  while (await getStoredNode(storage, ite.parent(), null, false)) index = ite.index
  return flat.rightSpan(index) / 2 + 1
}

function truncateMap (map, len) {
  for (const node of map.values()) {
    if (node.index >= 2 * len) map.delete(node.index)
  }
}

function log2 (n) {
  let res = 1

  while (n > 2) {
    n /= 2
    res++
  }

  return res
}

function normalizeIndexed (block, hash) {
  if (block) return { value: true, index: block.index * 2, nodes: block.nodes, lastIndex: block.index }
  if (hash) return { value: false, index: hash.index, nodes: hash.nodes, lastIndex: flat.rightSpan(hash.index) / 2 }
  return null
}

async function settleProof (p) {
  const result = [
    p.node && Promise.all(p.node),
    p.seek && Promise.all(p.seek),
    p.upgrade && Promise.all(p.upgrade),
    p.additionalUpgrade && Promise.all(p.additionalUpgrade)
  ]

  try {
    return await Promise.all(result)
  } catch (err) {
    if (p.node) await Promise.allSettled(p.node)
    if (p.seek) await Promise.allSettled(p.seek)
    if (p.upgrade) await Promise.allSettled(p.upgrade)
    if (p.additionalUpgrade) await Promise.allSettled(p.additionalUpgrade)
    throw err
  }
}

// tree can be either the merkle tree or a merkle tree batch
async function generateProof (tree, block, hash, seek, upgrade) {
  // Important that this does not throw inbetween making the promise arrays
  // and finalise being called, otherwise there will be lingering promises in the background

  if (tree.prologue && upgrade) {
    upgrade.start = upgrade.start < tree.prologue.length ? 0 : upgrade.start
    upgrade.length = upgrade.start < tree.prologue.length ? tree.prologue.length : upgrade.length
  }

  const fork = tree.fork
  const signature = tree.signature
  const head = 2 * tree.length
  const from = upgrade ? upgrade.start * 2 : 0
  const to = upgrade ? from + upgrade.length * 2 : head
  const node = normalizeIndexed(block, hash)

  const result = { fork, block: null, hash: null, seek: null, upgrade: null, manifest: null }

  // can't do anything as we have no data...
  if (head === 0) return result

  if (from >= to || to > head) {
    throw INVALID_OPERATION('Invalid upgrade')
  }
  if (seek && upgrade && node !== null && node.index >= from) {
    throw INVALID_OPERATION('Cannot both do a seek and block/hash request when upgrading')
  }

  let subTree = head

  const p = {
    node: null,
    seek: null,
    upgrade: null,
    additionalUpgrade: null
  }

  if (node !== null && (!upgrade || node.lastIndex < upgrade.start)) {
    subTree = nodesToRoot(node.index, node.nodes, to)
    const seekRoot = seek ? await seekUntrustedTree(tree, subTree, seek.bytes, seek.padding) : head
    blockAndSeekProof(tree, node, seek, seekRoot, subTree, p)
  } else if ((node || seek) && upgrade) {
    subTree = seek ? await seekFromHead(tree, to, seek.bytes, seek.padding) : node.index
  }

  if (upgrade) {
    upgradeProof(tree, node, seek, from, to, subTree, p)
    if (head > to) additionalUpgradeProof(tree, to, head, p)
  }

  const [pNode, pSeek, pUpgrade, pAdditional] = await settleProof(p)

  if (block) {
    if (pNode === null) throw INVALID_OPERATION('Invalid block request')
    result.block = {
      index: block.index,
      value: null, // populated upstream, alloc it here for simplicity
      nodes: pNode
    }
  } else if (hash) {
    if (pNode === null) throw INVALID_OPERATION('Invalid hash request')
    result.hash = {
      index: hash.index,
      nodes: pNode
    }
  }

  if (seek && pSeek !== null) {
    result.seek = {
      bytes: seek.bytes,
      nodes: pSeek
    }
  }

  if (upgrade) {
    result.upgrade = {
      start: upgrade.start,
      length: upgrade.length,
      nodes: pUpgrade,
      additionalNodes: pAdditional || [],
      signature
    }
  }

  return result
}

function getUnpaddedSize (node, padding, ite) {
  return padding === 0 ? node.size : node.size - padding * (ite ? ite.countLeaves() : flat.countLeaves(node.index))
}

function unslabNodes (nodes) {
  for (const node of nodes) unslabNode(node)
  return nodes
}

function unslabNode (node) {
  if (node === null) return node
  node.hash = unslab(node.hash)
  return node
}

},{"./caps":316,"b4a":102,"compact-encoding":178,"flat-tree":262,"hypercore-crypto":305,"hypercore-errors":306,"unslab":590,"xache":599}],323:[function(require,module,exports){
const c = require('compact-encoding')
const b4a = require('b4a')
const { DEFAULT_NAMESPACE } = require('./caps')
const { INVALID_OPLOG_VERSION } = require('hypercore-errors')
const unslab = require('unslab')

const EMPTY = b4a.alloc(0)

const hashes = {
  preencode (state, m) {
    state.end++ // small uint
  },
  encode (state, m) {
    if (m === 'blake2b') {
      c.uint.encode(state, 0)
      return
    }

    throw new Error('Unknown hash: ' + m)
  },
  decode (state) {
    const n = c.uint.decode(state)
    if (n === 0) return 'blake2b'
    throw new Error('Unknown hash id: ' + n)
  }
}

const signatures = {
  preencode (state, m) {
    state.end++ // small uint
  },
  encode (state, m) {
    if (m === 'ed25519') {
      c.uint.encode(state, 0)
      return
    }

    throw new Error('Unknown signature: ' + m)
  },
  decode (state) {
    const n = c.uint.decode(state)
    if (n === 0) return 'ed25519'
    throw new Error('Unknown signature id: ' + n)
  }
}

const signer = {
  preencode (state, m) {
    signatures.preencode(state, m.signature)
    c.fixed32.preencode(state, m.namespace)
    c.fixed32.preencode(state, m.publicKey)
  },
  encode (state, m) {
    signatures.encode(state, m.signature)
    c.fixed32.encode(state, m.namespace)
    c.fixed32.encode(state, m.publicKey)
  },
  decode (state) {
    return {
      signature: signatures.decode(state),
      namespace: c.fixed32.decode(state),
      publicKey: c.fixed32.decode(state)
    }
  }
}

const signerArray = c.array(signer)

const prologue = {
  preencode (state, p) {
    c.fixed32.preencode(state, p.hash)
    c.uint.preencode(state, p.length)
  },
  encode (state, p) {
    c.fixed32.encode(state, p.hash)
    c.uint.encode(state, p.length)
  },
  decode (state) {
    return {
      hash: c.fixed32.decode(state),
      length: c.uint.decode(state)
    }
  }
}

const manifestv0 = {
  preencode (state, m) {
    hashes.preencode(state, m.hash)
    state.end++ // type

    if (m.prologue && m.signers.length === 0) {
      c.fixed32.preencode(state, m.prologue.hash)
      return
    }

    if (m.quorum === 1 && m.signers.length === 1 && !m.allowPatch) {
      signer.preencode(state, m.signers[0])
    } else {
      state.end++ // flags
      c.uint.preencode(state, m.quorum)
      signerArray.preencode(state, m.signers)
    }
  },
  encode (state, m) {
    hashes.encode(state, m.hash)

    if (m.prologue && m.signers.length === 0) {
      c.uint.encode(state, 0)
      c.fixed32.encode(state, m.prologue.hash)
      return
    }

    if (m.quorum === 1 && m.signers.length === 1 && !m.allowPatch) {
      c.uint.encode(state, 1)
      signer.encode(state, m.signers[0])
    } else {
      c.uint.encode(state, 2)
      c.uint.encode(state, m.allowPatch ? 1 : 0)
      c.uint.encode(state, m.quorum)
      signerArray.encode(state, m.signers)
    }
  },
  decode (state) {
    const hash = hashes.decode(state)
    const type = c.uint.decode(state)

    if (type > 2) throw new Error('Unknown type: ' + type)

    if (type === 0) {
      return {
        version: 0,
        hash,
        allowPatch: false,
        quorum: 0,
        signers: [],
        prologue: {
          hash: c.fixed32.decode(state),
          length: 0
        }
      }
    }

    if (type === 1) {
      return {
        version: 0,
        hash,
        allowPatch: false,
        quorum: 1,
        signers: [signer.decode(state)],
        prologue: null
      }
    }

    const flags = c.uint.decode(state)

    return {
      version: 0,
      hash,
      allowPatch: (flags & 1) !== 0,
      quorum: c.uint.decode(state),
      signers: signerArray.decode(state),
      prologue: null
    }
  }
}

const manifest = exports.manifest = {
  preencode (state, m) {
    state.end++ // version
    if (m.version === 0) return manifestv0.preencode(state, m)

    state.end++ // flags
    hashes.preencode(state, m.hash)

    c.uint.preencode(state, m.quorum)
    signerArray.preencode(state, m.signers)
    if (m.prologue) prologue.preencode(state, m.prologue)
  },
  encode (state, m) {
    c.uint.encode(state, m.version)
    if (m.version === 0) return manifestv0.encode(state, m)

    c.uint.encode(state, (m.allowPatch ? 1 : 0) | (m.prologue ? 2 : 0))
    hashes.encode(state, m.hash)

    c.uint.encode(state, m.quorum)
    signerArray.encode(state, m.signers)
    if (m.prologue) prologue.encode(state, m.prologue)
  },
  decode (state) {
    const v = c.uint.decode(state)
    if (v === 0) return manifestv0.decode(state)
    if (v !== 1) throw new Error('Unknown version: ' + v)

    const flags = c.uint.decode(state)
    const hash = hashes.decode(state)
    const quorum = c.uint.decode(state)
    const signers = signerArray.decode(state)

    return {
      version: 1,
      hash,
      allowPatch: (flags & 1) !== 0,
      quorum,
      signers,
      prologue: (flags & 2) === 0 ? null : prologue.decode(state)
    }
  }
}

const node = {
  preencode (state, n) {
    c.uint.preencode(state, n.index)
    c.uint.preencode(state, n.size)
    c.fixed32.preencode(state, n.hash)
  },
  encode (state, n) {
    c.uint.encode(state, n.index)
    c.uint.encode(state, n.size)
    c.fixed32.encode(state, n.hash)
  },
  decode (state) {
    return {
      index: c.uint.decode(state),
      size: c.uint.decode(state),
      hash: c.fixed32.decode(state)
    }
  }
}

const nodeArray = c.array(node)

const wire = exports.wire = {}

wire.handshake = {
  preencode (state, m) {
    c.uint.preencode(state, 1)
    c.fixed32.preencode(state, m.capability)
  },
  encode (state, m) {
    c.uint.encode(state, m.seeks ? 1 : 0)
    c.fixed32.encode(state, m.capability)
  },
  decode (state) {
    const flags = c.uint.decode(state)
    return {
      seeks: (flags & 1) !== 0,
      capability: unslab(c.fixed32.decode(state))
    }
  }
}

const requestBlock = {
  preencode (state, b) {
    c.uint.preencode(state, b.index)
    c.uint.preencode(state, b.nodes)
  },
  encode (state, b) {
    c.uint.encode(state, b.index)
    c.uint.encode(state, b.nodes)
  },
  decode (state) {
    return {
      index: c.uint.decode(state),
      nodes: c.uint.decode(state)
    }
  }
}

const requestSeek = {
  preencode (state, s) {
    c.uint.preencode(state, s.bytes)
    c.uint.preencode(state, s.padding)
  },
  encode (state, s) {
    c.uint.encode(state, s.bytes)
    c.uint.encode(state, s.padding)
  },
  decode (state) {
    return {
      bytes: c.uint.decode(state),
      padding: c.uint.decode(state)
    }
  }
}

const requestUpgrade = {
  preencode (state, u) {
    c.uint.preencode(state, u.start)
    c.uint.preencode(state, u.length)
  },
  encode (state, u) {
    c.uint.encode(state, u.start)
    c.uint.encode(state, u.length)
  },
  decode (state) {
    return {
      start: c.uint.decode(state),
      length: c.uint.decode(state)
    }
  }
}

wire.request = {
  preencode (state, m) {
    state.end++ // flags
    c.uint.preencode(state, m.id)
    c.uint.preencode(state, m.fork)

    if (m.block) requestBlock.preencode(state, m.block)
    if (m.hash) requestBlock.preencode(state, m.hash)
    if (m.seek) requestSeek.preencode(state, m.seek)
    if (m.upgrade) requestUpgrade.preencode(state, m.upgrade)
    if (m.priority) c.uint.preencode(state, m.priority)
  },
  encode (state, m) {
    const flags = (m.block ? 1 : 0) | (m.hash ? 2 : 0) | (m.seek ? 4 : 0) | (m.upgrade ? 8 : 0) | (m.manifest ? 16 : 0) | (m.priority ? 32 : 0)

    c.uint.encode(state, flags)
    c.uint.encode(state, m.id)
    c.uint.encode(state, m.fork)

    if (m.block) requestBlock.encode(state, m.block)
    if (m.hash) requestBlock.encode(state, m.hash)
    if (m.seek) requestSeek.encode(state, m.seek)
    if (m.upgrade) requestUpgrade.encode(state, m.upgrade)
    if (m.priority) c.uint.encode(state, m.priority)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      id: c.uint.decode(state),
      fork: c.uint.decode(state),
      block: flags & 1 ? requestBlock.decode(state) : null,
      hash: flags & 2 ? requestBlock.decode(state) : null,
      seek: flags & 4 ? requestSeek.decode(state) : null,
      upgrade: flags & 8 ? requestUpgrade.decode(state) : null,
      manifest: (flags & 16) !== 0,
      priority: flags & 32 ? c.uint.decode(state) : 0
    }
  }
}

wire.cancel = {
  preencode (state, m) {
    c.uint.preencode(state, m.request)
  },
  encode (state, m) {
    c.uint.encode(state, m.request)
  },
  decode (state, m) {
    return {
      request: c.uint.decode(state)
    }
  }
}

const dataUpgrade = {
  preencode (state, u) {
    c.uint.preencode(state, u.start)
    c.uint.preencode(state, u.length)
    nodeArray.preencode(state, u.nodes)
    nodeArray.preencode(state, u.additionalNodes)
    c.buffer.preencode(state, u.signature)
  },
  encode (state, u) {
    c.uint.encode(state, u.start)
    c.uint.encode(state, u.length)
    nodeArray.encode(state, u.nodes)
    nodeArray.encode(state, u.additionalNodes)
    c.buffer.encode(state, u.signature)
  },
  decode (state) {
    return {
      start: c.uint.decode(state),
      length: c.uint.decode(state),
      nodes: nodeArray.decode(state),
      additionalNodes: nodeArray.decode(state),
      signature: c.buffer.decode(state)
    }
  }
}

const dataSeek = {
  preencode (state, s) {
    c.uint.preencode(state, s.bytes)
    nodeArray.preencode(state, s.nodes)
  },
  encode (state, s) {
    c.uint.encode(state, s.bytes)
    nodeArray.encode(state, s.nodes)
  },
  decode (state) {
    return {
      bytes: c.uint.decode(state),
      nodes: nodeArray.decode(state)
    }
  }
}

const dataBlock = {
  preencode (state, b) {
    c.uint.preencode(state, b.index)
    c.buffer.preencode(state, b.value)
    nodeArray.preencode(state, b.nodes)
  },
  encode (state, b) {
    c.uint.encode(state, b.index)
    c.buffer.encode(state, b.value)
    nodeArray.encode(state, b.nodes)
  },
  decode (state) {
    return {
      index: c.uint.decode(state),
      value: c.buffer.decode(state) || EMPTY,
      nodes: nodeArray.decode(state)
    }
  }
}

const dataHash = {
  preencode (state, b) {
    c.uint.preencode(state, b.index)
    nodeArray.preencode(state, b.nodes)
  },
  encode (state, b) {
    c.uint.encode(state, b.index)
    nodeArray.encode(state, b.nodes)
  },
  decode (state) {
    return {
      index: c.uint.decode(state),
      nodes: nodeArray.decode(state)
    }
  }
}

wire.data = {
  preencode (state, m) {
    state.end++ // flags
    c.uint.preencode(state, m.request)
    c.uint.preencode(state, m.fork)

    if (m.block) dataBlock.preencode(state, m.block)
    if (m.hash) dataHash.preencode(state, m.hash)
    if (m.seek) dataSeek.preencode(state, m.seek)
    if (m.upgrade) dataUpgrade.preencode(state, m.upgrade)
    if (m.manifest) manifest.preencode(state, m.manifest)
  },
  encode (state, m) {
    const flags = (m.block ? 1 : 0) | (m.hash ? 2 : 0) | (m.seek ? 4 : 0) | (m.upgrade ? 8 : 0) | (m.manifest ? 16 : 0)

    c.uint.encode(state, flags)
    c.uint.encode(state, m.request)
    c.uint.encode(state, m.fork)

    if (m.block) dataBlock.encode(state, m.block)
    if (m.hash) dataHash.encode(state, m.hash)
    if (m.seek) dataSeek.encode(state, m.seek)
    if (m.upgrade) dataUpgrade.encode(state, m.upgrade)
    if (m.manifest) manifest.encode(state, m.manifest)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      request: c.uint.decode(state),
      fork: c.uint.decode(state),
      block: flags & 1 ? dataBlock.decode(state) : null,
      hash: flags & 2 ? dataHash.decode(state) : null,
      seek: flags & 4 ? dataSeek.decode(state) : null,
      upgrade: flags & 8 ? dataUpgrade.decode(state) : null,
      manifest: flags & 16 ? manifest.decode(state) : null
    }
  }
}

wire.noData = {
  preencode (state, m) {
    c.uint.preencode(state, m.request)
  },
  encode (state, m) {
    c.uint.encode(state, m.request)
  },
  decode (state, m) {
    return {
      request: c.uint.decode(state)
    }
  }
}

wire.want = {
  preencode (state, m) {
    c.uint.preencode(state, m.start)
    c.uint.preencode(state, m.length)
  },
  encode (state, m) {
    c.uint.encode(state, m.start)
    c.uint.encode(state, m.length)
  },
  decode (state) {
    return {
      start: c.uint.decode(state),
      length: c.uint.decode(state)
    }
  }
}

wire.unwant = {
  preencode (state, m) {
    c.uint.preencode(state, m.start)
    c.uint.preencode(state, m.length)
  },
  encode (state, m) {
    c.uint.encode(state, m.start)
    c.uint.encode(state, m.length)
  },
  decode (state, m) {
    return {
      start: c.uint.decode(state),
      length: c.uint.decode(state)
    }
  }
}

wire.range = {
  preencode (state, m) {
    state.end++ // flags
    c.uint.preencode(state, m.start)
    if (m.length !== 1) c.uint.preencode(state, m.length)
  },
  encode (state, m) {
    c.uint.encode(state, (m.drop ? 1 : 0) | (m.length === 1 ? 2 : 0))
    c.uint.encode(state, m.start)
    if (m.length !== 1) c.uint.encode(state, m.length)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      drop: (flags & 1) !== 0,
      start: c.uint.decode(state),
      length: (flags & 2) !== 0 ? 1 : c.uint.decode(state)
    }
  }
}

wire.bitfield = {
  preencode (state, m) {
    c.uint.preencode(state, m.start)
    c.uint32array.preencode(state, m.bitfield)
  },
  encode (state, m) {
    c.uint.encode(state, m.start)
    c.uint32array.encode(state, m.bitfield)
  },
  decode (state, m) {
    return {
      start: c.uint.decode(state),
      bitfield: c.uint32array.decode(state)
    }
  }
}

wire.sync = {
  preencode (state, m) {
    state.end++ // flags
    c.uint.preencode(state, m.fork)
    c.uint.preencode(state, m.length)
    c.uint.preencode(state, m.remoteLength)
  },
  encode (state, m) {
    c.uint.encode(state, (m.canUpgrade ? 1 : 0) | (m.uploading ? 2 : 0) | (m.downloading ? 4 : 0) | (m.hasManifest ? 8 : 0))
    c.uint.encode(state, m.fork)
    c.uint.encode(state, m.length)
    c.uint.encode(state, m.remoteLength)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      fork: c.uint.decode(state),
      length: c.uint.decode(state),
      remoteLength: c.uint.decode(state),
      canUpgrade: (flags & 1) !== 0,
      uploading: (flags & 2) !== 0,
      downloading: (flags & 4) !== 0,
      hasManifest: (flags & 8) !== 0
    }
  }
}

wire.reorgHint = {
  preencode (state, m) {
    c.uint.preencode(state, m.from)
    c.uint.preencode(state, m.to)
    c.uint.preencode(state, m.ancestors)
  },
  encode (state, m) {
    c.uint.encode(state, m.from)
    c.uint.encode(state, m.to)
    c.uint.encode(state, m.ancestors)
  },
  decode (state) {
    return {
      from: c.uint.encode(state),
      to: c.uint.encode(state),
      ancestors: c.uint.encode(state)
    }
  }
}

wire.extension = {
  preencode (state, m) {
    c.string.preencode(state, m.name)
    c.raw.preencode(state, m.message)
  },
  encode (state, m) {
    c.string.encode(state, m.name)
    c.raw.encode(state, m.message)
  },
  decode (state) {
    return {
      name: c.string.decode(state),
      message: c.raw.decode(state)
    }
  }
}

const keyValue = {
  preencode (state, p) {
    c.string.preencode(state, p.key)
    c.buffer.preencode(state, p.value)
  },
  encode (state, p) {
    c.string.encode(state, p.key)
    c.buffer.encode(state, p.value)
  },
  decode (state) {
    return {
      key: c.string.decode(state),
      value: c.buffer.decode(state)
    }
  }
}

const treeUpgrade = {
  preencode (state, u) {
    c.uint.preencode(state, u.fork)
    c.uint.preencode(state, u.ancestors)
    c.uint.preencode(state, u.length)
    c.buffer.preencode(state, u.signature)
  },
  encode (state, u) {
    c.uint.encode(state, u.fork)
    c.uint.encode(state, u.ancestors)
    c.uint.encode(state, u.length)
    c.buffer.encode(state, u.signature)
  },
  decode (state) {
    return {
      fork: c.uint.decode(state),
      ancestors: c.uint.decode(state),
      length: c.uint.decode(state),
      signature: c.buffer.decode(state)
    }
  }
}

const bitfieldUpdate = { // TODO: can maybe be folded into a HAVE later on with the most recent spec
  preencode (state, b) {
    state.end++ // flags
    c.uint.preencode(state, b.start)
    c.uint.preencode(state, b.length)
  },
  encode (state, b) {
    state.buffer[state.start++] = b.drop ? 1 : 0
    c.uint.encode(state, b.start)
    c.uint.encode(state, b.length)
  },
  decode (state) {
    const flags = c.uint.decode(state)
    return {
      drop: (flags & 1) !== 0,
      start: c.uint.decode(state),
      length: c.uint.decode(state)
    }
  }
}

const oplog = exports.oplog = {}

oplog.entry = {
  preencode (state, m) {
    state.end++ // flags
    if (m.userData) keyValue.preencode(state, m.userData)
    if (m.treeNodes) nodeArray.preencode(state, m.treeNodes)
    if (m.treeUpgrade) treeUpgrade.preencode(state, m.treeUpgrade)
    if (m.bitfield) bitfieldUpdate.preencode(state, m.bitfield)
  },
  encode (state, m) {
    const s = state.start++
    let flags = 0

    if (m.userData) {
      flags |= 1
      keyValue.encode(state, m.userData)
    }
    if (m.treeNodes) {
      flags |= 2
      nodeArray.encode(state, m.treeNodes)
    }
    if (m.treeUpgrade) {
      flags |= 4
      treeUpgrade.encode(state, m.treeUpgrade)
    }
    if (m.bitfield) {
      flags |= 8
      bitfieldUpdate.encode(state, m.bitfield)
    }

    state.buffer[s] = flags
  },
  decode (state) {
    const flags = c.uint.decode(state)
    return {
      userData: (flags & 1) !== 0 ? keyValue.decode(state) : null,
      treeNodes: (flags & 2) !== 0 ? nodeArray.decode(state) : null,
      treeUpgrade: (flags & 4) !== 0 ? treeUpgrade.decode(state) : null,
      bitfield: (flags & 8) !== 0 ? bitfieldUpdate.decode(state) : null
    }
  }
}

const keyPair = {
  preencode (state, kp) {
    c.buffer.preencode(state, kp.publicKey)
    c.buffer.preencode(state, kp.secretKey)
  },
  encode (state, kp) {
    c.buffer.encode(state, kp.publicKey)
    c.buffer.encode(state, kp.secretKey)
  },
  decode (state) {
    return {
      publicKey: c.buffer.decode(state),
      secretKey: c.buffer.decode(state)
    }
  }
}

const reorgHint = {
  preencode (state, r) {
    c.uint.preencode(state, r.from)
    c.uint.preencode(state, r.to)
    c.uint.preencode(state, r.ancestors)
  },
  encode (state, r) {
    c.uint.encode(state, r.from)
    c.uint.encode(state, r.to)
    c.uint.encode(state, r.ancestors)
  },
  decode (state) {
    return {
      from: c.uint.decode(state),
      to: c.uint.decode(state),
      ancestors: c.uint.decode(state)
    }
  }
}

const reorgHintArray = c.array(reorgHint)

const hints = {
  preencode (state, h) {
    reorgHintArray.preencode(state, h.reorgs)
    c.uint.preencode(state, h.contiguousLength)
  },
  encode (state, h) {
    reorgHintArray.encode(state, h.reorgs)
    c.uint.encode(state, h.contiguousLength)
  },
  decode (state) {
    return {
      reorgs: reorgHintArray.decode(state),
      contiguousLength: state.start < state.end ? c.uint.decode(state) : 0
    }
  }
}

const treeHeader = {
  preencode (state, t) {
    c.uint.preencode(state, t.fork)
    c.uint.preencode(state, t.length)
    c.buffer.preencode(state, t.rootHash)
    c.buffer.preencode(state, t.signature)
  },
  encode (state, t) {
    c.uint.encode(state, t.fork)
    c.uint.encode(state, t.length)
    c.buffer.encode(state, t.rootHash)
    c.buffer.encode(state, t.signature)
  },
  decode (state) {
    return {
      fork: c.uint.decode(state),
      length: c.uint.decode(state),
      rootHash: c.buffer.decode(state),
      signature: c.buffer.decode(state)
    }
  }
}

const types = {
  preencode (state, t) {
    c.string.preencode(state, t.tree)
    c.string.preencode(state, t.bitfield)
    c.string.preencode(state, t.signer)
  },
  encode (state, t) {
    c.string.encode(state, t.tree)
    c.string.encode(state, t.bitfield)
    c.string.encode(state, t.signer)
  },
  decode (state) {
    return {
      tree: c.string.decode(state),
      bitfield: c.string.decode(state),
      signer: c.string.decode(state)
    }
  }
}

const externalHeader = {
  preencode (state, m) {
    c.uint.preencode(state, m.start)
    c.uint.preencode(state, m.length)
  },
  encode (state, m) {
    c.uint.encode(state, m.start)
    c.uint.encode(state, m.length)
  },
  decode (state) {
    return {
      start: c.uint.decode(state),
      length: c.uint.decode(state)
    }
  }
}

const keyValueArray = c.array(keyValue)

oplog.header = {
  preencode (state, h) {
    state.end += 2 // version + flags
    if (h.external) {
      externalHeader.preencode(state, h.external)
      return
    }
    c.fixed32.preencode(state, h.key)
    if (h.manifest) manifest.preencode(state, h.manifest)
    if (h.keyPair) keyPair.preencode(state, h.keyPair)
    keyValueArray.preencode(state, h.userData)
    treeHeader.preencode(state, h.tree)
    hints.preencode(state, h.hints)
  },
  encode (state, h) {
    c.uint.encode(state, 1)
    if (h.external) {
      c.uint.encode(state, 1) // ONLY set the first big for clarity
      externalHeader.encode(state, h.external)
      return
    }
    c.uint.encode(state, (h.manifest ? 2 : 0) | (h.keyPair ? 4 : 0))
    c.fixed32.encode(state, h.key)
    if (h.manifest) manifest.encode(state, h.manifest)
    if (h.keyPair) keyPair.encode(state, h.keyPair)
    keyValueArray.encode(state, h.userData)
    treeHeader.encode(state, h.tree)
    hints.encode(state, h.hints)
  },
  decode (state) {
    const version = c.uint.decode(state)

    if (version > 1) {
      throw INVALID_OPLOG_VERSION('Invalid header version. Expected <= 1, got ' + version)
    }

    if (version === 0) {
      const old = {
        types: types.decode(state),
        userData: keyValueArray.decode(state),
        tree: treeHeader.decode(state),
        signer: keyPair.decode(state),
        hints: hints.decode(state)
      }

      return {
        external: null,
        key: old.signer.publicKey,
        manifest: {
          version: 0,
          hash: old.types.tree,
          allowPatch: false,
          quorum: 1,
          signers: [{
            signature: old.types.signer,
            namespace: DEFAULT_NAMESPACE,
            publicKey: old.signer.publicKey
          }],
          prologue: null
        },
        keyPair: old.signer.secretKey ? old.signer : null,
        userData: old.userData,
        tree: old.tree,
        hints: old.hints
      }
    }

    const flags = c.uint.decode(state)

    if (flags & 1) {
      return {
        external: externalHeader.decode(state),
        key: null,
        manifest: null,
        keyPair: null,
        userData: null,
        tree: null,
        hints: null
      }
    }

    return {
      external: null,
      key: c.fixed32.decode(state),
      manifest: (flags & 2) !== 0 ? manifest.decode(state) : null,
      keyPair: (flags & 4) !== 0 ? keyPair.decode(state) : null,
      userData: keyValueArray.decode(state),
      tree: treeHeader.decode(state),
      hints: hints.decode(state)
    }
  }
}

const uintArray = c.array(c.uint)

const multisigInput = {
  preencode (state, inp) {
    c.uint.preencode(state, inp.signer)
    c.fixed64.preencode(state, inp.signature)
    c.uint.preencode(state, inp.patch)
  },
  encode (state, inp) {
    c.uint.encode(state, inp.signer)
    c.fixed64.encode(state, inp.signature)
    c.uint.encode(state, inp.patch)
  },
  decode (state) {
    return {
      signer: c.uint.decode(state),
      signature: c.fixed64.decode(state),
      patch: c.uint.decode(state)
    }
  }
}

const patchEncodingv0 = {
  preencode (state, n) {
    c.uint.preencode(state, n.start)
    c.uint.preencode(state, n.length)
    uintArray.preencode(state, n.nodes)
  },
  encode (state, n) {
    c.uint.encode(state, n.start)
    c.uint.encode(state, n.length)
    uintArray.encode(state, n.nodes)
  },
  decode (state) {
    return {
      start: c.uint.decode(state),
      length: c.uint.decode(state),
      nodes: uintArray.decode(state)
    }
  }
}

const multisigInputv0 = {
  preencode (state, n) {
    state.end++
    c.uint.preencode(state, n.signer)
    c.fixed64.preencode(state, n.signature)
    if (n.patch) patchEncodingv0.preencode(state, n.patch)
  },
  encode (state, n) {
    c.uint.encode(state, n.patch ? 1 : 0)
    c.uint.encode(state, n.signer)
    c.fixed64.encode(state, n.signature)
    if (n.patch) patchEncodingv0.encode(state, n.patch)
  },
  decode (state) {
    const flags = c.uint.decode(state)
    return {
      signer: c.uint.decode(state),
      signature: c.fixed64.decode(state),
      patch: (flags & 1) ? patchEncodingv0.decode(state) : null
    }
  }
}

const multisigInputArrayv0 = c.array(multisigInputv0)
const multisigInputArray = c.array(multisigInput)

const compactNode = {
  preencode (state, n) {
    c.uint.preencode(state, n.index)
    c.uint.preencode(state, n.size)
    c.fixed32.preencode(state, n.hash)
  },
  encode (state, n) {
    c.uint.encode(state, n.index)
    c.uint.encode(state, n.size)
    c.fixed32.encode(state, n.hash)
  },
  decode (state) {
    return {
      index: c.uint.decode(state),
      size: c.uint.decode(state),
      hash: c.fixed32.decode(state)
    }
  }
}

const compactNodeArray = c.array(compactNode)

exports.multiSignaturev0 = {
  preencode (state, s) {
    multisigInputArrayv0.preencode(state, s.proofs)
    compactNodeArray.preencode(state, s.patch)
  },
  encode (state, s) {
    multisigInputArrayv0.encode(state, s.proofs)
    compactNodeArray.encode(state, s.patch)
  },
  decode (state) {
    return {
      proofs: multisigInputArrayv0.decode(state),
      patch: compactNodeArray.decode(state)
    }
  }
}

exports.multiSignature = {
  preencode (state, s) {
    multisigInputArray.preencode(state, s.proofs)
    compactNodeArray.preencode(state, s.patch)
  },
  encode (state, s) {
    multisigInputArray.encode(state, s.proofs)
    compactNodeArray.encode(state, s.patch)
  },
  decode (state) {
    return {
      proofs: multisigInputArray.decode(state),
      patch: compactNodeArray.decode(state)
    }
  }
}

},{"./caps":316,"b4a":102,"compact-encoding":178,"hypercore-errors":306,"unslab":590}],324:[function(require,module,exports){
const c = require('compact-encoding')
const b4a = require('b4a')
const flat = require('flat-tree')
const { multiSignature, multiSignaturev0 } = require('./messages')

module.exports = {
  assemblev0,
  assemble,
  inflatev0,
  inflate,
  partialSignature,
  signableLength
}

function inflatev0 (data) {
  return c.decode(multiSignaturev0, data)
}

function inflate (data) {
  return c.decode(multiSignature, data)
}

async function partialSignature (tree, signer, from, to = tree.length, signature = tree.signature) {
  if (from > tree.length) return null
  const nodes = to <= from ? null : await upgradeNodes(tree, from, to)

  if (signature.byteLength !== 64) signature = c.decode(multiSignature, signature).proofs[0].signature

  return {
    signer,
    signature,
    patch: nodes ? to - from : 0,
    nodes
  }
}

async function upgradeNodes (tree, from, to) {
  const p = await tree.proof({ upgrade: { start: from, length: to - from } })
  return p.upgrade.nodes
}

function signableLength (lengths, quorum) {
  if (quorum <= 0) quorum = 1
  if (quorum > lengths.length) return 0

  return lengths.sort(cmp)[quorum - 1]
}

function cmp (a, b) {
  return b - a
}

function assemblev0 (inputs) {
  const proofs = []
  const patch = []

  for (const u of inputs) {
    proofs.push(compressProof(u, patch))
  }

  return c.encode(multiSignaturev0, { proofs, patch })
}

function assemble (inputs) {
  const proofs = []
  const patch = []
  const seen = new Set()

  for (const u of inputs) {
    if (u.nodes) {
      for (const node of u.nodes) {
        if (seen.has(node.index)) continue
        seen.add(node.index)
        patch.push(node)
      }
    }

    proofs.push({
      signer: u.signer,
      signature: u.signature,
      patch: u.patch
    })
  }

  return c.encode(multiSignature, { proofs, patch })
}

function compareNode (a, b) {
  if (a.index !== b.index) return false
  if (a.size !== b.size) return false
  return b4a.equals(a.hash, b.hash)
}

function compressProof (proof, nodes) {
  return {
    signer: proof.signer,
    signature: proof.signature,
    patch: proof.patch ? compressUpgrade(proof, nodes) : null
  }
}

function compressUpgrade (p, nodes) {
  const u = {
    start: flat.rightSpan(p.nodes[p.nodes.length - 1].index) / 2 + 1,
    length: p.patch,
    nodes: []
  }

  for (const node of p.nodes) {
    let present = false
    for (let i = 0; i < nodes.length; i++) {
      if (!compareNode(nodes[i], node)) continue

      u.nodes.push(i)
      present = true
      break
    }

    if (present) continue
    u.nodes.push(nodes.push(node) - 1)
  }

  return u
}

},{"./messages":323,"b4a":102,"compact-encoding":178,"flat-tree":262}],325:[function(require,module,exports){
module.exports = class Mutex {
  constructor () {
    this.locked = false
    this.destroyed = false

    this._destroying = null
    this._destroyError = null
    this._queue = []
    this._enqueue = (resolve, reject) => this._queue.push([resolve, reject])
  }

  lock () {
    if (this.destroyed) return Promise.reject(this._destroyError || new Error('Mutex has been destroyed'))
    if (this.locked) return new Promise(this._enqueue)
    this.locked = true
    return Promise.resolve()
  }

  unlock () {
    if (!this._queue.length) {
      this.locked = false
      return
    }
    this._queue.shift()[0]()
  }

  destroy (err) {
    if (!this._destroying) this._destroying = this.locked ? this.lock().catch(() => {}) : Promise.resolve()

    this.destroyed = true
    if (err) this._destroyError = err

    if (err) {
      while (this._queue.length) this._queue.shift()[1](err)
    }

    return this._destroying
  }
}

},{}],326:[function(require,module,exports){
const cenc = require('compact-encoding')
const b4a = require('b4a')
const { crc32 } = require('crc-universal')
const { OPLOG_CORRUPT, OPLOG_HEADER_OVERFLOW, WRITE_FAILED } = require('hypercore-errors')

module.exports = class Oplog {
  constructor (storage, { pageSize = 4096, headerEncoding = cenc.raw, entryEncoding = cenc.raw, readonly = false } = {}) {
    this.storage = storage
    this.headerEncoding = headerEncoding
    this.entryEncoding = entryEncoding
    this.readonly = readonly
    this.flushed = false
    this.byteLength = 0
    this.length = 0

    this._headers = [1, 0]
    this._pageSize = pageSize
    this._entryOffset = pageSize * 2
    
    // Browser compatibility: virtual truncation system
    this._virtualSize = null // Track virtual file size for truncation
    this._truncatedRanges = [] // Track ranges that have been "truncated"
    this._isBrowser = typeof window !== 'undefined'
  }

  _addHeader (state, len, headerBit, partialBit) {
    // add the uint header (frame length and flush info)
    state.start = state.start - len - 4
    cenc.uint32.encode(state, (len << 2) | headerBit | partialBit)

    // crc32 the length + header-bit + content and prefix it
    state.start -= 8
    cenc.uint32.encode(state, crc32(state.buffer.subarray(state.start + 4, state.start + 8 + len)))
    state.start += len + 4
  }

  _decodeEntry (state, enc) {
    if (state.end - state.start < 8) return null
    const cksum = cenc.uint32.decode(state)
    const l = cenc.uint32.decode(state)
    const length = l >>> 2
    const headerBit = l & 1
    const partialBit = l & 2

    if (state.end - state.start < length) return null

    const end = state.start + length

    if (crc32(state.buffer.subarray(state.start - 4, end)) !== cksum) {
      return null
    }

    const result = { header: headerBit, partial: partialBit !== 0, byteLength: length + 8, message: null }

    try {
      result.message = enc.decode({ start: state.start, end, buffer: state.buffer })
    } catch {
      return null
    }

    state.start = end

    return result
  }

  // Browser-compatible truncation implementation
  _truncate(size) {
    return new Promise((resolve, reject) => {
      if (this.readonly) return resolve()
      
      // If native truncate is available, use it
      if (this.storage.truncate && typeof this.storage.truncate === 'function') {
        return this.storage.truncate(size, err => {
          if (err) return reject(err)
          this._virtualSize = null
          this._truncatedRanges = []
          resolve()
        })
      }
      
      // Browser fallback: implement virtual truncation
      this._virtualSize = size
      
      // If we need to shrink the file, we'll handle it by tracking what's been truncated
      // This requires rewriting the storage operations to respect the virtual size
      this._rebuildStorageAfterTruncate(size).then(resolve).catch(reject)
    })
  }

  async _rebuildStorageAfterTruncate(newSize) {
    try {
      // Read the current content up to the truncation point
      const currentData = await this._readAll()
      
      if (currentData.byteLength <= newSize) {
        // No actual truncation needed
        this._virtualSize = newSize
        return
      }
      
      // Create new truncated buffer
      const truncatedData = currentData.subarray(0, newSize)
      
      // For browsers, we need to completely rewrite the storage
      // This assumes the storage has a way to be completely overwritten
      await this._overwriteStorage(truncatedData)
      
      this._virtualSize = newSize
    } catch (err) {
      throw err
    }
  }

  _overwriteStorage(newData) {
    return new Promise((resolve, reject) => {
      // Strategy 1: If storage supports a clear/reset method
      if (typeof this.storage.clear === 'function') {
        this.storage.clear(err => {
          if (err) return reject(err)
          this.storage.write(0, newData, err => {
            if (err) return reject(err)
            resolve()
          })
        })
        return
      }
      
      // Strategy 2: Write zeros to "clear" the excess data, then write new data
      if (this.storage.write) {
        // First write the new data
        this.storage.write(0, newData, err => {
          if (err) return reject(err)
          
          // Then write zeros to clear any remaining data
          // This simulates truncation by overwriting with empty data
          this._clearRemainingData(newData.byteLength).then(resolve).catch(reject)
        })
        return
      }
      
      // Strategy 3: If we can't clear, just track virtually
      this._virtualSize = newData.byteLength
      resolve()
    })
  }

  async _clearRemainingData(fromOffset) {
    try {
      const currentData = await this._readAll()
      if (currentData.byteLength <= fromOffset) return
      
      const remainingSize = currentData.byteLength - fromOffset
      const zeros = b4a.alloc(remainingSize) // Buffer of zeros
      
      return new Promise((resolve, reject) => {
        this.storage.write(fromOffset, zeros, err => {
          if (err) return reject(err)
          resolve()
        })
      })
    } catch (err) {
      throw err
    }
  }

  async open () {
    let buffer = await this._readAll()
    
    // Apply virtual truncation if active
    if (this._virtualSize !== null && buffer.byteLength > this._virtualSize) {
      buffer = buffer.subarray(0, this._virtualSize)
    }
    
    const state = { start: 0, end: buffer.byteLength, buffer }
    const result = { header: null, entries: [] }

    this.byteLength = 0
    this.length = 0

    const h1 = this._decodeEntry(state, this.headerEncoding)
    state.start = this._pageSize

    const h2 = this._decodeEntry(state, this.headerEncoding)
    state.start = this._entryOffset

    if (!h1 && !h2) {
      // reset state...
      this.flushed = false
      this._headers[0] = 1
      this._headers[1] = 0

      if (buffer.byteLength >= this._entryOffset) {
        throw OPLOG_CORRUPT()
      }
      return result
    }

    this.flushed = true

    if (h1 && !h2) {
      this._headers[0] = h1.header
      this._headers[1] = h1.header
    } else if (!h1 && h2) {
      this._headers[0] = (h2.header + 1) & 1
      this._headers[1] = h2.header
    } else {
      this._headers[0] = h1.header
      this._headers[1] = h2.header
    }

    const header = (this._headers[0] + this._headers[1]) & 1
    const decoded = []

    result.header = header ? h2.message : h1.message

    while (true) {
      const entry = this._decodeEntry(state, this.entryEncoding)
      if (!entry) break
      if (entry.header !== header) break

      decoded.push(entry)
    }

    while (decoded.length > 0 && decoded[decoded.length - 1].partial) decoded.pop()

    for (const e of decoded) {
      result.entries.push(e.message)
      this.byteLength += e.byteLength
      this.length++
    }

    const size = this.byteLength + this._entryOffset

    if (size === buffer.byteLength) return result

    // Use our browser-compatible truncation
    await this._truncate(size)

    return result
  }

  _readAll () {
    return new Promise((resolve, reject) => {
      this.storage.open(err => {
        if (err && err.code !== 'ENOENT') return reject(err)
        if (err) return resolve(b4a.alloc(0))
        
        this.storage.stat((err, stat) => {
          if (err && err.code !== 'ENOENT') return reject(err)
          
          let size = stat.size
          // Apply virtual size limit if active
          if (this._virtualSize !== null && size > this._virtualSize) {
            size = this._virtualSize
          }
          
          this.storage.read(0, size, (err, buf) => {
            if (err) return reject(err)
            resolve(buf)
          })
        })
      })
    })
  }

  flush (header) {
    const state = { start: 8, end: 8, buffer: null }
    const i = this._headers[0] === this._headers[1] ? 1 : 0
    const bit = (this._headers[i] + 1) & 1

    this.headerEncoding.preencode(state, header)
    if (state.end > this._pageSize) throw OPLOG_HEADER_OVERFLOW()
    state.buffer = b4a.allocUnsafe(state.end)
    this.headerEncoding.encode(state, header)
    this._addHeader(state, state.end - 8, bit, 0)

    return this._writeHeaderAndTruncate(i, bit, state.buffer)
  }

  _writeHeaderAndTruncate (i, bit, buf) {
    return new Promise((resolve, reject) => {
      this.storage.write(i === 0 ? 0 : this._pageSize, buf, err => {
        if (err) return reject(err)

        // Use our browser-compatible truncation
        this._truncate(this._entryOffset).then(() => {
          this._headers[i] = bit
          this.byteLength = 0
          this.length = 0
          this.flushed = true
          resolve()
        }).catch(reject)
      })
    })
  }

  append (batch, atomic = true) {
    if (!Array.isArray(batch)) batch = [batch]

    const state = { start: 0, end: batch.length * 8, buffer: null }
    const bit = (this._headers[0] + this._headers[1]) & 1

    for (let i = 0; i < batch.length; i++) {
      this.entryEncoding.preencode(state, batch[i])
    }

    state.buffer = b4a.allocUnsafe(state.end)

    for (let i = 0; i < batch.length; i++) {
      const start = state.start += 8 // space for header
      const partial = (atomic && i < batch.length - 1) ? 2 : 0
      this.entryEncoding.encode(state, batch[i])
      this._addHeader(state, state.start - start, bit, partial)
    }

    return this._append(state.buffer, batch.length)
  }

  close () {
    return new Promise((resolve, reject) => {
      this.storage.close(err => {
        if (err) return reject(err)
        // Reset virtual truncation state
        this._virtualSize = null
        this._truncatedRanges = []
        resolve()
      })
    })
  }

  _append (buf, count) {
    return new Promise((resolve, reject) => {
      const writeOffset = this._entryOffset + this.byteLength
      
      // Check if we're writing beyond virtual truncation
      if (this._virtualSize !== null && writeOffset + buf.byteLength > this._virtualSize) {
        // Extend virtual size to accommodate new data
        this._virtualSize = writeOffset + buf.byteLength
      }
      
      this.storage.write(writeOffset, buf, err => {
        if (err) return reject(WRITE_FAILED(err.message))

        this.byteLength += buf.byteLength
        this.length += count

        resolve()
      })
    })
  }
}

},{"b4a":102,"compact-encoding":178,"crc-universal":208,"hypercore-errors":306}],327:[function(require,module,exports){
const FIFO = require('fast-fifo')

module.exports = class ReceiverQueue {
  constructor () {
    this.queue = new FIFO()
    this.priority = []
    this.requests = new Map()
    this.length = 0
  }

  push (req) {
    // TODO: use a heap at some point if we wanna support multiple prios
    if (req.priority > 0) this.priority.push(req)
    else this.queue.push(req)

    this.requests.set(req.id, req)
    this.length++
  }

  shift () {
    while (this.priority.length > 0) {
      const msg = this.priority.pop()
      const req = this._processRequest(msg)
      if (req !== null) return req
    }

    while (this.queue.length > 0) {
      const msg = this.queue.shift()
      const req = this._processRequest(msg)
      if (req !== null) return req
    }

    return null
  }

  _processRequest (req) {
    if (req.block || req.hash || req.seek || req.upgrade || req.manifest) {
      this.requests.delete(req.id)
      this.length--
      return req
    }

    return null
  }

  clear () {
    this.queue.clear()
    this.priority = []
    this.length = 0
    this.requests.clear()
  }

  delete (id) {
    const req = this.requests.get(id)
    if (!req) return

    req.block = null
    req.hash = null
    req.seek = null
    req.upgrade = null
    req.manifest = false

    this.requests.delete(id)
    this.length--

    if (this.length === 0) {
      this.queue.clear()
      this.priority = []
    }
  }
}

},{"fast-fifo":261}],328:[function(require,module,exports){
const BigSparseArray = require('big-sparse-array')
const quickbit = require('./compat').quickbit

const BITS_PER_PAGE = 32768
const BYTES_PER_PAGE = BITS_PER_PAGE / 8
const WORDS_PER_PAGE = BYTES_PER_PAGE / 4
const BITS_PER_SEGMENT = 2097152
const BYTES_PER_SEGMENT = BITS_PER_SEGMENT / 8
const PAGES_PER_SEGMENT = BITS_PER_SEGMENT / BITS_PER_PAGE

class RemoteBitfieldPage {
  constructor (index, bitfield, segment) {
    this.index = index
    this.offset = index * BYTES_PER_PAGE - segment.offset
    this.bitfield = bitfield
    this.segment = segment

    segment.add(this)
  }

  get tree () {
    return this.segment.tree
  }

  get (index) {
    return quickbit.get(this.bitfield, index)
  }

  set (index, val) {
    if (quickbit.set(this.bitfield, index, val)) {
      this.tree.update(this.offset * 8 + index)
    }
  }

  setRange (start, length, val) {
    quickbit.fill(this.bitfield, val, start, start + length)

    let i = Math.floor(start / 128)
    const n = i + Math.ceil(length / 128)

    while (i <= n) this.tree.update(this.offset * 8 + i++ * 128)
  }

  findFirst (val, position) {
    return quickbit.findFirst(this.bitfield, val, position)
  }

  findLast (val, position) {
    return quickbit.findLast(this.bitfield, val, position)
  }

  insert (start, bitfield) {
    this.bitfield.set(bitfield, start / 32)
    this.segment.refresh()
  }

  clear (start, bitfield) {
    quickbit.clear(this.bitfield, { field: bitfield, offset: start })
  }
}

class RemoteBitfieldSegment {
  constructor (index) {
    this.index = index
    this.offset = index * BYTES_PER_SEGMENT
    this.tree = quickbit.Index.from([], BYTES_PER_SEGMENT)
    this.pages = new Array(PAGES_PER_SEGMENT)
    this.pagesLength = 0
  }

  get chunks () {
    return this.tree.chunks
  }

  refresh () {
    this.tree = quickbit.Index.from(this.tree.chunks, BYTES_PER_SEGMENT)
  }

  add (page) {
    const pageIndex = page.index - this.index * PAGES_PER_SEGMENT
    if (pageIndex >= this.pagesLength) this.pagesLength = pageIndex + 1

    this.pages[pageIndex] = page

    const chunk = { field: page.bitfield, offset: page.offset }

    this.chunks.push(chunk)

    for (let i = this.chunks.length - 2; i >= 0; i--) {
      const prev = this.chunks[i]
      if (prev.offset <= chunk.offset) break
      this.chunks[i] = chunk
      this.chunks[i + 1] = prev
    }
  }

  findFirst (val, position) {
    position = this.tree.skipFirst(!val, position)

    let j = position & (BITS_PER_PAGE - 1)
    let i = (position - j) / BITS_PER_PAGE

    if (i >= PAGES_PER_SEGMENT) return -1

    while (i < this.pagesLength) {
      const p = this.pages[i]

      let index = -1

      if (p) index = p.findFirst(val, j)
      else if (!val) index = j

      if (index !== -1) return i * BITS_PER_PAGE + index

      j = 0
      i++
    }

    return (val || this.pagesLength === PAGES_PER_SEGMENT) ? -1 : this.pagesLength * BITS_PER_PAGE
  }

  findLast (val, position) {
    position = this.tree.skipLast(!val, position)

    let j = position & (BITS_PER_PAGE - 1)
    let i = (position - j) / BITS_PER_PAGE

    if (i >= PAGES_PER_SEGMENT) return -1

    while (i >= 0) {
      const p = this.pages[i]

      let index = -1

      if (p) index = p.findLast(val, j)
      else if (!val) index = j

      if (index !== -1) return i * BITS_PER_PAGE + index

      j = BITS_PER_PAGE - 1
      i--
    }

    return -1
  }
}

module.exports = class RemoteBitfield {
  static BITS_PER_PAGE = BITS_PER_PAGE

  constructor () {
    this._pages = new BigSparseArray()
    this._segments = new BigSparseArray()
    this._maxSegments = 0
  }

  getBitfield (index) {
    const j = index & (BITS_PER_PAGE - 1)
    const i = (index - j) / BITS_PER_PAGE

    const p = this._pages.get(i)
    return p || null
  }

  get (index) {
    const j = index & (BITS_PER_PAGE - 1)
    const i = (index - j) / BITS_PER_PAGE

    const p = this._pages.get(i)

    return p ? p.get(j) : false
  }

  set (index, val) {
    const j = index & (BITS_PER_PAGE - 1)
    const i = (index - j) / BITS_PER_PAGE

    let p = this._pages.get(i)

    if (!p && val) {
      const k = Math.floor(i / PAGES_PER_SEGMENT)
      const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))
      if (this._maxSegments <= k) this._maxSegments = k + 1

      p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))
    }

    if (p) p.set(j, val)
  }

  setRange (start, length, val) {
    let j = start & (BITS_PER_PAGE - 1)
    let i = (start - j) / BITS_PER_PAGE

    while (length > 0) {
      let p = this._pages.get(i)

      if (!p && val) {
        const k = Math.floor(i / PAGES_PER_SEGMENT)
        const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))
        if (this._maxSegments <= k) this._maxSegments = k + 1

        p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))
      }

      const end = Math.min(j + length, BITS_PER_PAGE)
      const range = end - j

      if (p) p.setRange(j, range, val)

      j = 0
      i++
      length -= range
    }
  }

  findFirst (val, position) {
    let j = position & (BITS_PER_SEGMENT - 1)
    let i = (position - j) / BITS_PER_SEGMENT

    while (i < this._maxSegments) {
      const s = this._segments.get(i)

      let index = -1

      if (s) index = s.findFirst(val, j)
      else if (!val) index = j

      if (index !== -1) return i * BITS_PER_SEGMENT + index

      j = 0
      i++
    }

    // For the val === false case, we always return at least
    // the 'position', also if nothing was found
    return val
      ? -1
      : Math.max(position, this._maxSegments * BITS_PER_SEGMENT)
  }

  firstSet (position) {
    return this.findFirst(true, position)
  }

  firstUnset (position) {
    return this.findFirst(false, position)
  }

  findLast (val, position) {
    let j = position & (BITS_PER_SEGMENT - 1)
    let i = (position - j) / BITS_PER_SEGMENT

    while (i >= 0) {
      const s = this._segments.get(i)

      let index = -1

      if (s) index = s.findLast(val, j)
      else if (!val) index = j

      if (index !== -1) return i * BITS_PER_SEGMENT + index

      j = BITS_PER_SEGMENT - 1
      i--
    }

    return -1
  }

  lastSet (position) {
    return this.findLast(true, position)
  }

  lastUnset (position) {
    return this.findLast(false, position)
  }

  insert (start, bitfield) {
    if (start % 32 !== 0) return false

    let length = bitfield.byteLength * 8

    let j = start & (BITS_PER_PAGE - 1)
    let i = (start - j) / BITS_PER_PAGE

    while (length > 0) {
      let p = this._pages.get(i)

      if (!p) {
        const k = Math.floor(i / PAGES_PER_SEGMENT)
        const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))
        if (this._maxSegments <= k) this._maxSegments = k + 1

        p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))
      }

      const end = Math.min(j + length, BITS_PER_PAGE)
      const range = end - j

      p.insert(j, bitfield.subarray(0, range / 32))

      bitfield = bitfield.subarray(range / 32)

      j = 0
      i++
      length -= range
    }

    return true
  }

  clear (start, bitfield) {
    if (start % 32 !== 0) return false

    let length = bitfield.byteLength * 8

    let j = start & (BITS_PER_PAGE - 1)
    let i = (start - j) / BITS_PER_PAGE

    while (length > 0) {
      let p = this._pages.get(i)

      if (!p) {
        const k = Math.floor(i / PAGES_PER_SEGMENT)
        const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))
        if (this._maxSegments <= k) this._maxSegments = k + 1

        p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))
      }

      const end = Math.min(j + length, BITS_PER_PAGE)
      const range = end - j

      p.clear(j, bitfield.subarray(0, range / 32))

      bitfield = bitfield.subarray(range / 32)

      j = 0
      i++
      length -= range
    }

    return true
  }
}

},{"./compat":317,"big-sparse-array":106}],329:[function(require,module,exports){
/* DEV DOCS
  Every hypercore has one Replicator object managing its connections to other peers.
  There is one Peer object per peer connected to the Hypercore.
  Hypercores do not know about other hypercores, so when a peer is connected to multiple cores, there exists one Peer object per core.

  Hypercore indicates block should be downloaded through methods like Replicator.addRange or Replicator.addBlock
  Hypercore calls Replicator.updateActivity every time a hypercore session opens/closes
  Replicator.updateActivity ensures the Hypercore is downloading blocks as expected
  Replicator keeps track of:
    - Which blocks need to be downloaded (Replicator._blocks)
    - Which blocks currently have inflight requests (Replicator._inflight)

  Blocks are requested from remote peers by Peer objects. The flow is:
    - The replicator's updatePeer method gets called
    - The replicator detects whether the Peer can accept more requests (for example by checking if it's maxed out on inflight blocks)
    - The replicator then tells the Peer what to request (e.g. Peer_requestRange or Peer._requestBlock methods)

  The Peer object is responsible for tracking
    - Which blocks does the Peer have available (tracked in remoteBitfield)
    - Which blocks are you actively looking for from this peer (tracked in missingBlocks)
    - How many blocks are currently inflight (tracked in inflight)
  The Peer uses this information to decide which blocks to request form the peer in response to _requestRange requests and the like.
*/

const b4a = require('b4a')
const safetyCatch = require('safety-catch')
const RandomIterator = require('random-array-iterator')
const flatTree = require('flat-tree')
const ReceiverQueue = require('./receiver-queue')
const HotswapQueue = require('./hotswap-queue')
const RemoteBitfield = require('./remote-bitfield')
const { REQUEST_CANCELLED, REQUEST_TIMEOUT, INVALID_CAPABILITY, SNAPSHOT_NOT_AVAILABLE } = require('hypercore-errors')
const m = require('./messages')
const caps = require('./caps')

const DEFAULT_MAX_INFLIGHT = [16, 512]
const SCALE_LATENCY = 50
const DEFAULT_SEGMENT_SIZE = 256 * 1024 * 8 // 256 KiB in bits
const NOT_DOWNLOADING_SLACK = 20000 + (Math.random() * 20000) | 0
const MAX_PEERS_UPGRADE = 3

const MAX_RANGES = 64

const PRIORITY = {
  NORMAL: 0,
  HIGH: 1,
  VERY_HIGH: 2,
  CANCELLED: 255 // reserved to mark cancellation
}

class Attachable {
  constructor () {
    this.resolved = false
    this.refs = []
  }

  attach (session) {
    const r = {
      context: this,
      session,
      sindex: 0,
      rindex: 0,
      snapshot: true,
      resolve: null,
      reject: null,
      promise: null,
      timeout: null
    }

    r.sindex = session.push(r) - 1
    r.rindex = this.refs.push(r) - 1
    r.promise = new Promise((resolve, reject) => {
      r.resolve = resolve
      r.reject = reject
    })

    return r
  }

  detach (r, err = null) {
    if (r.context !== this) return false

    this._detach(r)
    this._cancel(r, err)
    this.gc()

    return true
  }

  _detach (r) {
    const rh = this.refs.pop()
    const sh = r.session.pop()

    if (r.rindex < this.refs.length) this.refs[rh.rindex = r.rindex] = rh
    if (r.sindex < r.session.length) r.session[sh.sindex = r.sindex] = sh

    destroyRequestTimeout(r)
    r.context = null

    return r
  }

  gc () {
    if (this.refs.length === 0) this._unref()
  }

  _cancel (r, err) {
    r.reject(err || REQUEST_CANCELLED())
  }

  _unref () {
    // overwrite me
  }

  resolve (val) {
    this.resolved = true
    while (this.refs.length > 0) {
      this._detach(this.refs[this.refs.length - 1]).resolve(val)
    }
  }

  reject (err) {
    this.resolved = true
    while (this.refs.length > 0) {
      this._detach(this.refs[this.refs.length - 1]).reject(err)
    }
  }

  setTimeout (r, ms) {
    destroyRequestTimeout(r)
    r.timeout = setTimeout(onrequesttimeout, ms, r)
  }
}

class BlockRequest extends Attachable {
  constructor (tracker, index, priority) {
    super()

    this.index = index
    this.priority = priority
    this.inflight = []
    this.queued = false
    this.hotswap = null
    this.tracker = tracker
  }

  _unref () {
    this.queued = false

    for (const req of this.inflight) {
      req.peer._cancelRequest(req)
    }

    this.tracker.remove(this.index)
    removeHotswap(this)
  }
}

class RangeRequest extends Attachable {
  constructor (ranges, start, end, linear, ifAvailable, blocks) {
    super()

    this.start = start
    this.end = end
    this.linear = linear
    this.ifAvailable = ifAvailable
    this.blocks = blocks
    this.ranges = ranges

    // As passed by the user, immut
    this.userStart = start
    this.userEnd = end
  }

  _unref () {
    const i = this.ranges.indexOf(this)
    if (i === -1) return
    const h = this.ranges.pop()
    if (i < this.ranges.length) this.ranges[i] = h
  }

  _cancel (r) {
    r.resolve(false)
  }
}

class UpgradeRequest extends Attachable {
  constructor (replicator, fork, length) {
    super()

    this.fork = fork
    this.length = length
    this.inflight = []
    this.replicator = replicator
  }

  _unref () {
    if (this.replicator.eagerUpgrade === true || this.inflight.length > 0) return
    this.replicator._upgrade = null
  }

  _cancel (r) {
    r.resolve(false)
  }
}

class SeekRequest extends Attachable {
  constructor (seeks, seeker) {
    super()

    this.seeker = seeker
    this.inflight = []
    this.seeks = seeks
  }

  _unref () {
    if (this.inflight.length > 0) return
    const i = this.seeks.indexOf(this)
    if (i === -1) return
    const h = this.seeks.pop()
    if (i < this.seeks.length) this.seeks[i] = h
  }
}

class InflightTracker {
  constructor () {
    this._requests = []
    this._free = []
  }

  get idle () {
    return this._requests.length === this._free.length
  }

  * [Symbol.iterator] () {
    for (const req of this._requests) {
      if (req !== null) yield req
    }
  }

  add (req) {
    const id = this._free.length ? this._free.pop() : this._requests.push(null)
    req.id = id
    this._requests[id - 1] = req
    return req
  }

  get (id) {
    return id <= this._requests.length ? this._requests[id - 1] : null
  }

  remove (id, roundtrip) {
    if (id > this._requests.length) return
    this._requests[id - 1] = null
    if (roundtrip === true) this._free.push(id)
  }

  reusable (id) {
    this._free.push(id)
  }
}

class BlockTracker {
  constructor () {
    this._map = new Map()
  }

  [Symbol.iterator] () {
    return this._map.values()
  }

  isEmpty () {
    return this._map.size === 0
  }

  has (index) {
    return this._map.has(index)
  }

  get (index) {
    return this._map.get(index) || null
  }

  add (index, priority) {
    let b = this._map.get(index)
    if (b) return b

    b = new BlockRequest(this, index, priority)
    this._map.set(index, b)

    return b
  }

  remove (index) {
    const b = this.get(index)
    this._map.delete(index)
    return b
  }
}

class RoundtripQueue {
  constructor () {
    this.queue = []
    this.tick = 0
  }

  clear () {
    const ids = new Array(this.queue.length)
    for (let i = 0; i < ids.length; i++) {
      ids[i] = this.queue[i][1]
    }

    this.queue = []

    return ids
  }

  add (id) {
    this.queue.push([++this.tick, id])
  }

  flush (tick) {
    let flushed = null

    for (let i = 0; i < this.queue.length; i++) {
      if (this.queue[i][0] > tick) break
      if (flushed === null) flushed = []
      flushed.push(this.queue[i][1])
    }

    if (flushed !== null) this.queue.splice(0, flushed.length)
    return flushed
  }
}

class Peer {
  constructor (replicator, protomux, channel, useSession, inflightRange) {
    this.core = replicator.core
    this.replicator = replicator
    this.stream = protomux.stream
    this.protomux = protomux
    this.remotePublicKey = this.stream.remotePublicKey
    this.remoteSupportsSeeks = false
    this.inflightRange = inflightRange

    this.paused = false
    this.removed = false

    this.useSession = useSession

    this.channel = channel
    this.channel.userData = this

    this.wireSync = this.channel.messages[0]
    this.wireRequest = this.channel.messages[1]
    this.wireCancel = this.channel.messages[2]
    this.wireData = this.channel.messages[3]
    this.wireNoData = this.channel.messages[4]
    this.wireWant = this.channel.messages[5]
    this.wireUnwant = this.channel.messages[6]
    this.wireBitfield = this.channel.messages[7]
    this.wireRange = this.channel.messages[8]
    this.wireExtension = this.channel.messages[9]

    // Same stats as replicator, but for this specific peer
    this.stats = {
      wireSync: { tx: 0, rx: 0 },
      wireRequest: { tx: 0, rx: 0 },
      wireCancel: { tx: 0, rx: 0 },
      wireData: { tx: 0, rx: 0 },
      wireWant: { tx: 0, rx: 0 },
      wireBitfield: { tx: 0, rx: 0 },
      wireRange: { tx: 0, rx: 0 },
      wireExtension: { tx: 0, rx: 0 },
      hotswaps: 0
    }

    this.receiverQueue = new ReceiverQueue()
    this.receiverBusy = false

    // most often not used, so made on demand
    this.roundtripQueue = null

    this.inflight = 0
    this.dataProcessing = 0

    this.canUpgrade = true

    this.needsSync = false
    this.syncsProcessing = 0

    this._remoteContiguousLength = 0

    // TODO: tweak pipelining so that data sent BEFORE remoteOpened is not cap verified!
    // we might wanna tweak that with some crypto, ie use the cap to encrypt it...
    // or just be aware of that, to only push non leaky data

    this.remoteOpened = false
    this.remoteBitfield = new RemoteBitfield()
    this.missingBlocks = new RemoteBitfield()

    this.remoteFork = 0
    this.remoteLength = 0
    this.remoteCanUpgrade = false
    this.remoteUploading = true
    this.remoteDownloading = true
    this.remoteSynced = false
    this.remoteHasManifest = false
    this.remoteRequests = new Map()

    this.segmentsWanted = new Set()
    this.broadcastedNonSparse = false

    this.lengthAcked = 0

    this.extensions = new Map()
    this.lastExtensionSent = ''
    this.lastExtensionRecv = ''

    replicator._ifAvailable++
  }

  get remoteContiguousLength () {
    return this.remoteBitfield.findFirst(false, this._remoteContiguousLength)
  }

  getMaxInflight () {
    const stream = this.stream.rawStream
    if (!stream.udx) return Math.min(this.inflightRange[1], this.inflightRange[0] * 3)

    const scale = stream.rtt <= SCALE_LATENCY ? 1 : stream.rtt / SCALE_LATENCY * Math.min(1, 2 / this.replicator.peers.length)
    return Math.max(this.inflightRange[0], Math.round(Math.min(this.inflightRange[1], this.inflightRange[0] * scale)))
  }

  getMaxHotswapInflight () {
    const inf = this.getMaxInflight()
    return Math.max(16, inf / 2)
  }

  signalUpgrade () {
    if (this._shouldUpdateCanUpgrade() === true) this._updateCanUpgradeAndSync()
    else this.sendSync()
  }

  _markInflight (index) {
    this.missingBlocks.set(index, false)
  }

  broadcastRange (start, length, drop) {
    if (drop) this._unclearLocalRange(start, length)
    else this._clearLocalRange(start, length)

    // TODO: consider also adding early-returns on the drop===true case
    if (!drop) {
      // No need to broadcast if the remote already has this range

      if (this._remoteContiguousLength >= start + length) return

      if (length === 1) {
        if (this.remoteBitfield.get(start)) return
      } else {
        if (this.remoteBitfield.firstUnset(start) >= start + length) return
      }
    }

    this.wireRange.send({
      drop,
      start,
      length
    })
    incrementTx(this.stats.wireRange, this.replicator.stats.wireRange)
  }

  extension (name, message) {
    this.wireExtension.send({ name: name === this.lastExtensionSent ? '' : name, message })
    incrementTx(this.stats.wireExtension, this.replicator.stats.wireExtension)
    this.lastExtensionSent = name
  }

  onextension (message) {
    const name = message.name || this.lastExtensionRecv
    this.lastExtensionRecv = name
    const ext = this.extensions.get(name)
    if (ext) ext._onmessage({ start: 0, end: message.message.byteLength, buffer: message.message }, this)
  }

  sendSync () {
    if (this.syncsProcessing !== 0) {
      this.needsSync = true
      return
    }

    if (this.core.tree.fork !== this.remoteFork) {
      this.canUpgrade = false
    }

    this.needsSync = false

    this.wireSync.send({
      fork: this.core.tree.fork,
      length: this.core.tree.length,
      remoteLength: this.core.tree.fork === this.remoteFork ? this.remoteLength : 0,
      canUpgrade: this.canUpgrade,
      uploading: true,
      downloading: this.replicator.isDownloading(),
      hasManifest: !!this.core.header.manifest && this.core.compat === false
    })
    incrementTx(this.stats.wireSync, this.replicator.stats.wireSync)
  }

  onopen ({ seeks, capability }) {
    const expected = caps.replicate(this.stream.isInitiator === false, this.replicator.key, this.stream.handshakeHash)

    if (b4a.equals(capability, expected) !== true) { // TODO: change this to a rejection instead, less leakage
      throw INVALID_CAPABILITY('Remote sent an invalid replication capability')
    }

    if (this.remoteOpened === true) return
    this.remoteOpened = true
    this.remoteSupportsSeeks = seeks

    this.protomux.cork()

    this.sendSync()

    const contig = Math.min(this.core.tree.length, this.core.header.hints.contiguousLength)
    if (contig > 0) {
      this.broadcastRange(0, contig, false)

      if (contig === this.core.tree.length) {
        this.broadcastedNonSparse = true
      }
    }

    this.replicator._ifAvailable--
    this.replicator._addPeer(this)

    this.protomux.uncork()
  }

  onclose (isRemote) {
    // we might have signalled to the remote that we are done (ie not downloading) and the remote might agree on that
    // if that happens, the channel might be closed by the remote. if so just renegotiate it.
    // TODO: add a CLOSE_REASON to mux to we can make this cleaner...
    const reopen = isRemote === true && this.remoteOpened === true && this.remoteDownloading === false &&
       this.remoteUploading === true && this.replicator.downloading === true

    if (this.remoteOpened === false) {
      if (this.useSession) {
        this.replicator._peerSessions--
        this.replicator._closeSessionMaybe()
      }
      this.replicator._ifAvailable--
      this.replicator.updateAll()
      return
    }

    this.remoteOpened = false
    this.removed = true
    this.remoteRequests.clear() // cancel all
    this.receiverQueue.clear()

    if (this.roundtripQueue !== null) {
      for (const id of this.roundtripQueue.clear()) this.replicator._inflight.reusable(id)
    }

    this.replicator._removePeer(this)

    if (reopen) {
      this.replicator._makePeer(this.protomux, this.useSession)
    }

    if (this.useSession) {
      this.replicator._peerSessions--
      this.replicator._closeSessionMaybe()
    }
  }

  closeIfIdle () {
    if (this.remoteDownloading === false && this.replicator.isDownloading() === false) {
      // idling, shut it down...
      this.channel.close()
      return true
    }

    return false
  }

  async onsync ({ fork, length, remoteLength, canUpgrade, uploading, downloading, hasManifest }) {
    const lengthChanged = length !== this.remoteLength
    const sameFork = fork === this.core.tree.fork

    this.remoteSynced = true
    this.remoteFork = fork
    this.remoteLength = length
    this.remoteCanUpgrade = canUpgrade
    this.remoteUploading = uploading
    this.remoteDownloading = downloading
    this.remoteHasManifest = hasManifest

    if (this.closeIfIdle()) return

    this.lengthAcked = sameFork ? remoteLength : 0
    this.syncsProcessing++

    this.replicator._updateFork(this)

    if (this.remoteLength > this.core.tree.length && this.lengthAcked === this.core.tree.length) {
      if (this.replicator._addUpgradeMaybe() !== null) this._update()
    }

    const upgrade = (lengthChanged === false || sameFork === false)
      ? this.canUpgrade && sameFork
      : await this._canUpgrade(length, fork)

    if (length === this.remoteLength && fork === this.core.tree.fork) {
      this.canUpgrade = upgrade
    }

    if (--this.syncsProcessing !== 0) return // ie not latest

    if (this.needsSync === true || (this.core.tree.fork === this.remoteFork && this.core.tree.length > this.remoteLength)) {
      this.signalUpgrade()
    }

    this._update()
  }

  _shouldUpdateCanUpgrade () {
    return this.core.tree.fork === this.remoteFork &&
      this.core.tree.length > this.remoteLength &&
      this.canUpgrade === false &&
      this.syncsProcessing === 0
  }

  async _updateCanUpgradeAndSync () {
    const { length, fork } = this.core.tree

    const canUpgrade = await this._canUpgrade(this.remoteLength, this.remoteFork)

    if (this.syncsProcessing > 0 || length !== this.core.tree.length || fork !== this.core.tree.fork) {
      return
    }
    if (canUpgrade === this.canUpgrade) {
      return
    }

    this.canUpgrade = canUpgrade
    this.sendSync()
  }

  // Safe to call in the background - never fails
  async _canUpgrade (remoteLength, remoteFork) {
    if (remoteFork !== this.core.tree.fork) return false

    if (remoteLength === 0) return true
    if (remoteLength >= this.core.tree.length) return false

    try {
      // Rely on caching to make sure this is cheap...
      const canUpgrade = await this.core.tree.upgradeable(remoteLength)

      if (remoteFork !== this.core.tree.fork) return false

      return canUpgrade
    } catch {
      return false
    }
  }

  async _getProof (msg) {
    const proof = await this.core.tree.proof(msg)

    if (proof.block) {
      const index = msg.block.index

      if (msg.fork !== this.core.tree.fork || !this.core.bitfield.get(index)) {
        return null
      }

      proof.block.value = await this.core.blocks.get(index)
    }

    if (msg.manifest && !this.core.compat) {
      proof.manifest = this.core.header.manifest
    }

    return proof
  }

  async onrequest (msg) {
    const size = this.remoteRequests.size
    this.remoteRequests.set(msg.id, msg)

    // if size didnt change -> id overwrite -> old one is deleted, cancel current and re-add
    if (size === this.remoteRequests.size) {
      this._cancel(msg.id)
      this.remoteRequests.set(msg.id, msg)
    }

    if (!this.protomux.drained || this.receiverQueue.length) {
      this.receiverQueue.push(msg)
      return
    }

    await this._handleRequest(msg)
  }

  oncancel (msg) {
    this._cancel(msg.request)
  }

  _cancel (id) {
    this.remoteRequests.delete(id)
    this.receiverQueue.delete(id)
  }

  ondrain () {
    return this._handleRequests()
  }

  async _handleRequests () {
    if (this.receiverBusy) return
    this.receiverBusy = true
    this.protomux.cork()

    while (this.remoteOpened && this.protomux.drained && this.receiverQueue.length > 0 && !this.removed) {
      const msg = this.receiverQueue.shift()
      await this._handleRequest(msg)
    }

    this.protomux.uncork()
    this.receiverBusy = false
  }

  async _handleRequest (msg) {
    let proof = null

    // TODO: could still be answerable if (index, fork) is an ancestor of the current fork
    if (msg.fork === this.core.tree.fork) {
      try {
        proof = await this._getProof(msg)
      } catch (err) {
        safetyCatch(err)
        if (msg.fork === this.core.tree.fork && isCriticalError(err)) throw err
      }
    }

    // if cancelled do not reply
    if (this.remoteRequests.get(msg.id) !== msg) {
      return
    }

    // sync from now on, so safe to delete from the map
    this.remoteRequests.delete(msg.id)

    if (proof === null) {
      if (msg.manifest && this.core.header.manifest) {
        const manifest = this.core.header.manifest
        this.wireData.send({ request: msg.id, fork: this.core.tree.fork, block: null, hash: null, seek: null, upgrade: null, manifest })
        incrementTx(this.stats.wireData, this.replicator.stats.wireData)
        return
      }

      this.wireNoData.send({ request: msg.id })
      return
    }

    if (proof.block !== null) {
      this.replicator.onupload(proof.block.index, proof.block.value, this)
    }

    this.wireData.send({
      request: msg.id,
      fork: msg.fork,
      block: proof.block,
      hash: proof.hash,
      seek: proof.seek,
      upgrade: proof.upgrade,
      manifest: proof.manifest
    })
    incrementTx(this.stats.wireData, this.replicator.stats.wireData)
  }

  _cancelRequest (req) {
    if (req.priority === PRIORITY.CANCELLED) return
    // mark as cancelled also and avoid re-entry
    req.priority = PRIORITY.CANCELLED

    this.inflight--
    this.replicator._requestDone(req.id, false)

    // clear inflight state
    if (isBlockRequest(req)) this.replicator._unmarkInflight(req.block.index)
    if (isUpgradeRequest(req)) this.replicator._clearInflightUpgrade(req)

    if (this.roundtripQueue === null) this.roundtripQueue = new RoundtripQueue()
    this.roundtripQueue.add(req.id)
    this.wireCancel.send({ request: req.id })
    incrementTx(this.stats.wireCancel, this.replicator.stats.wireCancel)
  }

  _checkIfConflict () {
    this.paused = true

    const length = Math.min(this.core.tree.length, this.remoteLength)
    if (length === 0) return // pause and ignore

    this.wireRequest.send({
      id: 0, // TODO: use an more explicit id for this eventually...
      fork: this.remoteFork,
      block: null,
      hash: null,
      seek: null,
      upgrade: {
        start: 0,
        length
      }
    })

    incrementTx(this.stats.wireRequest, this.replicator.stats.wireRequest)
  }

  async ondata (data) {
    // always allow a fork conflict proof to be sent
    if (data.request === 0 && data.upgrade && data.upgrade.start === 0) {
      if (await this.core.checkConflict(data, this)) return
      this.paused = false
    }

    const req = data.request > 0 ? this.replicator._inflight.get(data.request) : null
    const reorg = data.fork > this.core.tree.fork

    // no push atm, TODO: check if this satisfies another pending request
    // allow reorg pushes tho as those are not written to storage so we'll take all the help we can get
    if (req === null && reorg === false) return

    if (req !== null) {
      if (req.peer !== this) return
      this._onrequestroundtrip(req)
    }

    try {
      if (reorg === true) return await this.replicator._onreorgdata(this, req, data)
    } catch (err) {
      safetyCatch(err)
      if (isBlockRequest(req)) this.replicator._unmarkInflight(req.block.index)

      this.paused = true
      this.replicator.oninvalid(err, req, data, this)
      return
    }

    this.dataProcessing++

    try {
      if (!matchingRequest(req, data) || !(await this.core.verify(data, this))) {
        this.replicator._onnodata(this, req)
        return
      }
    } catch (err) {
      safetyCatch(err)
      if (isBlockRequest(req)) this.replicator._unmarkInflight(req.block.index)

      if (err.code === 'WRITE_FAILED') {
        // For example, we don't want to keep pulling data when storage is full
        // TODO: notify the user somehow
        this.paused = true
        return
      }

      if (this.core.closed && !isCriticalError(err)) return

      if (err.code !== 'INVALID_OPERATION') {
        // might be a fork, verify
        this._checkIfConflict()
      }

      this.replicator._onnodata(this, req)
      this.replicator.oninvalid(err, req, data, this)
      return
    } finally {
      this.dataProcessing--
    }

    this.replicator._ondata(this, req, data)

    if (this._shouldUpdateCanUpgrade() === true) {
      this._updateCanUpgradeAndSync()
    }
  }

  onnodata ({ request }) {
    const req = request > 0 ? this.replicator._inflight.get(request) : null

    if (req === null || req.peer !== this) return

    this._onrequestroundtrip(req)
    this.replicator._onnodata(this, req)
  }

  _onrequestroundtrip (req) {
    if (req.priority === PRIORITY.CANCELLED) return
    // to avoid re-entry we also just mark it as cancelled
    req.priority = PRIORITY.CANCELLED

    this.inflight--
    this.replicator._requestDone(req.id, true)
    if (this.roundtripQueue === null) return
    const flushed = this.roundtripQueue.flush(req.rt)
    if (flushed === null) return
    for (const id of flushed) this.replicator._inflight.reusable(id)
  }

  onwant ({ start, length }) {
    this.replicator._onwant(this, start, length)
  }

  onunwant () {
    // TODO
  }

  onbitfield ({ start, bitfield }) {
    if (start < this._remoteContiguousLength) this._remoteContiguousLength = start // bitfield is always the truth
    this.remoteBitfield.insert(start, bitfield)
    this.missingBlocks.insert(start, bitfield)
    this._clearLocalRange(start, bitfield.byteLength * 8)
    this._update()
  }

  _clearLocalRange (start, length) {
    const bitfield = this.core.skipBitfield === null ? this.core.bitfield : this.core.skipBitfield

    if (length === 1) {
      this.missingBlocks.set(start, this._remoteHasBlock(start) && !bitfield.get(start))
      return
    }

    const contig = Math.min(this.core.tree.length, this.core.header.hints.contiguousLength)

    if (start + length < contig) {
      const delta = contig - start
      this.missingBlocks.setRange(start, delta, false)
      return
    }

    const rem = start & 32767
    if (rem > 0) {
      start -= rem
      length += rem
    }

    const end = start + Math.min(length, this.core.tree.length)
    while (start < end) {
      const local = bitfield.getBitfield(start)

      if (local && local.bitfield) {
        this.missingBlocks.clear(start, local.bitfield)
      }

      start += 32768
    }
  }

  _resetMissingBlock (index) {
    const bitfield = this.core.skipBitfield === null ? this.core.bitfield : this.core.skipBitfield
    this.missingBlocks.set(index, this._remoteHasBlock(index) && !bitfield.get(index))
  }

  _unclearLocalRange (start, length) {
    if (length === 1) {
      this._resetMissingBlock(start)
      return
    }

    const rem = start & 2097151
    if (rem > 0) {
      start -= rem
      length += rem
    }

    const fixedStart = start

    const end = start + Math.min(length, this.remoteLength)
    while (start < end) {
      const remote = this.remoteBitfield.getBitfield(start)
      if (remote && remote.bitfield) {
        this.missingBlocks.insert(start, remote.bitfield)
      }

      start += 2097152
    }

    this._clearLocalRange(fixedStart, length)
  }

  onrange ({ drop, start, length }) {
    const has = drop === false

    if (drop === true && start < this._remoteContiguousLength) {
      this._remoteContiguousLength = start
    }

    if (start === 0 && drop === false) {
      if (length > this._remoteContiguousLength) this._remoteContiguousLength = length
    } else if (length === 1) {
      const bitfield = this.core.skipBitfield === null ? this.core.bitfield : this.core.skipBitfield
      this.remoteBitfield.set(start, has)
      this.missingBlocks.set(start, has && !bitfield.get(start))
    } else {
      const rangeStart = this.remoteBitfield.findFirst(!has, start)
      const rangeLength = length - (rangeStart - start)

      if (rangeLength > 0) {
        this.remoteBitfield.setRange(rangeStart, rangeLength, has)
        this.missingBlocks.setRange(rangeStart, rangeLength, has)
        if (has) this._clearLocalRange(rangeStart, rangeLength)
      }
    }

    if (drop === false) this._update()
  }

  onreorghint () {
    // TODO
  }

  _update () {
    // TODO: if this is in a batch or similar it would be better to defer it
    // we could do that with nextTick/microtick mb? (combined with a property on the session to signal read buffer mb)
    this.replicator.updatePeer(this)
  }

  async _onconflict () {
    this.protomux.cork()
    if (this.remoteLength > 0 && this.core.tree.fork === this.remoteFork) {
      await this.onrequest({
        id: 0,
        fork: this.core.tree.fork,
        block: null,
        hash: null,
        seek: null,
        upgrade: {
          start: 0,
          length: Math.min(this.core.tree.length, this.remoteLength)
        }
      })
    }
    this.channel.close()
    this.protomux.uncork()
  }

  _makeRequest (needsUpgrade, priority, minLength) {
    if (needsUpgrade === true && this.replicator._shouldUpgrade(this) === false) {
      return null
    }

    // ensure that the remote has signalled they have the length we request
    if (this.remoteLength < minLength) {
      return null
    }

    if (needsUpgrade === false && this.replicator._autoUpgrade(this) === true) {
      needsUpgrade = true
    }

    return {
      peer: this,
      rt: this.roundtripQueue === null ? 0 : this.roundtripQueue.tick,
      id: 0,
      fork: this.remoteFork,
      block: null,
      hash: null,
      seek: null,
      upgrade: needsUpgrade === false
        ? null
        : { start: this.core.tree.length, length: this.remoteLength - this.core.tree.length },
      // remote manifest check can be removed eventually...
      manifest: this.core.header.manifest === null && this.remoteHasManifest === true,
      priority
    }
  }

  _requestManifest () {
    const req = this._makeRequest(false, 0, 0)
    this._send(req)
  }

  _requestUpgrade (u) {
    const req = this._makeRequest(true, 0, 0)
    if (req === null) return false

    this._send(req)

    return true
  }

  _requestSeek (s) {
    // if replicator is updating the seeks etc, bail and wait for it to drain
    if (this.replicator._updatesPending > 0) return false

    const { length, fork } = this.core.tree

    if (fork !== this.remoteFork) return false

    if (s.seeker.start >= length) {
      const req = this._makeRequest(true, 0, 0)

      // We need an upgrade for the seek, if non can be provided, skip
      if (req === null) return false

      req.seek = this.remoteSupportsSeeks ? { bytes: s.seeker.bytes, padding: s.seeker.padding } : null

      s.inflight.push(req)
      this._send(req)

      return true
    }

    const len = s.seeker.end - s.seeker.start
    const off = s.seeker.start + Math.floor(Math.random() * len)

    for (let i = 0; i < len; i++) {
      let index = off + i
      if (index > s.seeker.end) index -= len

      if (this._remoteHasBlock(index) === false) continue
      if (this.core.bitfield.get(index) === true) continue
      if (!this._hasTreeParent(index)) continue

      // Check if this block is currently inflight - if so pick another
      const b = this.replicator._blocks.get(index)
      if (b !== null && b.inflight.length > 0) continue

      // Block is not inflight, but we only want the hash, check if that is inflight
      const h = this.replicator._hashes.add(index, PRIORITY.NORMAL)
      if (h.inflight.length > 0) continue

      const req = this._makeRequest(false, h.priority, index + 1)
      if (req === null) continue

      const nodes = flatTree.depth(s.seeker.start + s.seeker.end - 1)

      req.hash = { index: 2 * index, nodes }
      req.seek = this.remoteSupportsSeeks ? { bytes: s.seeker.bytes, padding: s.seeker.padding } : null

      s.inflight.push(req)
      h.inflight.push(req)
      this._send(req)

      return true
    }

    this._maybeWant(s.seeker.start, len)
    return false
  }

  _hasTreeParent (index) {
    if (this.remoteLength >= this.core.tree.length) return true

    const ite = flatTree.iterator(index * 2)

    let span = 2
    let length = 0

    while (true) {
      ite.parent()

      const left = (ite.index - ite.factor / 2 + 1) / 2
      length = left + span

      // if larger than local AND larger than remote - they share the root so its ok
      if (length > this.core.tree.length) {
        if (length > this.remoteLength) return true
        break
      }

      // its less than local but larger than remote so skip it
      if (length > this.remoteLength) break

      span *= 2
      const first = this.core.bitfield.findFirst(true, left)
      if (first > -1 && first < length) return true
    }

    // TODO: push to async queue and check against our local merkle tree if we actually can request this block
    return false
  }

  _remoteHasBlock (index) {
    return index < this._remoteContiguousLength || this.remoteBitfield.get(index) === true
  }

  _sendBlockRequest (req, b) {
    req.block = { index: b.index, nodes: 0 }
    this.replicator._markInflight(b.index)

    b.inflight.push(req)
    this.replicator.hotswaps.add(b)
    this._send(req)
  }

  _requestBlock (b) {
    const { length, fork } = this.core.tree

    if (this._remoteHasBlock(b.index) === false || fork !== this.remoteFork) {
      this._maybeWant(b.index)
      return false
    }

    if (!this._hasTreeParent(b.index)) {
      return false
    }

    const req = this._makeRequest(b.index >= length, b.priority, b.index + 1)
    if (req === null) return false

    this._sendBlockRequest(req, b)

    return true
  }

  _requestRangeBlock (index, length) {
    if (this.core.bitfield.get(index) === true || !this._hasTreeParent(index)) return false

    const b = this.replicator._blocks.add(index, PRIORITY.NORMAL)
    if (b.inflight.length > 0) {
      this.missingBlocks.set(index, false) // in case we missed some states just set them ondemand, nbd
      return false
    }

    const req = this._makeRequest(index >= length, b.priority, index + 1)

    // If the request cannot be satisfied, dealloc the block request if no one is subscribed to it
    if (req === null) {
      b.gc()
      return false
    }

    this._sendBlockRequest(req, b)

    // Don't think this will ever happen, as the pending queue is drained before the range queue
    // but doesn't hurt to check this explicitly here also.
    if (b.queued) b.queued = false
    return true
  }

  _findNext (i) {
    if (i < this._remoteContiguousLength) {
      if (this.core.skipBitfield === null) this.replicator._openSkipBitfield()
      i = this.core.skipBitfield.findFirst(false, i)
      if (i < this._remoteContiguousLength && i > -1) return i
      i = this._remoteContiguousLength
    }

    return this.missingBlocks.findFirst(true, i)
  }

  _requestRange (r) {
    const { length, fork } = this.core.tree

    if (r.blocks) {
      let min = -1
      let max = -1

      for (let i = r.start; i < r.end; i++) {
        const index = r.blocks[i]
        if (min === -1 || index < min) min = index
        if (max === -1 || index > max) max = index
        const has = index < this._remoteContiguousLength || this.missingBlocks.get(index) === true
        if (has === true && this._requestRangeBlock(index, length)) return true
      }

      if (min > -1) this._maybeWant(min, max - min)
      return false
    }

    const end = Math.min(this.core.tree.length, Math.min(r.end === -1 ? this.remoteLength : r.end, this.remoteLength))
    if (end <= r.start || fork !== this.remoteFork) return false

    const len = end - r.start
    const off = r.start + (r.linear ? 0 : Math.floor(Math.random() * len))

    let i = off

    while (true) {
      i = this._findNext(i)
      if (i === -1 || i >= end) break

      if (this._requestRangeBlock(i, length)) return true
      i++
    }

    i = r.start

    while (true) {
      i = this._findNext(i)
      if (i === -1 || i >= off) break

      if (this._requestRangeBlock(i, length)) return true
      i++
    }

    this._maybeWant(r.start, len)
    return false
  }

  _requestForkProof (f) {
    const req = this._makeRequest(false, 0, 0)

    req.upgrade = { start: 0, length: this.remoteLength }
    req.manifest = !this.core.header.manifest

    f.inflight.push(req)
    this._send(req)
  }

  _requestForkRange (f) {
    if (f.fork !== this.remoteFork || f.batch.want === null) return false

    const end = Math.min(f.batch.want.end, this.remoteLength)
    if (end < f.batch.want.start) return false

    const len = end - f.batch.want.start
    const off = f.batch.want.start + Math.floor(Math.random() * len)

    for (let i = 0; i < len; i++) {
      let index = off + i
      if (index >= end) index -= len

      if (this._remoteHasBlock(index) === false) continue

      const req = this._makeRequest(false, 0, 0)

      req.hash = { index: 2 * index, nodes: f.batch.want.nodes }

      f.inflight.push(req)
      this._send(req)

      return true
    }

    this._maybeWant(f.batch.want.start, len)
    return false
  }

  _maybeWant (start, length = 1) {
    if (start + length <= this.remoteContiguousLength) return

    let i = Math.floor(start / DEFAULT_SEGMENT_SIZE)
    const n = Math.ceil((start + length) / DEFAULT_SEGMENT_SIZE)

    for (; i < n; i++) {
      if (this.segmentsWanted.has(i)) continue
      this.segmentsWanted.add(i)

      this.wireWant.send({
        start: i * DEFAULT_SEGMENT_SIZE,
        length: DEFAULT_SEGMENT_SIZE
      })
      incrementTx(this.stats.wireWant, this.replicator.stats.wireWant)
    }
  }

  isActive () {
    if (this.paused || this.removed) return false
    return true
  }

  async _send (req) {
    const fork = this.core.tree.fork

    this.inflight++
    this.replicator._inflight.add(req)

    if (req.upgrade !== null && req.fork === fork) {
      const u = this.replicator._addUpgrade()
      u.inflight.push(req)
    }

    try {
      if (req.block !== null && req.fork === fork) {
        req.block.nodes = await this.core.tree.missingNodes(2 * req.block.index)
        if (req.priority === PRIORITY.CANCELLED) return
      }
      if (req.hash !== null && req.fork === fork && req.hash.nodes === 0) {
        req.hash.nodes = await this.core.tree.missingNodes(req.hash.index)
        if (req.priority === PRIORITY.CANCELLED) return

        // nodes === 0, we already have it, bail
        if (req.hash.nodes === 0 && (req.hash.index & 1) === 0) {
          this.inflight--
          this.replicator._resolveHashLocally(this, req)
          return
        }
      }
    } catch (err) {
      this.stream.destroy(err)
      return
    }

    this.wireRequest.send(req)
    incrementTx(this.stats.wireRequest, this.replicator.stats.wireRequest)
  }
}

module.exports = class Replicator {
  static Peer = Peer // hack to be able to access Peer from outside this module

  constructor (core, key, {
    notDownloadingLinger = NOT_DOWNLOADING_SLACK,
    eagerUpgrade = true,
    allowFork = true,
    inflightRange = null,
    onpeerupdate = noop,
    onupload = noop,
    oninvalid = noop
  } = {}) {
    this.key = key
    this.discoveryKey = core.crypto.discoveryKey(key)
    this.core = core
    this.eagerUpgrade = eagerUpgrade
    this.allowFork = allowFork
    this.onpeerupdate = onpeerupdate
    this.onupload = onupload
    this.oninvalid = oninvalid
    this.ondownloading = null // optional external hook for monitoring downloading status
    this.peers = []
    this.findingPeers = 0 // updateable from the outside
    this.destroyed = false
    this.downloading = false
    this.activeSessions = 0

    this.hotswaps = new HotswapQueue()
    this.inflightRange = inflightRange || DEFAULT_MAX_INFLIGHT

    // Note: nodata and unwant not currently tracked
    // tx = transmitted, rx = received
    this.stats = {
      wireSync: { tx: 0, rx: 0 },
      wireRequest: { tx: 0, rx: 0 },
      wireCancel: { tx: 0, rx: 0 },
      wireData: { tx: 0, rx: 0 },
      wireWant: { tx: 0, rx: 0 },
      wireBitfield: { tx: 0, rx: 0 },
      wireRange: { tx: 0, rx: 0 },
      wireExtension: { tx: 0, rx: 0 },
      hotswaps: 0
    }

    this._attached = new Set()
    this._inflight = new InflightTracker()
    this._blocks = new BlockTracker()
    this._hashes = new BlockTracker()

    this._queued = []

    this._seeks = []
    this._upgrade = null
    this._reorgs = []
    this._ranges = []

    this._hadPeers = false
    this._ifAvailable = 0
    this._updatesPending = 0
    this._applyingReorg = null
    this._manifestPeer = null
    this._hasSession = false
    this._peerSessions = 0
    this._notDownloadingLinger = notDownloadingLinger
    this._downloadingTimer = null

    const self = this
    this._onstreamclose = onstreamclose

    function onstreamclose () {
      self.detachFrom(this.userData)
    }
  }

  updateActivity (inc, session) {
    this.activeSessions += inc
    this.setDownloading(this.activeSessions !== 0, session)
  }

  isDownloading () {
    return this.downloading || !this._inflight.idle
  }

  setDownloading (downloading) {
    clearTimeout(this._downloadingTimer)

    if (this.destroyed) return
    if (downloading || this._notDownloadingLinger === 0) {
      this.setDownloadingNow(downloading)
      return
    }

    this._downloadingTimer = setTimeout(setDownloadingLater, this._notDownloadingLinger, this, downloading)
  }

  setDownloadingNow (downloading) {
    this._downloadingTimer = null
    if (this.downloading === downloading) return
    this.downloading = downloading
    if (!downloading && this.isDownloading()) return

    for (const peer of this.peers) peer.signalUpgrade()

    if (downloading) { // restart channel if needed...
      for (const protomux of this._attached) {
        if (!protomux.stream.handshakeHash) continue
        if (protomux.opened({ protocol: 'hypercore/alpha', id: this.discoveryKey })) continue
        this._makePeer(protomux, true)
      }
    } else {
      for (const peer of this.peers) peer.closeIfIdle()
    }

    if (this.ondownloading !== null && downloading) this.ondownloading()
  }

  cork () {
    for (const peer of this.peers) peer.protomux.cork()
  }

  uncork () {
    for (const peer of this.peers) peer.protomux.uncork()
  }

  // Called externally when a range of new blocks has been processed/removed
  onhave (start, length, drop = false) {
    for (const peer of this.peers) peer.broadcastRange(start, length, drop)
  }

  // Called externally when a truncation upgrade has been processed
  ontruncate (newLength, truncated) {
    const notify = []

    for (const blk of this._blocks) {
      if (blk.index < newLength) continue
      notify.push(blk)
    }

    for (const blk of notify) {
      for (const r of blk.refs) {
        if (r.snapshot === false) continue
        blk.detach(r, SNAPSHOT_NOT_AVAILABLE())
      }
    }

    for (const peer of this.peers) peer._unclearLocalRange(newLength, truncated)
  }

  // Called externally when a upgrade has been processed
  onupgrade () {
    for (const peer of this.peers) peer.signalUpgrade()
    if (this._blocks.isEmpty() === false) this._resolveBlocksLocally()
    if (this._upgrade !== null) this._resolveUpgradeRequest(null)
    if (this._ranges.length !== 0 || this._seeks.length !== 0) this._updateNonPrimary(true)
  }

  // Called externally when a conflict has been detected and verified
  async onconflict (from) {
    const all = []
    for (const peer of this.peers) {
      all.push(peer._onconflict())
    }
    await Promise.allSettled(all)
  }

  async applyPendingReorg () {
    if (this._applyingReorg !== null) {
      await this._applyingReorg
      return true
    }

    for (let i = this._reorgs.length - 1; i >= 0; i--) {
      const f = this._reorgs[i]
      if (f.batch !== null && f.batch.finished) {
        await this._applyReorg(f)
        return true
      }
    }

    return false
  }

  addUpgrade (session) {
    if (this._upgrade !== null) {
      const ref = this._upgrade.attach(session)
      this._checkUpgradeIfAvailable()
      return ref
    }

    const ref = this._addUpgrade().attach(session)

    this.updateAll()

    return ref
  }

  addBlock (session, index) {
    const b = this._blocks.add(index, PRIORITY.HIGH)
    const ref = b.attach(session)

    this._queueBlock(b)
    this.updateAll()

    return ref
  }

  addSeek (session, seeker) {
    const s = new SeekRequest(this._seeks, seeker)
    const ref = s.attach(session)

    this._seeks.push(s)
    this.updateAll()

    return ref
  }

  addRange (session, { start = 0, end = -1, length = toLength(start, end), blocks = null, linear = false, ifAvailable = false } = {}) {
    if (blocks !== null) { // if using blocks, start, end just acts as frames around the blocks array
      start = 0
      end = length = blocks.length
    }

    const r = new RangeRequest(
      this._ranges,
      start,
      length === -1 ? -1 : start + length,
      linear,
      ifAvailable,
      blocks
    )

    const ref = r.attach(session)

    // Trigger this to see if this is already resolved...
    // Also auto compresses the range based on local bitfield
    clampRange(this.core, r)

    this._ranges.push(r)

    if (r.end !== -1 && r.start >= r.end) {
      this._resolveRangeRequest(r, this._ranges.length - 1)
      return ref
    }

    this.updateAll()

    return ref
  }

  cancel (ref) {
    ref.context.detach(ref, null)
  }

  clearRequests (session, err = null) {
    let cleared = false
    while (session.length > 0) {
      const ref = session[session.length - 1]
      ref.context.detach(ref, err)
      cleared = true
    }

    if (cleared) this.updateAll()
  }

  _addUpgradeMaybe () {
    return this.eagerUpgrade === true ? this._addUpgrade() : this._upgrade
  }

  // TODO: this function is OVER called atm, at each updatePeer/updateAll
  // instead its more efficient to only call it when the conditions in here change - ie on sync/add/remove peer
  // Do this when we have more tests.
  _checkUpgradeIfAvailable () {
    if (this._ifAvailable > 0 && this.peers.length < MAX_PEERS_UPGRADE) return
    if (this._upgrade === null || this._upgrade.refs.length === 0) return
    if (this._hadPeers === false && this.findingPeers > 0) return

    const maxPeers = Math.min(this.peers.length, MAX_PEERS_UPGRADE)

    // check if a peer can upgrade us

    for (let i = 0; i < maxPeers; i++) {
      const peer = this.peers[i]

      if (peer.remoteSynced === false) return

      if (this.core.tree.length === 0 && peer.remoteLength > 0) return

      if (peer.remoteLength <= this._upgrade.length || peer.remoteFork !== this._upgrade.fork) continue

      if (peer.syncsProcessing > 0) return

      if (peer.lengthAcked !== this.core.tree.length && peer.remoteFork === this.core.tree.fork) return
      if (peer.remoteCanUpgrade === true) return
    }

    // check if reorgs in progress...

    if (this._applyingReorg !== null) return

    // TODO: we prob should NOT wait for inflight reorgs here, seems better to just resolve the upgrade
    // and then apply the reorg on the next call in case it's slow - needs some testing in practice

    for (let i = 0; i < this._reorgs.length; i++) {
      const r = this._reorgs[i]
      if (r.inflight.length > 0) return
    }

    // if something is inflight, wait for that first
    if (this._upgrade.inflight.length > 0) return

    // nothing to do, indicate no update avail

    const u = this._upgrade
    this._upgrade = null
    u.resolve(false)
  }

  _addUpgrade () {
    if (this._upgrade !== null) return this._upgrade

    // TODO: needs a reorg: true/false flag to indicate if the user requested a reorg
    this._upgrade = new UpgradeRequest(this, this.core.tree.fork, this.core.tree.length)

    return this._upgrade
  }

  _addReorg (fork, peer) {
    if (this.allowFork === false) return null

    // TODO: eager gc old reorgs from the same peer
    // not super important because they'll get gc'ed when the request finishes
    // but just spam the remote can do ...

    for (const f of this._reorgs) {
      if (f.fork > fork && f.batch !== null) return null
      if (f.fork === fork) return f
    }

    const f = {
      fork,
      inflight: [],
      batch: null
    }

    this._reorgs.push(f)

    // maintain sorted by fork
    let i = this._reorgs.length - 1
    while (i > 0 && this._reorgs[i - 1].fork > fork) {
      this._reorgs[i] = this._reorgs[i - 1]
      this._reorgs[--i] = f
    }

    return f
  }

  _shouldUpgrade (peer) {
    if (this._upgrade !== null && this._upgrade.inflight.length > 0) return false
    return peer.remoteCanUpgrade === true &&
      peer.remoteLength > this.core.tree.length &&
      peer.lengthAcked === this.core.tree.length
  }

  _autoUpgrade (peer) {
    return this._upgrade !== null && peer.remoteFork === this.core.tree.fork && this._shouldUpgrade(peer)
  }

  _addPeer (peer) {
    this._hadPeers = true
    this.peers.push(peer)
    this.updatePeer(peer)
    this.onpeerupdate(true, peer)
  }

  _requestDone (id, roundtrip) {
    this._inflight.remove(id, roundtrip)
    if (this.isDownloading() === true) return
    for (const peer of this.peers) peer.signalUpgrade()
  }

  _removePeer (peer) {
    this.peers.splice(this.peers.indexOf(peer), 1)

    if (this._manifestPeer === peer) this._manifestPeer = null

    for (const req of this._inflight) {
      if (req.peer !== peer) continue
      this._inflight.remove(req.id, true)
      this._clearRequest(peer, req)
    }

    if (peer.useSession) this._closeSessionMaybe()

    this.onpeerupdate(false, peer)
    this.updateAll()
  }

  _queueBlock (b) {
    if (b.inflight.length > 0 || b.queued === true) return
    b.queued = true
    this._queued.push(b)
  }

  _resolveHashLocally (peer, req) {
    this._requestDone(req.id, false)
    this._resolveBlockRequest(this._hashes, req.hash.index / 2, null, req)
    this.updatePeer(peer)
  }

  // Runs in the background - not allowed to throw
  async _resolveBlocksLocally () {
    // TODO: check if fork compat etc. Requires that we pass down truncation info

    let clear = null

    for (const b of this._blocks) {
      if (this.core.bitfield.get(b.index) === false) continue

      try {
        b.resolve(await this.core.blocks.get(b.index))
      } catch (err) {
        b.reject(err)
      }

      if (clear === null) clear = []
      clear.push(b)
    }

    if (clear === null) return

    // Currently the block tracker does not support deletes during iteration, so we make
    // sure to clear them afterwards.
    for (const b of clear) {
      this._blocks.remove(b.index)
      removeHotswap(b)
    }
  }

  _resolveBlockRequest (tracker, index, value, req) {
    const b = tracker.remove(index)
    if (b === null) return false

    removeInflight(b.inflight, req)
    removeHotswap(b)
    b.queued = false

    b.resolve(value)

    if (b.inflight.length > 0) { // if anything is still inflight, cancel it
      for (let i = b.inflight.length - 1; i >= 0; i--) {
        const req = b.inflight[i]
        req.peer._cancelRequest(req)
      }
    }

    return true
  }

  _resolveUpgradeRequest (req) {
    if (req !== null) removeInflight(this._upgrade.inflight, req)

    if (this.core.tree.length === this._upgrade.length && this.core.tree.fork === this._upgrade.fork) return false

    const u = this._upgrade
    this._upgrade = null
    u.resolve(true)

    return true
  }

  _resolveRangeRequest (req, index) {
    const head = this._ranges.pop()

    if (index < this._ranges.length) this._ranges[index] = head

    req.resolve(true)
  }

  _clearInflightBlock (tracker, req) {
    const isBlock = tracker === this._blocks
    const index = isBlock === true ? req.block.index : req.hash.index / 2
    const b = tracker.get(index)

    if (b === null || removeInflight(b.inflight, req) === false) return

    if (removeHotswap(b) === true && b.inflight.length > 0) {
      this.hotswaps.add(b)
    }

    if (b.refs.length > 0 && isBlock === true) {
      this._queueBlock(b)
      return
    }

    b.gc()
  }

  _clearInflightUpgrade (req) {
    if (removeInflight(this._upgrade.inflight, req) === false) return
    this._upgrade.gc()
  }

  _clearInflightSeeks (req) {
    for (const s of this._seeks) {
      if (removeInflight(s.inflight, req) === false) continue
      s.gc()
    }
  }

  _clearInflightReorgs (req) {
    for (const r of this._reorgs) {
      removeInflight(r.inflight, req)
    }
  }

  _clearOldReorgs (fork) {
    for (let i = 0; i < this._reorgs.length; i++) {
      const f = this._reorgs[i]
      if (f.fork >= fork) continue
      if (i === this._reorgs.length - 1) this._reorgs.pop()
      else this._reorgs[i] = this._reorgs.pop()
      i--
    }
  }

  // "slow" updates here - async but not allowed to ever throw
  async _updateNonPrimary (updateAll) {
    // Check if running, if so skip it and the running one will issue another update for us (debounce)
    while (++this._updatesPending === 1) {
      let len = Math.min(MAX_RANGES, this._ranges.length)

      for (let i = 0; i < len; i++) {
        const r = this._ranges[i]

        clampRange(this.core, r)

        if (r.end !== -1 && r.start >= r.end) {
          this._resolveRangeRequest(r, i--)
          if (len > this._ranges.length) len--
          if (this._ranges.length === MAX_RANGES) updateAll = true
        }
      }

      for (let i = 0; i < this._seeks.length; i++) {
        const s = this._seeks[i]

        let err = null
        let res = null

        try {
          res = await s.seeker.update()
        } catch (error) {
          err = error
        }

        if (!res && !err) continue

        if (i < this._seeks.length - 1) this._seeks[i] = this._seeks.pop()
        else this._seeks.pop()

        i--

        if (err) s.reject(err)
        else s.resolve(res)
      }

      // No additional updates scheduled - break
      if (--this._updatesPending === 0) break
      // Debounce the additional updates - continue
      this._updatesPending = 0
    }

    if (this._inflight.idle || updateAll) this.updateAll()
  }

  _maybeResolveIfAvailableRanges () {
    if (this._ifAvailable > 0 || !this._inflight.idle || !this._ranges.length) return

    for (let i = 0; i < this.peers.length; i++) {
      if (this.peers[i].dataProcessing > 0) return
    }

    for (let i = 0; i < this._ranges.length; i++) {
      const r = this._ranges[i]

      if (r.ifAvailable) {
        this._resolveRangeRequest(r, i--)
      }
    }
  }

  _clearRequest (peer, req) {
    if (req.block !== null) {
      this._clearInflightBlock(this._blocks, req)
      this._unmarkInflight(req.block.index)
    }

    if (req.hash !== null) {
      this._clearInflightBlock(this._hashes, req)
    }

    if (req.upgrade !== null && this._upgrade !== null) {
      this._clearInflightUpgrade(req)
    }

    if (this._seeks.length > 0) {
      this._clearInflightSeeks(req)
    }

    if (this._reorgs.length > 0) {
      this._clearInflightReorgs(req)
    }
  }

  _onnodata (peer, req) {
    this._clearRequest(peer, req)
    this.updateAll()
  }

  _openSkipBitfield () {
    // technically the skip bitfield gets bits cleared if .clear() is called
    // also which might be in inflight also, but that just results in that section being overcalled shortly
    // worst case, so ok for now

    const bitfield = this.core.openSkipBitfield()

    for (const req of this._inflight) {
      if (req.block) bitfield.set(req.block.index, true) // skip
    }
  }

  _markInflight (index) {
    if (this.core.skipBitfield !== null) this.core.skipBitfield.set(index, true)
    for (const peer of this.peers) peer._markInflight(index)
  }

  _unmarkInflight (index) {
    if (this.core.skipBitfield !== null) this.core.skipBitfield.set(index, this.core.bitfield.get(index))
    for (const peer of this.peers) peer._resetMissingBlock(index)
  }

  _ondata (peer, req, data) {
    if (data.block !== null) {
      this._resolveBlockRequest(this._blocks, data.block.index, data.block.value, req)
    }

    if (data.hash !== null && (data.hash.index & 1) === 0) {
      this._resolveBlockRequest(this._hashes, data.hash.index / 2, null, req)
    }

    if (this._upgrade !== null) {
      this._resolveUpgradeRequest(req)
    }

    if (this._seeks.length > 0) {
      this._clearInflightSeeks(req)
    }

    if (this._reorgs.length > 0) {
      this._clearInflightReorgs(req)
    }

    if (this._manifestPeer === peer && this.core.header.manifest !== null) {
      this._manifestPeer = null
    }

    if (this._seeks.length > 0 || this._ranges.length > 0) this._updateNonPrimary(this._seeks.length > 0)
    this.updatePeer(peer)
  }

  _onwant (peer, start, length) {
    const contig = Math.min(this.core.tree.length, this.core.header.hints.contiguousLength)

    if (start + length < contig || (this.core.tree.length === contig)) {
      peer.wireRange.send({
        drop: false,
        start: 0,
        length: contig
      })
      incrementTx(peer.stats.wireRange, this.stats.wireRange)
      return
    }

    length = Math.min(length, this.core.tree.length - start)

    peer.protomux.cork()

    for (const msg of this.core.bitfield.want(start, length)) {
      peer.wireBitfield.send(msg)
      incrementTx(peer.stats.wireBitfield, this.stats.wireBitfield)
    }

    peer.protomux.uncork()
  }

  async _onreorgdata (peer, req, data) {
    const newBatch = data.upgrade && await this.core.verifyReorg(data)
    const f = this._addReorg(data.fork, peer)

    if (f === null) {
      this.updateAll()
      return
    }

    removeInflight(f.inflight, req)

    if (f.batch) {
      await f.batch.update(data)
    } else if (data.upgrade) {
      f.batch = newBatch

      // Remove "older" reorgs in progress as we just verified this one.
      this._clearOldReorgs(f.fork)
    }

    if (f.batch && f.batch.finished) {
      if (this._addUpgradeMaybe() !== null) {
        await this._applyReorg(f)
      }
    }

    this.updateAll()
  }

  // Never throws, allowed to run in the background
  async _applyReorg (f) {
    // TODO: more optimal here to check if potentially a better reorg
    // is available, ie higher fork, and request that one first.
    // This will request that one after this finishes, which is fine, but we
    // should investigate the complexity in going the other way

    const u = this._upgrade

    this._reorgs = [] // clear all as the nodes are against the old tree - easier
    this._applyingReorg = this.core.reorg(f.batch, null) // TODO: null should be the first/last peer?

    try {
      await this._applyingReorg
    } catch (err) {
      this._upgrade = null
      u.reject(err)
    }

    this._applyingReorg = null

    if (this._upgrade !== null) {
      this._resolveUpgradeRequest(null)
    }

    for (const peer of this.peers) this._updateFork(peer)

    // TODO: all the remaining is a tmp workaround until we have a flag/way for ANY_FORK
    for (const r of this._ranges) {
      r.start = r.userStart
      r.end = r.userEnd
    }

    this.updateAll()
  }

  _maybeUpdate () {
    return this._upgrade !== null && this._upgrade.inflight.length === 0
  }

  _maybeRequestManifest () {
    return this.core.header.manifest === null && this._manifestPeer === null
  }

  _updateFork (peer) {
    if (this._applyingReorg !== null || this.allowFork === false || peer.remoteFork <= this.core.tree.fork) {
      return false
    }

    const f = this._addReorg(peer.remoteFork, peer)

    // TODO: one per peer is better
    if (f !== null && f.batch === null && f.inflight.length === 0) {
      return peer._requestForkProof(f)
    }

    return false
  }

  _updateHotswap (peer) {
    const maxHotswaps = peer.getMaxHotswapInflight()
    if (!peer.isActive() || peer.inflight >= maxHotswaps) return

    for (const b of this.hotswaps.pick(peer)) {
      if (peer._requestBlock(b) === false) continue
      peer.stats.hotswaps++
      peer.replicator.stats.hotswaps++
      if (peer.inflight >= maxHotswaps) break
    }
  }

  _updatePeer (peer) {
    if (!peer.isActive() || peer.inflight >= peer.getMaxInflight()) {
      return false
    }

    // Eagerly request the manifest even if the remote length is 0. If not 0 we'll get as part of the upgrade request...
    if (this._maybeRequestManifest() === true && peer.remoteLength === 0 && peer.remoteHasManifest === true) {
      this._manifestPeer = peer
      peer._requestManifest()
    }

    for (const s of this._seeks) {
      if (s.inflight.length > 0) continue // TODO: one per peer is better
      if (peer._requestSeek(s) === true) {
        return true
      }
    }

    // Implied that any block in the queue should be requested, no matter how many inflights
    const blks = new RandomIterator(this._queued)

    for (const b of blks) {
      if (b.queued === false || peer._requestBlock(b) === true) {
        b.queued = false
        blks.dequeue()
        return true
      }
    }

    return false
  }

  _updatePeerNonPrimary (peer) {
    if (!peer.isActive() || peer.inflight >= peer.getMaxInflight()) {
      return false
    }

    const ranges = new RandomIterator(this._ranges)
    let tried = 0

    for (const r of ranges) {
      if (peer._requestRange(r) === true) {
        return true
      }
      if (++tried >= MAX_RANGES) break
    }

    // Iterate from newest fork to oldest fork...
    for (let i = this._reorgs.length - 1; i >= 0; i--) {
      const f = this._reorgs[i]
      if (f.batch !== null && f.inflight.length === 0 && peer._requestForkRange(f) === true) {
        return true
      }
    }

    if (this._maybeUpdate() === true && peer._requestUpgrade(this._upgrade) === true) {
      return true
    }

    return false
  }

  updatePeer (peer) {
    // Quick shortcut to wait for flushing reorgs - not needed but less waisted requests
    if (this._applyingReorg !== null) return

    while (this._updatePeer(peer) === true);
    while (this._updatePeerNonPrimary(peer) === true);

    if (this.peers.length > 1 && this._blocks.isEmpty() === false) {
      this._updateHotswap(peer)
    }

    this._checkUpgradeIfAvailable()
    this._maybeResolveIfAvailableRanges()
  }

  updateAll () {
    // Quick shortcut to wait for flushing reorgs - not needed but less waisted requests
    if (this._applyingReorg !== null) return

    const peers = new RandomIterator(this.peers)

    for (const peer of peers) {
      if (this._updatePeer(peer) === true) {
        peers.requeue()
      }
    }

    // Check if we can skip the non primary check fully
    if (this._maybeUpdate() === false && this._ranges.length === 0 && this._reorgs.length === 0) {
      this._checkUpgradeIfAvailable()
      return
    }

    for (const peer of peers.restart()) {
      if (this._updatePeerNonPrimary(peer) === true) {
        peers.requeue()
      }
    }

    this._checkUpgradeIfAvailable()
    this._maybeResolveIfAvailableRanges()
  }

  _closeSessionMaybe () {
    if (this._hasSession && this._peerSessions === 0) {
      this._hasSession = false
      this.core.active--
    }

    // we were the last active ref, so lets shut things down
    if (this.core.active === 0 && this.core.sessions.length === 0) {
      this.destroy()
      this.core.close().catch(safetyCatch)
      return
    }

    // in case one session is still alive but its been marked for auto close also kill it
    if (this.core.sessions.length === 1 && this.core.active === 1 && this.core.sessions[0].autoClose) {
      this.core.sessions[0].close().catch(safetyCatch)
    }
  }

  attached (protomux) {
    return this._attached.has(protomux)
  }

  ensureSession () {
    if (this._hasSession) return
    this._hasSession = true
    this.core.active++
  }

  attachTo (protomux, useSession) {
    if (this.core.closed) return
    if (useSession) this.ensureSession()

    const makePeer = this._makePeer.bind(this, protomux, useSession)

    this._attached.add(protomux)
    protomux.pair({ protocol: 'hypercore/alpha', id: this.discoveryKey }, makePeer)
    protomux.stream.setMaxListeners(0)
    protomux.stream.on('close', this._onstreamclose)

    if (useSession) this._peerSessions++
    this._ifAvailable++

    protomux.stream.opened.then((opened) => {
      if (useSession) this._peerSessions--
      this._ifAvailable--

      if (opened && !this.destroyed) makePeer()
      else if (useSession) this._closeSessionMaybe()
      this._checkUpgradeIfAvailable()
    })
  }

  detachFrom (protomux) {
    if (this._attached.delete(protomux)) {
      protomux.stream.removeListener('close', this._onstreamclose)
      protomux.unpair({ protocol: 'hypercore/alpha', id: this.discoveryKey })
    }
  }

  destroy () {
    this.destroyed = true

    if (this._downloadingTimer) {
      clearTimeout(this._downloadingTimer)
      this._downloadingTimer = null
    }

    const waiting = []

    while (this.peers.length) {
      const peer = this.peers[this.peers.length - 1]
      this.detachFrom(peer.protomux)
      peer.channel.close() // peer is removed from array in onclose
      waiting.push(peer.channel.fullyClosed())
    }

    for (const protomux of this._attached) {
      this.detachFrom(protomux)
    }

    return Promise.all(waiting)
  }

  _makePeer (protomux, useSession) {
    const replicator = this
    if (protomux.opened({ protocol: 'hypercore/alpha', id: this.discoveryKey })) return onnochannel()

    const channel = protomux.createChannel({
      userData: null,
      protocol: 'hypercore/alpha',
      aliases: ['hypercore'],
      id: this.discoveryKey,
      handshake: m.wire.handshake,
      messages: [
        { encoding: m.wire.sync, onmessage: onwiresync },
        { encoding: m.wire.request, onmessage: onwirerequest },
        { encoding: m.wire.cancel, onmessage: onwirecancel },
        { encoding: m.wire.data, onmessage: onwiredata },
        { encoding: m.wire.noData, onmessage: onwirenodata },
        { encoding: m.wire.want, onmessage: onwirewant },
        { encoding: m.wire.unwant, onmessage: onwireunwant },
        { encoding: m.wire.bitfield, onmessage: onwirebitfield },
        { encoding: m.wire.range, onmessage: onwirerange },
        { encoding: m.wire.extension, onmessage: onwireextension }
      ],
      onopen: onwireopen,
      onclose: onwireclose,
      ondrain: onwiredrain
    })

    if (channel === null) return onnochannel()

    const peer = new Peer(replicator, protomux, channel, useSession, this.inflightRange)
    const stream = protomux.stream

    if (useSession) {
      // session may have been unref'd underneath us
      replicator.ensureSession()
      replicator._peerSessions++
    }

    peer.channel.open({
      seeks: true,
      capability: caps.replicate(stream.isInitiator, this.key, stream.handshakeHash)
    })

    return true

    function onnochannel () {
      if (useSession) replicator._closeSessionMaybe()
      return false
    }
  }
}

function matchingRequest (req, data) {
  if (data.block !== null && (req.block === null || req.block.index !== data.block.index)) return false
  if (data.hash !== null && (req.hash === null || req.hash.index !== data.hash.index)) return false
  if (data.seek !== null && (req.seek === null || req.seek.bytes !== data.seek.bytes)) return false
  if (data.upgrade !== null && req.upgrade === null) return false
  return req.fork === data.fork
}

function removeHotswap (block) {
  if (block.hotswap === null) return false
  block.hotswap.ref.remove(block)
  return true
}

function removeInflight (inf, req) {
  const i = inf.indexOf(req)
  if (i === -1) return false
  if (i < inf.length - 1) inf[i] = inf.pop()
  else inf.pop()
  return true
}

function noop () {}

function toLength (start, end) {
  return end === -1 ? -1 : (end < start ? 0 : end - start)
}

function clampRange (core, r) {
  if (r.blocks === null) {
    const start = core.bitfield.firstUnset(r.start)

    if (r.end === -1) r.start = start === -1 ? core.tree.length : start
    else if (start === -1 || start >= r.end) r.start = r.end
    else {
      r.start = start

      const end = core.bitfield.lastUnset(r.end - 1)

      if (end === -1 || start >= end + 1) r.end = r.start
      else r.end = end + 1
    }
  } else {
    while (r.start < r.end && core.bitfield.get(r.blocks[r.start])) r.start++
    while (r.start < r.end && core.bitfield.get(r.blocks[r.end - 1])) r.end--
  }
}

function onrequesttimeout (req) {
  if (req.context) req.context.detach(req, REQUEST_TIMEOUT())
}

function destroyRequestTimeout (req) {
  if (req.timeout !== null) {
    clearTimeout(req.timeout)
    req.timeout = null
  }
}

function isCriticalError (err) {
  // TODO: expose .critical or similar on the hypercore errors that are critical (if all not are)
  return err.name === 'HypercoreError'
}

function onwireopen (m, c) {
  return c.userData.onopen(m)
}

function onwireclose (isRemote, c) {
  return c.userData.onclose(isRemote)
}

function onwiredrain (c) {
  return c.userData.ondrain()
}

function onwiresync (m, c) {
  incrementRx(c.userData.stats.wireSync, c.userData.replicator.stats.wireSync)
  return c.userData.onsync(m)
}

function onwirerequest (m, c) {
  incrementRx(c.userData.stats.wireRequest, c.userData.replicator.stats.wireRequest)
  return c.userData.onrequest(m)
}

function onwirecancel (m, c) {
  incrementRx(c.userData.stats.wireCancel, c.userData.replicator.stats.wireCancel)
  return c.userData.oncancel(m)
}

function onwiredata (m, c) {
  incrementRx(c.userData.stats.wireData, c.userData.replicator.stats.wireData)
  return c.userData.ondata(m)
}

function onwirenodata (m, c) {
  return c.userData.onnodata(m)
}

function onwirewant (m, c) {
  incrementRx(c.userData.stats.wireWant, c.userData.replicator.stats.wireWant)
  return c.userData.onwant(m)
}

function onwireunwant (m, c) {
  return c.userData.onunwant(m)
}

function onwirebitfield (m, c) {
  incrementRx(c.userData.stats.wireBitfield, c.userData.replicator.stats.wireBitfield)
  return c.userData.onbitfield(m)
}

function onwirerange (m, c) {
  incrementRx(c.userData.stats.wireRange, c.userData.replicator.stats.wireRange)
  return c.userData.onrange(m)
}

function onwireextension (m, c) {
  incrementRx(c.userData.stats.wireExtension, c.userData.replicator.stats.wireExtension)
  return c.userData.onextension(m)
}

function setDownloadingLater (repl, downloading, session) {
  repl.setDownloadingNow(downloading, session)
}

function isBlockRequest (req) {
  return req !== null && req.block !== null
}

function isUpgradeRequest (req) {
  return req !== null && req.upgrade !== null
}

function incrementTx (stats1, stats2) {
  stats1.tx++
  stats2.tx++
}

function incrementRx (stats1, stats2) {
  stats1.rx++
  stats2.rx++
}

},{"./caps":316,"./hotswap-queue":320,"./messages":323,"./receiver-queue":327,"./remote-bitfield":328,"b4a":102,"flat-tree":262,"hypercore-errors":306,"random-array-iterator":464,"safety-catch":486}],330:[function(require,module,exports){
const { Writable, Readable } = require('streamx')

class ReadStream extends Readable {
  constructor (core, opts = {}) {
    super()

    this.core = core
    this.start = opts.start || 0
    this.end = typeof opts.end === 'number' ? opts.end : -1
    this.snapshot = !opts.live && opts.snapshot !== false
    this.live = !!opts.live
  }

  _open (cb) {
    this._openP().then(cb, cb)
  }

  _read (cb) {
    this._readP().then(cb, cb)
  }

  async _openP () {
    if (this.end === -1) await this.core.update()
    else await this.core.ready()
    if (this.snapshot && this.end === -1) this.end = this.core.length
  }

  async _readP () {
    const end = this.live ? -1 : (this.end === -1 ? this.core.length : this.end)
    if (end >= 0 && this.start >= end) {
      this.push(null)
      return
    }

    this.push(await this.core.get(this.start++))
  }
}

exports.ReadStream = ReadStream

class WriteStream extends Writable {
  constructor (core) {
    super()
    this.core = core
  }

  _writev (batch, cb) {
    this._writevP(batch).then(cb, cb)
  }

  async _writevP (batch) {
    await this.core.append(batch)
  }
}

exports.WriteStream = WriteStream

class ByteStream extends Readable {
  constructor (core, opts = {}) {
    super()

    this._core = core
    this._index = 0
    this._range = null

    this._byteOffset = opts.byteOffset || 0
    this._byteLength = typeof opts.byteLength === 'number' ? opts.byteLength : -1
    this._prefetch = typeof opts.prefetch === 'number' ? opts.prefetch : 32

    this._applyOffset = this._byteOffset > 0
  }

  _open (cb) {
    this._openp().then(cb, cb)
  }

  _read (cb) {
    this._readp().then(cb, cb)
  }

  async _openp () {
    if (this._byteLength === -1) {
      await this._core.update()
      this._byteLength = Math.max(this._core.byteLength - this._byteOffset, 0)
    }
  }

  async _readp () {
    let data = null

    if (this._byteLength === 0) {
      this.push(null)
      return
    }

    let relativeOffset = 0

    if (this._applyOffset) {
      this._applyOffset = false

      const [block, byteOffset] = await this._core.seek(this._byteOffset)

      this._index = block
      relativeOffset = byteOffset
    }

    this._predownload(this._index + 1)
    data = await this._core.get(this._index++, { valueEncoding: 'binary' })

    if (relativeOffset > 0) data = data.subarray(relativeOffset)

    if (data.byteLength > this._byteLength) data = data.subarray(0, this._byteLength)
    this._byteLength -= data.byteLength

    this.push(data)
    if (this._byteLength === 0) this.push(null)
  }

  _predownload (index) {
    if (this._range) this._range.destroy()
    this._range = this._core.download({ start: index, end: index + this._prefetch, linear: true })
  }

  _destroy (cb) {
    if (this._range) this._range.destroy()
    cb(null)
  }
}

exports.ByteStream = ByteStream

},{"streamx":578}],331:[function(require,module,exports){
const defaultCrypto = require('hypercore-crypto')
const b4a = require('b4a')
const c = require('compact-encoding')
const flat = require('flat-tree')
const { BAD_ARGUMENT } = require('hypercore-errors')
const unslab = require('unslab')

const m = require('./messages')
const multisig = require('./multisig')
const caps = require('./caps')

class Signer {
  constructor (crypto, manifestHash, version, index, { signature = 'ed25519', publicKey, namespace = caps.DEFAULT_NAMESPACE } = {}) {
    if (!publicKey) throw BAD_ARGUMENT('public key is required for a signer')
    if (signature !== 'ed25519') throw BAD_ARGUMENT('Only Ed25519 signatures are supported')

    this.crypto = crypto
    this.manifestHash = manifestHash
    this.version = version
    this.signer = index
    this.signature = signature
    this.publicKey = publicKey
    this.namespace = namespace
  }

  _ctx () {
    return this.version === 0 ? this.namespace : this.manifestHash
  }

  verify (batch, signature) {
    return this.crypto.verify(batch.signable(this._ctx()), signature, this.publicKey)
  }

  sign (batch, keyPair) {
    return this.crypto.sign(batch.signable(this._ctx()), keyPair.secretKey)
  }
}

class CompatSigner extends Signer {
  constructor (crypto, index, signer, legacy) {
    super(crypto, null, 0, index, signer)
    this.legacy = legacy
  }

  verify (batch, signature) {
    return this.crypto.verify(batch.signableCompat(this.legacy), signature, this.publicKey)
  }

  sign (batch, keyPair) {
    return this.crypto.sign(batch.signableCompat(this.legacy), keyPair.secretKey)
  }
}

module.exports = class Verifier {
  constructor (manifestHash, manifest, { compat = isCompat(manifestHash, manifest), crypto = defaultCrypto, legacy = false } = {}) {
    const self = this

    this.manifestHash = manifestHash
    this.compat = compat || manifest === null
    this.version = this.compat ? 0 : typeof manifest.version === 'number' ? manifest.version : 1
    this.hash = manifest.hash || 'blake2b'
    this.allowPatch = !this.compat && !!manifest.allowPatch
    this.quorum = this.compat ? 1 : defaultQuorum(manifest)

    this.signers = manifest.signers ? manifest.signers.map(createSigner) : []
    this.prologue = this.compat ? null : (manifest.prologue || null)

    function createSigner (signer, index) {
      return self.compat
        ? new CompatSigner(crypto, index, signer, legacy)
        : new Signer(crypto, manifestHash, self.version, index, signer)
    }
  }

  _verifyCompat (batch, signature) {
    if (!signature) return false

    if (this.compat || (!this.allowPatch && this.signers.length === 1)) {
      return !!signature && this.signers[0].verify(batch, signature)
    }

    return this._verifyMulti(batch, signature)
  }

  _inflate (signature) {
    if (this.version >= 1) return multisig.inflate(signature)
    const { proofs, patch } = multisig.inflatev0(signature)

    return {
      proofs: proofs.map(proofToVersion1),
      patch
    }
  }

  _verifyMulti (batch, signature) {
    if (!signature || this.quorum === 0) return false

    const { proofs, patch } = this._inflate(signature)
    if (proofs.length < this.quorum) return false

    const tried = new Uint8Array(this.signers.length)
    const nodes = this.allowPatch && patch.length ? toMap(patch) : null

    for (let i = 0; i < this.quorum; i++) {
      const inp = proofs[i]

      let tree = batch

      if (inp.patch && this.allowPatch) {
        tree = batch.clone()

        const upgrade = generateUpgrade(nodes, batch.length, inp.patch)
        const proof = { fork: tree.fork, block: null, hash: null, seek: null, upgrade, manifest: null }

        try {
          if (!tree.verifyUpgrade(proof)) return false
        } catch {
          return false
        }
      }

      if (inp.signer >= this.signers.length || tried[inp.signer]) return false
      tried[inp.signer] = 1

      const s = this.signers[inp.signer]
      if (!s.verify(tree, inp.signature)) return false
    }

    return true
  }

  verify (batch, signature) {
    if (this.version !== 1) {
      return this._verifyCompat(batch, signature)
    }

    if (this.prologue !== null && batch.length <= this.prologue.length) {
      return batch.length === this.prologue.length && b4a.equals(batch.hash(), this.prologue.hash)
    }

    return this._verifyMulti(batch, signature)
  }

  // TODO: better api for this that is more ... multisig-ey
  sign (batch, keyPair) {
    if (!keyPair || !keyPair.secretKey) throw BAD_ARGUMENT('No key pair was passed')

    for (const s of this.signers) {
      if (b4a.equals(s.publicKey, keyPair.publicKey)) {
        const signature = s.sign(batch, keyPair)
        if (this.signers.length !== 1 || this.version === 0) return signature
        return this.assemble([{ signer: 0, signature, patch: 0, nodes: null }])
      }
    }

    throw BAD_ARGUMENT('Public key is not a declared signer')
  }

  assemble (inputs) {
    return this.version === 0 ? multisig.assemblev0(inputs) : multisig.assemble(inputs)
  }

  static manifestHash (manifest) {
    return manifestHash(manifest)
  }

  static defaultSignerManifest (publicKey) {
    return {
      version: 1,
      hash: 'blake2b',
      allowPatch: false,
      quorum: 1,
      signers: [{
        signature: 'ed25519',
        namespace: caps.DEFAULT_NAMESPACE,
        publicKey
      }],
      prologue: null
    }
  }

  static fromManifest (manifest, opts) {
    const m = this.createManifest(manifest)
    return new this(manifestHash(m), m, opts)
  }

  static createManifest (inp) {
    if (!inp) return null

    const manifest = {
      version: typeof inp.version === 'number' ? inp.version : 1,
      hash: 'blake2b',
      allowPatch: !!inp.allowPatch,
      quorum: defaultQuorum(inp),
      signers: inp.signers ? inp.signers.map(parseSigner) : [],
      prologue: null
    }

    if (inp.hash && inp.hash !== 'blake2b') throw BAD_ARGUMENT('Only Blake2b hashes are supported')

    if (inp.prologue) {
      if (!(b4a.isBuffer(inp.prologue.hash) && inp.prologue.hash.byteLength === 32) || !(inp.prologue.length >= 0)) {
        throw BAD_ARGUMENT('Invalid prologue')
      }

      manifest.prologue = inp.prologue
      manifest.prologue.hash = unslab(manifest.prologue.hash)
    }

    return manifest
  }

  static isValidManifest (key, manifest) {
    return b4a.equals(key, manifestHash(manifest))
  }

  static isCompat (key, manifest) {
    return isCompat(key, manifest)
  }

  static sign (manifest, batch, keyPair, opts) {
    return Verifier.fromManifest(manifest, opts).sign(batch, keyPair)
  }
}

function toMap (nodes) {
  const m = new Map()
  for (const node of nodes) m.set(node.index, node)
  return m
}

function isCompat (key, manifest) {
  return !!(manifest && manifest.signers.length === 1 && b4a.equals(key, manifest.signers[0].publicKey))
}

function defaultQuorum (man) {
  if (typeof man.quorum === 'number') return man.quorum
  if (!man.signers || !man.signers.length) return 0
  return (man.signers.length >> 1) + 1
}

function generateUpgrade (patch, start, length) {
  const upgrade = { start, length, nodes: null, additionalNodes: [], signature: null }

  const from = start * 2
  const to = from + length * 2

  for (const ite = flat.iterator(0); ite.fullRoot(to); ite.nextTree()) {
    if (ite.index + ite.factor / 2 < from) continue

    if (upgrade.nodes === null && ite.contains(from - 2)) {
      upgrade.nodes = []

      const root = ite.index
      const target = from - 2

      ite.seek(target)

      while (ite.index !== root) {
        ite.sibling()
        if (ite.index > target) upgrade.nodes.push(patch.get(ite.index))
        ite.parent()
      }

      continue
    }

    if (upgrade.nodes === null) upgrade.nodes = []
    upgrade.nodes.push(patch.get(ite.index))
  }

  if (upgrade.nodes === null) upgrade.nodes = []
  return upgrade
}

function parseSigner (signer) {
  validateSigner(signer)
  return {
    signature: 'ed25519',
    namespace: unslab(signer.namespace || caps.DEFAULT_NAMESPACE),
    publicKey: unslab(signer.publicKey)
  }
}

function validateSigner (signer) {
  if (!signer || !signer.publicKey) throw BAD_ARGUMENT('Signer missing public key')
  if (signer.signature && signer.signature !== 'ed25519') throw BAD_ARGUMENT('Only Ed25519 signatures are supported')
}

function manifestHash (manifest) {
  const state = { start: 0, end: 32, buffer: null }
  m.manifest.preencode(state, manifest)
  state.buffer = b4a.allocUnsafe(state.end)
  c.raw.encode(state, caps.MANIFEST)
  m.manifest.encode(state, manifest)
  return defaultCrypto.hash(state.buffer)
}

function proofToVersion1 (proof) {
  return {
    signer: proof.signer,
    signature: proof.signature,
    patch: proof.patch ? proof.patch.length : 0
  }
}

},{"./caps":316,"./messages":323,"./multisig":324,"b4a":102,"compact-encoding":178,"flat-tree":262,"hypercore-crypto":305,"hypercore-errors":306,"unslab":590}],332:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"./crypto_stream_chacha20":347,"./crypto_verify":348,"./internal/poly1305":353,"dup":35,"nanoassert":390}],333:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"./crypto_verify":348,"dup":36,"nanoassert":390,"sha512-universal":501}],334:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./crypto_generichash":335,"./crypto_hash":336,"./crypto_scalarmult":341,"./crypto_secretbox":342,"./crypto_stream":346,"./randombytes":355,"dup":37,"nanoassert":390,"xsalsa20":600}],335:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"blake2b":125,"dup":38}],336:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39,"nanoassert":390,"sha512-universal":501}],337:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"dup":40,"nanoassert":390,"sha256-universal":497}],338:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"./randombytes":355,"blake2b":125,"dup":41,"nanoassert":390}],339:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"./crypto_generichash":335,"./crypto_scalarmult":341,"./randombytes":355,"dup":42,"nanoassert":390}],340:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"./crypto_verify":348,"./internal/poly1305":353,"dup":43,"nanoassert":390}],341:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"./internal/ed25519":351,"dup":44}],342:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"./crypto_onetimeauth":340,"./crypto_stream":346,"dup":45,"nanoassert":390}],343:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"./crypto_stream_chacha20":347,"./helpers":349,"./internal/hchacha20":352,"./internal/poly1305":353,"./randombytes":355,"dup":46,"nanoassert":390}],344:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"dup":47,"siphash24":511}],345:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"./crypto_hash":336,"./crypto_hash.js":336,"./crypto_scalarmult.js":341,"./crypto_verify":348,"./internal/ed25519":351,"./randombytes":355,"dup":48,"nanoassert":390}],346:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49,"xsalsa20":600}],347:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"chacha20-universal":173,"dup":50,"nanoassert":390}],348:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],349:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./crypto_verify":348,"dup":52,"nanoassert":390}],350:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./crypto_aead":332,"./crypto_auth":333,"./crypto_box":334,"./crypto_generichash":335,"./crypto_hash":336,"./crypto_hash_sha256":337,"./crypto_kdf":338,"./crypto_kx":339,"./crypto_onetimeauth":340,"./crypto_scalarmult":341,"./crypto_secretbox":342,"./crypto_secretstream":343,"./crypto_shorthash":344,"./crypto_sign":345,"./crypto_stream":346,"./crypto_stream_chacha20":347,"./crypto_verify":348,"./helpers":349,"./memory":354,"./randombytes":355,"dup":53}],351:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}],352:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"../memory":354,"dup":55,"nanoassert":390}],353:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"dup":56}],354:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"dup":57}],355:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58,"nanoassert":390}],356:[function(require,module,exports){
const { hash, createKeyPair } = require('./lib/crypto')

module.exports = class Stub {
  constructor () {
    throw new Error('hyperdht is not supported in browsers')
  }

  static keyPair (seed) {
    return createKeyPair(seed)
  }

  static hash (data) {
    return hash(data)
  }
}

},{"./lib/crypto":358}],357:[function(require,module,exports){
(function (global){(function (){
const crypto = require('hypercore-crypto')

const COMMANDS = exports.COMMANDS = {
  PEER_HANDSHAKE: 0,
  PEER_HOLEPUNCH: 1,
  FIND_PEER: 2,
  LOOKUP: 3,
  ANNOUNCE: 4,
  UNANNOUNCE: 5,
  MUTABLE_PUT: 6,
  MUTABLE_GET: 7,
  IMMUTABLE_PUT: 8,
  IMMUTABLE_GET: 9
}

exports.BOOTSTRAP_NODES = global.Pear?.config.dht?.bootstrap || [
  '88.99.3.86@node1.hyperdht.org:49737',
  '142.93.90.113@node2.hyperdht.org:49737',
  '138.68.147.8@node3.hyperdht.org:49737'
]

exports.KNOWN_NODES = global.Pear?.config.dht?.nodes || []

exports.FIREWALL = {
  UNKNOWN: 0,
  OPEN: 1,
  CONSISTENT: 2,
  RANDOM: 3
}

exports.ERROR = {
  // noise / connection related
  NONE: 0,
  ABORTED: 1,
  VERSION_MISMATCH: 2,
  TRY_LATER: 3,
  // dht related
  SEQ_REUSED: 16,
  SEQ_TOO_LOW: 17
}

const [
  NS_ANNOUNCE,
  NS_UNANNOUNCE,
  NS_MUTABLE_PUT,
  NS_PEER_HANDSHAKE,
  NS_PEER_HOLEPUNCH
] = crypto.namespace('hyperswarm/dht', [
  COMMANDS.ANNOUNCE,
  COMMANDS.UNANNOUNCE,
  COMMANDS.MUTABLE_PUT,
  COMMANDS.PEER_HANDSHAKE,
  COMMANDS.PEER_HOLEPUNCH
])

exports.NS = {
  ANNOUNCE: NS_ANNOUNCE,
  UNANNOUNCE: NS_UNANNOUNCE,
  MUTABLE_PUT: NS_MUTABLE_PUT,
  PEER_HANDSHAKE: NS_PEER_HANDSHAKE,
  PEER_HOLEPUNCH: NS_PEER_HOLEPUNCH
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"hypercore-crypto":305}],358:[function(require,module,exports){
const sodium = require('sodium-universal')
const b4a = require('b4a')

function hash (data) {
  const out = b4a.allocUnsafe(32)
  sodium.crypto_generichash(out, data)
  return out
}

function unslabbedHash (data) {
  const out = b4a.allocUnsafeSlow(32)
  sodium.crypto_generichash(out, data)
  return out
}

function createKeyPair (seed) {
  const publicKey = b4a.alloc(32)
  const secretKey = b4a.alloc(64)
  if (seed) sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed)
  else sodium.crypto_sign_keypair(publicKey, secretKey)
  return { publicKey, secretKey }
}

module.exports = {
  hash,
  unslabbedHash,
  createKeyPair
}

},{"b4a":102,"sodium-universal":556}],359:[function(require,module,exports){
const c = require('compact-encoding')
const net = require('compact-encoding-net')

const ipv4 = {
  ...net.ipv4Address,
  decode (state) {
    const ip = net.ipv4Address.decode(state)
    return {
      host: ip.host,
      port: ip.port
    }
  }
}

const ipv4Array = c.array(ipv4)

const ipv6 = {
  ...net.ipv6Address,
  decode (state) {
    const ip = net.ipv6Address.decode(state)
    return {
      host: ip.host,
      port: ip.port
    }
  }
}

const ipv6Array = c.array(ipv6)

exports.handshake = {
  preencode (state, m) {
    state.end += 1 + 1 + (m.peerAddress ? 6 : 0) + (m.relayAddress ? 6 : 0)
    c.buffer.preencode(state, m.noise)
  },
  encode (state, m) {
    const flags = (m.peerAddress ? 1 : 0) | (m.relayAddress ? 2 : 0)

    c.uint.encode(state, flags)
    c.uint.encode(state, m.mode)
    c.buffer.encode(state, m.noise)

    if (m.peerAddress) ipv4.encode(state, m.peerAddress)
    if (m.relayAddress) ipv4.encode(state, m.relayAddress)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      mode: c.uint.decode(state),
      noise: c.buffer.decode(state),
      peerAddress: (flags & 1) ? ipv4.decode(state) : null,
      relayAddress: (flags & 2) ? ipv4.decode(state) : null
    }
  }
}

const relayInfo = {
  preencode (state, m) {
    state.end += 12
  },
  encode (state, m) {
    ipv4.encode(state, m.relayAddress)
    ipv4.encode(state, m.peerAddress)
  },
  decode (state) {
    return {
      relayAddress: ipv4.decode(state),
      peerAddress: ipv4.decode(state)
    }
  }
}

const relayInfoArray = c.array(relayInfo)

const holepunchInfo = {
  preencode (state, m) {
    c.uint.preencode(state, m.id)
    relayInfoArray.preencode(state, m.relays)
  },
  encode (state, m) {
    c.uint.encode(state, m.id)
    relayInfoArray.encode(state, m.relays)
  },
  decode (state) {
    return {
      id: c.uint.decode(state),
      relays: relayInfoArray.decode(state)
    }
  }
}

const udxInfo = {
  preencode (state, m) {
    state.end += 2 // version + features
    c.uint.preencode(state, m.id)
    c.uint.preencode(state, m.seq)
  },
  encode (state, m) {
    c.uint.encode(state, 1)
    c.uint.encode(state, m.reusableSocket ? 1 : 0)
    c.uint.encode(state, m.id)
    c.uint.encode(state, m.seq)
  },
  decode (state) {
    const version = c.uint.decode(state)
    const features = c.uint.decode(state)

    return {
      version,
      reusableSocket: (features & 1) !== 0,
      id: c.uint.decode(state),
      seq: c.uint.decode(state)
    }
  }
}

const secretStreamInfo = {
  preencode (state, m) {
    c.uint.preencode(state, 1)
  },
  encode (state, m) {
    c.uint.encode(state, 1)
  },
  decode (state) {
    return {
      version: c.uint.decode(state)
    }
  }
}

const relayThroughInfo = {
  preencode (state, m) {
    c.uint.preencode(state, 1) // version
    c.uint.preencode(state, 0) // flags
    c.fixed32.preencode(state, m.publicKey)
    c.fixed32.preencode(state, m.token)
  },
  encode (state, m) {
    c.uint.encode(state, 1)
    c.uint.encode(state, 0)
    c.fixed32.encode(state, m.publicKey)
    c.fixed32.encode(state, m.token)
  },
  decode (state) {
    const version = c.uint.decode(state)
    c.uint.decode(state)

    return {
      version,
      publicKey: c.fixed32.decode(state),
      token: c.fixed32.decode(state)
    }
  }
}

exports.noisePayload = {
  preencode (state, m) {
    state.end += 4 // version + flags + error + firewall
    if (m.holepunch) holepunchInfo.preencode(state, m.holepunch)
    if (m.addresses4 && m.addresses4.length) ipv4Array.preencode(state, m.addresses4)
    if (m.addresses6 && m.addresses6.length) ipv6Array.preencode(state, m.addresses6)
    if (m.udx) udxInfo.preencode(state, m.udx)
    if (m.secretStream) secretStreamInfo.preencode(state, m.secretStream)
    if (m.relayThrough) relayThroughInfo.preencode(state, m.relayThrough)
  },
  encode (state, m) {
    let flags = 0

    if (m.holepunch) flags |= 1
    if (m.addresses4 && m.addresses4.length) flags |= 2
    if (m.addresses6 && m.addresses6.length) flags |= 4
    if (m.udx) flags |= 8
    if (m.secretStream) flags |= 16
    if (m.relayThrough) flags |= 32

    c.uint.encode(state, 1) // version
    c.uint.encode(state, flags)
    c.uint.encode(state, m.error)
    c.uint.encode(state, m.firewall)

    if (m.holepunch) holepunchInfo.encode(state, m.holepunch)
    if (m.addresses4 && m.addresses4.length) ipv4Array.encode(state, m.addresses4)
    if (m.addresses6 && m.addresses6.length) ipv6Array.encode(state, m.addresses6)
    if (m.udx) udxInfo.encode(state, m.udx)
    if (m.secretStream) secretStreamInfo.encode(state, m.secretStream)
    if (m.relayThrough) relayThroughInfo.encode(state, m.relayThrough)
  },
  decode (state) {
    const version = c.uint.decode(state)

    if (version !== 1) {
      // Do not attempt to decode but return this back to the user so they can
      // actually handle it
      return {
        version,
        error: 0,
        firewall: 0,
        holepunch: null,
        addresses4: [],
        addresses6: [],
        udx: null,
        secretStream: null,
        relayThrough: null
      }
    }

    const flags = c.uint.decode(state)

    return {
      version,
      error: c.uint.decode(state),
      firewall: c.uint.decode(state),
      holepunch: (flags & 1) !== 0 ? holepunchInfo.decode(state) : null,
      addresses4: (flags & 2) !== 0 ? ipv4Array.decode(state) : [],
      addresses6: (flags & 4) !== 0 ? ipv6Array.decode(state) : [],
      udx: (flags & 8) !== 0 ? udxInfo.decode(state) : null,
      secretStream: (flags & 16) !== 0 ? secretStreamInfo.decode(state) : null,
      relayThrough: (flags & 32) !== 0 ? relayThroughInfo.decode(state) : null
    }
  }
}

exports.holepunch = {
  preencode (state, m) {
    state.end += 2
    c.uint.preencode(state, m.id)
    c.buffer.preencode(state, m.payload)
    if (m.peerAddress) ipv4.preencode(state, m.peerAddress)
  },
  encode (state, m) {
    const flags = m.peerAddress ? 1 : 0
    c.uint.encode(state, flags)
    c.uint.encode(state, m.mode)
    c.uint.encode(state, m.id)
    c.buffer.encode(state, m.payload)
    if (m.peerAddress) ipv4.encode(state, m.peerAddress)
  },
  decode (state) {
    const flags = c.uint.decode(state)
    return {
      mode: c.uint.decode(state),
      id: c.uint.decode(state),
      payload: c.buffer.decode(state),
      peerAddress: (flags & 1) ? ipv4.decode(state) : null
    }
  }
}

exports.holepunchPayload = {
  preencode (state, m) {
    state.end += 4 // flags + error + firewall + round
    if (m.addresses) ipv4Array.preencode(state, m.addresses)
    if (m.remoteAddress) state.end += 6
    if (m.token) state.end += 32
    if (m.remoteToken) state.end += 32
  },
  encode (state, m) {
    const flags = (m.connected ? 1 : 0) |
      (m.punching ? 2 : 0) |
      (m.addresses ? 4 : 0) |
      (m.remoteAddress ? 8 : 0) |
      (m.token ? 16 : 0) |
      (m.remoteToken ? 32 : 0)

    c.uint.encode(state, flags)
    c.uint.encode(state, m.error)
    c.uint.encode(state, m.firewall)
    c.uint.encode(state, m.round)

    if (m.addresses) ipv4Array.encode(state, m.addresses)
    if (m.remoteAddress) ipv4.encode(state, m.remoteAddress)
    if (m.token) c.fixed32.encode(state, m.token)
    if (m.remoteToken) c.fixed32.encode(state, m.remoteToken)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      error: c.uint.decode(state),
      firewall: c.uint.decode(state),
      round: c.uint.decode(state),
      connected: (flags & 1) !== 0,
      punching: (flags & 2) !== 0,
      addresses: (flags & 4) !== 0 ? ipv4Array.decode(state) : null,
      remoteAddress: (flags & 8) !== 0 ? ipv4.decode(state) : null,
      token: (flags & 16) !== 0 ? c.fixed32.decode(state) : null,
      remoteToken: (flags & 32) !== 0 ? c.fixed32.decode(state) : null
    }
  }
}

const peer = exports.peer = {
  preencode (state, m) {
    state.end += 32
    ipv4Array.preencode(state, m.relayAddresses)
  },
  encode (state, m) {
    c.fixed32.encode(state, m.publicKey)
    ipv4Array.encode(state, m.relayAddresses)
  },
  decode (state) {
    return {
      publicKey: c.fixed32.decode(state),
      relayAddresses: ipv4Array.decode(state)
    }
  }
}

exports.peers = c.array(peer)

exports.announce = {
  preencode (state, m) {
    state.end++ // flags
    if (m.peer) peer.preencode(state, m.peer)
    if (m.refresh) state.end += 32
    if (m.signature) state.end += 64
  },
  encode (state, m) {
    const flags = (m.peer ? 1 : 0) | (m.refresh ? 2 : 0) | (m.signature ? 4 : 0)
    c.uint.encode(state, flags)
    if (m.peer) peer.encode(state, m.peer)
    if (m.refresh) c.fixed32.encode(state, m.refresh)
    if (m.signature) c.fixed64.encode(state, m.signature)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      peer: (flags & 1) !== 0 ? peer.decode(state) : null,
      refresh: (flags & 2) !== 0 ? c.fixed32.decode(state) : null,
      signature: (flags & 4) !== 0 ? c.fixed64.decode(state) : null
    }
  }
}

exports.mutableSignable = {
  preencode (state, m) {
    c.uint.preencode(state, m.seq)
    c.buffer.preencode(state, m.value)
  },
  encode (state, m) {
    c.uint.encode(state, m.seq)
    c.buffer.encode(state, m.value)
  },
  decode (state) {
    return {
      seq: c.uint.decode(state),
      value: c.buffer.decode(state)
    }
  }
}

exports.mutablePutRequest = {
  preencode (state, m) {
    c.fixed32.preencode(state, m.publicKey)
    c.uint.preencode(state, m.seq)
    c.buffer.preencode(state, m.value)
    c.fixed64.preencode(state, m.signature)
  },
  encode (state, m) {
    c.fixed32.encode(state, m.publicKey)
    c.uint.encode(state, m.seq)
    c.buffer.encode(state, m.value)
    c.fixed64.encode(state, m.signature)
  },
  decode (state) {
    return {
      publicKey: c.fixed32.decode(state),
      seq: c.uint.decode(state),
      value: c.buffer.decode(state),
      signature: c.fixed64.decode(state)
    }
  }
}

exports.mutableGetResponse = {
  preencode (state, m) {
    c.uint.preencode(state, m.seq)
    c.buffer.preencode(state, m.value)
    c.fixed64.preencode(state, m.signature)
  },
  encode (state, m) {
    c.uint.encode(state, m.seq)
    c.buffer.encode(state, m.value)
    c.fixed64.encode(state, m.signature)
  },
  decode (state) {
    return {
      seq: c.uint.decode(state),
      value: c.buffer.decode(state),
      signature: c.fixed64.decode(state)
    }
  }
}

},{"compact-encoding":178,"compact-encoding-net":176}],360:[function(require,module,exports){
const Hyperbee = require('hyperbee')
const Hyperblobs = require('hyperblobs')
const isOptions = require('is-options')
const { Writable, Readable } = require('streamx')
const unixPathResolve = require('unix-path-resolve')
const MirrorDrive = require('mirror-drive')
const SubEncoder = require('sub-encoder')
const ReadyResource = require('ready-resource')
const safetyCatch = require('safety-catch')
const crypto = require('hypercore-crypto')
const Hypercore = require('hypercore')
const { BLOCK_NOT_AVAILABLE, BAD_ARGUMENT } = require('hypercore-errors')
const Monitor = require('./lib/monitor')

const keyEncoding = new SubEncoder('files', 'utf-8')

const [BLOBS] = crypto.namespace('hyperdrive', 1)

module.exports = class Hyperdrive extends ReadyResource {
  constructor (corestore, key, opts = {}) {
    super()

    if (isOptions(key)) {
      opts = key
      key = null
    }

    this.corestore = corestore
    this.db = opts._db || makeBee(key, corestore, opts)
    this.core = this.db.core
    this.blobs = null
    this.supportsMetadata = true
    this.encryptionKey = opts.encryptionKey || null
    this.monitors = new Set()

    this._active = opts.active !== false
    this._openingBlobs = null
    this._onwait = opts.onwait || null
    this._batching = !!(opts._checkout === null && opts._db)
    this._checkout = opts._checkout || null

    this.ready().catch(safetyCatch)
  }

  [Symbol.asyncIterator] () {
    return this.entries()[Symbol.asyncIterator]()
  }

  static async getDriveKey (corestore) {
    const core = makeBee(undefined, corestore)
    await core.ready()
    const key = core.key
    await core.close()
    return key
  }

  static getContentKey (m, key) {
    if (m instanceof Hypercore) {
      if (m.core.compat) return null
      return Hyperdrive.getContentKey(m.manifest, m.key)
    }

    const manifest = generateContentManifest(m, key)
    if (!manifest) return null

    return Hypercore.key(manifest)
  }

  _generateBlobsManifest () {
    const m = this.db.core.manifest
    if (this.db.core.core.compat) return null

    return generateContentManifest(m, this.core.key)
  }

  get id () {
    return this.core.id
  }

  get key () {
    return this.core.key
  }

  get discoveryKey () {
    return this.core.discoveryKey
  }

  get contentKey () {
    return this.blobs?.core.key
  }

  get version () {
    return this.db.version
  }

  get writable () {
    return this.core.writable
  }

  get readable () {
    return this.core.readable
  }

  findingPeers () {
    return this.corestore.findingPeers()
  }

  async truncate (version, { blobs = -1 } = {}) {
    if (!this.opened) await this.ready()

    if (version > this.core.length) {
      throw BAD_ARGUMENT('Bad truncation length')
    }

    const blobsVersion = blobs === -1 ? await this.getBlobsLength(version) : blobs
    const bl = await this.getBlobs()

    if (blobsVersion > bl.core.length) {
      throw BAD_ARGUMENT('Bad truncation length')
    }

    await this.core.truncate(version)
    await bl.core.truncate(blobsVersion)
  }

  async getBlobsLength (checkout) {
    if (!this.opened) await this.ready()

    if (!checkout) checkout = this.version

    const c = this.db.checkout(checkout)

    try {
      return await getBlobsLength(c)
    } finally {
      await c.close()
    }
  }

  replicate (isInitiator, opts) {
    return this.corestore.replicate(isInitiator, opts)
  }

  update (opts) {
    return this.db.update(opts)
  }

  _makeCheckout (snapshot) {
    return new Hyperdrive(this.corestore, this.key, {
      onwait: this._onwait,
      encryptionKey: this.encryptionKey,
      _checkout: this._checkout || this,
      _db: snapshot
    })
  }

  checkout (version) {
    return this._makeCheckout(this.db.checkout(version))
  }

  batch () {
    return new Hyperdrive(this.corestore, this.key, {
      onwait: this._onwait,
      encryptionKey: this.encryptionKey,
      _checkout: null,
      _db: this.db.batch()
    })
  }

  setActive (bool) {
    const active = !!bool
    if (active === this._active) return
    this._active = active
    this.core.setActive(active)
    if (this.blobs) this.blobs.core.setActive(active)
  }

  async flush () {
    await this.db.flush()
    return this.close()
  }

  async _close () {
    if (this.blobs && (!this._checkout || this.blobs !== this._checkout.blobs)) {
      await this.blobs.core.close()
    }

    await this.db.close()

    if (!this._checkout && !this._batching) {
      await this.corestore.close()
    }

    await this.closeMonitors()
  }

  async _openBlobsFromHeader (opts) {
    if (this.blobs) return true

    const header = await getBee(this.db).getHeader(opts)
    if (!header) return false

    if (this.blobs) return true

    const contentKey = header.metadata && header.metadata.contentFeed && header.metadata.contentFeed.subarray(0, 32)
    const blobsKey = contentKey || Hypercore.key(this._generateBlobsManifest())
    if (!blobsKey || blobsKey.length < 32) throw new Error('Invalid or no Blob store key set')

    const blobsCore = this.corestore.get({
      key: blobsKey,
      cache: false,
      onwait: this._onwait,
      encryptionKey: this.encryptionKey,
      keyPair: (!contentKey && this.db.core.writable) ? this.db.core.keyPair : null,
      active: this._active
    })
    await blobsCore.ready()

    if (this.closing) {
      await blobsCore.close()
      return false
    }

    this.blobs = new Hyperblobs(blobsCore)

    this.emit('blobs', this.blobs)
    this.emit('content-key', blobsCore.key)

    return true
  }

  async _open () {
    if (this._checkout) {
      await this._checkout.ready()
      this.blobs = this._checkout.blobs
      return
    }

    await this._openBlobsFromHeader({ wait: false })

    if (this.db.core.writable && !this.blobs) {
      const m = this._generateBlobsManifest()
      const blobsCore = this.corestore.get({
        manifest: m,
        name: m ? null : this.db.core.id + '/blobs', // simple trick to avoid blobs clashing if no namespace is provided...
        cache: false,
        onwait: this._onwait,
        encryptionKey: this.encryptionKey,
        compat: this.db.core.core.compat,
        active: this._active,
        keyPair: (m && this.db.core.writable) ? this.db.core.keyPair : null
      })
      await blobsCore.ready()

      this.blobs = new Hyperblobs(blobsCore)

      if (!m) getBee(this.db).metadata.contentFeed = this.blobs.core.key

      this.emit('blobs', this.blobs)
      this.emit('content-key', blobsCore.key)
    }

    await this.db.ready()

    if (!this.blobs) {
      // eagerly load the blob store....
      this._openingBlobs = this._openBlobsFromHeader()
      this._openingBlobs.catch(safetyCatch)
    }
  }

  async getBlobs () {
    if (this.blobs) return this.blobs

    if (this._checkout) {
      this.blobs = await this._checkout.getBlobs()
    } else {
      await this.ready()
      await this._openingBlobs
    }

    return this.blobs
  }

  monitor (name, opts = {}) {
    const monitor = new Monitor(this, { name, ...opts })
    this.monitors.add(monitor)
    return monitor
  }

  async closeMonitors () {
    const closing = []
    for (const monitor of this.monitors) closing.push(monitor.close())
    await Promise.allSettled(closing)
  }

  async get (name, opts) {
    const node = await this.entry(name, opts)
    if (!node?.value.blob) return null
    await this.getBlobs()
    const res = await this.blobs.get(node.value.blob, opts)

    if (res === null) throw BLOCK_NOT_AVAILABLE()
    return res
  }

  async put (name, buf, { executable = false, metadata = null } = {}) {
    await this.getBlobs()
    const blob = await this.blobs.put(buf)
    return this.db.put(std(name, false), { executable, linkname: null, blob, metadata }, { keyEncoding })
  }

  async del (name) {
    return this.db.del(std(name, false), { keyEncoding })
  }

  compare (a, b) {
    const diff = a.seq - b.seq
    return diff > 0 ? 1 : (diff < 0 ? -1 : 0)
  }

  async clear (name, opts) {
    if (!this.opened) await this.ready()

    let node = null

    try {
      node = await this.entry(name, { wait: false })
    } catch {
      // do nothing, prop not available
    }

    if (node === null || this.blobs === null) {
      return (opts && opts.diff) ? { blocks: 0 } : null
    }

    return this.blobs.clear(node.value.blob, opts)
  }

  async clearAll (opts) {
    if (!this.opened) await this.ready()

    if (this.blobs === null) {
      return (opts && opts.diff) ? { blocks: 0 } : null
    }

    return this.blobs.core.clear(0, this.blobs.core.length, opts)
  }

  async purge () {
    if (this._checkout || this._batch) throw new Error('Can only purge the main session')

    await this.ready() // Ensure blobs loaded if present
    await this.close()

    const proms = [this.core.purge()]
    if (this.blobs) proms.push(this.blobs.core.purge())
    await Promise.all(proms)
  }

  async symlink (name, dst, { metadata = null } = {}) {
    return this.db.put(std(name, false), { executable: false, linkname: dst, blob: null, metadata }, { keyEncoding })
  }

  async entry (name, opts) {
    if (!opts || !opts.follow) return this._entry(name, opts)

    for (let i = 0; i < 16; i++) {
      const node = await this._entry(name, opts)
      if (!node || !node.value.linkname) return node

      name = unixPathResolve(node.key, node.value.linkname)
    }

    throw new Error('Recursive symlink')
  }

  async _entry (name, opts) {
    if (typeof name !== 'string') return name

    return this.db.get(std(name, false), { ...opts, keyEncoding })
  }

  async exists (name) {
    return await this.entry(name) !== null
  }

  watch (folder) {
    folder = std(folder || '/', true)

    return this.db.watch(prefixRange(folder), { keyEncoding, map: (snap) => this._makeCheckout(snap) })
  }

  diff (length, folder, opts) {
    if (typeof folder === 'object' && folder && !opts) return this.diff(length, null, folder)

    folder = std(folder || '/', true)

    return this.db.createDiffStream(length, prefixRange(folder), { ...opts, keyEncoding })
  }

  async downloadDiff (length, folder, opts) {
    const dls = []

    for await (const entry of this.diff(length, folder, opts)) {
      if (!entry.left) continue
      const b = entry.left.value.blob
      if (!b) continue
      const blobs = await this.getBlobs()
      dls.push(blobs.core.download({ start: b.blockOffset, length: b.blockLength }))
    }

    const proms = []
    for (const r of dls) proms.push(r.downloaded())

    await Promise.allSettled(proms)
  }

  async downloadRange (dbRanges, blobRanges) {
    const dls = []

    await this.ready()

    for (const range of dbRanges) {
      dls.push(this.db.core.download(range))
    }

    const blobs = await this.getBlobs()

    for (const range of blobRanges) {
      dls.push(blobs.core.download(range))
    }

    const proms = []
    for (const r of dls) proms.push(r.downloaded())

    await Promise.allSettled(proms)
  }

  entries (range, opts) {
    const stream = this.db.createReadStream(range, { ...opts, keyEncoding })
    if (opts && opts.ignore) stream._readableState.map = createStreamMapIgnore(opts.ignore)
    return stream
  }

  async download (folder = '/', opts) {
    if (typeof folder === 'object') return this.download(undefined, folder)

    const dls = []
    const entry = (!folder || folder.endsWith('/')) ? null : await this.entry(folder)

    if (entry) {
      const b = entry.value.blob
      if (!b) return
      const blobs = await this.getBlobs()
      await blobs.core.download({ start: b.blockOffset, length: b.blockLength }).downloaded()
      return
    }

    // first preload the list so we can use the full power afterwards to actually preload everything
    // eslint-disable-next-line
    for await (const _ of this.list(folder, opts)) {
      // ignore
    }

    for await (const entry of this.list(folder, opts)) {
      const b = entry.value.blob
      if (!b) continue

      const blobs = await this.getBlobs()
      dls.push(blobs.core.download({ start: b.blockOffset, length: b.blockLength }))
    }

    const proms = []
    for (const r of dls) proms.push(r.downloaded())

    await Promise.allSettled(proms)
  }

  // atm always recursive, but we should add some depth thing to it
  list (folder, opts = {}) {
    if (typeof folder === 'object') return this.list(undefined, folder)

    folder = std(folder || '/', true)

    const ignore = opts.ignore ? normalizeIgnore(opts.ignore) : null
    const stream = opts && opts.recursive === false ? shallowReadStream(this.db, folder, false, ignore, opts) : this.entries(prefixRange(folder), { ...opts, ignore })
    return stream
  }

  readdir (folder, opts) {
    folder = std(folder || '/', true)
    return shallowReadStream(this.db, folder, true, null, opts)
  }

  mirror (out, opts) {
    return new MirrorDrive(this, out, opts)
  }

  createReadStream (name, opts) {
    const self = this

    let destroyed = false
    let rs = null

    const stream = new Readable({
      open (cb) {
        self.getBlobs().then(onblobs, cb)

        function onblobs () {
          self.entry(name).then(onnode, cb)
        }

        function onnode (node) {
          if (destroyed) return cb(null)
          if (!node) return cb(new Error('Blob does not exist'))
          if (self.closing) return cb(new Error('Closed'))

          if (!node.value.blob) {
            stream.push(null)
            return cb(null)
          }

          rs = self.blobs.createReadStream(node.value.blob, opts)

          rs.on('data', function (data) {
            if (!stream.push(data)) rs.pause()
          })

          rs.on('end', function () {
            stream.push(null)
          })

          rs.on('error', function (err) {
            stream.destroy(err)
          })

          cb(null)
        }
      },
      read (cb) {
        rs.resume()
        cb(null)
      },
      predestroy () {
        destroyed = true
        if (rs) rs.destroy()
      }
    })

    return stream
  }

  createWriteStream (name, { executable = false, metadata = null } = {}) {
    const self = this

    let destroyed = false
    let ws = null
    let ondrain = null
    let onfinish = null

    const stream = new Writable({
      open (cb) {
        self.getBlobs().then(onblobs, cb)

        function onblobs () {
          if (destroyed) return cb(null)

          ws = self.blobs.createWriteStream()

          ws.on('error', function (err) {
            stream.destroy(err)
          })

          ws.on('close', function () {
            const err = new Error('Closed')
            callOndrain(err)
            callOnfinish(err)
          })

          ws.on('finish', function () {
            callOnfinish(null)
          })

          ws.on('drain', function () {
            callOndrain(null)
          })

          cb(null)
        }
      },
      write (data, cb) {
        if (ws.write(data) === true) return cb(null)
        ondrain = cb
      },
      final (cb) {
        onfinish = cb
        ws.end()
      },
      predestroy () {
        destroyed = true
        if (ws) ws.destroy()
      }
    })

    return stream

    function callOnfinish (err) {
      if (!onfinish) return

      const cb = onfinish
      onfinish = null

      if (err) return cb(err)
      self.db.put(std(name, false), { executable, linkname: null, blob: ws.id, metadata }, { keyEncoding }).then(() => cb(null), cb)
    }

    function callOndrain (err) {
      if (ondrain) {
        const cb = ondrain
        ondrain = null
        cb(err)
      }
    }
  }

  static normalizePath (name) {
    return std(name, false)
  }
}

function shallowReadStream (files, folder, keys, ignore, opts) {
  let prev = '/'
  let prevName = ''

  return new Readable({
    async read (cb) {
      let node = null

      try {
        node = await files.peek(prefixRange(folder, prev), { ...opts, keyEncoding })
      } catch (err) {
        return cb(err)
      }

      if (!node) {
        this.push(null)
        return cb(null)
      }

      const suffix = node.key.slice(folder.length + 1)
      const i = suffix.indexOf('/')
      const name = i === -1 ? suffix : suffix.slice(0, i)

      prev = '/' + name + (i === -1 ? '' : '0')

      // just in case someone does /foo + /foo/bar, but we should prop not even support that
      if (name === prevName) {
        this._read(cb)
        return
      }

      prevName = name

      if (ignore && isIgnored(node.key, ignore)) {
        this._read(cb)
        return
      }

      this.push(keys ? name : node)
      cb(null)
    }
  })
}

function makeBee (key, corestore, opts = {}) {
  const name = key ? undefined : 'db'
  const core = corestore.get({ key, name, exclusive: true, onwait: opts.onwait, encryptionKey: opts.encryptionKey, compat: opts.compat, active: opts.active })

  return new Hyperbee(core, {
    keyEncoding: 'utf-8',
    valueEncoding: 'json',
    metadata: { contentFeed: null }
  })
}

function getBee (bee) {
  // A Batch instance will have a .tree property for the actual Hyperbee
  return bee.tree || bee
}

function std (name, removeSlash) {
  // Note: only remove slash if you're going to use it as prefix range
  name = unixPathResolve('/', name)
  if (removeSlash && name.endsWith('/')) name = name.slice(0, -1)
  validateFilename(name)
  return name
}

function validateFilename (name) {
  if (name === '/') throw new Error('Invalid filename: ' + name)
}

function prefixRange (name, prev = '/') {
  // '0' is binary +1 of /
  return { gt: name + prev, lt: name + '0' }
}

function generateContentManifest (m, key) {
  if (m.version < 1) return null

  const signers = []

  if (!key) key = Hypercore.key(m)

  for (const s of m.signers) {
    const namespace = crypto.hash([BLOBS, key, s.namespace])
    signers.push({ ...s, namespace })
  }

  return {
    version: m.version,
    hash: 'blake2b',
    allowPatch: m.allowPatch,
    quorum: m.quorum,
    signers,
    prologue: null // TODO: could be configurable through the header still...
  }
}

async function getBlobsLength (db) {
  let length = 0

  for await (const { value } of db.createReadStream()) {
    const b = value && value.blob
    if (!b) continue
    const len = b.blockOffset + b.blockLength
    if (len > length) length = len
  }

  return length
}

function normalizeIgnore (ignore) {
  return [].concat(ignore).map(e => unixPathResolve('/', e))
}

function isIgnored (key, ignore) {
  return ignore.some(e => e === key || key.startsWith(e + '/'))
}

function createStreamMapIgnore (ignore) {
  return (node) => {
    return isIgnored(node.key, ignore) ? null : node
  }
}

},{"./lib/monitor":361,"hyperbee":294,"hyperblobs":301,"hypercore":309,"hypercore-crypto":305,"hypercore-errors":306,"is-options":371,"mirror-drive":387,"ready-resource":480,"safety-catch":486,"streamx":578,"sub-encoder":580,"unix-path-resolve":588}],361:[function(require,module,exports){
const ReadyResource = require('ready-resource')
const safetyCatch = require('safety-catch')
const speedometer = require('speedometer')

module.exports = class Monitor extends ReadyResource {
  constructor (drive, opts = {}) {
    super()
    this.drive = drive
    this.blobs = null
    this.name = opts.name || null
    this.entry = opts.entry || null
    this.peers = 0

    this._boundOnUpload = this._onUpload.bind(this)
    this._boundOnDownload = this._onDownload.bind(this)
    this._boundPeerUpdate = this._updatePeers.bind(this)

    const stats = {
      startTime: 0,
      percentage: 0,
      peers: 0,
      speed: 0,
      blocks: 0,
      totalBytes: 0, // local + bytes loaded during monitoring
      monitoringBytes: 0, // bytes loaded during monitoring
      targetBytes: 0,
      targetBlocks: 0
    }

    // Updated on each upload/download event
    this.uploadStats = { ...stats }
    this.downloadStats = { ...stats }

    this.uploadSpeedometer = null
    this.downloadSpeedometer = null

    this.ready().catch(safetyCatch)
  }

  async _open () {
    await this.drive.ready()
    this.blobs = await this.drive.getBlobs()
    if (!this.entry && this.name) this.entry = await this.drive.entry(this.name)
    if (this.entry) this._setEntryInfo()

    this.uploadSpeedometer = speedometer()
    this.downloadSpeedometer = speedometer()

    this._updatePeers()

    // Handlers
    this.blobs.core.on('peer-add', this._boundPeerUpdate)
    this.blobs.core.on('peer-remove', this._boundPeerUpdate)
    this.blobs.core.on('upload', this._boundOnUpload)
    this.blobs.core.on('download', this._boundOnDownload)
  }

  async _close () {
    this.blobs.core.off('peer-add', this._boundPeerUpdate)
    this.blobs.core.off('peer-remove', this._boundPeerUpdate)
    this.blobs.core.off('upload', this._boundOnUpload)
    this.blobs.core.off('download', this._boundOnDownload)
    this.drive.monitors.delete(this)
  }

  _setEntryInfo () {
    if (!this.downloadStats.targetBytes || !this.downloadStats.targetBlocks) {
      this.downloadStats.targetBytes = this.entry.value.blob.byteLength
      this.downloadStats.targetBlocks = this.entry.value.blob.blockLength
    }

    if (!this.uploadStats.targetBytes || !this.uploadStats.targetBlocks) {
      this.uploadStats.targetBytes = this.entry.value.blob.byteLength
      this.uploadStats.targetBlocks = this.entry.value.blob.blockLength
    }
  }

  _onUpload (index, bytes, from) {
    this._updateStats(this.uploadSpeedometer, this.uploadStats, index, bytes, from)
  }

  _onDownload (index, bytes, from) {
    this._updateStats(this.downloadSpeedometer, this.downloadStats, index, bytes, from)
  }

  _updatePeers () {
    this.uploadStats.peers = this.downloadStats.peers = this.peers = this.blobs.core.peers.length
  }

  _updateStats (speed, stats, index, bytes, from) {
    if (!this.entry || this.closing) return
    if (!isWithinRange(index, this.entry)) return

    if (!stats.startTime) stats.startTime = Date.now()

    stats.speed = speed(bytes)
    stats.blocks++
    stats.monitoringBytes += bytes
    stats.totalBytes += bytes
    // NOTE: you should not rely on the percentage until the monitor is initialized with the local state of the file
    stats.percentage = toFixed(stats.blocks / stats.targetBlocks * 100)

    this.emit('update')
  }

  downloadSpeed () {
    return this.downloadSpeedometer ? this.downloadSpeedometer() : 0
  }

  uploadSpeed () {
    return this.uploadSpeedometer ? this.uploadSpeedometer() : 0
  }
}

function isWithinRange (index, entry) {
  if (!entry || !entry.value) return
  const { blockOffset, blockLength } = entry.value.blob
  return index >= blockOffset && index < blockOffset + blockLength
}

function toFixed (n) {
  return Math.round(n * 100) / 100
}

},{"ready-resource":480,"safety-catch":486,"speedometer":562}],362:[function(require,module,exports){
const { EventEmitter } = require('events')
const { getStreamError } = require('streamx')
const DHT = require('hyperdht')
const spq = require('shuffled-priority-queue')
const b4a = require('b4a')
const unslab = require('unslab')

const PeerInfo = require('./lib/peer-info')
const RetryTimer = require('./lib/retry-timer')
const ConnectionSet = require('./lib/connection-set')
const PeerDiscovery = require('./lib/peer-discovery')

const MAX_PEERS = 64
const MAX_PARALLEL = 3
const MAX_CLIENT_CONNECTIONS = Infinity // TODO: Change
const MAX_SERVER_CONNECTIONS = Infinity

const ERR_MISSING_TOPIC = 'Topic is required and must be a 32-byte buffer'
const ERR_DESTROYED = 'Swarm has been destroyed'
const ERR_DUPLICATE = 'Duplicate connection'
const ERR_FIREWALL = 'Peer is firewalled'

module.exports = class Hyperswarm extends EventEmitter {
  constructor (opts = {}) {
    super()
    const {
      seed,
      relayThrough,
      keyPair = DHT.keyPair(seed),
      maxPeers = MAX_PEERS,
      maxClientConnections = MAX_CLIENT_CONNECTIONS,
      maxServerConnections = MAX_SERVER_CONNECTIONS,
      maxParallel = MAX_PARALLEL,
      firewall = allowAll
    } = opts
    this.keyPair = keyPair

    this.dht = opts.dht || new DHT({
      bootstrap: opts.bootstrap,
      nodes: opts.nodes,
      port: opts.port,
      deferRandomPunch: opts.deferRandomPunch,
      randomPunchInterval: opts.randomPunchInterval
    })
    this.server = this.dht.createServer({
      firewall: this._handleFirewall.bind(this),
      relayThrough: this._maybeRelayConnection.bind(this),
      handshakeClearWait: opts.handshakeClearWait
    }, this._handleServerConnection.bind(this))

    this.destroyed = false
    this.suspended = false
    this.maxPeers = maxPeers
    this.maxClientConnections = maxClientConnections
    this.maxServerConnections = maxServerConnections
    this.maxParallel = maxParallel
    this.relayThrough = relayThrough || null

    this.connecting = 0
    this.connections = new Set()
    this.peers = new Map()
    this.explicitPeers = new Set()
    this.listening = null
    this.stats = {
      updates: 0,
      connects: {
        client: {
          opened: 0,
          closed: 0,
          attempted: 0
        },
        server: {
          // Note: there is no notion of 'attempts' for server connections
          opened: 0,
          closed: 0
        }
      },
      bannedPeers: 0
    }

    this._discovery = new Map()
    this._timer = new RetryTimer(this._requeue.bind(this), {
      backoffs: opts.backoffs,
      jitter: opts.jitter
    })
    this._queue = spq()

    this._allConnections = new ConnectionSet()
    this._pendingFlushes = []
    this._flushTick = 0

    this._drainingQueue = false
    this._clientConnections = 0
    this._serverConnections = 0
    this._firewall = firewall

    this.dht.on('network-change', this._handleNetworkChange.bind(this))
    this.on('update', this._handleUpdate)
  }

  _maybeRelayConnection (force) {
    if (!this.relayThrough) return null
    return this.relayThrough(force)
  }

  _enqueue (peerInfo) {
    if (peerInfo.queued) return
    peerInfo.queued = true
    peerInfo._flushTick = this._flushTick
    this._queue.add(peerInfo)

    this._attemptClientConnections()
  }

  _requeue (batch) {
    if (this.suspended) return
    for (const peerInfo of batch) {
      peerInfo.waiting = false

      if ((peerInfo._updatePriority() === false) || this._allConnections.has(peerInfo.publicKey) || peerInfo.queued) continue
      peerInfo.queued = true
      peerInfo._flushTick = this._flushTick
      this._queue.add(peerInfo)
    }

    this._attemptClientConnections()
  }

  _flushMaybe (peerInfo) {
    for (let i = 0; i < this._pendingFlushes.length; i++) {
      const flush = this._pendingFlushes[i]
      if (peerInfo._flushTick > flush.tick) continue
      if (--flush.missing > 0) continue
      flush.onflush(true)
      this._pendingFlushes.splice(i--, 1)
    }
  }

  _flushAllMaybe () {
    if (this.connecting > 0 || (this._allConnections.size < this.maxPeers && this._clientConnections < this.maxClientConnections)) {
      return false
    }

    while (this._pendingFlushes.length) {
      const flush = this._pendingFlushes.pop()
      flush.onflush(true)
    }

    return true
  }

  _shouldConnectExplicit () {
    return !this.destroyed &&
      !this.suspended &&
      this.connecting < this.maxParallel
  }

  _shouldConnect () {
    return !this.destroyed &&
      !this.suspended &&
      this.connecting < this.maxParallel &&
      this._allConnections.size < this.maxPeers &&
      this._clientConnections < this.maxClientConnections
  }

  _shouldRequeue (peerInfo) {
    if (this.suspended) return false
    if (peerInfo.explicit) return true
    for (const topic of peerInfo.topics) {
      if (this._discovery.has(b4a.toString(topic, 'hex')) && !this.destroyed) {
        return true
      }
    }
    return false
  }

  _connect (peerInfo, queued) {
    if (peerInfo.banned || this._allConnections.has(peerInfo.publicKey)) {
      if (queued) this._flushMaybe(peerInfo)
      return
    }

    // TODO: Support async firewalling at some point.
    if (this._handleFirewall(peerInfo.publicKey, null)) {
      if (queued) this._flushMaybe(peerInfo)
      return
    }

    const relayThrough = this._maybeRelayConnection(peerInfo.forceRelaying)
    const conn = this.dht.connect(peerInfo.publicKey, {
      relayAddresses: peerInfo.relayAddresses,
      keyPair: this.keyPair,
      relayThrough
    })
    this._allConnections.add(conn)

    this.stats.connects.client.attempted++

    this.connecting++
    this._clientConnections++
    let opened = false

    const onerror = (err) => {
      if (this.relayThrough && shouldForceRelaying(err.code)) {
        peerInfo.forceRelaying = true
        // Reset the attempts in order to fast connect to relay
        peerInfo.attempts = 0
      }
    }

    // Removed once a connection is opened
    conn.on('error', onerror)

    conn.on('open', () => {
      opened = true
      this.stats.connects.client.opened++

      this._connectDone()
      this.connections.add(conn)
      conn.removeListener('error', onerror)
      peerInfo._connected()
      peerInfo.client = true
      this.emit('connection', conn, peerInfo)
      if (queued) this._flushMaybe(peerInfo)

      this.emit('update')
    })
    conn.on('close', () => {
      if (!opened) this._connectDone()
      this.stats.connects.client.closed++

      const err = getStreamError(conn)
      if (shouldBan(err)) {
        this._banPeer(peerInfo, true, err)
      }

      this.connections.delete(conn)
      this._allConnections.delete(conn)
      this._clientConnections--
      peerInfo._disconnected()

      peerInfo.waiting = this._shouldRequeue(peerInfo) && this._timer.add(peerInfo)
      this._maybeDeletePeer(peerInfo)

      if (!opened && queued) this._flushMaybe(peerInfo)

      this._attemptClientConnections()

      this.emit('update')
    })

    this.emit('update')
  }

  _connectDone () {
    this.connecting--

    if (this.connecting < this.maxParallel) this._attemptClientConnections()
    if (this.connecting === 0) this._flushAllMaybe()
  }

  // Called when the PeerQueue indicates a connection should be attempted.
  _attemptClientConnections () {
    // Guard against re-entries - unsure if it still needed but doesn't hurt
    if (this._drainingQueue || this.suspended) return
    this._drainingQueue = true

    for (const peerInfo of this.explicitPeers) {
      if (!this._shouldConnectExplicit()) break
      if (peerInfo.attempts >= 5 || (Date.now() - peerInfo.disconnectedTime) < peerInfo.attempts * 1000) continue
      this._connect(peerInfo, false)
    }

    while (this._queue.length && this._shouldConnect()) {
      const peerInfo = this._queue.shift()
      peerInfo.queued = false
      this._connect(peerInfo, true)
    }
    this._drainingQueue = false
    if (this.connecting === 0) this._flushAllMaybe()
  }

  _handleFirewall (remotePublicKey, payload) {
    if (b4a.equals(remotePublicKey, this.keyPair.publicKey)) return true

    let peerInfo = this.peers.get(b4a.toString(remotePublicKey, 'hex'))
    if (peerInfo && peerInfo.banned) return true

    const firewalled = this._firewall(remotePublicKey, payload)
    if (firewalled) {
      if (!peerInfo) peerInfo = this._upsertPeer(remotePublicKey)
      this._banPeer(peerInfo, true, new Error(ERR_FIREWALL))
    }

    return firewalled
  }

  _handleServerConnectionSwap (existing, conn) {
    let closed = false

    existing.on('close', () => {
      if (closed) return

      conn.removeListener('error', noop)
      conn.removeListener('close', onclose)

      this._handleServerConnection(conn)
    })

    conn.on('error', noop)
    conn.on('close', onclose)

    function onclose () {
      closed = true
    }
  }

  // Called when the DHT receives a new server connection.
  _handleServerConnection (conn) {
    if (this.destroyed || this.suspended) {
      // TODO: Investigate why a final server connection can be received after close
      conn.on('error', noop)
      return conn.destroy(ERR_DESTROYED)
    }

    const existing = this._allConnections.get(conn.remotePublicKey)

    if (existing) {
      // If both connections are from the same peer,
      // - pick the new one if the existing stream is already established (has sent and received bytes),
      //   because the other client must have lost that connection and be reconnecting
      // - otherwise, pick the one thats expected to initiate in a tie break
      const existingIsOutdated = existing.rawBytesRead > 0 && existing.rawBytesWritten > 0
      const expectedInitiator = b4a.compare(conn.publicKey, conn.remotePublicKey) > 0
      const keepNew = existingIsOutdated || (expectedInitiator === conn.isInitiator)

      if (keepNew === false) {
        existing.sendKeepAlive()
        conn.on('error', noop)
        conn.destroy(new Error(ERR_DUPLICATE))
        return
      }

      existing.on('error', noop)
      existing.destroy(new Error(ERR_DUPLICATE))
      this._handleServerConnectionSwap(existing, conn)
      return
    }

    // When reaching here, the connection will always be 'opened' next tick
    this.stats.connects.server.opened++

    const peerInfo = this._upsertPeer(conn.remotePublicKey, null)

    this.connections.add(conn)
    this._allConnections.add(conn)
    this._serverConnections++

    conn.on('close', () => {
      const err = getStreamError(conn)
      if (shouldBan(err)) {
        this._banPeer(peerInfo, true, err)
      }

      this.connections.delete(conn)
      this._allConnections.delete(conn)
      this._serverConnections--
      this.stats.connects.server.closed++

      this._maybeDeletePeer(peerInfo)

      this._attemptClientConnections()

      this.emit('update')
    })
    peerInfo.client = false
    this.emit('connection', conn, peerInfo)

    this.emit('update')
  }

  _upsertPeer (publicKey, relayAddresses) {
    if (b4a.equals(publicKey, this.keyPair.publicKey)) return null
    const keyString = b4a.toString(publicKey, 'hex')
    let peerInfo = this.peers.get(keyString)

    if (peerInfo) {
      peerInfo.relayAddresses = relayAddresses // new is always better
      return peerInfo
    }

    peerInfo = new PeerInfo({
      publicKey,
      relayAddresses
    })

    this.peers.set(keyString, peerInfo)
    return peerInfo
  }

  _handleUpdate () {
    this.stats.updates++
  }

  _maybeDeletePeer (peerInfo) {
    if (!peerInfo.shouldGC()) return

    const hasActiveConn = this._allConnections.has(peerInfo.publicKey)
    if (hasActiveConn) return

    const keyString = b4a.toString(peerInfo.publicKey, 'hex')
    this.peers.delete(keyString)
  }

  /*
   * Called when a peer is actively discovered during a lookup.
   *
   * Three conditions:
   *  1. Not a known peer -- insert into queue
   *  2. A known peer with normal priority -- do nothing
   *  3. A known peer with low priority -- bump priority, because it's been rediscovered
   */
  _handlePeer (peer, topic) {
    const peerInfo = this._upsertPeer(peer.publicKey, peer.relayAddresses)
    if (peerInfo) peerInfo._topic(topic)
    if (!peerInfo || this._allConnections.has(peer.publicKey)) return
    if (!peerInfo.prioritized || peerInfo.server) peerInfo._reset()
    if (peerInfo._updatePriority()) {
      this._enqueue(peerInfo)
    }
  }

  async _handleNetworkChange () {
    // prioritize figuring out if existing connections are dead
    for (const conn of this._allConnections) {
      conn.sendKeepAlive()
    }

    const refreshes = []

    for (const discovery of this._discovery.values()) {
      refreshes.push(discovery.refresh())
    }

    await Promise.allSettled(refreshes)
  }

  _banPeer (peerInfo, banned, err) {
    peerInfo.ban(banned)
    this.stats.bannedPeers++
    this.emit('ban', peerInfo, err)
  }

  status (key) {
    return this._discovery.get(b4a.toString(key, 'hex')) || null
  }

  listen () {
    if (!this.listening) this.listening = this.server.listen(this.keyPair)
    return this.listening
  }

  // Object that exposes a cancellation method (destroy)
  // TODO: When you rejoin, it should reannounce + bump lookup priority
  join (topic, opts = {}) {
    if (!topic) throw new Error(ERR_MISSING_TOPIC)
    topic = unslab(topic)

    const topicString = b4a.toString(topic, 'hex')

    let discovery = this._discovery.get(topicString)

    if (discovery && !discovery.destroyed) {
      return discovery.session(opts)
    }

    discovery = new PeerDiscovery(this, topic, {
      limit: opts.limit,
      wait: discovery ? discovery.destroy() : null,
      suspended: this.suspended,
      onpeer: peer => this._handlePeer(peer, topic)
    })
    this._discovery.set(topicString, discovery)
    return discovery.session(opts)
  }

  // Returns a promise
  async leave (topic) {
    if (!topic) throw new Error(ERR_MISSING_TOPIC)
    const topicString = b4a.toString(topic, 'hex')
    if (!this._discovery.has(topicString)) return Promise.resolve()

    const discovery = this._discovery.get(topicString)

    try {
      await discovery.destroy()
    } catch {
      // ignore, prop network
    }

    if (this._discovery.get(topicString) === discovery) {
      this._discovery.delete(topicString)
    }
  }

  joinPeer (publicKey) {
    const peerInfo = this._upsertPeer(publicKey, null)
    if (!peerInfo) return
    if (!this.explicitPeers.has(peerInfo)) {
      peerInfo.explicit = true
      this.explicitPeers.add(peerInfo)
    }
    if (this._allConnections.has(publicKey)) return
    if (peerInfo._updatePriority()) {
      this._enqueue(peerInfo)
    }
  }

  leavePeer (publicKey) {
    const keyString = b4a.toString(publicKey, 'hex')
    if (!this.peers.has(keyString)) return

    const peerInfo = this.peers.get(keyString)
    peerInfo.explicit = false
    this.explicitPeers.delete(peerInfo)
    this._maybeDeletePeer(peerInfo)
  }

  // Returns a promise
  async flush () {
    const allFlushed = [...this._discovery.values()].map(v => v.flushed())
    await Promise.all(allFlushed)
    if (this._flushAllMaybe()) return true
    const pendingSize = this._allConnections.size - this.connections.size
    if (!this._queue.length && !pendingSize) return true
    return new Promise((resolve) => {
      this._pendingFlushes.push({
        onflush: resolve,
        missing: this._queue.length + pendingSize,
        tick: this._flushTick++
      })
    })
  }

  async clear () {
    const cleared = Promise.allSettled([...this._discovery.values()].map(d => d.destroy()))
    this._discovery.clear()
    return cleared
  }

  async destroy ({ force } = {}) {
    if (this.destroyed && !force) return
    this.destroyed = true

    this._timer.destroy()

    if (!force) await this.clear()

    await this.server.close()

    while (this._pendingFlushes.length) {
      const flush = this._pendingFlushes.pop()
      flush.onflush(false)
    }

    await this.dht.destroy({ force })
  }

  async suspend ({ log = noop } = {}) {
    if (this.suspended) return

    const promises = []

    promises.push(this.server.suspend({ log }))

    for (const discovery of this._discovery.values()) {
      promises.push(discovery.suspend({ log }))
    }

    const pending = []
    for (const connection of this._allConnections) {
      connection.destroy()
      pending.push(new Promise(resolve => connection.on('close', resolve)))
    }

    this.suspended = true

    log('Suspending server and discovery... (' + promises.length + ')')
    await Promise.allSettled(promises)
    log('Done, suspending the dht...')
    await this.dht.suspend({ log })
    log('Done, swarm fully suspended')

    await Promise.all(pending)

    // reset queue
    this._timer.destroy()
    this._timer = new RetryTimer(this._requeue.bind(this), {
      backoffs: this._timer.backoffs,
      jitter: this._timer.jitter
    })
    this._queue = spq()
  }

  async resume ({ log = noop } = {}) {
    if (!this.suspended) return

    log('Resuming the dht')
    await this.dht.resume()
    log('Done, resuming the server')
    await this.server.resume()
    log('Done, all discovery')

    for (const discovery of this._discovery.values()) {
      discovery.resume()
    }

    this.suspended = false
    this._attemptClientConnections()
  }

  topics () {
    return this._discovery.values()
  }
}

function noop () { }

function allowAll () {
  return false
}

function shouldForceRelaying (code) {
  return (code === 'HOLEPUNCH_ABORTED') ||
    (code === 'HOLEPUNCH_DOUBLE_RANDOMIZED_NATS') ||
    (code === 'REMOTE_NOT_HOLEPUNCHABLE')
}

function shouldBan () {
  // return !!err && err.name === 'HypercoreError' && err.code === 'INVALID_OPERATION'
  return false
}

},{"./lib/connection-set":364,"./lib/peer-discovery":365,"./lib/peer-info":366,"./lib/retry-timer":367,"b4a":102,"events":258,"hyperdht":356,"shuffled-priority-queue":505,"streamx":578,"unslab":590}],363:[function(require,module,exports){
module.exports = class BulkTimer {
  constructor (time, fn) {
    this._time = time
    this._fn = fn
    this._interval = null
    this._next = []
    this._pending = []
    this._destroyed = false
  }

  destroy () {
    if (this._destroyed) return
    this._destroyed = true
    clearInterval(this._interval)
    this._interval = null
  }

  _ontick () {
    if (!this._next.length && !this._pending.length) return
    if (this._next.length) this._fn(this._next)
    this._next = this._pending
    this._pending = []
  }

  add (info) {
    if (this._destroyed) return
    if (!this._interval) {
      this._interval = setInterval(this._ontick.bind(this), Math.floor(this._time * 0.66))
    }

    this._pending.push(info)
  }
}

},{}],364:[function(require,module,exports){
const b4a = require('b4a')

module.exports = class ConnectionSet {
  constructor () {
    this._byPublicKey = new Map()
  }

  [Symbol.iterator] () {
    return this._byPublicKey.values()
  }

  get size () {
    return this._byPublicKey.size
  }

  has (publicKey) {
    return this._byPublicKey.has(b4a.toString(publicKey, 'hex'))
  }

  get (publicKey) {
    return this._byPublicKey.get(b4a.toString(publicKey, 'hex'))
  }

  add (connection) {
    this._byPublicKey.set(b4a.toString(connection.remotePublicKey, 'hex'), connection)
  }

  delete (connection) {
    const keyString = b4a.toString(connection.remotePublicKey, 'hex')
    const existing = this._byPublicKey.get(keyString)
    if (existing !== connection) return
    this._byPublicKey.delete(keyString)
  }
}

},{"b4a":102}],365:[function(require,module,exports){
const safetyCatch = require('safety-catch')
const b4a = require('b4a')

const REFRESH_INTERVAL = 1000 * 60 * 10 // 10 min
const RANDOM_JITTER = 1000 * 60 * 2 // 2 min
const DELAY_GRACE_PERIOD = 1000 * 30 // 30s

module.exports = class PeerDiscovery {
  constructor (swarm, topic, { limit = Infinity, wait = null, suspended = false, onpeer = noop, onerror = safetyCatch }) {
    this.limit = limit
    this.swarm = swarm
    this.topic = topic
    this.isClient = false
    this.isServer = false
    this.destroyed = false
    this.destroying = null
    this.suspended = suspended

    this._sessions = []
    this._clientSessions = 0
    this._serverSessions = 0

    this._onpeer = onpeer
    this._onerror = onerror

    this._activeQuery = null
    this._timer = null
    this._currentRefresh = null
    this._closestNodes = null
    this._firstAnnounce = true
    this._needsUnannounce = false
    this._refreshes = 0
    this._wait = wait
  }

  session ({ server = true, client = true, limit = Infinity, onerror = safetyCatch }) {
    if (this.destroyed) throw new Error('PeerDiscovery is destroyed')
    const session = new PeerDiscoverySession(this)
    session.refresh({ server, client, limit }).catch(onerror)
    this._sessions.push(session)
    return session
  }

  _refreshLater (eager) {
    const jitter = Math.round(Math.random() * RANDOM_JITTER)
    const delay = !eager
      ? REFRESH_INTERVAL + jitter
      : jitter

    if (this._timer) clearTimeout(this._timer)

    const startTime = Date.now()
    this._timer = setTimeout(() => {
      // If your laptop went to sleep, and is coming back online...
      const overdue = Date.now() - startTime > delay + DELAY_GRACE_PERIOD
      if (overdue) this._refreshLater(true)
      else this.refresh().catch(this._onerror)
    }, delay)
  }

  _isActive () {
    return !this.destroyed && !this.suspended
  }

  // TODO: Allow announce to be an argument to this
  // TODO: Maybe announce should be a setter?
  async _refresh () {
    if (this.suspended) return
    const clock = ++this._refreshes

    if (this._wait) {
      await this._wait
      this._wait = null
      if (clock !== this._refreshes || !this._isActive()) return
    }

    const clear = this.isServer && this._firstAnnounce
    if (clear) this._firstAnnounce = false

    const opts = {
      clear,
      closestNodes: this._closestNodes
    }

    if (this.isServer) {
      await this.swarm.listen()
      // if a parallel refresh is happening, yield to the new one
      if (clock !== this._refreshes || !this._isActive()) return
      this._needsUnannounce = true
    }

    const announcing = this.isServer
    const query = this._activeQuery = announcing
      ? this.swarm.dht.announce(this.topic, this.swarm.keyPair, this.swarm.server.relayAddresses, opts)
      : this._needsUnannounce
        ? this.swarm.dht.lookupAndUnannounce(this.topic, this.swarm.keyPair, opts)
        : this.swarm.dht.lookup(this.topic, opts)

    try {
      for await (const data of this._activeQuery) {
        if (!this.isClient || !this._isActive()) continue
        for (const peer of data.peers) {
          if (this.limit === 0) return
          this.limit--
          this._onpeer(peer, data)
        }
      }
    } catch (err) {
      if (this._isActive()) throw err
    } finally {
      if (this._activeQuery === query) {
        this._activeQuery = null
        if (!this.destroyed && !this.suspended) this._refreshLater(false)
      }
    }

    // This is set at the very end, when the query completes successfully.
    this._closestNodes = query.closestNodes

    if (clock !== this._refreshes) return

    // In this is the latest query, unannounce has been fulfilled as well
    if (!announcing) this._needsUnannounce = false
  }

  async refresh () {
    if (this.destroyed) throw new Error('PeerDiscovery is destroyed')

    const server = this._serverSessions > 0
    const client = this._clientSessions > 0

    if (this.suspended) return

    if (server === this.isServer && client === this.isClient) {
      if (this._currentRefresh) return this._currentRefresh
      this._currentRefresh = this._refresh()
    } else {
      if (this._activeQuery) this._activeQuery.destroy()
      this.isServer = server
      this.isClient = client
      this._currentRefresh = this._refresh()
    }

    const refresh = this._currentRefresh
    try {
      await refresh
    } catch {
      return false
    } finally {
      if (refresh === this._currentRefresh) {
        this._currentRefresh = null
      }
    }

    return true
  }

  async flushed () {
    if (this.swarm.listening) await this.swarm.listening

    try {
      await this._currentRefresh
      return true
    } catch {
      return false
    }
  }

  async _destroyMaybe () {
    if (this.destroyed) return

    try {
      if (this._sessions.length === 0) await this.swarm.leave(this.topic)
      else if (this._serverSessions === 0 && this._needsUnannounce) await this.refresh()
    } catch (err) { // ignore network failures here, as we are tearing down
      safetyCatch(err)
    }
  }

  destroy () {
    if (this.destroying) return this.destroying
    this.destroying = this._destroy()
    return this.destroying
  }

  async _abort (log) {
    const id = log === noop ? '' : b4a.toString(this.topic, 'hex')

    log('Aborting discovery', id)
    if (this._wait) await this._wait
    log('Aborting discovery (post wait)', id)

    if (this._activeQuery) {
      this._activeQuery.destroy()
      this._activeQuery = null
    }
    if (this._timer) {
      clearTimeout(this._timer)
      this._timer = null
    }

    let nodes = this._closestNodes

    if (this._currentRefresh) {
      try {
        await this._currentRefresh
      } catch {
        // If the destroy causes the refresh to fail, suppress it.
      }
    }

    log('Aborting discovery (post refresh)', id)
    if (this._isActive()) return

    if (!nodes) nodes = this._closestNodes
    else if (this._closestNodes !== nodes) {
      const len = nodes.length
      for (const newer of this._closestNodes) {
        if (newer.id && !hasNode(nodes, len, newer)) nodes.push(newer)
      }
    }

    if (this._needsUnannounce) {
      log('Unannouncing discovery', id)
      if (nodes && nodes.length) await this.swarm.dht.unannounce(this.topic, this.swarm.keyPair, { closestNodes: nodes, onlyClosestNodes: true, force: true })
      this._needsUnannounce = false
      log('Unannouncing discovery (done)', id)
    }
  }

  _destroy () {
    if (this.destroyed) return
    this.destroyed = true
    return this._abort(noop)
  }

  async suspend ({ log = noop } = {}) {
    if (this.suspended) return
    this.suspended = true
    try {
      await this._abort(log)
    } catch {
      // ignore
    }
  }

  resume () {
    if (!this.suspended) return
    this.suspended = false
    this.refresh().catch(noop)
  }
}

class PeerDiscoverySession {
  constructor (discovery) {
    this.discovery = discovery
    this.isClient = false
    this.isServer = false
    this.destroyed = false
  }

  get swarm () {
    return this.discovery.swarm
  }

  get topic () {
    return this.discovery.topic
  }

  async refresh ({ client = this.isClient, server = this.isServer, limit = Infinity } = {}) {
    if (this.destroyed) throw new Error('PeerDiscovery is destroyed')
    if (!client && !server) throw new Error('Cannot refresh with neither client nor server option')

    if (client !== this.isClient) {
      this.isClient = client
      this.discovery._clientSessions += client ? 1 : -1
    }

    if (server !== this.isServer) {
      this.isServer = server
      this.discovery._serverSessions += server ? 1 : -1
    }

    this.discovery.limit = limit

    return this.discovery.refresh()
  }

  async flushed () {
    return this.discovery.flushed()
  }

  async destroy () {
    if (this.destroyed) return
    this.destroyed = true

    if (this.isClient) this.discovery._clientSessions--
    if (this.isServer) this.discovery._serverSessions--

    const index = this.discovery._sessions.indexOf(this)
    const head = this.discovery._sessions.pop()

    if (head !== this) this.discovery._sessions[index] = head

    return this.discovery._destroyMaybe()
  }
}

function hasNode (nodes, len, node) {
  for (let i = 0; i < len; i++) {
    const existing = nodes[i]
    if (existing.id && b4a.equals(existing.id, node.id)) return true
  }

  return false
}

function noop () {}

},{"b4a":102,"safety-catch":486}],366:[function(require,module,exports){
const { EventEmitter } = require('events')
const b4a = require('b4a')
const unslab = require('unslab')

const MIN_CONNECTION_TIME = 15000

const VERY_LOW_PRIORITY = 0
const LOW_PRIORITY = 1
const NORMAL_PRIORITY = 2
const HIGH_PRIORITY = 3
const VERY_HIGH_PRIORITY = 4

module.exports = class PeerInfo extends EventEmitter {
  constructor ({ publicKey, relayAddresses }) {
    super()

    this.publicKey = unslab(publicKey)
    this.relayAddresses = relayAddresses

    this.reconnecting = true
    this.proven = false
    this.connectedTime = -1
    this.disconnectedTime = 0
    this.banned = false
    this.tried = false
    this.explicit = false
    this.waiting = false
    this.forceRelaying = false

    // Set by the Swarm
    this.queued = false
    this.client = false
    this.topics = [] // TODO: remove on next major (check with mafintosh for context)

    this.attempts = 0
    this.priority = NORMAL_PRIORITY

    // Used by shuffled-priority-queue
    this._index = 0

    // Used for flush management
    this._flushTick = 0

    // Used for topic multiplexing
    this._seenTopics = new Set()
  }

  get server () {
    return !this.client
  }

  get prioritized () {
    return this.priority >= NORMAL_PRIORITY
  }

  _getPriority () {
    const peerIsStale = this.tried && !this.proven
    if (peerIsStale || this.attempts > 3) return VERY_LOW_PRIORITY
    if (this.attempts === 3) return LOW_PRIORITY
    if (this.attempts === 2) return HIGH_PRIORITY
    if (this.attempts === 1) return VERY_HIGH_PRIORITY
    return NORMAL_PRIORITY
  }

  _connected () {
    this.proven = true
    this.connectedTime = Date.now()
  }

  _disconnected () {
    this.disconnectedTime = Date.now()
    if (this.connectedTime > -1) {
      if ((this.disconnectedTime - this.connectedTime) >= MIN_CONNECTION_TIME) this.attempts = 0 // fast retry
      this.connectedTime = -1
    }
    this.attempts++
  }

  _deprioritize () {
    this.attempts = 3
  }

  _reset () {
    this.client = false
    this.proven = false
    this.tried = false
    this.attempts = 0
  }

  _updatePriority () {
    if (this.explicit && this.attempts > 3) this._deprioritize()
    if (this.banned || this.queued || this.attempts > 3) return false
    this.priority = this._getPriority()
    return true
  }

  _topic (topic) {
    const topicString = b4a.toString(topic, 'hex')
    if (this._seenTopics.has(topicString)) return
    this._seenTopics.add(topicString)
    this.topics.push(topic)
    this.emit('topic', topic)
  }

  reconnect (val) {
    this.reconnecting = !!val
  }

  ban (val) {
    this.banned = !!val
  }

  shouldGC () {
    return !(this.banned || this.queued || this.explicit || this.waiting)
  }
}

},{"b4a":102,"events":258,"unslab":590}],367:[function(require,module,exports){
const BulkTimer = require('./bulk-timer')

const BACKOFF_JITTER = 500
const BACKOFF_S = 1000 + Math.round(BACKOFF_JITTER * Math.random())
const BACKOFF_M = 5000 + Math.round(2 * BACKOFF_JITTER * Math.random())
const BACKOFF_L = 15000 + Math.round(4 * BACKOFF_JITTER * Math.random())
const BACKOFF_X = 1000 * 60 * 10 + Math.round(240 * BACKOFF_JITTER * Math.random())

module.exports = class RetryTimer {
  constructor (push, { backoffs = [BACKOFF_S, BACKOFF_M, BACKOFF_L, BACKOFF_X], jitter = BACKOFF_JITTER } = {}) {
    this.jitter = jitter
    this.backoffs = backoffs

    this._sTimer = new BulkTimer(backoffs[0] + Math.round(jitter * Math.random()), push)
    this._mTimer = new BulkTimer(backoffs[1] + Math.round(jitter * Math.random()), push)
    this._lTimer = new BulkTimer(backoffs[2] + Math.round(jitter * Math.random()), push)
    this._xTimer = new BulkTimer(backoffs[3] + Math.round(jitter * Math.random()), push)
  }

  _selectRetryTimer (peerInfo) {
    if (peerInfo.banned || !peerInfo.reconnecting) return null

    if (peerInfo.attempts > 3) {
      return peerInfo.explicit ? this._xTimer : null
    }

    if (peerInfo.attempts === 0) return this._sTimer
    if (peerInfo.proven) {
      switch (peerInfo.attempts) {
        case 1: return this._sTimer
        case 2: return this._mTimer
        case 3: return this._lTimer
      }
    } else {
      switch (peerInfo.attempts) {
        case 1: return this._mTimer
        case 2: return this._lTimer
        case 3: return this._lTimer
      }
    }

    return null
  }

  add (peerInfo) {
    const timer = this._selectRetryTimer(peerInfo)
    if (!timer) return false

    timer.add(peerInfo)
    return true
  }

  destroy () {
    this._sTimer.destroy()
    this._mTimer.destroy()
    this._lTimer.destroy()
    this._xTimer.destroy()
  }
}

},{"./bulk-timer":363}],368:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],369:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],370:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};

},{}],371:[function(require,module,exports){
const b4a = require('b4a')

module.exports = function isOptions (opts) {
  return typeof opts === 'object' && opts && !b4a.isBuffer(opts)
}

},{"b4a":102}],372:[function(require,module,exports){
'use strict';

var whichTypedArray = require('which-typed-array');

/** @type {import('.')} */
module.exports = function isTypedArray(value) {
	return !!whichTypedArray(value);
};

},{"which-typed-array":597}],373:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],374:[function(require,module,exports){
'use strict';

/** @type {import('./abs')} */
module.exports = Math.abs;

},{}],375:[function(require,module,exports){
'use strict';

/** @type {import('./floor')} */
module.exports = Math.floor;

},{}],376:[function(require,module,exports){
'use strict';

/** @type {import('./isNaN')} */
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],377:[function(require,module,exports){
'use strict';

/** @type {import('./max')} */
module.exports = Math.max;

},{}],378:[function(require,module,exports){
'use strict';

/** @type {import('./min')} */
module.exports = Math.min;

},{}],379:[function(require,module,exports){
'use strict';

/** @type {import('./pow')} */
module.exports = Math.pow;

},{}],380:[function(require,module,exports){
'use strict';

/** @type {import('./round')} */
module.exports = Math.round;

},{}],381:[function(require,module,exports){
'use strict';

var $isNaN = require('./isNaN');

/** @type {import('./sign')} */
module.exports = function sign(number) {
	if ($isNaN(number) || number === 0) {
		return number;
	}
	return number < 0 ? -1 : +1;
};

},{"./isNaN":376}],382:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":277,"inherits":369,"safe-buffer":485}],383:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":384,"brorand":131}],384:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"buffer":132,"dup":83}],385:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],386:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],387:[function(require,module,exports){
const sameData = require('same-data')
const unixPathResolve = require('unix-path-resolve')
const streamEquals = require('binary-stream-equals')
const { pipelinePromise, isStream } = require('streamx')

module.exports = class MirrorDrive {
  constructor (src, dst, opts = {}) {
    this.src = src
    this.dst = dst

    this.prefix = opts.prefix || '/'
    this.dryRun = !!opts.dryRun
    this.prune = opts.prune !== false
    this.includeEquals = !!opts.includeEquals
    this.filter = opts.filter || null
    this.metadataEquals = opts.metadataEquals || null
    this.batch = !!opts.batch
    this.entries = opts.entries || null
    this.transformers = opts.transformers || []

    this.count = { files: 0, add: 0, remove: 0, change: 0 }
    this.bytesRemoved = 0
    this.bytesAdded = 0
    this.iterator = this._mirror()
    this._ignore = opts.ignore ? toIgnoreFunction(opts.ignore) : null
  }

  [Symbol.asyncIterator] () {
    return this.iterator
  }

  async done () {
    while (true) {
      const { done } = await this.iterator.next()
      if (done) break
    }
  }

  async * _mirror () {
    await this.src.ready()
    await this.dst.ready()

    if (this.dst.core && !this.dst.core.writable) throw new Error('Destination must be writable')

    const dst = this.batch ? this.dst.batch() : this.dst

    if (this.prune) {
      for await (const [key, dstEntry, srcEntry] of this._list(this.dst, this.src)) {
        if (srcEntry) continue

        this.count.remove++
        this.bytesRemoved += blobLength(dstEntry)
        yield { op: 'remove', key, bytesRemoved: blobLength(dstEntry), bytesAdded: 0 }

        if (!this.dryRun) await dst.del(key)
      }
    }

    if (this.src.download && !this.entries) {
      const dl = this.src.download(this.prefix)
      if (dl.catch) dl.catch(noop)
    }

    for await (const [key, srcEntry, dstEntry] of this._list(this.src, dst, { filter: this.filter })) {
      if (!srcEntry) continue // Due entries option, src entry might not exist probably because it was pruned

      this.count.files++

      // If transformers are provided, we can't know if same before running them
      const hasTransformers = this.transformers && this.transformers.length > 0

      const isSame = hasTransformers === false && await same(this, srcEntry, dstEntry)

      if (isSame) {
        if (this.includeEquals) {
          yield { op: 'equal', key, bytesRemoved: 0, bytesAdded: 0 }
        }
        continue
      }

      if (dstEntry) {
        this.count.change++
        this.bytesRemoved += blobLength(dstEntry)
        this.bytesAdded += blobLength(srcEntry)
        yield { op: 'change', key, bytesRemoved: blobLength(dstEntry), bytesAdded: blobLength(srcEntry) }
      } else {
        this.count.add++
        this.bytesAdded += blobLength(srcEntry)
        yield { op: 'add', key, bytesRemoved: 0, bytesAdded: blobLength(srcEntry) }
      }

      if (this.dryRun) {
        continue
      }

      const transformers = []

      for (const transformer of this.transformers) {
        if (typeof transformer !== 'function') throw new Error('transformer must be a function')

        const stream = transformer(key)

        if (stream === null) continue
        if (!isStream(stream)) throw new Error('transformer must return a stream')

        transformers.push(stream)
      }

      if (srcEntry.value.linkname) {
        await dst.symlink(key, srcEntry.value.linkname)
      } else {
        await pipelinePromise(
          this.src.createReadStream(srcEntry),
          ...transformers,
          dst.createWriteStream(key, { executable: srcEntry.value.executable, metadata: srcEntry.value.metadata })
        )
      }
    }

    if (this.batch) await dst.flush()
  }

  async * _list (a, b, opts) {
    const list = this.entries || a.list(this.prefix, { ignore: this._ignore })

    for await (const entry of list) {
      const key = typeof entry === 'object' ? entry.key : entry

      if (opts && opts.filter && !opts.filter(key)) continue

      const entryA = await a.entry(entry)
      const entryB = await b.entry(key)

      yield [key, entryA, entryB]
    }
  }
}

function blobLength (entry) {
  return entry.value.blob ? entry.value.blob.byteLength : 0
}

async function same (m, srcEntry, dstEntry) {
  if (!dstEntry) return false

  if (srcEntry.value.linkname || dstEntry.value.linkname) {
    return srcEntry.value.linkname === dstEntry.value.linkname
  }

  if (srcEntry.value.executable !== dstEntry.value.executable) return false

  if (!sizeEquals(srcEntry, dstEntry)) return false

  if (!metadataEquals(m, srcEntry, dstEntry)) return false

  return streamEquals(m.src.createReadStream(srcEntry), m.dst.createReadStream(dstEntry))
}

function sizeEquals (srcEntry, dstEntry) {
  const srcBlob = srcEntry.value.blob
  const dstBlob = dstEntry.value.blob

  if (!srcBlob && !dstBlob) return true
  if (!srcBlob || !dstBlob) return false

  return srcBlob.byteLength === dstBlob.byteLength
}

function metadataEquals (m, srcEntry, dstEntry) {
  if (!m.src.supportsMetadata || !m.dst.supportsMetadata) return true

  const srcMetadata = srcEntry.value.metadata
  const dstMetadata = dstEntry.value.metadata

  if (m.metadataEquals) {
    return m.metadataEquals(srcMetadata, dstMetadata)
  }

  const noMetadata = !srcMetadata && !dstMetadata
  const identicalMetadata = !!(srcMetadata && dstMetadata && sameData(srcMetadata, dstMetadata))

  return noMetadata || identicalMetadata
}

function toIgnoreFunction (ignore) {
  if (typeof ignore === 'function') return ignore

  const all = [].concat(ignore).map(e => unixPathResolve('/', e))
  return key => all.some(path => path === key || key.startsWith(path + '/'))
}

function noop () {}

},{"binary-stream-equals":107,"same-data":487,"streamx":578,"unix-path-resolve":588}],388:[function(require,module,exports){
var queueTick = require('queue-tick')

var mutexify = function () {
  var queue = []
  var used = null

  var call = function () {
    used(release)
  }

  var acquire = function (fn) {
    if (used) return queue.push(fn)
    used = fn
    acquire.locked = true
    queueTick(call)
    return 0
  }

  acquire.locked = false

  var release = function (fn, err, value) {
    used = null
    acquire.locked = false
    if (queue.length) acquire(queue.shift())
    if (fn) fn(err, value)
  }

  return acquire
}

module.exports = mutexify

},{"queue-tick":447}],389:[function(require,module,exports){
var mutexify = require('.')

var mutexifyPromise = function () {
  var lock = mutexify()

  var acquire = function () {
    return new Promise(lock)
  }

  Object.defineProperty(acquire, 'locked', {
    get: function () { return lock.locked },
    enumerable: true
  })

  return acquire
}

module.exports = mutexifyPromise

},{".":388}],390:[function(require,module,exports){
module.exports = assert

class AssertionError extends Error {}
AssertionError.prototype.name = 'AssertionError'

/**
 * Minimal assert function
 * @param  {any} t Value to check if falsy
 * @param  {string=} m Optional assertion error message
 * @throws {AssertionError}
 */
function assert (t, m) {
  if (!t) {
    var err = new AssertionError(m)
    if (Error.captureStackTrace) Error.captureStackTrace(err, assert)
    throw err
  }
}

},{}],391:[function(require,module,exports){
(function (process,setImmediate){(function (){
'use strict';

var ensureCallable = function (fn) {
	if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
	return fn;
};

var byObserver = function (Observer) {
	var node = document.createTextNode(''), queue, currentQueue, i = 0;
	new Observer(function () {
		var callback;
		if (!queue) {
			if (!currentQueue) return;
			queue = currentQueue;
		} else if (currentQueue) {
			queue = currentQueue.concat(queue);
		}
		currentQueue = queue;
		queue = null;
		if (typeof currentQueue === 'function') {
			callback = currentQueue;
			currentQueue = null;
			callback();
			return;
		}
		node.data = (i = ++i % 2); // Invoke other batch, to handle leftover callbacks in case of crash
		while (currentQueue) {
			callback = currentQueue.shift();
			if (!currentQueue.length) currentQueue = null;
			callback();
		}
	}).observe(node, { characterData: true });
	return function (fn) {
		ensureCallable(fn);
		if (queue) {
			if (typeof queue === 'function') queue = [queue, fn];
			else queue.push(fn);
			return;
		}
		queue = fn;
		node.data = (i = ++i % 2);
	};
};

module.exports = (function () {
	// Node.js
	if ((typeof process === 'object') && process && (typeof process.nextTick === 'function')) {
		return process.nextTick;
	}

	// queueMicrotask
	if (typeof queueMicrotask === "function") {
		return function (cb) { queueMicrotask(ensureCallable(cb)); };
	}

	// MutationObserver
	if ((typeof document === 'object') && document) {
		if (typeof MutationObserver === 'function') return byObserver(MutationObserver);
		if (typeof WebKitMutationObserver === 'function') return byObserver(WebKitMutationObserver);
	}

	// W3C Draft
	// http://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html
	if (typeof setImmediate === 'function') {
		return function (cb) { setImmediate(ensureCallable(cb)); };
	}

	// Wide available standard
	if ((typeof setTimeout === 'function') || (typeof setTimeout === 'object')) {
		return function (cb) { setTimeout(ensureCallable(cb), 0); };
	}

	return null;
}());

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":437,"timers":584}],392:[function(require,module,exports){
/* eslint-disable camelcase */
const sodium = require('sodium-universal')
const assert = require('nanoassert')
const b4a = require('b4a')

const DHLEN = sodium.crypto_scalarmult_ed25519_BYTES
const PKLEN = sodium.crypto_scalarmult_ed25519_BYTES
const SCALARLEN = sodium.crypto_scalarmult_ed25519_BYTES
const SKLEN = sodium.crypto_sign_SECRETKEYBYTES
const ALG = 'Ed25519'

module.exports = {
  DHLEN,
  PKLEN,
  SCALARLEN,
  SKLEN,
  ALG,
  name: ALG,
  generateKeyPair,
  dh
}

function generateKeyPair (privKey) {
  if (privKey) return generateSeedKeyPair(privKey.subarray(0, 32))

  const keyPair = {}
  keyPair.secretKey = b4a.alloc(SKLEN)
  keyPair.publicKey = b4a.alloc(PKLEN)

  sodium.crypto_sign_keypair(keyPair.publicKey, keyPair.secretKey)
  return keyPair
}

function generateSeedKeyPair (seed) {
  const keyPair = {}
  keyPair.secretKey = b4a.alloc(SKLEN)
  keyPair.publicKey = b4a.alloc(PKLEN)

  sodium.crypto_sign_seed_keypair(keyPair.publicKey, keyPair.secretKey, seed)
  return keyPair
}

function dh (publicKey, { scalar, secretKey }) {
  // tweaked keys expose scalar directly
  if (!scalar) {
    assert(secretKey.byteLength === SKLEN)

    // libsodium stores seed not actual scalar
    const sk = b4a.alloc(64)
    sodium.crypto_hash_sha512(sk, secretKey.subarray(0, 32))
    sk[0] &= 248
    sk[31] &= 127
    sk[31] |= 64

    scalar = sk.subarray(0, 32)
  }

  assert(scalar.byteLength === SCALARLEN)
  assert(publicKey.byteLength === PKLEN)

  const output = b4a.alloc(DHLEN)

  // we clamp if necessary above
  sodium.crypto_scalarmult_ed25519_noclamp(
    output,
    scalar,
    publicKey
  )

  return output
}

},{"b4a":102,"nanoassert":390,"sodium-universal":556}],393:[function(require,module,exports){
const sodium = require('sodium-universal')
const b4a = require('b4a')

module.exports = class CipherState {
  constructor (key) {
    this.key = key || null
    this.nonce = 0
    this.CIPHER_ALG = 'ChaChaPoly'
  }

  initialiseKey (key) {
    this.key = key
    this.nonce = 0
  }

  setNonce (nonce) {
    this.nonce = nonce
  }

  encrypt (plaintext, ad) {
    if (!this.hasKey) return plaintext
    if (!ad) ad = b4a.alloc(0)

    const ciphertext = encryptWithAD(this.key, this.nonce, ad, plaintext)
    this.nonce++

    return ciphertext
  }

  decrypt (ciphertext, ad) {
    if (!this.hasKey) return ciphertext
    if (!ad) ad = b4a.alloc(0)

    const plaintext = decryptWithAD(this.key, this.nonce, ad, ciphertext)
    this.nonce++

    return plaintext
  }

  get hasKey () {
    return this.key !== null
  }

  _clear () {
    sodium.sodium_memzero(this.key)
    this.key = null
    this.nonce = null
  }

  static get MACBYTES () {
    return 16
  }

  static get NONCEBYTES () {
    return 8
  }

  static get KEYBYTES () {
    return 32
  }
}

function encryptWithAD (key, counter, additionalData, plaintext) {
  // for our purposes, additionalData will always be a pubkey so we encode from hex
  if (!b4a.isBuffer(additionalData)) additionalData = b4a.from(additionalData, 'hex')
  if (!b4a.isBuffer(plaintext)) plaintext = b4a.from(plaintext, 'hex')

  const nonce = b4a.alloc(sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES)
  const view = new DataView(nonce.buffer, nonce.byteOffset, nonce.byteLength)
  view.setUint32(4, counter, true)

  const ciphertext = b4a.alloc(plaintext.byteLength + sodium.crypto_aead_chacha20poly1305_ietf_ABYTES)

  sodium.crypto_aead_chacha20poly1305_ietf_encrypt(ciphertext, plaintext, additionalData, null, nonce, key)
  return ciphertext
}

function decryptWithAD (key, counter, additionalData, ciphertext) {
  // for our purposes, additionalData will always be a pubkey so we encode from hex
  if (!b4a.isBuffer(additionalData)) additionalData = b4a.from(additionalData, 'hex')
  if (!b4a.isBuffer(ciphertext)) ciphertext = b4a.from(ciphertext, 'hex')

  const nonce = b4a.alloc(sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES)
  const view = new DataView(nonce.buffer, nonce.byteOffset, nonce.byteLength)
  view.setUint32(4, counter, true)

  const plaintext = b4a.alloc(ciphertext.byteLength - sodium.crypto_aead_chacha20poly1305_ietf_ABYTES)

  sodium.crypto_aead_chacha20poly1305_ietf_decrypt(plaintext, null, ciphertext, additionalData, nonce, key)
  return plaintext
}

},{"b4a":102,"sodium-universal":415}],394:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"b4a":102,"dup":64,"nanoassert":390,"sodium-universal":415}],395:[function(require,module,exports){
const hmacBlake2b = require('./hmac')
const assert = require('nanoassert')
const b4a = require('b4a')

const HASHLEN = 64

module.exports = {
  hkdf,
  HASHLEN
}

// HMAC-based Extract-and-Expand KDF
// https://www.ietf.org/rfc/rfc5869.txt

function hkdf (salt, inputKeyMaterial, info = '', length = 2 * HASHLEN) {
  const pseudoRandomKey = hkdfExtract(salt, inputKeyMaterial)
  const result = hkdfExpand(pseudoRandomKey, info, length)

  const results = []
  let offset = 0
  while (offset < result.length) {
    results.push(result.subarray(offset, offset + HASHLEN))
    offset += HASHLEN
  }
  return results

  function hkdfExtract (salt, inputKeyMaterial) {
    return hmacDigest(salt, inputKeyMaterial)
  }

  function hkdfExpand (key, info, length) {
    const T = [b4a.from(info)]
    const lengthRatio = length / HASHLEN

    for (let i = 0; i < lengthRatio; i++) {
      const infoBuf = b4a.from(info)
      const toHash = b4a.concat([T[i], infoBuf, b4a.from([i + 1])])

      T[i + 1] = hmacDigest(key, toHash)
    }

    const result = b4a.concat(T.slice(1))
    assert(result.byteLength === length, 'key expansion failed, length not as expected')

    return result
  }
}

function hmacDigest (key, input) {
  const hmac = b4a.alloc(HASHLEN)
  hmacBlake2b(hmac, input, key)

  return hmac
}

},{"./hmac":396,"b4a":102,"nanoassert":390}],396:[function(require,module,exports){
/* eslint-disable camelcase */
const b4a = require('b4a')
const { sodium_memzero, crypto_generichash, crypto_generichash_batch } = require('sodium-universal')

const HASHLEN = 64
const BLOCKLEN = 128
const scratch = b4a.alloc(BLOCKLEN * 3)
const HMACKey = scratch.subarray(BLOCKLEN * 0, BLOCKLEN * 1)
const OuterKeyPad = scratch.subarray(BLOCKLEN * 1, BLOCKLEN * 2)
const InnerKeyPad = scratch.subarray(BLOCKLEN * 2, BLOCKLEN * 3)

// Post-fill is done in the cases where someone caught an exception that
// happened before we were able to clear data at the end

module.exports = function hmac (out, data, key) {
  if (key.byteLength > BLOCKLEN) {
    crypto_generichash(HMACKey.subarray(0, HASHLEN), key)
    sodium_memzero(HMACKey.subarray(HASHLEN))
  } else {
    // Covers key <= BLOCKLEN
    HMACKey.set(key)
    sodium_memzero(HMACKey.subarray(key.byteLength))
  }

  for (let i = 0; i < HMACKey.byteLength; i++) {
    OuterKeyPad[i] = 0x5c ^ HMACKey[i]
    InnerKeyPad[i] = 0x36 ^ HMACKey[i]
  }
  sodium_memzero(HMACKey)

  crypto_generichash_batch(out, [InnerKeyPad].concat(data))
  sodium_memzero(InnerKeyPad)
  crypto_generichash_batch(out, [OuterKeyPad].concat(out))
  sodium_memzero(OuterKeyPad)
}

module.exports.BYTES = HASHLEN
module.exports.KEYBYTES = BLOCKLEN

},{"b4a":102,"sodium-universal":415}],397:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"./crypto_stream_chacha20":412,"./crypto_verify":413,"./internal/poly1305":418,"dup":35,"nanoassert":390}],398:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"./crypto_verify":413,"dup":36,"nanoassert":390,"sha512-universal":501}],399:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./crypto_generichash":400,"./crypto_hash":401,"./crypto_scalarmult":406,"./crypto_secretbox":407,"./crypto_stream":411,"./randombytes":420,"dup":37,"nanoassert":390,"xsalsa20":600}],400:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"blake2b":125,"dup":38}],401:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39,"nanoassert":390,"sha512-universal":501}],402:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"dup":40,"nanoassert":390,"sha256-universal":497}],403:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"./randombytes":420,"blake2b":125,"dup":41,"nanoassert":390}],404:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"./crypto_generichash":400,"./crypto_scalarmult":406,"./randombytes":420,"dup":42,"nanoassert":390}],405:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"./crypto_verify":413,"./internal/poly1305":418,"dup":43,"nanoassert":390}],406:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"./internal/ed25519":416,"dup":44}],407:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"./crypto_onetimeauth":405,"./crypto_stream":411,"dup":45,"nanoassert":390}],408:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"./crypto_stream_chacha20":412,"./helpers":414,"./internal/hchacha20":417,"./internal/poly1305":418,"./randombytes":420,"dup":46,"nanoassert":390}],409:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"dup":47,"siphash24":511}],410:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"./crypto_hash":401,"./crypto_hash.js":401,"./crypto_scalarmult.js":406,"./crypto_verify":413,"./internal/ed25519":416,"./randombytes":420,"dup":48,"nanoassert":390}],411:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49,"xsalsa20":600}],412:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"chacha20-universal":173,"dup":50,"nanoassert":390}],413:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],414:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./crypto_verify":413,"dup":52,"nanoassert":390}],415:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./crypto_aead":397,"./crypto_auth":398,"./crypto_box":399,"./crypto_generichash":400,"./crypto_hash":401,"./crypto_hash_sha256":402,"./crypto_kdf":403,"./crypto_kx":404,"./crypto_onetimeauth":405,"./crypto_scalarmult":406,"./crypto_secretbox":407,"./crypto_secretstream":408,"./crypto_shorthash":409,"./crypto_sign":410,"./crypto_stream":411,"./crypto_stream_chacha20":412,"./crypto_verify":413,"./helpers":414,"./memory":419,"./randombytes":420,"dup":53}],416:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}],417:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"../memory":419,"dup":55,"nanoassert":390}],418:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"dup":56}],419:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"dup":57}],420:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58,"nanoassert":390}],421:[function(require,module,exports){
arguments[4][67][0].apply(exports,arguments)
},{"./hkdf":395,"./symmetric-state":422,"b4a":102,"dup":67,"nanoassert":390}],422:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"./cipher":393,"./dh":394,"./hkdf":395,"b4a":102,"dup":68,"nanoassert":390,"sodium-universal":415}],423:[function(require,module,exports){
var wrappy = require('wrappy')
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}

},{"wrappy":598}],424:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],425:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

'use strict';

var asn1 = require('asn1.js');

exports.certificate = require('./certificate');

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
	this.seq().obj(
		this.key('version')['int'](),
		this.key('modulus')['int'](),
		this.key('publicExponent')['int'](),
		this.key('privateExponent')['int'](),
		this.key('prime1')['int'](),
		this.key('prime2')['int'](),
		this.key('exponent1')['int'](),
		this.key('exponent2')['int'](),
		this.key('coefficient')['int']()
	);
});
exports.RSAPrivateKey = RSAPrivateKey;

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
	this.seq().obj(
		this.key('modulus')['int'](),
		this.key('publicExponent')['int']()
	);
});
exports.RSAPublicKey = RSAPublicKey;

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
	this.seq().obj(
		this.key('algorithm').objid(),
		this.key('none').null_().optional(),
		this.key('curve').objid().optional(),
		this.key('params').seq().obj(
			this.key('p')['int'](),
			this.key('q')['int'](),
			this.key('g')['int']()
		).optional()
	);
});

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
	this.seq().obj(
		this.key('algorithm').use(AlgorithmIdentifier),
		this.key('subjectPublicKey').bitstr()
	);
});
exports.PublicKey = PublicKey;

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
	this.seq().obj(
		this.key('version')['int'](),
		this.key('algorithm').use(AlgorithmIdentifier),
		this.key('subjectPrivateKey').octstr()
	);
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
	this.seq().obj(
		this.key('algorithm').seq().obj(
			this.key('id').objid(),
			this.key('decrypt').seq().obj(
				this.key('kde').seq().obj(
					this.key('id').objid(),
					this.key('kdeparams').seq().obj(
						this.key('salt').octstr(),
						this.key('iters')['int']()
					)
				),
				this.key('cipher').seq().obj(
					this.key('algo').objid(),
					this.key('iv').octstr()
				)
			)
		),
		this.key('subjectPrivateKey').octstr()
	);
});

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
	this.seq().obj(
		this.key('version')['int'](),
		this.key('p')['int'](),
		this.key('q')['int'](),
		this.key('g')['int'](),
		this.key('pub_key')['int'](),
		this.key('priv_key')['int']()
	);
});
exports.DSAPrivateKey = DSAPrivateKey;

exports.DSAparam = asn1.define('DSAparam', function () {
	this['int']();
});

var ECParameters = asn1.define('ECParameters', function () {
	this.choice({
		namedCurve: this.objid()
	});
});

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
	this.seq().obj(
		this.key('version')['int'](),
		this.key('privateKey').octstr(),
		this.key('parameters').optional().explicit(0).use(ECParameters),
		this.key('publicKey').optional().explicit(1).bitstr()
	);
});
exports.ECPrivateKey = ECPrivateKey;

exports.signature = asn1.define('signature', function () {
	this.seq().obj(
		this.key('r')['int'](),
		this.key('s')['int']()
	);
});

},{"./certificate":426,"asn1.js":69}],426:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict';

var asn = require('asn1.js');

var Time = asn.define('Time', function () {
	this.choice({
		utcTime: this.utctime(),
		generalTime: this.gentime()
	});
});

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
	this.seq().obj(
		this.key('type').objid(),
		this.key('value').any()
	);
});

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
	this.seq().obj(
		this.key('algorithm').objid(),
		this.key('parameters').optional(),
		this.key('curve').objid().optional()
	);
});

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
	this.seq().obj(
		this.key('algorithm').use(AlgorithmIdentifier),
		this.key('subjectPublicKey').bitstr()
	);
});

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
	this.setof(AttributeTypeValue);
});

var RDNSequence = asn.define('RDNSequence', function () {
	this.seqof(RelativeDistinguishedName);
});

var Name = asn.define('Name', function () {
	this.choice({
		rdnSequence: this.use(RDNSequence)
	});
});

var Validity = asn.define('Validity', function () {
	this.seq().obj(
		this.key('notBefore').use(Time),
		this.key('notAfter').use(Time)
	);
});

var Extension = asn.define('Extension', function () {
	this.seq().obj(
		this.key('extnID').objid(),
		this.key('critical').bool().def(false),
		this.key('extnValue').octstr()
	);
});

var TBSCertificate = asn.define('TBSCertificate', function () {
	this.seq().obj(
		this.key('version').explicit(0)['int']().optional(),
		this.key('serialNumber')['int'](),
		this.key('signature').use(AlgorithmIdentifier),
		this.key('issuer').use(Name),
		this.key('validity').use(Validity),
		this.key('subject').use(Name),
		this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
		this.key('issuerUniqueID').implicit(1).bitstr().optional(),
		this.key('subjectUniqueID').implicit(2).bitstr().optional(),
		this.key('extensions').explicit(3).seqof(Extension).optional()
	);
});

var X509Certificate = asn.define('X509Certificate', function () {
	this.seq().obj(
		this.key('tbsCertificate').use(TBSCertificate),
		this.key('signatureAlgorithm').use(AlgorithmIdentifier),
		this.key('signatureValue').bitstr()
	);
});

module.exports = X509Certificate;

},{"asn1.js":69}],427:[function(require,module,exports){
'use strict';

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
var evp = require('evp_bytestokey');
var ciphers = require('browserify-aes');
var Buffer = require('safe-buffer').Buffer;
module.exports = function (okey, password) {
	var key = okey.toString();
	var match = key.match(findProc);
	var decrypted;
	if (!match) {
		var match2 = key.match(fullRegex);
		decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
	} else {
		var suite = 'aes' + match[1];
		var iv = Buffer.from(match[2], 'hex');
		var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64');
		var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
		var out = [];
		var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
		out.push(cipher.update(cipherText));
		out.push(cipher['final']());
		decrypted = Buffer.concat(out);
	}
	var tag = key.match(startRegex)[1];
	return {
		tag: tag,
		data: decrypted
	};
};

},{"browserify-aes":135,"evp_bytestokey":259,"safe-buffer":485}],428:[function(require,module,exports){
'use strict';

var asn1 = require('./asn1');
var aesid = require('./aesid.json');
var fixProc = require('./fixProc');
var ciphers = require('browserify-aes');
var pbkdf2Sync = require('pbkdf2').pbkdf2Sync;
var Buffer = require('safe-buffer').Buffer;

function decrypt(data, password) {
	var salt = data.algorithm.decrypt.kde.kdeparams.salt;
	var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
	var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
	var iv = data.algorithm.decrypt.cipher.iv;
	var cipherText = data.subjectPrivateKey;
	var keylen = parseInt(algo.split('-')[1], 10) / 8;
	var key = pbkdf2Sync(password, salt, iters, keylen, 'sha1');
	var cipher = ciphers.createDecipheriv(algo, key, iv);
	var out = [];
	out.push(cipher.update(cipherText));
	out.push(cipher['final']());
	return Buffer.concat(out);
}

function parseKeys(buffer) {
	var password;
	if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
		password = buffer.passphrase;
		buffer = buffer.key;
	}
	if (typeof buffer === 'string') {
		buffer = Buffer.from(buffer);
	}

	var stripped = fixProc(buffer, password);

	var type = stripped.tag;
	var data = stripped.data;
	var subtype, ndata;
	switch (type) {
		case 'CERTIFICATE':
			ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
			// falls through
		case 'PUBLIC KEY':
			if (!ndata) {
				ndata = asn1.PublicKey.decode(data, 'der');
			}
			subtype = ndata.algorithm.algorithm.join('.');
			switch (subtype) {
				case '1.2.840.113549.1.1.1':
					return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
				case '1.2.840.10045.2.1':
					ndata.subjectPrivateKey = ndata.subjectPublicKey;
					return {
						type: 'ec',
						data: ndata
					};
				case '1.2.840.10040.4.1':
					ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
					return {
						type: 'dsa',
						data: ndata.algorithm.params
					};
				default: throw new Error('unknown key id ' + subtype);
			}
			// throw new Error('unknown key type ' + type)
		case 'ENCRYPTED PRIVATE KEY':
			data = asn1.EncryptedPrivateKey.decode(data, 'der');
			data = decrypt(data, password);
			// falls through
		case 'PRIVATE KEY':
			ndata = asn1.PrivateKey.decode(data, 'der');
			subtype = ndata.algorithm.algorithm.join('.');
			switch (subtype) {
				case '1.2.840.113549.1.1.1':
					return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
				case '1.2.840.10045.2.1':
					return {
						curve: ndata.algorithm.curve,
						privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
					};
				case '1.2.840.10040.4.1':
					ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
					return {
						type: 'dsa',
						params: ndata.algorithm.params
					};
				default: throw new Error('unknown key id ' + subtype);
			}
			// throw new Error('unknown key type ' + type)
		case 'RSA PUBLIC KEY':
			return asn1.RSAPublicKey.decode(data, 'der');
		case 'RSA PRIVATE KEY':
			return asn1.RSAPrivateKey.decode(data, 'der');
		case 'DSA PRIVATE KEY':
			return {
				type: 'dsa',
				params: asn1.DSAPrivateKey.decode(data, 'der')
			};
		case 'EC PRIVATE KEY':
			data = asn1.ECPrivateKey.decode(data, 'der');
			return {
				curve: data.parameters.value,
				privateKey: data.privateKey
			};
		default: throw new Error('unknown key type ' + type);
	}
}
parseKeys.signature = asn1.signature;

module.exports = parseKeys;

},{"./aesid.json":424,"./asn1":425,"./fixProc":427,"browserify-aes":135,"pbkdf2":429,"safe-buffer":485}],429:[function(require,module,exports){
'use strict';

exports.pbkdf2 = require('./lib/async');
exports.pbkdf2Sync = require('./lib/sync');

},{"./lib/async":430,"./lib/sync":433}],430:[function(require,module,exports){
(function (global){(function (){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var sync = require('./sync');
var toBuffer = require('./to-buffer');

var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
	sha: 'SHA-1',
	'sha-1': 'SHA-1',
	sha1: 'SHA-1',
	sha256: 'SHA-256',
	'sha-256': 'SHA-256',
	sha384: 'SHA-384',
	'sha-384': 'SHA-384',
	'sha-512': 'SHA-512',
	sha512: 'SHA-512'
};
var checks = [];
var nextTick;
function getNextTick() {
	if (nextTick) {
		return nextTick;
	}
	if (global.process && global.process.nextTick) {
		nextTick = global.process.nextTick;
	} else if (global.queueMicrotask) {
		nextTick = global.queueMicrotask;
	} else if (global.setImmediate) {
		nextTick = global.setImmediate;
	} else {
		nextTick = global.setTimeout;
	}
	return nextTick;
}
function browserPbkdf2(password, salt, iterations, length, algo) {
	return subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveBits']).then(function (key) {
		return subtle.deriveBits({
			name: 'PBKDF2',
			salt: salt,
			iterations: iterations,
			hash: {
				name: algo
			}
		}, key, length << 3);
	}).then(function (res) {
		return Buffer.from(res);
	});
}
function checkNative(algo) {
	if (global.process && !global.process.browser) {
		return Promise.resolve(false);
	}
	if (!subtle || !subtle.importKey || !subtle.deriveBits) {
		return Promise.resolve(false);
	}
	if (checks[algo] !== undefined) {
		return checks[algo];
	}
	ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
	var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
		.then(
			function () { return true; },
			function () { return false; }
		);
	checks[algo] = prom;
	return prom;
}

function resolvePromise(promise, callback) {
	promise.then(function (out) {
		getNextTick()(function () {
			callback(null, out);
		});
	}, function (e) {
		getNextTick()(function () {
			callback(e);
		});
	});
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
	if (typeof digest === 'function') {
		callback = digest;
		digest = undefined;
	}

	checkParameters(iterations, keylen);
	password = toBuffer(password, defaultEncoding, 'Password');
	salt = toBuffer(salt, defaultEncoding, 'Salt');
	if (typeof callback !== 'function') {
		throw new Error('No callback provided to pbkdf2');
	}

	digest = digest || 'sha1';
	var algo = toBrowser[digest.toLowerCase()];

	if (!algo || typeof global.Promise !== 'function') {
		getNextTick()(function () {
			var out;
			try {
				out = sync(password, salt, iterations, keylen, digest);
			} catch (e) {
				callback(e);
				return;
			}
			callback(null, out);
		});
		return;
	}

	resolvePromise(checkNative(algo).then(function (resp) {
		if (resp) {
			return browserPbkdf2(password, salt, iterations, keylen, algo);
		}

		return sync(password, salt, iterations, keylen, digest);
	}), callback);
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":431,"./precondition":432,"./sync":433,"./to-buffer":434,"safe-buffer":485}],431:[function(require,module,exports){
(function (process,global){(function (){
'use strict';

var defaultEncoding;
/* istanbul ignore next */
if (global.process && global.process.browser) {
	defaultEncoding = 'utf-8';
} else if (global.process && global.process.version) {
	var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);

	defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
} else {
	defaultEncoding = 'utf-8';
}
module.exports = defaultEncoding;

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":437}],432:[function(require,module,exports){
'use strict';

var $isFinite = isFinite;
var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

module.exports = function (iterations, keylen) {
	if (typeof iterations !== 'number') {
		throw new TypeError('Iterations not a number');
	}

	if (iterations < 0 || !$isFinite(iterations)) {
		throw new TypeError('Bad iterations');
	}

	if (typeof keylen !== 'number') {
		throw new TypeError('Key length not a number');
	}

	if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
		throw new TypeError('Bad key length');
	}
};

},{}],433:[function(require,module,exports){
'use strict';

var md5 = require('create-hash/md5');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');
var Buffer = require('safe-buffer').Buffer;

var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var toBuffer = require('./to-buffer');

var ZEROS = Buffer.alloc(128);
var sizes = {
	__proto__: null,
	md5: 16,
	sha1: 20,
	sha224: 28,
	sha256: 32,
	sha384: 48,
	sha512: 64,
	'sha512-256': 32,
	ripemd160: 20,
	rmd160: 20
};

var mapping = {
	__proto__: null,
	'sha-1': 'sha1',
	'sha-224': 'sha224',
	'sha-256': 'sha256',
	'sha-384': 'sha384',
	'sha-512': 'sha512',
	'ripemd-160': 'ripemd160'
};

function rmd160Func(data) {
	return new RIPEMD160().update(data).digest();
}

function getDigest(alg) {
	function shaFunc(data) {
		return sha(alg).update(data).digest();
	}

	if (alg === 'rmd160' || alg === 'ripemd160') {
		return rmd160Func;
	}
	if (alg === 'md5') {
		return md5;
	}
	return shaFunc;
}

function Hmac(alg, key, saltLen) {
	var hash = getDigest(alg);
	var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

	if (key.length > blocksize) {
		key = hash(key);
	} else if (key.length < blocksize) {
		key = Buffer.concat([key, ZEROS], blocksize);
	}

	var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
	var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
	for (var i = 0; i < blocksize; i++) {
		ipad[i] = key[i] ^ 0x36;
		opad[i] = key[i] ^ 0x5C;
	}

	var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
	ipad.copy(ipad1, 0, 0, blocksize);
	this.ipad1 = ipad1;
	this.ipad2 = ipad;
	this.opad = opad;
	this.alg = alg;
	this.blocksize = blocksize;
	this.hash = hash;
	this.size = sizes[alg];
}

Hmac.prototype.run = function (data, ipad) {
	data.copy(ipad, this.blocksize);
	var h = this.hash(ipad);
	h.copy(this.opad, this.blocksize);
	return this.hash(this.opad);
};

function pbkdf2(password, salt, iterations, keylen, digest) {
	checkParameters(iterations, keylen);
	password = toBuffer(password, defaultEncoding, 'Password');
	salt = toBuffer(salt, defaultEncoding, 'Salt');

	var lowerDigest = (digest || 'sha1').toLowerCase();
	var mappedDigest = mapping[lowerDigest] || lowerDigest;
	var size = sizes[mappedDigest];
	if (typeof size !== 'number' || !size) {
		throw new TypeError('Digest algorithm not supported: ' + digest);
	}

	var hmac = new Hmac(mappedDigest, password, salt.length);

	var DK = Buffer.allocUnsafe(keylen);
	var block1 = Buffer.allocUnsafe(salt.length + 4);
	salt.copy(block1, 0, 0, salt.length);

	var destPos = 0;
	var hLen = size;
	var l = Math.ceil(keylen / hLen);

	for (var i = 1; i <= l; i++) {
		block1.writeUInt32BE(i, salt.length);

		var T = hmac.run(block1, hmac.ipad1);
		var U = T;

		for (var j = 1; j < iterations; j++) {
			U = hmac.run(U, hmac.ipad2);
			for (var k = 0; k < hLen; k++) {
				T[k] ^= U[k];
			}
		}

		T.copy(DK, destPos);
		destPos += hLen;
	}

	return DK;
}

module.exports = pbkdf2;

},{"./default-encoding":431,"./precondition":432,"./to-buffer":434,"create-hash/md5":213,"ripemd160":482,"safe-buffer":485,"sha.js":490}],434:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var toBuffer = require('to-buffer');

var useUint8Array = typeof Uint8Array !== 'undefined';
var useArrayBuffer = useUint8Array && typeof ArrayBuffer !== 'undefined';
var isView = useArrayBuffer && ArrayBuffer.isView;

module.exports = function (thing, encoding, name) {
	if (
		typeof thing === 'string'
		|| Buffer.isBuffer(thing)
		|| (useUint8Array && thing instanceof Uint8Array)
		|| (isView && isView(thing))
	) {
		return toBuffer(thing, encoding);
	}
	throw new TypeError(name + ' must be a string, a Buffer, a Uint8Array, or a DataView');
};

},{"safe-buffer":485,"to-buffer":586}],435:[function(require,module,exports){
'use strict';

/** @type {import('.')} */
module.exports = [
	'Float16Array',
	'Float32Array',
	'Float64Array',
	'Int8Array',
	'Int16Array',
	'Int32Array',
	'Uint8Array',
	'Uint8ClampedArray',
	'Uint16Array',
	'Uint32Array',
	'BigInt64Array',
	'BigUint64Array'
];

},{}],436:[function(require,module,exports){
(function (process){(function (){
'use strict';

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


}).call(this)}).call(this,require('_process'))
},{"_process":437}],437:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],438:[function(require,module,exports){
var varint = require('varint')
var svarint = require('signed-varint')
var b4a = require('b4a')

exports.make = encoder

exports.name = function (enc) {
  var keys = Object.keys(exports)
  for (var i = 0; i < keys.length; i++) {
    if (exports[keys[i]] === enc) return keys[i]
  }
  return null
}

exports.skip = function (type, buffer, offset) {
  switch (type) {
    case 0:
      varint.decode(buffer, offset)
      return offset + varint.decode.bytes

    case 1:
      return offset + 8

    case 2:
      var len = varint.decode(buffer, offset)
      return offset + varint.decode.bytes + len

    case 3:
    case 4:
      throw new Error('Groups are not supported')

    case 5:
      return offset + 4
  }

  throw new Error('Unknown wire type: ' + type)
}

exports.bytes = encoder(2,
  function encode (val, buffer, offset) {
    var oldOffset = offset
    var len = bufferLength(val)

    varint.encode(len, buffer, offset)
    offset += varint.encode.bytes

    if (b4a.isBuffer(val)) b4a.copy(val, buffer, offset)
    else b4a.write(buffer, val, offset, len)
    offset += len

    encode.bytes = offset - oldOffset
    return buffer
  },
  function decode (buffer, offset) {
    var oldOffset = offset

    var len = varint.decode(buffer, offset)
    offset += varint.decode.bytes

    var val = buffer.subarray(offset, offset + len)
    offset += val.length

    decode.bytes = offset - oldOffset
    return val
  },
  function encodingLength (val) {
    var len = bufferLength(val)
    return varint.encodingLength(len) + len
  }
)

exports.string = encoder(2,
  function encode (val, buffer, offset) {
    var oldOffset = offset
    var len = b4a.byteLength(val)

    varint.encode(len, buffer, offset, 'utf-8')
    offset += varint.encode.bytes

    b4a.write(buffer, val, offset, len)
    offset += len

    encode.bytes = offset - oldOffset
    return buffer
  },
  function decode (buffer, offset) {
    var oldOffset = offset

    var len = varint.decode(buffer, offset)
    offset += varint.decode.bytes

    var val = b4a.toString(buffer, 'utf-8', offset, offset + len)
    offset += len

    decode.bytes = offset - oldOffset
    return val
  },
  function encodingLength (val) {
    var len = b4a.byteLength(val)
    return varint.encodingLength(len) + len
  }
)

exports.bool = encoder(0,
  function encode (val, buffer, offset) {
    buffer[offset] = val ? 1 : 0
    encode.bytes = 1
    return buffer
  },
  function decode (buffer, offset) {
    var bool = buffer[offset] > 0
    decode.bytes = 1
    return bool
  },
  function encodingLength () {
    return 1
  }
)

exports.int32 = encoder(0,
  function encode (val, buffer, offset) {
    varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset)
    encode.bytes = varint.encode.bytes
    return buffer
  },
  function decode (buffer, offset) {
    var val = varint.decode(buffer, offset)
    decode.bytes = varint.decode.bytes
    return val > 2147483647 ? val - 4294967296 : val
  },
  function encodingLength (val) {
    return varint.encodingLength(val < 0 ? val + 4294967296 : val)
  }
)

exports.int64 = encoder(0,
  function encode (val, buffer, offset) {
    if (val < 0) {
      var last = offset + 9
      varint.encode(val * -1, buffer, offset)
      offset += varint.encode.bytes - 1
      buffer[offset] = buffer[offset] | 0x80
      while (offset < last - 1) {
        offset++
        buffer[offset] = 0xff
      }
      buffer[last] = 0x01
      encode.bytes = 10
    } else {
      varint.encode(val, buffer, offset)
      encode.bytes = varint.encode.bytes
    }
    return buffer
  },
  function decode (buffer, offset) {
    var val = varint.decode(buffer, offset)
    if (val >= Math.pow(2, 63)) {
      var limit = 9
      while (buffer[offset + limit - 1] === 0xff) limit--
      limit = limit || 9
      var subset = b4a.allocUnsafe(limit)
      b4a.copy(buffer, subset, 0, offset, offset + limit)
      subset[limit - 1] = subset[limit - 1] & 0x7f
      val = -1 * varint.decode(subset, 0)
      decode.bytes = 10
    } else {
      decode.bytes = varint.decode.bytes
    }
    return val
  },
  function encodingLength (val) {
    return val < 0 ? 10 : varint.encodingLength(val)
  }
)

exports.sint32 =
exports.sint64 = encoder(0,
  svarint.encode,
  svarint.decode,
  svarint.encodingLength
)

exports.uint32 =
exports.uint64 =
exports.enum =
exports.varint = encoder(0,
  varint.encode,
  varint.decode,
  varint.encodingLength
)

// we cannot represent these in javascript so we just use buffers
exports.fixed64 =
exports.sfixed64 = encoder(1,
  function encode (val, buffer, offset) {
    b4a.copy(val, buffer, offset)
    encode.bytes = 8
    return buffer
  },
  function decode (buffer, offset) {
    var val = buffer.subarray(offset, offset + 8)
    decode.bytes = 8
    return val
  },
  function encodingLength () {
    return 8
  }
)

exports.double = encoder(1,
  function encode (val, buffer, offset) {
    b4a.writeDoubleLE(buffer, val, offset)
    encode.bytes = 8
    return buffer
  },
  function decode (buffer, offset) {
    var val = b4a.readDoubleLE(buffer, offset)
    decode.bytes = 8
    return val
  },
  function encodingLength () {
    return 8
  }
)

exports.fixed32 = encoder(5,
  function encode (val, buffer, offset) {
    b4a.writeUInt32LE(buffer, val, offset)
    encode.bytes = 4
    return buffer
  },
  function decode (buffer, offset) {
    var val = b4a.readUInt32LE(buffer, offset)
    decode.bytes = 4
    return val
  },
  function encodingLength () {
    return 4
  }
)

exports.sfixed32 = encoder(5,
  function encode (val, buffer, offset) {
    b4a.writeInt32LE(buffer, val, offset)
    encode.bytes = 4
    return buffer
  },
  function decode (buffer, offset) {
    var val = b4a.readInt32LE(buffer, offset)
    decode.bytes = 4
    return val
  },
  function encodingLength () {
    return 4
  }
)

exports.float = encoder(5,
  function encode (val, buffer, offset) {
    b4a.writeFloatLE(buffer, val, offset)
    encode.bytes = 4
    return buffer
  },
  function decode (buffer, offset) {
    var val = b4a.readFloatLE(buffer, offset)
    decode.bytes = 4
    return val
  },
  function encodingLength () {
    return 4
  }
)

function encoder (type, encode, decode, encodingLength) {
  encode.bytes = decode.bytes = 0

  return {
    type: type,
    encode: encode,
    decode: decode,
    encodingLength: encodingLength
  }
}

function bufferLength (val) {
  return b4a.isBuffer(val) ? val.length : b4a.byteLength(val)
}

},{"b4a":102,"signed-varint":507,"varint":594}],439:[function(require,module,exports){
const b4a = require('b4a')
const c = require('compact-encoding')
const queueTick = require('queue-tick')
const safetyCatch = require('safety-catch')
const unslab = require('unslab')

const MAX_BUFFERED = 32768
const MAX_BACKLOG = Infinity // TODO: impl "open" backpressure
const MAX_BATCH = 8 * 1024 * 1024

class Channel {
  constructor (mux, info, userData, protocol, aliases, id, handshake, messages, onopen, onclose, ondestroy, ondrain) {
    this.userData = userData
    this.protocol = protocol
    this.aliases = aliases
    this.id = id
    this.handshake = null
    this.messages = []

    this.opened = false
    this.closed = false
    this.destroyed = false

    this.onopen = onopen
    this.onclose = onclose
    this.ondestroy = ondestroy
    this.ondrain = ondrain

    this._handshake = handshake
    this._mux = mux
    this._info = info
    this._localId = 0
    this._remoteId = 0
    this._active = 0
    this._extensions = null

    this._decBound = this._dec.bind(this)
    this._decAndDestroyBound = this._decAndDestroy.bind(this)

    this._openedPromise = null
    this._openedResolve = null

    this._destroyedPromise = null
    this._destroyedResolve = null

    for (const m of messages) this.addMessage(m)
  }

  get drained () {
    return this._mux.drained
  }

  fullyOpened () {
    if (this.opened) return Promise.resolve(true)
    if (this.closed) return Promise.resolve(false)
    if (this._openedPromise) return this._openedPromise

    this._openedPromise = new Promise((resolve) => { this._openedResolve = resolve })
    return this._openedPromise
  }

  fullyClosed () {
    if (this.destroyed) return Promise.resolve()
    if (this._destroyedPromise) return this._destroyedPromise

    this._destroyedPromise = new Promise((resolve) => { this._destroyedResolve = resolve })
    return this._destroyedPromise
  }

  open (handshake) {
    const id = this._mux._free.length > 0
      ? this._mux._free.pop()
      : this._mux._local.push(null) - 1

    this._info.opened++
    this._info.lastChannel = this
    this._localId = id + 1
    this._mux._local[id] = this

    if (this._remoteId === 0) {
      this._info.outgoing.push(this._localId)
    }

    const state = { buffer: null, start: 2, end: 2 }

    c.uint.preencode(state, this._localId)
    c.string.preencode(state, this.protocol)
    c.buffer.preencode(state, this.id)
    if (this._handshake) this._handshake.preencode(state, handshake)

    state.buffer = this._mux._alloc(state.end)

    state.buffer[0] = 0
    state.buffer[1] = 1
    c.uint.encode(state, this._localId)
    c.string.encode(state, this.protocol)
    c.buffer.encode(state, this.id)
    if (this._handshake) this._handshake.encode(state, handshake)

    this._mux._write0(state.buffer)
  }

  _dec () {
    if (--this._active === 0 && this.closed === true) this._destroy()
  }

  _decAndDestroy (err) {
    this._dec()
    this._mux._safeDestroy(err)
  }

  _fullyOpenSoon () {
    this._mux._remote[this._remoteId - 1].session = this
    queueTick(this._fullyOpen.bind(this))
  }

  _fullyOpen () {
    if (this.opened === true || this.closed === true) return

    const remote = this._mux._remote[this._remoteId - 1]

    this.opened = true
    this.handshake = this._handshake ? this._handshake.decode(remote.state) : null
    this._track(this.onopen(this.handshake, this))

    remote.session = this
    remote.state = null
    if (remote.pending !== null) this._drain(remote)

    this._resolveOpen(true)
  }

  _resolveOpen (opened) {
    if (this._openedResolve !== null) {
      this._openedResolve(opened)
      this._openedResolve = this._openedPromise = null
    }
  }

  _resolveDestroyed () {
    if (this._destroyedResolve !== null) {
      this._destroyedResolve()
      this._destroyedResolve = this._destroyedPromise = null
    }
  }

  _drain (remote) {
    for (let i = 0; i < remote.pending.length; i++) {
      const p = remote.pending[i]
      this._mux._buffered -= byteSize(p.state)
      this._recv(p.type, p.state)
    }

    remote.pending = null
    this._mux._resumeMaybe()
  }

  _track (p) {
    if (isPromise(p) === true) {
      this._active++
      return p.then(this._decBound, this._decAndDestroyBound)
    }

    return null
  }

  _close (isRemote) {
    if (this.closed === true) return
    this.closed = true

    this._info.opened--
    if (this._info.lastChannel === this) this._info.lastChannel = null

    if (this._remoteId > 0) {
      this._mux._remote[this._remoteId - 1] = null
      this._remoteId = 0
      // If remote has acked, we can reuse the local id now
      // otherwise, we need to wait for the "ack" to arrive
      this._mux._free.push(this._localId - 1)
    }

    this._mux._local[this._localId - 1] = null
    this._localId = 0

    this._mux._gc(this._info)
    this._track(this.onclose(isRemote, this))

    if (this._active === 0) this._destroy()

    this._resolveOpen(false)
  }

  _destroy () {
    if (this.destroyed === true) return
    this.destroyed = true
    this._track(this.ondestroy(this))
    this._resolveDestroyed()
  }

  _recv (type, state) {
    if (type < this.messages.length) {
      const m = this.messages[type]
      const p = m.recv(state, this)
      if (m.autoBatch === true) return p
    }
    return null
  }

  cork () {
    this._mux.cork()
  }

  uncork () {
    this._mux.uncork()
  }

  close () {
    if (this.closed === true) return

    const state = { buffer: null, start: 2, end: 2 }

    c.uint.preencode(state, this._localId)

    state.buffer = this._mux._alloc(state.end)

    state.buffer[0] = 0
    state.buffer[1] = 3
    c.uint.encode(state, this._localId)

    this._close(false)
    this._mux._write0(state.buffer)
  }

  addMessage (opts) {
    if (!opts) return this._skipMessage()

    const type = this.messages.length
    const autoBatch = opts.autoBatch !== false
    const encoding = opts.encoding || c.raw
    const onmessage = opts.onmessage || noop

    const s = this
    const typeLen = encodingLength(c.uint, type)

    const m = {
      type,
      autoBatch,
      encoding,
      onmessage,
      recv (state, session) {
        return session._track(m.onmessage(encoding.decode(state), session))
      },
      send (m, session = s) {
        if (session.closed === true) return false

        const mux = session._mux
        const state = { buffer: null, start: 0, end: typeLen }

        if (mux._batch !== null) {
          encoding.preencode(state, m)
          state.buffer = mux._alloc(state.end)

          c.uint.encode(state, type)
          encoding.encode(state, m)

          mux._pushBatch(session._localId, state.buffer)
          return true
        }

        c.uint.preencode(state, session._localId)
        encoding.preencode(state, m)

        state.buffer = mux._alloc(state.end)

        c.uint.encode(state, session._localId)
        c.uint.encode(state, type)
        encoding.encode(state, m)

        mux.drained = mux.stream.write(state.buffer)

        return mux.drained
      }
    }

    this.messages.push(m)

    return m
  }

  _skipMessage () {
    const type = this.messages.length
    const m = {
      type,
      encoding: c.raw,
      onmessage: noop,
      recv (state, session) {},
      send (m, session) {}
    }

    this.messages.push(m)
    return m
  }
}

module.exports = class Protomux {
  constructor (stream, { alloc } = {}) {
    if (stream.userData === null) stream.userData = this

    this.isProtomux = true
    this.stream = stream
    this.corked = 0
    this.drained = true

    this._alloc = alloc || (typeof stream.alloc === 'function' ? stream.alloc.bind(stream) : b4a.allocUnsafe)
    this._safeDestroyBound = this._safeDestroy.bind(this)
    this._uncorkBound = this.uncork.bind(this)

    this._remoteBacklog = 0
    this._buffered = 0
    this._paused = false
    this._remote = []
    this._local = []
    this._free = []
    this._batch = null
    this._batchState = null

    this._infos = new Map()
    this._notify = new Map()

    this.stream.on('data', this._ondata.bind(this))
    this.stream.on('drain', this._ondrain.bind(this))
    this.stream.on('end', this._onend.bind(this))
    this.stream.on('error', noop) // we handle this in "close"
    this.stream.on('close', this._shutdown.bind(this))
  }

  static from (stream, opts) {
    if (stream.userData && stream.userData.isProtomux) return stream.userData
    if (stream.isProtomux) return stream
    return new this(stream, opts)
  }

  static isProtomux (mux) {
    return typeof mux === 'object' && mux.isProtomux === true
  }

  * [Symbol.iterator] () {
    for (const session of this._local) {
      if (session !== null) yield session
    }
  }

  isIdle () {
    return this._local.length === this._free.length
  }

  cork () {
    if (++this.corked === 1) {
      this._batch = []
      this._batchState = { buffer: null, start: 0, end: 1 }
    }
  }

  uncork () {
    if (--this.corked === 0) {
      this._sendBatch(this._batch, this._batchState)
      this._batch = null
      this._batchState = null
    }
  }

  getLastChannel ({ protocol, id = null }) {
    const key = toKey(protocol, id)
    const info = this._infos.get(key)
    if (info) return info.lastChannel
    return null
  }

  pair ({ protocol, id = null }, notify) {
    this._notify.set(toKey(protocol, id), notify)
  }

  unpair ({ protocol, id = null }) {
    this._notify.delete(toKey(protocol, id))
  }

  opened ({ protocol, id = null }) {
    const key = toKey(protocol, id)
    const info = this._infos.get(key)
    return info ? info.opened > 0 : false
  }

  createChannel ({ userData = null, protocol, aliases = [], id = null, unique = true, handshake = null, messages = [], onopen = noop, onclose = noop, ondestroy = noop, ondrain = noop }) {
    if (this.stream.destroyed) return null

    const info = this._get(protocol, id, aliases)
    if (unique && info.opened > 0) return null

    if (info.incoming.length === 0) {
      return new Channel(this, info, userData, protocol, aliases, id, handshake, messages, onopen, onclose, ondestroy, ondrain)
    }

    this._remoteBacklog--

    const remoteId = info.incoming.shift()
    const r = this._remote[remoteId - 1]
    if (r === null) return null

    const session = new Channel(this, info, userData, protocol, aliases, id, handshake, messages, onopen, onclose, ondestroy, ondrain)

    session._remoteId = remoteId
    session._fullyOpenSoon()

    return session
  }

  _pushBatch (localId, buffer) {
    if (this._batchState.end >= MAX_BATCH) {
      this._sendBatch(this._batch, this._batchState)
      this._batch = []
      this._batchState = { buffer: null, start: 0, end: 1 }
    }

    if (this._batch.length === 0 || this._batch[this._batch.length - 1].localId !== localId) {
      this._batchState.end++
      c.uint.preencode(this._batchState, localId)
    }
    c.buffer.preencode(this._batchState, buffer)
    this._batch.push({ localId, buffer })
  }

  _sendBatch (batch, state) {
    if (batch.length === 0) return

    let prev = batch[0].localId

    state.buffer = this._alloc(state.end)
    state.buffer[state.start++] = 0
    state.buffer[state.start++] = 0

    c.uint.encode(state, prev)

    for (let i = 0; i < batch.length; i++) {
      const b = batch[i]
      if (prev !== b.localId) {
        state.buffer[state.start++] = 0
        c.uint.encode(state, (prev = b.localId))
      }
      c.buffer.encode(state, b.buffer)
    }

    this.drained = this.stream.write(state.buffer)
  }

  _get (protocol, id, aliases = []) {
    const key = toKey(protocol, id)

    let info = this._infos.get(key)
    if (info) return info

    info = { key, protocol, aliases: [], id, pairing: 0, opened: 0, incoming: [], outgoing: [], lastChannel: null }
    this._infos.set(key, info)

    for (const alias of aliases) {
      const key = toKey(alias, id)
      info.aliases.push(key)

      this._infos.set(key, info)
    }

    return info
  }

  _gc (info) {
    if (info.opened === 0 && info.outgoing.length === 0 && info.incoming.length === 0) {
      this._infos.delete(info.key)

      for (const alias of info.aliases) this._infos.delete(alias)
    }
  }

  _ondata (buffer) {
    if (buffer.byteLength === 0) return // ignore empty frames...
    try {
      const state = { buffer, start: 0, end: buffer.byteLength }
      this._decode(c.uint.decode(state), state)
    } catch (err) {
      this._safeDestroy(err)
    }
  }

  _ondrain () {
    this.drained = true

    for (const s of this._local) {
      if (s !== null) s._track(s.ondrain(s))
    }
  }

  _onend () { // TODO: support half open mode for the users who wants that here
    this.stream.end()
  }

  _decode (remoteId, state) {
    const type = c.uint.decode(state)

    if (remoteId === 0) {
      return this._oncontrolsession(type, state)
    }

    const r = remoteId <= this._remote.length ? this._remote[remoteId - 1] : null

    // if the channel is closed ignore - could just be a pipeline message...
    if (r === null) return null

    if (r.pending !== null) {
      this._bufferMessage(r, type, state)
      return null
    }

    return r.session._recv(type, state)
  }

  _oncontrolsession (type, state) {
    switch (type) {
      case 0:
        this._onbatch(state)
        break

      case 1:
        // return the promise back up as this has sideeffects so we can batch reply
        return this._onopensession(state)

      case 2:
        this._onrejectsession(state)
        break

      case 3:
        this._onclosesession(state)
        break
    }

    return null
  }

  _bufferMessage (r, type, { buffer, start, end }) {
    const state = { buffer, start, end } // copy
    r.pending.push({ type, state })
    this._buffered += byteSize(state)
    this._pauseMaybe()
  }

  _pauseMaybe () {
    if (this._paused === true || this._buffered <= MAX_BUFFERED) return
    this._paused = true
    this.stream.pause()
  }

  _resumeMaybe () {
    if (this._paused === false || this._buffered > MAX_BUFFERED) return
    this._paused = false
    this.stream.resume()
  }

  _onbatch (state) {
    const end = state.end
    let remoteId = c.uint.decode(state)

    let waiting = null

    while (state.end > state.start) {
      const len = c.uint.decode(state)
      if (len === 0) {
        remoteId = c.uint.decode(state)
        continue
      }
      state.end = state.start + len
      // if batch contains more than one message, cork it so we reply back with a batch
      if (end !== state.end && waiting === null) {
        waiting = []
        this.cork()
      }
      const p = this._decode(remoteId, state)
      if (waiting !== null && p !== null) waiting.push(p)
      state.start = state.end
      state.end = end
    }

    if (waiting !== null) {
      // the waiting promises are not allowed to throw but we destroy the stream in case we are wrong
      Promise.all(waiting).then(this._uncorkBound, this._safeDestroyBound)
    }
  }

  _onopensession (state) {
    const remoteId = c.uint.decode(state)
    const protocol = c.string.decode(state)
    const id = unslab(c.buffer.decode(state))

    // remote tried to open the control session - auto reject for now
    // as we can use as an explicit control protocol declaration if we need to
    if (remoteId === 0) {
      this._rejectSession(0)
      return null
    }

    const rid = remoteId - 1
    const info = this._get(protocol, id)

    // allow the remote to grow the ids by one
    if (this._remote.length === rid) {
      this._remote.push(null)
    }

    if (rid >= this._remote.length || this._remote[rid] !== null) {
      throw new Error('Invalid open message')
    }

    if (info.outgoing.length > 0) {
      const localId = info.outgoing.shift()
      const session = this._local[localId - 1]

      if (session === null) { // we already closed the channel - ignore
        this._free.push(localId - 1)
        return null
      }

      this._remote[rid] = { state, pending: null, session: null }

      session._remoteId = remoteId
      session._fullyOpen()
      return null
    }

    const copyState = { buffer: state.buffer, start: state.start, end: state.end }
    this._remote[rid] = { state: copyState, pending: [], session: null }

    if (++this._remoteBacklog > MAX_BACKLOG) {
      throw new Error('Remote exceeded backlog')
    }

    info.pairing++
    info.incoming.push(remoteId)

    return this._requestSession(protocol, id, info).catch(this._safeDestroyBound)
  }

  _onrejectsession (state) {
    const localId = c.uint.decode(state)

    // TODO: can be done smarter...
    for (const info of this._infos.values()) {
      const i = info.outgoing.indexOf(localId)
      if (i === -1) continue

      info.outgoing.splice(i, 1)

      const session = this._local[localId - 1]

      this._free.push(localId - 1)
      if (session !== null) session._close(true)

      this._gc(info)
      return
    }

    throw new Error('Invalid reject message')
  }

  _onclosesession (state) {
    const remoteId = c.uint.decode(state)

    if (remoteId === 0) return // ignore

    const rid = remoteId - 1
    const r = rid < this._remote.length ? this._remote[rid] : null

    if (r === null) return

    if (r.session !== null) r.session._close(true)
  }

  async _requestSession (protocol, id, info) {
    const notify = this._notify.get(toKey(protocol, id)) || this._notify.get(toKey(protocol, null))

    if (notify) await notify(id)

    if (--info.pairing > 0) return

    while (info.incoming.length > 0) {
      this._rejectSession(info, info.incoming.shift())
    }

    this._gc(info)
  }

  _rejectSession (info, remoteId) {
    if (remoteId > 0) {
      const r = this._remote[remoteId - 1]

      if (r.pending !== null) {
        for (let i = 0; i < r.pending.length; i++) {
          this._buffered -= byteSize(r.pending[i].state)
        }
      }

      this._remote[remoteId - 1] = null
      this._resumeMaybe()
    }

    const state = { buffer: null, start: 2, end: 2 }

    c.uint.preencode(state, remoteId)

    state.buffer = this._alloc(state.end)

    state.buffer[0] = 0
    state.buffer[1] = 2
    c.uint.encode(state, remoteId)

    this._write0(state.buffer)
  }

  _write0 (buffer) {
    if (this._batch !== null) {
      this._pushBatch(0, buffer.subarray(1))
      return
    }

    this.drained = this.stream.write(buffer)
  }

  destroy (err) {
    this.stream.destroy(err)
  }

  _safeDestroy (err) {
    safetyCatch(err)
    this.stream.destroy(err)
  }

  _shutdown () {
    for (const s of this._local) {
      if (s !== null) s._close(true)
    }
  }
}

function noop () {}

function toKey (protocol, id) {
  return protocol + '##' + (id ? b4a.toString(id, 'hex') : '')
}

function byteSize (state) {
  return 512 + (state.end - state.start)
}

function isPromise (p) {
  return !!(p && typeof p.then === 'function')
}

function encodingLength (enc, val) {
  const state = { buffer: null, start: 0, end: 0 }
  enc.preencode(state, val)
  return state.end
}

},{"b4a":102,"compact-encoding":178,"queue-tick":447,"safety-catch":486,"unslab":590}],440:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":443,"./publicEncrypt":444}],441:[function(require,module,exports){
var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":212,"safe-buffer":485}],442:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"buffer":132,"dup":83}],443:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":441,"./withPublic":445,"./xor":446,"bn.js":442,"browserify-rsa":153,"create-hash":212,"parse-asn1":428,"safe-buffer":485}],444:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":441,"./withPublic":445,"./xor":446,"bn.js":442,"browserify-rsa":153,"create-hash":212,"parse-asn1":428,"randombytes":465,"safe-buffer":485}],445:[function(require,module,exports){
var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":442,"safe-buffer":485}],446:[function(require,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],447:[function(require,module,exports){
module.exports = typeof queueMicrotask === 'function' ? queueMicrotask : (fn) => Promise.resolve().then(fn)

},{}],448:[function(require,module,exports){
const simdle = require('simdle-universal')

const INDEX_LEN = (16 /* root */ + 128 * 16 /* children */) * 2

const get = exports.get = function get (field, bit) {
  const n = field.byteLength * 8

  if (bit < 0) bit += n
  if (bit < 0 || bit >= n) return false

  const m = field.BYTES_PER_ELEMENT * 8

  const offset = bit & (m - 1)
  const i = (bit - offset) / m

  return (field[i] & (1 << offset)) !== 0
}

const set = exports.set = function set (field, bit, value = true) {
  const n = field.byteLength * 8

  if (bit < 0) bit += n
  if (bit < 0 || bit >= n) return false

  const m = field.BYTES_PER_ELEMENT * 8

  const offset = bit & (m - 1)
  const i = (bit - offset) / m
  const mask = 1 << offset

  if (value) {
    if ((field[i] & mask) !== 0) return false
  } else {
    if ((field[i] & mask) === 0) return false
  }

  field[i] ^= mask

  return true
}

exports.fill = function fill (field, value, start = 0, end = field.byteLength * 8) {
  const n = field.byteLength * 8

  if (start < 0) start += n
  if (end < 0) end += n
  if (start < 0 || start >= field.byteLength * 8 || start >= end) return field

  const m = field.BYTES_PER_ELEMENT * 8

  let i, j

  {
    const offset = start & (m - 1)
    i = (start - offset) / m

    if (offset !== 0) {
      let shift = m - offset
      if (end - start < shift) shift = end - start

      const mask = ((1 << shift) - 1) << offset

      if (value) field[i] |= mask
      else field[i] &= ~mask

      i++
    }
  }

  {
    const offset = end & (m - 1)
    j = (end - offset) / m

    if (offset !== 0 && j >= i) {
      const mask = (1 << offset) - 1

      if (value) field[j] |= mask
      else field[j] &= ~mask
    }
  }

  if (i < j) field.fill(value ? (2 ** m) - 1 : 0, i, j)

  return field
}

exports.clear = function clear (field, ...chunks) {
  const n = field.byteLength

  for (const chunk of chunks) {
    if (chunk.offset >= n) continue

    const m = chunk.field.byteLength

    let i = chunk.offset
    let j = 0

    while (((i & 15) !== 0 || (j & 15) !== 0) && i < n && j < m) {
      field[i] = field[i] & ~chunk.field[j]
      i++
      j++
    }

    if (i + 15 < n && j + 15 < m) {
      const len = Math.min(n - (n & 15) - i, m - (m & 15) - j)

      simdle.clear(field.subarray(i, i + len), chunk.field.subarray(j, j + len), field.subarray(i, i + len))
    }

    while (i < n && j < m) {
      field[i] = field[i] & ~chunk.field[j]
      i++
      j++
    }
  }
}

function bitOffset (bit, offset) {
  return !bit ? offset : (INDEX_LEN * 8 / 2) + offset
}

function byteOffset (bit, offset) {
  return !bit ? offset : (INDEX_LEN / 2) + offset
}

exports.findFirst = function findFirst (field, value, position = 0) {
  const n = field.byteLength * 8

  if (position < 0) position += n
  if (position < 0) position = 0
  if (position >= n) return -1

  value = !!value

  for (let i = position; i < n; i++) {
    if (get(field, i) === value) return i
  }

  return -1
}

exports.findLast = function findLast (field, value, position = field.byteLength * 8 - 1) {
  const n = field.byteLength * 8

  if (position < 0) position += n
  if (position < 0) return -1
  if (position >= n) position = n - 1

  value = !!value

  for (let i = position; i >= 0; i--) {
    if (get(field, i) === value) return i
  }

  return -1
}

const Index = exports.Index = class Index {
  static from (fieldOrChunks, byteLength = -1) {
    if (Array.isArray(fieldOrChunks)) {
      return new SparseIndex(fieldOrChunks, byteLength)
    } else {
      return new DenseIndex(fieldOrChunks, byteLength)
    }
  }

  constructor (byteLength) {
    this._byteLength = byteLength
    this.handle = new Uint32Array(INDEX_LEN / 4)
  }

  get byteLength () {
    return this._byteLength
  }

  skipFirst (value, position = 0) {
    const n = this.byteLength * 8

    if (position < 0) position += n
    if (position < 0) position = 0
    if (position >= n) return n - 1

    let i = Math.floor(position / 16384)

    if (i > 127) return position

    while (i <= 127 && get(this.handle, bitOffset(value, i))) {
      i++
    }

    if (i === 128) return n - 1

    let k = i * 16384
    let j = 0

    if (position > k) j = Math.floor((position - k) / 128)

    while (j <= 127 && get(this.handle, bitOffset(value, i * 128 + j + 128))) {
      j++
      k += 128
    }

    if (j === 128 && i !== 127) return this.skipFirst(value, (i + 1) * 16384)

    if (k > position) position = k

    return position < n ? position : n - 1
  }

  skipLast (value, position = this.byteLength * 8 - 1) {
    const n = this.byteLength * 8

    if (position < 0) position += n
    if (position < 0) return 0
    if (position >= n) position = n - 1

    let i = Math.floor(position / 16384)

    if (i > 127) return position

    while (i >= 0 && get(this.handle, bitOffset(value, i))) {
      i--
    }

    if (i === -1) return 0

    let k = ((i + 1) * 16384) - 1
    let j = 127

    if (position < k) j = 128 - Math.ceil((k - position) / 128)

    while (j >= 0 && get(this.handle, bitOffset(value, i * 128 + j + 128))) {
      j--
      k -= 128
    }

    if (j === -1 && i !== 0) return this.skipLast(value, i * 16384 - 1)

    if (k < position) position = k

    return position
  }
}

class DenseIndex extends Index {
  constructor (field, byteLength) {
    super(byteLength)
    this.field = field

    const m = field.BYTES_PER_ELEMENT

    for (let i = 0; i < 128; i++) {
      for (let j = 0; j < 128; j++) {
        const offset = (i * 128 + j) * 16
        let allz = true
        let allo = false

        if (offset + 16 <= this.field.byteLength) {
          const vec = this.field.subarray(offset / m, (offset + 16) / m)

          allz = simdle.allz(vec)
          allo = simdle.allo(vec)
        }

        const k = i * 128 + 128 + j

        set(this.handle, bitOffset(false, k), allz)
        set(this.handle, bitOffset(true, k), allo)
      }

      {
        const offset = byteOffset(false, i * 16 + 16) / 4
        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))

        set(this.handle, bitOffset(false, i), allo)
      }

      {
        const offset = byteOffset(true, i * 16 + 16) / 4
        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))

        set(this.handle, bitOffset(true, i), allo)
      }
    }
  }

  get byteLength () {
    if (this._byteLength !== -1) return this._byteLength
    return this.field.byteLength
  }

  update (bit) {
    const n = this.byteLength * 8

    if (bit < 0) bit += n
    if (bit < 0 || bit >= n) return false

    const m = this.field.BYTES_PER_ELEMENT

    const i = Math.floor(bit / 16384)
    const j = Math.floor(bit / 128)

    const offset = (j * 16) / m
    const vec = this.field.subarray(offset, offset + (16 / m))

    const allz = simdle.allz(vec)
    const allo = simdle.allo(vec)

    let changed = false

    if (set(this.handle, bitOffset(false, 128 + j), allz)) {
      changed = true

      const offset = byteOffset(false, i * 16 + 16) / 4
      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))

      set(this.handle, bitOffset(false, i), allo)
    }

    if (set(this.handle, bitOffset(true, 128 + j), allo)) {
      changed = true

      const offset = byteOffset(true, i * 16 + 16) / 4
      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))

      set(this.handle, bitOffset(true, i), allo)
    }

    return changed
  }
}

function selectChunk (chunks, offset) {
  for (let i = 0; i < chunks.length; i++) {
    const next = chunks[i]

    const start = next.offset
    const end = next.offset + next.field.byteLength

    if (offset >= start && offset + 16 <= end) {
      return next
    }
  }

  return null
}

class SparseIndex extends Index {
  constructor (chunks, byteLength) {
    super(byteLength)
    this.chunks = chunks

    for (let i = 0; i < 128; i++) {
      for (let j = 0; j < 128; j++) {
        const offset = (i * 128 + j) * 16
        let allz = true
        let allo = false

        const chunk = selectChunk(this.chunks, offset)

        if (chunk !== null) {
          const m = chunk.field.BYTES_PER_ELEMENT

          const vec = chunk.field.subarray((offset - chunk.offset) / m, (offset - chunk.offset + 16) / m)

          allz = simdle.allz(vec)
          allo = simdle.allo(vec)
        }

        const k = i * 128 + 128 + j

        set(this.handle, bitOffset(false, k), allz)
        set(this.handle, bitOffset(true, k), allo)
      }

      {
        const offset = byteOffset(false, i * 16 + 16) / 4
        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))

        set(this.handle, bitOffset(false, i), allo)
      }

      {
        const offset = byteOffset(true, i * 16 + 16) / 4
        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))

        set(this.handle, bitOffset(true, i), allo)
      }
    }
  }

  get byteLength () {
    if (this._byteLength !== -1) return this._byteLength
    const last = this.chunks[this.chunks.length - 1]
    return last ? last.offset + last.field.byteLength : 0
  }

  update (bit) {
    const n = this.byteLength * 8

    if (bit < 0) bit += n
    if (bit < 0 || bit >= n) return false

    const i = Math.floor(bit / 16384)
    const j = Math.floor(bit / 128)

    const offset = j * 16

    const chunk = selectChunk(this.chunks, offset)

    if (chunk === null) return false

    const m = chunk.field.BYTES_PER_ELEMENT

    const vec = chunk.field.subarray((offset - chunk.offset) / m, (offset - chunk.offset + 16) / m)

    const allz = simdle.allz(vec)
    const allo = simdle.allo(vec)

    let changed = false

    if (set(this.handle, bitOffset(false, 128 + j), allz)) {
      changed = true

      const offset = byteOffset(false, i * 16 + 16) / 4
      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))

      set(this.handle, bitOffset(false, i), allo)
    }

    if (set(this.handle, bitOffset(true, 128 + j), allo)) {
      changed = true

      const offset = byteOffset(true, i * 16 + 16) / 4
      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))

      set(this.handle, bitOffset(true, i), allo)
    }

    return changed
  }
}

},{"simdle-universal":508}],449:[function(require,module,exports){
class CacheEntry {
  constructor (key, index, map) {
    this.key = key
    this.index = index
    this.map = map
  }
}

class CacheValue {
  constructor (entry, value) {
    this.entry = entry
    this.value = value
  }
}

class Rache {
  constructor ({ maxSize = 65536, parent = null } = {}) {
    this.maxSize = parent?.maxSize || maxSize

    this._array = parent?._array || []
    this._map = new Map()
  }

  static from (cache) {
    return cache ? new this({ parent: cache }) : new this()
  }

  get globalSize () {
    return this._array.length
  }

  get size () {
    return this._map.size
  }

  sub () {
    return new Rache({ parent: this })
  }

  set (key, value) { // ~constant time
    const existing = this._map.get(key)
    if (existing !== undefined) {
      existing.value = value
      return
    }

    if (this._array.length >= this.maxSize) this._gc()

    const entry = new CacheEntry(key, this._array.length, this._map)
    this._array.push(entry)
    const cacheValue = new CacheValue(entry, value)
    this._map.set(key, cacheValue)
  }

  delete (key) {
    const existing = this._map.get(key)
    if (existing === undefined) return false

    this._delete(existing.entry.index)
    return true
  }

  get (key) {
    const existing = this._map.get(key)
    return existing === undefined ? undefined : existing.value
  }

  * [Symbol.iterator] () {
    for (const [key, { value }] of this._map) {
      yield [key, value]
    }
  }

  keys () {
    return this._map.keys()
  }

  * values () {
    for (const { value } of this._map.values()) {
      yield value
    }
  }

  clear () {
    // The entries in map linger on in _array,
    // so on top of clearing the map, we also kill the ref,
    // so that any gc running later on the old map won't interfere
    // (in case a new entry was added with the same key as a cleared entry)

    this._map.clear()
    this._map = new Map()
  }

  destroy () {
    this._map = null
    this._array = null
  }

  _gc () {
    this._delete(Math.floor(Math.random() * this._array.length))
  }

  _delete (index) { // ~constant time
    if (index >= this._array.length) throw new Error('Cannot delete unused index (logic bug?)')

    const head = this._array.pop()
    let removed = head

    if (index < this._array.length) {
      removed = this._array[index]
      head.index = index
      this._array[index] = head
    }

    removed.map.delete(removed.key)
  }
}

module.exports = Rache

},{}],450:[function(require,module,exports){
(function (Buffer){(function (){
const ras = require('random-access-storage')

const TYPE = { type: 'octet/stream' }
const requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem
const persistentStorage = navigator.persistentStorage || navigator.webkitPersistentStorage
const FileReader = window.FileReader
const Blob = window.Blob

createFile.DEFAULT_MAX_SIZE = Number.MAX_SAFE_INTEGER
createFile.requestQuota = requestQuota

module.exports = createFile

function requestQuota (n, force, cb) {
  if (typeof force === 'function') return requestQuota(n, true, force)
  persistentStorage.queryUsageAndQuota(function (used, quota) {
    if (quota && !force) return cb(null, quota)
    persistentStorage.requestQuota(n, function (quota) {
      cb(null, quota)
    }, cb)
  }, cb)
}

function createFile (name, opts) {
  if (!opts) opts = {}

  const maxSize = opts.maxSize || createFile.DEFAULT_MAX_SIZE
  const mutex = new Mutex()

  let fs = null
  let entry = null
  let toDestroy = null
  let readers = []
  let writers = []
  let deleters = []

  return ras({ read, write, del, open, stat, close, destroy })

  function read (req) {
    const r = readers.pop() || new ReadRequest(readers, entry, mutex)
    r.run(req)
  }

  function write (req) {
    const w = writers.pop() || new WriteRequest(writers, entry, mutex)
    w.run(req)
  }

  function del (req) {
    const d = deleters.pop() || new DeleteRequest(deleters, entry, mutex)
    d.run(req)
  }

  function close (req) {
    readers = writers = deleters = entry = fs = null
    req.callback(null)
  }

  function stat (req) {
    entry.file(file => {
      req.callback(null, file)
    }, err => req.callback(err))
  }

  function destroy (req) {
    toDestroy.remove(ondone, onerror)

    function ondone () {
      toDestroy = null
      req.callback(null, null)
    }

    function onerror (err) {
      toDestroy = null
      req.callback(err, null)
    }
  }

  function open (req) {
    requestQuota(maxSize, false, function (err, granted) {
      if (err) return onerror(err)
      requestFileSystem(window.PERSISTENT, granted, function (res) {
        fs = res
        mkdirp(parentFolder(name), function () {
          fs.root.getFile(name, { create: true }, function (e) {
            entry = toDestroy = e
            req.callback(null)
          }, onerror)
        })
      }, onerror)
    })

    function mkdirp (name, ondone) {
      if (!name) return ondone()
      fs.root.getDirectory(name, { create: true }, ondone, function () {
        mkdirp(parentFolder(name), function () {
          fs.root.getDirectory(name, { create: true }, ondone, ondone)
        })
      })
    }

    function onerror (err) {
      fs = entry = null
      req.callback(err)
    }
  }
}

function parentFolder (path) {
  const i = path.lastIndexOf('/')
  const j = path.lastIndexOf('\\')
  const p = path.slice(0, Math.max(0, i, j))
  return /^\w:$/.test(p) ? '' : p
}

function WriteRequest (pool, entry, mutex) {
  this.pool = pool
  this.entry = entry
  this.mutex = mutex
  this.writer = null
  this.req = null
  this.locked = false
  this.truncating = false
}

WriteRequest.prototype.makeWriter = function () {
  const self = this
  this.entry.createWriter(function (writer) {
    self.writer = writer

    writer.onwriteend = function () {
      self.onwrite(null)
    }

    writer.onerror = function (err) {
      self.onwrite(err)
    }

    self.run(self.req)
  })
}

WriteRequest.prototype.onwrite = function (err) {
  const req = this.req
  this.req = null

  if (this.locked) {
    this.locked = false
    this.mutex.release()
  }

  if (this.truncating) {
    this.truncating = false
    if (!err) return this.run(req)
  }

  this.pool.push(this)
  req.callback(err, null)
}

WriteRequest.prototype.truncate = function () {
  this.truncating = true
  this.writer.truncate(this.req.offset)
}

WriteRequest.prototype.lock = function () {
  if (this.locked) return true
  this.locked = this.mutex.lock(this)
  return this.locked
}

WriteRequest.prototype.run = function (req) {
  this.entry.file(file => {
    this.req = req

    if (!this.writer || this.writer.length !== file.size) return this.makeWriter()

    if (req.offset + req.size > file.size && !this.lock()) return

    if (req.offset > this.writer.length) {
      if (req.offset > file.size) return this.truncate()
      return this.makeWriter()
    }

    this.writer.seek(req.offset)
    this.writer.write(new Blob([req.data], TYPE))
  }, err => req.callback(err))
}

function Mutex () {
  this.queued = null
}

Mutex.prototype.release = function () {
  const queued = this.queued
  this.queued = null
  for (let i = 0; i < queued.length; i++) {
    queued[i].run(queued[i].req)
  }
}

Mutex.prototype.lock = function (req) {
  if (this.queued) {
    this.queued.push(req)
    return false
  }
  this.queued = []
  return true
}

function ReadRequest (pool, entry, mutex) {
  this.pool = pool
  this.entry = entry
  this.mutex = mutex
  this.reader = new FileReader()
  this.req = null
  this.retry = true
  this.locked = false

  const self = this

  this.reader.onerror = function () {
    self.onread(this.error, null)
  }

  this.reader.onload = function () {
    const buf = Buffer.from(this.result)
    self.onread(null, buf)
  }
}

ReadRequest.prototype.lock = function () {
  if (this.locked) return true
  this.locked = this.mutex.lock(this)
  return this.locked
}

ReadRequest.prototype.onread = function (err, buf) {
  const req = this.req

  if (err && this.retry) {
    this.retry = false
    if (this.lock(this)) this.run(req)
    return
  }

  this.req = null
  this.pool.push(this)
  this.retry = true

  if (this.locked) {
    this.locked = false
    this.mutex.release()
  }

  req.callback(err, buf)
}

ReadRequest.prototype.run = function (req) {
  this.entry.file(file => {
    const end = req.offset + req.size
    this.req = req
    if (end > file.size) return this.onread(new Error('Could not satisfy length'), null)
    this.reader.readAsArrayBuffer(file.slice(req.offset, end))
  }, err => req.callback(err))
}

function DeleteRequest (pool, entry, mutex) {
  this.pool = pool
  this.entry = entry
  this.mutex = mutex
  this.writer = null
  this.req = null
  this.locked = false
}

DeleteRequest.prototype.makeWriter = function () {
  const self = this
  this.entry.createWriter(function (writer) {
    self.writer = writer

    writer.onwriteend = function () {
      self.onwrite(null)
    }

    writer.onerror = function (err) {
      self.onwrite(err)
    }

    self.run(self.req)
  })
}

DeleteRequest.prototype.onwrite = function (err) {
  const req = this.req
  this.req = null

  if (this.locked) {
    this.locked = false
    this.mutex.release()
  }

  this.pool.push(this)
  req.callback(err, null)
}

DeleteRequest.prototype.lock = function () {
  if (this.locked) return true
  this.locked = this.mutex.lock(this)
  return this.locked
}

DeleteRequest.prototype.run = function (req) {
  this.entry.file(file => {
    this.req = req

    if (req.offset + req.size < file.size) return req.callback(null)

    if (!this.writer) return this.makeWriter()
    if (!this.lock()) return

    this.writer.truncate(req.offset)
  }, err => req.callback(err))
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":164,"random-access-storage":451}],451:[function(require,module,exports){
var events = require('events')
var inherits = require('inherits')
var queueTick = require('queue-tick')

var NOT_READABLE = defaultImpl(new Error('Not readable'))
var NOT_WRITABLE = defaultImpl(new Error('Not writable'))
var NOT_DELETABLE = defaultImpl(new Error('Not deletable'))
var NOT_STATABLE = defaultImpl(new Error('Not statable'))
var NO_OPEN_READABLE = defaultImpl(new Error('No readonly open'))

// NON_BLOCKING_OPS
var READ_OP = 0
var WRITE_OP = 1
var DEL_OP = 2
var STAT_OP = 3

// BLOCKING_OPS
var OPEN_OP = 4
var CLOSE_OP = 5
var DESTROY_OP = 6

module.exports = RandomAccess

function RandomAccess (opts) {
  if (!(this instanceof RandomAccess)) return new RandomAccess(opts)
  events.EventEmitter.call(this)

  this._queued = []
  this._pending = 0
  this._needsOpen = true

  this.opened = false
  this.closed = false
  this.destroyed = false

  if (opts) {
    if (opts.openReadonly) this._openReadonly = opts.openReadonly
    if (opts.open) this._open = opts.open
    if (opts.read) this._read = opts.read
    if (opts.write) this._write = opts.write
    if (opts.del) this._del = opts.del
    if (opts.stat) this._stat = opts.stat
    if (opts.close) this._close = opts.close
    if (opts.destroy) this._destroy = opts.destroy
  }

  this.preferReadonly = this._openReadonly !== NO_OPEN_READABLE
  this.readable = this._read !== NOT_READABLE
  this.writable = this._write !== NOT_WRITABLE
  this.deletable = this._del !== NOT_DELETABLE
  this.statable = this._stat !== NOT_STATABLE
}

inherits(RandomAccess, events.EventEmitter)

RandomAccess.prototype.read = function (offset, size, cb) {
  this.run(new Request(this, READ_OP, offset, size, null, cb))
}

RandomAccess.prototype._read = NOT_READABLE

RandomAccess.prototype.write = function (offset, data, cb) {
  if (!cb) cb = noop
  openWritable(this)
  this.run(new Request(this, WRITE_OP, offset, data.length, data, cb))
}

RandomAccess.prototype._write = NOT_WRITABLE

RandomAccess.prototype.del = function (offset, size, cb) {
  if (!cb) cb = noop
  openWritable(this)
  this.run(new Request(this, DEL_OP, offset, size, null, cb))
}

RandomAccess.prototype._del = NOT_DELETABLE

RandomAccess.prototype.stat = function (cb) {
  this.run(new Request(this, STAT_OP, 0, 0, null, cb))
}

RandomAccess.prototype._stat = NOT_STATABLE

RandomAccess.prototype.open = function (cb) {
  if (!cb) cb = noop
  if (this.opened && !this._needsOpen) return queueTick(() => cb(null))
  queueAndRun(this, new Request(this, OPEN_OP, 0, 0, null, cb))
}

RandomAccess.prototype._open = defaultImpl(null)
RandomAccess.prototype._openReadonly = NO_OPEN_READABLE

RandomAccess.prototype.close = function (cb) {
  if (!cb) cb = noop
  if (this.closed) return queueTick(() => cb(null))
  queueAndRun(this, new Request(this, CLOSE_OP, 0, 0, null, cb))
}

RandomAccess.prototype._close = defaultImpl(null)

RandomAccess.prototype.destroy = function (cb) {
  if (!cb) cb = noop
  if (!this.closed) this.close(noop)
  queueAndRun(this, new Request(this, DESTROY_OP, 0, 0, null, cb))
}

RandomAccess.prototype._destroy = defaultImpl(null)

RandomAccess.prototype.run = function (req) {
  if (this._needsOpen) this.open(noop)
  if (this._queued.length) this._queued.push(req)
  else req._run()
}

function noop () {}

function Request (self, type, offset, size, data, cb) {
  this.type = type
  this.offset = offset
  this.data = data
  this.size = size
  this.storage = self

  this._sync = false
  this._callback = cb
  this._openError = null
}

Request.prototype._maybeOpenError = function (err) {
  if (this.type !== OPEN_OP) return
  var queued = this.storage._queued
  for (var i = 0; i < queued.length; i++) queued[i]._openError = err
}

Request.prototype._unqueue = function (err) {
  var ra = this.storage
  var queued = ra._queued

  if (!err) {
    switch (this.type) {
      case OPEN_OP:
        if (!ra.opened) {
          ra.opened = true
          ra.emit('open')
        }
        break

      case CLOSE_OP:
        if (!ra.closed) {
          ra.closed = true
          ra.emit('close')
        }
        break

      case DESTROY_OP:
        if (!ra.destroyed) {
          ra.destroyed = true
          ra.emit('destroy')
        }
        break
    }
  } else {
    this._maybeOpenError(err)
  }

  if (queued.length && queued[0] === this) queued.shift()

  if (!--ra._pending) drainQueue(ra)
}

Request.prototype.callback = function (err, val) {
  if (this._sync) return nextTick(this, err, val)
  this._unqueue(err)
  this._callback(err, val)
}

Request.prototype._openAndNotClosed = function () {
  var ra = this.storage
  if (ra.opened && !ra.closed) return true
  if (!ra.opened) nextTick(this, this._openError || new Error('Not opened'))
  else if (ra.closed) nextTick(this, new Error('Closed'))
  return false
}

Request.prototype._open = function () {
  var ra = this.storage

  if (ra.opened && !ra._needsOpen) return nextTick(this, null)
  if (ra.closed) return nextTick(this, new Error('Closed'))

  ra._needsOpen = false
  if (ra.preferReadonly) ra._openReadonly(this)
  else ra._open(this)
}

Request.prototype._run = function () {
  var ra = this.storage
  ra._pending++

  this._sync = true

  switch (this.type) {
    case READ_OP:
      if (this._openAndNotClosed()) ra._read(this)
      break

    case WRITE_OP:
      if (this._openAndNotClosed()) ra._write(this)
      break

    case DEL_OP:
      if (this._openAndNotClosed()) ra._del(this)
      break

    case STAT_OP:
      if (this._openAndNotClosed()) ra._stat(this)
      break

    case OPEN_OP:
      this._open()
      break

    case CLOSE_OP:
      if (ra.closed || !ra.opened) nextTick(this, null)
      else ra._close(this)
      break

    case DESTROY_OP:
      if (ra.destroyed) nextTick(this, null)
      else ra._destroy(this)
      break
  }

  this._sync = false
}

function queueAndRun (self, req) {
  self._queued.push(req)
  if (!self._pending) req._run()
}

function drainQueue (self) {
  var queued = self._queued

  while (queued.length > 0) {
    var blocking = queued[0].type > 3
    if (!blocking || !self._pending) queued[0]._run()
    if (blocking) return
    queued.shift()
  }
}

function openWritable (self) {
  if (self.preferReadonly) {
    self._needsOpen = true
    self.preferReadonly = false
  }
}

function defaultImpl (err) {
  return overridable

  function overridable (req) {
    nextTick(req, err)
  }
}

function nextTick (req, err, val) {
  queueTick(() => req.callback(err, val))
}

},{"events":258,"inherits":369,"queue-tick":447}],452:[function(require,module,exports){
module.exports = function () {
  throw new Error('random-access-file is not supported in the browser')
}

},{}],453:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
const indexedDB = exports.indexedDB = window.indexedDB;

},{}],454:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _randomAccessStorage = require("random-access-storage");

var _randomAccessStorage2 = _interopRequireDefault(_randomAccessStorage);

var _IndexedDB = require("./IndexedDB");

var _buffer = require("buffer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const promise = (request) => new Promise((resolve, reject) => {
  request.onsuccess = () => resolve(request.result);
  request.onerror = () => reject(request.error);
});

class RandomAccessIDBFileVolume {
  constructor(db, name, version, storeName, options) {
    this.db = db;
    this.name = name;
    this.version = version;
    this.storeName = storeName;
    this.options = options;
  }
  store() {
    const { db, storeName } = this;
    const transaction = db.transaction([storeName], "readwrite");
    return transaction.objectStore(storeName);
  }
  async delete(url) {
    return await promise(this.store().delete(url));
  }
  async save(url, file) {
    return await promise(this.store().put(file, url));
  }
  async open(url, mode) {
    const file = await promise(this.store().get(url));
    if (file) {
      return file;
    } else if (mode === "readwrite") {
      const file = await promise(this.db.createMutableFile(url, "binary/random"));
      await this.save(url, file);
      return file;
    } else {
      throw new RangeError(`File ${url} does not exist`);
    }
  }

  mount(file, options) {
    return new RandomAccessProvider(this, `/${file}`, options);
  }
}

class RandomAccessProvider extends _randomAccessStorage2.default {

  static async mount(options = {}) {
    if (!self.IDBMutableFile) {
      throw Error(`Runtime does not supports IDBMutableFile https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile`);
    } else {
      const name = options.name || `RandomAccess`;
      const version = options.version || 1.0;
      const storeName = options.storeName || `IDBMutableFile`;

      const request = _IndexedDB.indexedDB.open(name, version);
      request.onupgradeneeded = () => {
        const db = request.result;
        if (!db.objectStoreNames.contains(storeName)) {
          db.createObjectStore(storeName);
        }
      };
      const db = await promise(request);
      const volume = new RandomAccessIDBFileVolume(db, name, version, storeName, options);
      return (path, options) => volume.mount(path, options);
    }
  }
  static async open(self, request) {
    const { options } = self;
    const mode = request.preferReadonly ? "readonly" : "readwrite";
    self.debug && console.log(`>> open ${self.url} ${mode}`);

    if (!self.file || self.mode !== mode && mode === "readwrite") {
      self.mode = mode;
      self.file = await self.volume.open(self.url, mode);
    }

    if (!(mode === "readonly" || !options.truncate)) {
      const file = self.activate();
      await promise(file.truncate(options.size || 0));
    }

    self.debug && console.log(`<< open ${self.url} ${mode}`);
  }
  static async read(self, { data, offset, size }) {
    self.debug && console.log(`>> read ${self.url} <${offset}, ${size}>`);
    const buffer = data || _buffer.Buffer.allocUnsafe(size);
    if (size === 0) {
      return buffer;
    }

    const file = self.activate();
    file.location = offset;
    const chunk = await promise(file.readAsArrayBuffer(size));
    if (chunk.byteLength !== size) {
      throw new Error("Could not satisfy length");
    }

    _buffer.Buffer.from(chunk).copy(buffer);
    self.debug && console.log(`<< read ${self.url} <${offset}, ${size}>`, buffer);
    return buffer;
  }
  static async write(self, { data, offset, size }) {
    self.debug && console.log(`>> write ${self.url} <${offset}, ${size}>`, data);
    const { byteLength, byteOffset } = data;
    const chunk = byteLength === size ? data : data.slice(0, size);

    const file = self.activate();
    file.location = offset;
    const wrote = await promise(file.write(chunk));

    self.debug && console.log(`<< write ${self.url} <${offset}, ${size}>`);

    return wrote;
  }
  static async delete(self, { offset, size }) {
    self.debug && console.log(`>> delete ${self.url} <${offset}, ${size}>`);
    const stat = await this.stat(self);
    if (offset + size >= stat.size) {
      const file = self.activate();
      await promise(file.truncate(offset));
    }

    self.debug && console.log(`<< delete ${self.url} <${offset}, ${size}>`);
  }
  static async stat(self) {
    self.debug && console.log(`>> stat ${self.url}`);
    const file = self.activate();
    const stat = await promise(file.getMetadata());
    self.debug && console.log(`<< stat {size:${stat.size}} ${self.url} `);

    return stat;
  }
  static async close(self) {
    self.debug && console.log(`>> close ${self.url}`);
    const { lockedFile } = self;
    if (lockedFile && lockedFile.active) {
      await promise(lockedFile.flush());
    }
    self.lockedFile = null;
    self.file = null;
    self.debug && console.log(`<< close ${self.url}`);
  }
  static async destroy(self) {
    self.debug && console.log(`>> destroy ${self.url}`);
    await self.volume.delete(self.url);
    self.debug && console.log(`<< destroy ${self.url}`);
  }

  static async awake(self) {
    const { workQueue } = self;
    self.isIdle = false;
    let index = 0;
    while (index < workQueue.length) {
      const request = workQueue[index++];
      await this.perform(self, request);
    }
    workQueue.length = 0;
    self.isIdle = true;
  }
  static schedule(self, request) {
    self.workQueue.push(request);
    if (self.isIdle) {
      this.awake(self);
    }
  }
  static async perform(self, request) {
    try {
      switch (request.type) {
        case RequestType.open:
          {
            return request.callback(null, (await this.open(self, request)));
          }
        case RequestType.read:
          {
            return request.callback(null, (await this.read(self, request)));
          }
        case RequestType.write:
          {
            return request.callback(null, (await this.write(self, request)));
          }
        case RequestType.delete:
          {
            return request.callback(null, (await this.delete(self, request)));
          }
        case RequestType.stat:
          {
            return request.callback(null, (await this.stat(self)));
          }
        case RequestType.close:
          {
            return request.callback(null, (await this.close(self)));
          }
        case RequestType.destroy:
          {
            return request.callback(null, (await this.destroy(self)));
          }
      }
    } catch (error) {
      request.callback(error);
    }
  }
  _open(request) {
    RandomAccessProvider.schedule(this, request);
  }
  _openReadonly(request) {
    RandomAccessProvider.schedule(this, request);
  }
  _write(request) {
    RandomAccessProvider.schedule(this, request);
  }
  _read(request) {
    RandomAccessProvider.schedule(this, request);
  }
  _del(request) {
    RandomAccessProvider.schedule(this, request);
  }
  _stat(request) {
    RandomAccessProvider.perform(this, request);
  }
  _close(request) {
    RandomAccessProvider.schedule(this, request);
  }
  _destroy(request) {
    RandomAccessProvider.schedule(this, request);
  }
  constructor(volume, url, options = {}) {
    super();
    this.volume = volume;
    this.url = url;
    this.options = options;
    this.mode = "readonly";
    this.file = null;
    this.lockedFile = null;

    this.workQueue = [];
    this.isIdle = true;
    this.debug = !!volume.options.debug;
  }
  activate() {
    const { lockedFile, file, mode } = this;
    if (lockedFile && lockedFile.active) {
      return lockedFile;
    } else if (file) {
      const lockedFile = file.open(mode);
      this.lockedFile = lockedFile;
      return lockedFile;
    } else {
      throw new RangeError(`Unable to activate file, likely provider was destroyed`);
    }
  }
}

const RequestType = {
  open: 0,
  read: 1,
  write: 2,
  delete: 3,
  stat: 4,
  close: 5,
  destroy: 6
};

exports.default = RandomAccessProvider;
module.exports = exports["default"];

},{"./IndexedDB":453,"buffer":164,"random-access-storage":455}],455:[function(require,module,exports){
(function (process){(function (){
var events = require('events')
var inherits = require('inherits')

var NOT_READABLE = defaultImpl(new Error('Not readable'))
var NOT_WRITABLE = defaultImpl(new Error('Not writable'))
var NOT_DELETABLE = defaultImpl(new Error('Not deletable'))
var NOT_STATABLE = defaultImpl(new Error('Not statable'))
var NO_OPEN_READABLE = defaultImpl(new Error('No readonly open'))

module.exports = RandomAccess

function RandomAccess (opts) {
  if (!(this instanceof RandomAccess)) return new RandomAccess(opts)
  events.EventEmitter.call(this)

  this._queued = []
  this._pending = 0
  this._needsOpen = true

  this.opened = false
  this.closed = false
  this.destroyed = false

  if (opts) {
    if (opts.openReadonly) this._openReadonly = opts.openReadonly
    if (opts.open) this._open = opts.open
    if (opts.read) this._read = opts.read
    if (opts.write) this._write = opts.write
    if (opts.del) this._del = opts.del
    if (opts.stat) this._stat = opts.stat
    if (opts.close) this._close = opts.close
    if (opts.destroy) this._destroy = opts.destroy
  }

  this.preferReadonly = this._openReadonly !== NO_OPEN_READABLE
  this.readable = this._read !== NOT_READABLE
  this.writable = this._write !== NOT_WRITABLE
  this.deletable = this._del !== NOT_DELETABLE
  this.statable = this._stat !== NOT_STATABLE
}

inherits(RandomAccess, events.EventEmitter)

RandomAccess.prototype.open = function (cb) {
  if (!cb) cb = noop
  if (this.opened && !this._needsOpen) return process.nextTick(cb, null)
  queueAndRun(this, new Request(this, 0, 0, 0, null, cb))
}

RandomAccess.prototype._open = defaultImpl(null)
RandomAccess.prototype._openReadonly = NO_OPEN_READABLE

RandomAccess.prototype.read = function (offset, size, cb) {
  this.run(new Request(this, 1, offset, size, null, cb))
}

RandomAccess.prototype._read = NOT_READABLE

RandomAccess.prototype.write = function (offset, data, cb) {
  if (!cb) cb = noop
  openWritable(this)
  this.run(new Request(this, 2, offset, data.length, data, cb))
}

RandomAccess.prototype._write = NOT_WRITABLE

RandomAccess.prototype.del = function (offset, size, cb) {
  if (!cb) cb = noop
  openWritable(this)
  this.run(new Request(this, 3, offset, size, null, cb))
}

RandomAccess.prototype._del = NOT_DELETABLE

RandomAccess.prototype.stat = function (cb) {
  this.run(new Request(this, 4, 0, 0, null, cb))
}

RandomAccess.prototype._stat = NOT_STATABLE

RandomAccess.prototype.close = function (cb) {
  if (!cb) cb = noop
  if (this.closed) return process.nextTick(cb, null)
  queueAndRun(this, new Request(this, 5, 0, 0, null, cb))
}

RandomAccess.prototype._close = defaultImpl(null)

RandomAccess.prototype.destroy = function (cb) {
  if (!cb) cb = noop
  if (!this.closed) this.close(noop)
  queueAndRun(this, new Request(this, 6, 0, 0, null, cb))
}

RandomAccess.prototype._destroy = defaultImpl(null)

RandomAccess.prototype.run = function (req) {
  if (this._needsOpen) this.open(noop)
  if (this._queued.length) this._queued.push(req)
  else req._run()
}

function noop () {}

function Request (self, type, offset, size, data, cb) {
  this.type = type
  this.offset = offset
  this.data = data
  this.size = size
  this.storage = self

  this._sync = false
  this._callback = cb
  this._openError = null
}

Request.prototype._maybeOpenError = function (err) {
  if (this.type !== 0) return
  var queued = this.storage._queued
  for (var i = 0; i < queued.length; i++) queued[i]._openError = err
}

Request.prototype._unqueue = function (err) {
  var ra = this.storage
  var queued = ra._queued

  if (!err) {
    switch (this.type) {
      case 0:
        if (!ra.opened) {
          ra.opened = true
          ra.emit('open')
        }
        break

      case 5:
        if (!ra.closed) {
          ra.closed = true
          ra.emit('close')
        }
        break

      case 6:
        if (!ra.destroyed) {
          ra.destroyed = true
          ra.emit('destroy')
        }
        break
    }
  } else {
    this._maybeOpenError(err)
  }

  if (queued.length && queued[0] === this) queued.shift()
  if (!--ra._pending && queued.length) queued[0]._run()
}

Request.prototype.callback = function (err, val) {
  if (this._sync) return nextTick(this, err, val)
  this._unqueue(err)
  this._callback(err, val)
}

Request.prototype._openAndNotClosed = function () {
  var ra = this.storage
  if (ra.opened && !ra.closed) return true
  if (!ra.opened) nextTick(this, this._openError || new Error('Not opened'))
  else if (ra.closed) nextTick(this, new Error('Closed'))
  return false
}

Request.prototype._open = function () {
  var ra = this.storage

  if (ra.opened && !ra._needsOpen) return nextTick(this, null)
  if (ra.closed) return nextTick(this, new Error('Closed'))

  ra._needsOpen = false
  if (ra.preferReadonly) ra._openReadonly(this)
  else ra._open(this)
}

Request.prototype._run = function () {
  var ra = this.storage
  ra._pending++

  this._sync = true

  switch (this.type) {
    case 0:
      this._open()
      break

    case 1:
      if (this._openAndNotClosed()) ra._read(this)
      break

    case 2:
      if (this._openAndNotClosed()) ra._write(this)
      break

    case 3:
      if (this._openAndNotClosed()) ra._del(this)
      break

    case 4:
      if (this._openAndNotClosed()) ra._stat(this)
      break

    case 5:
      if (ra.closed || !ra.opened) nextTick(this, null)
      else ra._close(this)
      break

    case 6:
      if (ra.destroyed) nextTick(this, null)
      else ra._destroy(this)
      break
  }

  this._sync = false
}

function queueAndRun (self, req) {
  self._queued.push(req)
  if (!self._pending) req._run()
}

function openWritable (self) {
  if (self.preferReadonly) {
    self._needsOpen = true
    self.preferReadonly = false
  }
}

function defaultImpl (err) {
  return overridable

  function overridable (req) {
    nextTick(req, err)
  }
}

function nextTick (req, err, val) {
  process.nextTick(nextTickCallback, req, err, val)
}

function nextTickCallback (req, err, val) {
  req.callback(err, val)
}

}).call(this)}).call(this,require('_process'))
},{"_process":437,"events":258,"inherits":369}],456:[function(require,module,exports){
(function (Buffer){(function (){
var RandomAccess = require('random-access-storage')
var inherits = require('inherits')
var nextTick = require('next-tick')
var once = require('once')
var blocks = require('./lib/blocks.js')
var bufferFrom = require('buffer-from')
var bufferAlloc = require('buffer-alloc')

var DELIM = '\0'
var win = typeof window !== 'undefined' ? window
  : (typeof self !== 'undefined' ? self : {})

module.exports = function (dbname, xopts) {
  if (!xopts) xopts = {}
  var idb = xopts.idb || (typeof win !== 'undefined'
    ? win.indexedDB || win.mozIndexedDB
      || win.webkitIndexedDB || win.msIndexedDB
    : null)
  if (!idb) throw new Error('indexedDB not present and not given')
  var db = null, dbqueue = []
  if (typeof idb.open === 'function') {
    var req = idb.open(dbname)
    req.addEventListener('upgradeneeded', function () {
      db = req.result
      db.createObjectStore('data')
    })
    req.addEventListener('success', function () {
      db = req.result
      dbqueue.forEach(function (cb) { cb(db) })
      dbqueue = null
    })
  } else {
    db = idb
  }
  return function (name, opts) {
    if (typeof name === 'object') {
      opts = name
      name = opts.name
    }

    if (!opts) opts = {}
    opts.name = name

    return new Store(Object.assign({ db: getdb }, xopts, opts))
  }
  function getdb (cb) {
    if (db) nextTick(function () { cb(db) })
    else dbqueue.push(cb)
  }
}

function Store (opts) {
  if (!(this instanceof Store)) return new Store(opts)
  RandomAccess.call(this)
  if (!opts) opts = {}
  if (typeof opts === 'string') opts = { name: opts }
  this.size = opts.size || 4096
  this.name = opts.name
  this.length = opts.length || 0
  this._getdb = opts.db
}
inherits(Store, RandomAccess)

Store.prototype._blocks = function (i, j) {
  return blocks(this.size, i, j)
}

Store.prototype._read = function (req) {
  var self = this
  var buffers = []
  self._store('readonly', function (err, store) {
    if ((self.length || 0) < req.offset+req.size) {
      return req.callback(new Error('Could not satisfy length'))
    }
    if (err) return req.callback(err)
    var offsets = self._blocks(req.offset, req.offset+req.size)
    var pending = offsets.length + 1
    var firstBlock = offsets.length > 0 ? offsets[0].block : 0
    var j = 0
    for (var i = 0; i < offsets.length; i++) (function (o) {
      var key = self.name + DELIM + o.block
      backify(store.get(key), function (err, ev) {
        if (err) return req.callback(err)
        buffers[o.block-firstBlock] = ev.target.result
          ? bufferFrom(ev.target.result.subarray(o.start,o.end))
          : bufferAlloc(o.end-o.start)
        if (--pending === 0) req.callback(null, Buffer.concat(buffers))
      })
    })(offsets[i])
    if (--pending === 0) req.callback(null, Buffer.concat(buffers))
  })
}

Store.prototype._write = function (req) {
  var self = this
  self._store('readwrite', function (err, store) {
    if (err) return req.callback(err)
    var offsets = self._blocks(req.offset, req.offset + req.data.length)
    var pending = 1
    var buffers = {}
    for (var i = 0; i < offsets.length; i++) (function (o,i) {
      if (o.end-o.start === self.size) return
      pending++
      var key = self.name + DELIM + o.block
      backify(store.get(key), function (err, ev) {
        if (err) return req.callback(err)
        buffers[i] = bufferFrom(ev.target.result || bufferAlloc(self.size))
        if (--pending === 0) write(store, offsets, buffers)
      })
    })(offsets[i],i)
    if (--pending === 0) write(store, offsets, buffers)
  })
  function write (store, offsets, buffers) {
    var block
    for (var i = 0, j = 0; i < offsets.length; i++) {
      var o = offsets[i]
      var len = o.end - o.start
      if (len === self.size) {
        block = bufferFrom(req.data.slice(j, j+len))
      } else {
        block = buffers[i]
        req.data.copy(block, o.start, j, j+len)
      }
      store.put(block,self.name + DELIM + o.block)
      j += len
    }
    var length = Math.max(self.length || 0, req.offset + req.data.length)
    store.put(length, self.name + DELIM + 'length')
    store.transaction.addEventListener('complete', function () {
      self.length = length
      req.callback(null)
    })
    store.transaction.addEventListener('error', function (err) {
      req.callback(err)
    })
  }
}

Store.prototype._store = function (mode, cb) {
  cb = once(cb)
  var self = this
  self._getdb(function (db) {
    var tx = db.transaction(['data'], mode)
    var store = tx.objectStore('data')
    tx.addEventListener('error', cb)
    cb(null, store)
  })
}

Store.prototype._open = function (req) {
  var self = this
  this._getdb(function(db) {
    self._store('readonly', function (err, store) {
      backify(store.get(self.name + DELIM + "length"), function(err, ev) {
        self.length = ev.target.result || 0
        req.callback(null)
      })
    })
  })
}

Store.prototype._close = function (req) {
  this._getdb(function (db) {
    // db.close() // TODO: reopen gracefully. Close breaks with corestore, as innercorestore closes the db
    req.callback()
  })
}

Store.prototype._stat = function (req) {
  var self = this
  nextTick(function () {
    req.callback(null, { size: self.length })
  })
}

function backify (r, cb) {
  r.addEventListener('success', function (ev) { cb(null, ev) })
  r.addEventListener('error', cb)
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./lib/blocks.js":457,"buffer":164,"buffer-alloc":161,"buffer-from":458,"inherits":369,"next-tick":391,"once":423,"random-access-storage":459}],457:[function(require,module,exports){
module.exports = function (size, start, end) {
  var result = []
  for (var n = Math.floor(start/size)*size; n < end; n += size) {
    result.push({
      block: Math.floor(n/size),
      start: Math.max(n,start) % size,
      end: Math.min(n+size,end) % size || size
    })
  }
  return result
}

},{}],458:[function(require,module,exports){
(function (Buffer){(function (){
var toString = Object.prototype.toString

var isModern = (
  typeof Buffer.alloc === 'function' &&
  typeof Buffer.allocUnsafe === 'function' &&
  typeof Buffer.from === 'function'
)

function isArrayBuffer (input) {
  return toString.call(input).slice(8, -1) === 'ArrayBuffer'
}

function fromArrayBuffer (obj, byteOffset, length) {
  byteOffset >>>= 0

  var maxLength = obj.byteLength - byteOffset

  if (maxLength < 0) {
    throw new RangeError("'offset' is out of bounds")
  }

  if (length === undefined) {
    length = maxLength
  } else {
    length >>>= 0

    if (length > maxLength) {
      throw new RangeError("'length' is out of bounds")
    }
  }

  return isModern
    ? Buffer.from(obj.slice(byteOffset, byteOffset + length))
    : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  return isModern
    ? Buffer.from(string, encoding)
    : new Buffer(string, encoding)
}

function bufferFrom (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return isModern
    ? Buffer.from(value)
    : new Buffer(value)
}

module.exports = bufferFrom

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":164}],459:[function(require,module,exports){
arguments[4][451][0].apply(exports,arguments)
},{"dup":451,"events":258,"inherits":369,"queue-tick":447}],460:[function(require,module,exports){
/* global self */
const global = (typeof window !== 'undefined') ? window : self

const requestFileSystem = global.requestFileSystem || global.webkitRequestFileSystem
const mutableFile = global.IDBMutableFile
const idb = global.indexedDB

const DEFAULT_DB_NAME = 'random-access-web'

let storage = () => require('random-access-memory')

if (requestFileSystem) {
  storage = (options) => {
    const RACF = require('random-access-chrome-file')
    if ((typeof options === 'object') && options.maxSize) {
      RACF.DEFAULT_MAX_SIZE = options.maxSize
    }

    return RACF
  }
} else if (mutableFile) {
  storage = (options = {}) => {
    if (typeof options === 'string') options = { name: options }
    return require('./mutable-file-wrapper.js')(options)
  }
} else if (idb) {
  storage = (options = {}) => {
    if (typeof options === 'string') options = { name: options }
    const name = options.name || DEFAULT_DB_NAME
    return require('random-access-idb')(name, options)
  }
}

module.exports = storage

},{"./mutable-file-wrapper.js":461,"random-access-chrome-file":450,"random-access-idb":456,"random-access-memory":462}],461:[function(require,module,exports){

module.exports = function mutableStorage (options) {
  const randomAccess = require('random-access-storage')
  const mutableAccess = require('random-access-idb-mutable-file')

  let mounted = null
  let loading = null

  function doMount () {
    return mutableAccess.mount(options).then((requestFile) => {
      mounted = requestFile
      loading = null
    })
  }

  return (name) => {
    let file = null

    return randomAccess({
      open: function (req) {
        if (!mounted && !loading) {
          loading = doMount()
        }
        if(loading) {
          loading.then(() => {
            this._open(req)
          }, (err) => {
            req.callback(err)
          })
          return
        }

        file = mounted(name)

        req.callback()
      },
      write: function (req) {
        file.write(req.offset, req.data, function(err, data) {
          req.callback(err, data)
        })
      },
      read: function (req) {
        file.read(req.offset, req.size,  function(err, data) {
          req.callback(err, data)
        })
      },
      del: function (req) {
        file.del(req.offset, req.size,  function(err, data) {
          req.callback(err, data)
        })
      },
      stat: function (req) {
        file.stat( function(err, data) {
          req.callback(err, data)
        })
      },
      close: function (req) {
        file.close( function(err, data) {
          req.callback(err, data)
        })
      },
      destroy: function (req) {
        file.destroy( function(err, data) {
          req.callback(err, data)
        })
      }
    })
  }
}

},{"random-access-idb-mutable-file":454,"random-access-storage":463}],462:[function(require,module,exports){
(function (Buffer){(function (){
const RandomAccess = require('random-access-storage')
const isOptions = require('is-options')
const inherits = require('inherits')

const DEFAULT_PAGE_SIZE = 1024 * 1024

module.exports = RAM

function RAM (opts) {
  if (!(this instanceof RAM)) return new RAM(opts)
  if (typeof opts === 'number') opts = {length: opts}
  if (!opts) opts = {}

  RandomAccess.call(this)

  if (Buffer.isBuffer(opts)) {
    opts = {length: opts.length, buffer: opts}
  }
  if (!isOptions(opts)) opts = {}

  this.length = opts.length || 0
  this.pageSize = opts.length || opts.pageSize || DEFAULT_PAGE_SIZE
  this.buffers = []

  if (opts.buffer) this.buffers.push(opts.buffer)
}

inherits(RAM, RandomAccess)

RAM.prototype._stat = function (req) {
  req.callback(null, {size: this.length})
}

RAM.prototype._write = function (req) {
  var i = Math.floor(req.offset / this.pageSize)
  var rel = req.offset - i * this.pageSize
  var start = 0

  const len = req.offset + req.size
  if (len > this.length) this.length = len

  while (start < req.size) {
    const page = this._page(i++, true)
    const free = this.pageSize - rel
    const end = free < (req.size - start)
      ? start + free
      : req.size

    req.data.copy(page, rel, start, end)
    start = end
    rel = 0
  }

  req.callback(null, null)
}

RAM.prototype._read = function (req) {
  var i = Math.floor(req.offset / this.pageSize)
  var rel = req.offset - i * this.pageSize
  var start = 0

  if (req.offset + req.size > this.length) {
    return req.callback(new Error('Could not satisfy length'), null)
  }

  const data = Buffer.alloc(req.size)

  while (start < req.size) {
    const page = this._page(i++, false)
    const avail = this.pageSize - rel
    const wanted = req.size - start
    const len = avail < wanted ? avail : wanted

    if (page) page.copy(data, start, rel, rel + len)
    start += len
    rel = 0
  }

  req.callback(null, data)
}

RAM.prototype._del = function (req) {
  var i = Math.floor(req.offset / this.pageSize)
  var rel = req.offset - i * this.pageSize
  var start = 0

  if (rel && req.offset + req.size >= this.length) {
    var buf = this.buffers[i]
    if (buf) buf.fill(0, rel)
  }

  if (req.offset + req.size > this.length) {
    req.size = Math.max(0, this.length - req.offset)
  }

  while (start < req.size) {
    if (rel === 0 && req.size - start >= this.pageSize) {
      this.buffers[i++] = undefined
    }

    rel = 0
    start += this.pageSize - rel
  }

  if (req.offset + req.size >= this.length) {
    this.length = req.offset
  }

  req.callback(null, null)
}

RAM.prototype._destroy = function (req) {
  this._buffers = []
  this.length = 0
  req.callback(null, null)
}

RAM.prototype._page = function (i, upsert) {
  var page = this.buffers[i]
  if (page || !upsert) return page
  page = this.buffers[i] = Buffer.alloc(this.pageSize)
  return page
}

RAM.prototype.toBuffer = function () {
  const buf = Buffer.alloc(this.length)

  for (var i = 0; i < this.buffers.length; i++) {
    if (this.buffers[i]) this.buffers[i].copy(buf, i * this.pageSize)
  }

  return buf
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":164,"inherits":369,"is-options":371,"random-access-storage":463}],463:[function(require,module,exports){
arguments[4][451][0].apply(exports,arguments)
},{"dup":451,"events":258,"inherits":369,"queue-tick":447}],464:[function(require,module,exports){
module.exports = class RandomArrayIterator {
  constructor (values) {
    this.values = values
    this.start = 0
    this.length = this.values.length
  }

  next () {
    if (this.length === 0) {
      if (this.start === 0) return { done: true, value: undefined }
      this.length = this.start
      this.start = 0
    }

    const i = this.start + ((Math.random() * this.length) | 0)
    const j = this.start + --this.length
    const value = this.values[i]

    this.values[i] = this.values[j]
    this.values[j] = value

    return { done: false, value }
  }

  dequeue () {
    this.values[this.start + this.length] = this.values[this.values.length - 1]
    this.values.pop()
  }

  requeue () {
    const i = this.start + this.length
    const value = this.values[i]
    this.values[i] = this.values[this.start]
    this.values[this.start++] = value
  }

  restart () {
    this.start = 0
    this.length = this.values.length
    return this
  }

  [Symbol.iterator] () {
    return this
  }
}

},{}],465:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":437,"safe-buffer":485}],466:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":437,"randombytes":465,"safe-buffer":485}],467:[function(require,module,exports){
class WriteLock {
  constructor (parent) {
    this.writing = false

    this._waiting = []
    this._parent = parent
    this._wait = pushToQueue.bind(this, this._waiting)
  }

  get locked () {
    return this.writing || this._parent.read.readers > 0
  }

  get waiting () {
    return this._waiting.length
  }

  lock () {
    if (this._parent._destroying) {
      return Promise.reject(this._parent._destroyError)
    }

    if (this.writing === false && this._parent.read.readers === 0) {
      this.writing = true
      return Promise.resolve()
    }

    return new Promise(this._wait)
  }

  unlock () {
    this.writing = false
    this._parent._bump()
  }

  async flush () {
    if (this.writing === false) return
    try {
      await this.lock()
    } catch {
      return
    }
    this.unlock()
  }
}

class ReadLock {
  constructor (parent) {
    this.readers = 0

    this._waiting = []
    this._parent = parent
    this._wait = pushToQueue.bind(this, this._waiting)
  }

  get locked () {
    return this._parent.writing
  }

  get waiting () {
    return this._waiting.length
  }

  lock () {
    if (this._parent._destroying) {
      return Promise.reject(this._parent._destroyError)
    }

    if (this._parent.write.writing === false) {
      this.readers++
      return Promise.resolve()
    }

    return new Promise(this._wait)
  }

  unlock () {
    this.readers--
    this._parent._bump()
  }

  async flush () {
    if (this.writing === false) return
    try {
      await this.lock()
    } catch {
      return
    }
    this.unlock()
  }
}

module.exports = class ReadWriteLock {
  constructor () {
    this.read = new ReadLock(this)
    this.write = new WriteLock(this)

    this._destroyError = null
    this._destroying = null
  }

  get destroyed () {
    return !!this._destroying
  }

  destroy (err) {
    if (this._destroying) return this._destroying

    this._destroying = Promise.all([this.read.flush(), this.write.flush()])
    this._destroyError = err || new Error('Mutex has been destroyed')

    if (err) {
      while (this.read._waiting) this._waiting.shift()[1](err)
      while (this.write._waiting) this._waiting.shift()[1](err)
    }

    return this._destroying
  }

  _bump () {
    if (this.write.writing === false && this.read.readers === 0 && this.write._waiting.length > 0) {
      this.write.writing = true
      this.write._waiting.shift()[0]()
    }
    while (this.write.writing === false && this.read._waiting.length > 0) {
      this.read.readers++
      this.read._waiting.shift()[0]()
    }
  }
}

function pushToQueue (queue, resolve, reject) {
  queue.push([resolve, reject])
}

},{}],468:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"./_stream_readable":470,"./_stream_writable":472,"core-util-is":182,"inherits":369,"process-nextick-args":436}],469:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":471,"core-util-is":182,"inherits":369}],470:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, { hasUnpiped: false });
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":468,"./internal/streams/BufferList":473,"./internal/streams/destroy":474,"./internal/streams/stream":475,"_process":437,"core-util-is":182,"events":258,"inherits":369,"isarray":476,"process-nextick-args":436,"safe-buffer":477,"string_decoder/":478,"util":132}],471:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":468,"core-util-is":182,"inherits":369}],472:[function(require,module,exports){
(function (process,global,setImmediate){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
},{"./_stream_duplex":468,"./internal/streams/destroy":474,"./internal/streams/stream":475,"_process":437,"core-util-is":182,"inherits":369,"process-nextick-args":436,"safe-buffer":477,"timers":584,"util-deprecate":591}],473:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":477,"util":132}],474:[function(require,module,exports){
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        pna.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        pna.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        pna.nextTick(emitErrorNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        pna.nextTick(emitErrorNT, _this, err);
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":436}],475:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":258}],476:[function(require,module,exports){
arguments[4][373][0].apply(exports,arguments)
},{"dup":373}],477:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":164}],478:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":477}],479:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":468,"./lib/_stream_passthrough.js":469,"./lib/_stream_readable.js":470,"./lib/_stream_transform.js":471,"./lib/_stream_writable.js":472}],480:[function(require,module,exports){
const EventEmitter = require('events')

module.exports = class ReadyResource extends EventEmitter {
  constructor () {
    super()

    this.opening = null
    this.closing = null

    this.opened = false
    this.closed = false
  }

  ready () {
    if (this.opening !== null) return this.opening
    this.opening = open(this)
    return this.opening
  }

  close () {
    if (this.closing !== null) return this.closing
    this.closing = close(this)
    return this.closing
  }

  async _open () {
    // add impl here
  }

  async _close () {
    // add impl here
  }
}

async function open (self) {
  // open after close
  if (self.closing !== null) return

  try {
    await self._open()
  } catch (err) {
    self.close() // safe to run in bg
    throw err
  }

  self.opened = true
  self.emit('ready')
}

async function close (self) {
  try {
    if (self.opened === false && self.opening !== null) await self.opening
  } catch {
    // ignore errors on closing
  }
  if (self.opened === true || self.opening === null) await self._close()
  self.closed = true
  self.emit('close')
}

},{"events":258}],481:[function(require,module,exports){
let tmpResolve = null
let tmpReject = null

if (Promise.withResolvers) {
  module.exports = Promise.withResolvers.bind(Promise)
} else {
  module.exports = function resolveRejectPromise () {
    const promise = new Promise(setTmp)
    const result = { promise, resolve: tmpResolve, reject: tmpReject }
    tmpResolve = tmpReject = null
    return result
  }
}

function setTmp (resolve, reject) {
  tmpResolve = resolve
  tmpReject = reject
}

},{}],482:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var inherits = require('inherits');
var HashBase = require('hash-base');

var ARRAY16 = new Array(16);

var zl = [
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var zr = [
	5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var sl = [
	11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sr = [
	8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

function rotl(x, n) {
	return (x << n) | (x >>> (32 - n));
}

function fn1(a, b, c, d, e, m, k, s) {
	return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0;
}

function fn2(a, b, c, d, e, m, k, s) {
	return (rotl((a + ((b & c) | (~b & d)) + m + k) | 0, s) + e) | 0;
}

function fn3(a, b, c, d, e, m, k, s) {
	return (rotl((a + ((b | ~c) ^ d) + m + k) | 0, s) + e) | 0;
}

function fn4(a, b, c, d, e, m, k, s) {
	return (rotl((a + ((b & d) | (c & ~d)) + m + k) | 0, s) + e) | 0;
}

function fn5(a, b, c, d, e, m, k, s) {
	return (rotl((a + (b ^ (c | ~d)) + m + k) | 0, s) + e) | 0;
}

function RIPEMD160() {
	HashBase.call(this, 64);

	// state
	this._a = 0x67452301;
	this._b = 0xefcdab89;
	this._c = 0x98badcfe;
	this._d = 0x10325476;
	this._e = 0xc3d2e1f0;
}

inherits(RIPEMD160, HashBase);

RIPEMD160.prototype._update = function () {
	var words = ARRAY16;
	for (var j = 0; j < 16; ++j) {
		words[j] = this._block.readInt32LE(j * 4);
	}

	var al = this._a | 0;
	var bl = this._b | 0;
	var cl = this._c | 0;
	var dl = this._d | 0;
	var el = this._e | 0;

	var ar = this._a | 0;
	var br = this._b | 0;
	var cr = this._c | 0;
	var dr = this._d | 0;
	var er = this._e | 0;

	// computation
	for (var i = 0; i < 80; i += 1) {
		var tl;
		var tr;
		if (i < 16) {
			tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
			tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
		} else if (i < 32) {
			tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
			tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
		} else if (i < 48) {
			tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
			tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
		} else if (i < 64) {
			tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
			tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
		} else { // if (i<80) {
			tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
			tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
		}

		al = el;
		el = dl;
		dl = rotl(cl, 10);
		cl = bl;
		bl = tl;

		ar = er;
		er = dr;
		dr = rotl(cr, 10);
		cr = br;
		br = tr;
	}

	// update state
	var t = (this._b + cl + dr) | 0;
	this._b = (this._c + dl + er) | 0;
	this._c = (this._d + el + ar) | 0;
	this._d = (this._e + al + br) | 0;
	this._e = (this._a + bl + cr) | 0;
	this._a = t;
};

RIPEMD160.prototype._digest = function () {
	// create padding and handle blocks
	this._block[this._blockOffset] = 0x80;
	this._blockOffset += 1;
	if (this._blockOffset > 56) {
		this._block.fill(0, this._blockOffset, 64);
		this._update();
		this._blockOffset = 0;
	}

	this._block.fill(0, this._blockOffset, 56);
	this._block.writeUInt32LE(this._length[0], 56);
	this._block.writeUInt32LE(this._length[1], 60);
	this._update();

	// produce result
	var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20); // eslint-disable-line no-buffer-constructor
	buffer.writeInt32LE(this._a, 0);
	buffer.writeInt32LE(this._b, 4);
	buffer.writeInt32LE(this._c, 8);
	buffer.writeInt32LE(this._d, 12);
	buffer.writeInt32LE(this._e, 16);
	return buffer;
};

module.exports = RIPEMD160;

},{"buffer":164,"hash-base":483,"inherits":369}],483:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var toBuffer = require('./to-buffer');
var Transform = require('readable-stream').Transform;
var inherits = require('inherits');

function HashBase(blockSize) {
	Transform.call(this);

	this._block = Buffer.allocUnsafe(blockSize);
	this._blockSize = blockSize;
	this._blockOffset = 0;
	this._length = [0, 0, 0, 0];

	this._finalized = false;
}

inherits(HashBase, Transform);

HashBase.prototype._transform = function (chunk, encoding, callback) {
	var error = null;
	try {
		this.update(chunk, encoding);
	} catch (err) {
		error = err;
	}

	callback(error);
};

HashBase.prototype._flush = function (callback) {
	var error = null;
	try {
		this.push(this.digest());
	} catch (err) {
		error = err;
	}

	callback(error);
};

HashBase.prototype.update = function (data, encoding) {
	if (this._finalized) {
		throw new Error('Digest already called');
	}

	var dataBuffer = toBuffer(data, encoding); // asserts correct input type

	// consume data
	var block = this._block;
	var offset = 0;
	while (this._blockOffset + dataBuffer.length - offset >= this._blockSize) {
		for (var i = this._blockOffset; i < this._blockSize;) {
			block[i] = dataBuffer[offset];
			i += 1;
			offset += 1;
		}
		this._update();
		this._blockOffset = 0;
	}
	while (offset < dataBuffer.length) {
		block[this._blockOffset] = dataBuffer[offset];
		this._blockOffset += 1;
		offset += 1;
	}

	// update length
	for (var j = 0, carry = dataBuffer.length * 8; carry > 0; ++j) {
		this._length[j] += carry;
		carry = (this._length[j] / 0x0100000000) | 0;
		if (carry > 0) {
			this._length[j] -= 0x0100000000 * carry;
		}
	}

	return this;
};

HashBase.prototype._update = function () {
	throw new Error('_update is not implemented');
};

HashBase.prototype.digest = function (encoding) {
	if (this._finalized) {
		throw new Error('Digest already called');
	}
	this._finalized = true;

	var digest = this._digest();
	if (encoding !== undefined) {
		digest = digest.toString(encoding);
	}

	// reset state
	this._block.fill(0);
	this._blockOffset = 0;
	for (var i = 0; i < 4; ++i) {
		this._length[i] = 0;
	}

	return digest;
};

HashBase.prototype._digest = function () {
	throw new Error('_digest is not implemented');
};

module.exports = HashBase;

},{"./to-buffer":484,"inherits":369,"readable-stream":479,"safe-buffer":485}],484:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var toBuffer = require('to-buffer');

var useUint8Array = typeof Uint8Array !== 'undefined';
var useArrayBuffer = useUint8Array && typeof ArrayBuffer !== 'undefined';
var isView = useArrayBuffer && ArrayBuffer.isView;

module.exports = function (thing, encoding) {
	if (
		typeof thing === 'string'
    || Buffer.isBuffer(thing)
    || (useUint8Array && thing instanceof Uint8Array)
    || (isView && isView(thing))
	) {
		return toBuffer(thing, encoding);
	}
	throw new TypeError('The "data" argument must be a string, a Buffer, a Uint8Array, or a DataView');
};

},{"safe-buffer":485,"to-buffer":586}],485:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":164}],486:[function(require,module,exports){
module.exports = safetyCatch

function isActuallyUncaught (err) {
  if (!err) return false
  return err instanceof TypeError ||
    err instanceof SyntaxError ||
    err instanceof ReferenceError ||
    err instanceof EvalError ||
    err instanceof RangeError ||
    err instanceof URIError ||
    err.code === 'ERR_ASSERTION'
}

function throwErrorNT (err) {
  queueMicrotask(() => { throw err })
}

function safetyCatch (err) {
  if (isActuallyUncaught(err)) {
    throwErrorNT(err)
    throw err
  }
}

},{}],487:[function(require,module,exports){
module.exports = sameData

function type (o) {
  const t = typeof o

  return t === 'object'
    ? Array.isArray(o)
      ? 'array'
      : isTypedArray(o)
        ? (typeof o.equals === 'function') ? 'buffer' : 'array'
        : (o === null ? 'null' : 'object')
    : t
}

function isTypedArray (a) {
  return !!a && typeof a.length === 'number' && ArrayBuffer.isView(a.array)
}

function sameData (a, b) {
  if (a === b) return true

  const ta = type(a)
  const tb = type(b)

  if (ta !== tb) return false

  if (ta === 'buffer') return a.equals(b)

  if (ta === 'array') {
    if (a.length !== b.length) return false

    for (let i = 0; i < a.length; i++) {
      if (!sameData(a[i], b[i])) return false
    }

    return true
  }

  if (ta !== 'object') return false

  const ea = Object.entries(a)
  const eb = Object.entries(b)

  if (ea.length !== eb.length) return false

  ea.sort(cmp)
  eb.sort(cmp)

  for (let i = 0; i < ea.length; i++) {
    if (ea[i][0] !== eb[i][0] || !sameData(ea[i][1], eb[i][1])) return false
  }

  return true
}

function cmp (a, b) {
  return a[0] === b[0] ? 0 : a[0] < b[0] ? -1 : 1
}

},{}],488:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');
var define = require('define-data-property');
var hasDescriptors = require('has-property-descriptors')();
var gOPD = require('gopd');

var $TypeError = require('es-errors/type');
var $floor = GetIntrinsic('%Math.floor%');

/** @type {import('.')} */
module.exports = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	var loose = arguments.length > 2 && !!arguments[2];

	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}

	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors) {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
		} else {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
		}
	}
	return fn;
};

},{"define-data-property":218,"es-errors/type":254,"get-intrinsic":266,"gopd":272,"has-property-descriptors":273}],489:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var toBuffer = require('to-buffer');

// prototype class for hash functions
function Hash(blockSize, finalSize) {
	this._block = Buffer.alloc(blockSize);
	this._finalSize = finalSize;
	this._blockSize = blockSize;
	this._len = 0;
}

Hash.prototype.update = function (data, enc) {
	/* eslint no-param-reassign: 0 */
	data = toBuffer(data, enc || 'utf8');

	var block = this._block;
	var blockSize = this._blockSize;
	var length = data.length;
	var accum = this._len;

	for (var offset = 0; offset < length;) {
		var assigned = accum % blockSize;
		var remainder = Math.min(length - offset, blockSize - assigned);

		for (var i = 0; i < remainder; i++) {
			block[assigned + i] = data[offset + i];
		}

		accum += remainder;
		offset += remainder;

		if ((accum % blockSize) === 0) {
			this._update(block);
		}
	}

	this._len += length;
	return this;
};

Hash.prototype.digest = function (enc) {
	var rem = this._len % this._blockSize;

	this._block[rem] = 0x80;

	/*
	 * zero (rem + 1) trailing bits, where (rem + 1) is the smallest
	 * non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
	 */
	this._block.fill(0, rem + 1);

	if (rem >= this._finalSize) {
		this._update(this._block);
		this._block.fill(0);
	}

	var bits = this._len * 8;

	// uint32
	if (bits <= 0xffffffff) {
		this._block.writeUInt32BE(bits, this._blockSize - 4);

		// uint64
	} else {
		var lowBits = (bits & 0xffffffff) >>> 0;
		var highBits = (bits - lowBits) / 0x100000000;

		this._block.writeUInt32BE(highBits, this._blockSize - 8);
		this._block.writeUInt32BE(lowBits, this._blockSize - 4);
	}

	this._update(this._block);
	var hash = this._hash();

	return enc ? hash.toString(enc) : hash;
};

Hash.prototype._update = function () {
	throw new Error('_update must be implemented by subclass');
};

module.exports = Hash;

},{"safe-buffer":485,"to-buffer":586}],490:[function(require,module,exports){
'use strict';

module.exports = function SHA(algorithm) {
	var alg = algorithm.toLowerCase();

	var Algorithm = module.exports[alg];
	if (!Algorithm) {
		throw new Error(alg + ' is not supported (we accept pull requests)');
	}

	return new Algorithm();
};

module.exports.sha = require('./sha');
module.exports.sha1 = require('./sha1');
module.exports.sha224 = require('./sha224');
module.exports.sha256 = require('./sha256');
module.exports.sha384 = require('./sha384');
module.exports.sha512 = require('./sha512');

},{"./sha":491,"./sha1":492,"./sha224":493,"./sha256":494,"./sha384":495,"./sha512":496}],491:[function(require,module,exports){
'use strict';

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var K = [
	0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
];

var W = new Array(80);

function Sha() {
	this.init();
	this._w = W;

	Hash.call(this, 64, 56);
}

inherits(Sha, Hash);

Sha.prototype.init = function () {
	this._a = 0x67452301;
	this._b = 0xefcdab89;
	this._c = 0x98badcfe;
	this._d = 0x10325476;
	this._e = 0xc3d2e1f0;

	return this;
};

function rotl5(num) {
	return (num << 5) | (num >>> 27);
}

function rotl30(num) {
	return (num << 30) | (num >>> 2);
}

function ft(s, b, c, d) {
	if (s === 0) {
		return (b & c) | (~b & d);
	}
	if (s === 2) {
		return (b & c) | (b & d) | (c & d);
	}
	return b ^ c ^ d;
}

Sha.prototype._update = function (M) {
	var w = this._w;

	var a = this._a | 0;
	var b = this._b | 0;
	var c = this._c | 0;
	var d = this._d | 0;
	var e = this._e | 0;

	for (var i = 0; i < 16; ++i) {
		w[i] = M.readInt32BE(i * 4);
	}
	for (; i < 80; ++i) {
		w[i] = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
	}

	for (var j = 0; j < 80; ++j) {
		var s = ~~(j / 20);
		var t = (rotl5(a) + ft(s, b, c, d) + e + w[j] + K[s]) | 0;

		e = d;
		d = c;
		c = rotl30(b);
		b = a;
		a = t;
	}

	this._a = (a + this._a) | 0;
	this._b = (b + this._b) | 0;
	this._c = (c + this._c) | 0;
	this._d = (d + this._d) | 0;
	this._e = (e + this._e) | 0;
};

Sha.prototype._hash = function () {
	var H = Buffer.allocUnsafe(20);

	H.writeInt32BE(this._a | 0, 0);
	H.writeInt32BE(this._b | 0, 4);
	H.writeInt32BE(this._c | 0, 8);
	H.writeInt32BE(this._d | 0, 12);
	H.writeInt32BE(this._e | 0, 16);

	return H;
};

module.exports = Sha;

},{"./hash":489,"inherits":369,"safe-buffer":485}],492:[function(require,module,exports){
'use strict';

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var K = [
	0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
];

var W = new Array(80);

function Sha1() {
	this.init();
	this._w = W;

	Hash.call(this, 64, 56);
}

inherits(Sha1, Hash);

Sha1.prototype.init = function () {
	this._a = 0x67452301;
	this._b = 0xefcdab89;
	this._c = 0x98badcfe;
	this._d = 0x10325476;
	this._e = 0xc3d2e1f0;

	return this;
};

function rotl1(num) {
	return (num << 1) | (num >>> 31);
}

function rotl5(num) {
	return (num << 5) | (num >>> 27);
}

function rotl30(num) {
	return (num << 30) | (num >>> 2);
}

function ft(s, b, c, d) {
	if (s === 0) {
		return (b & c) | (~b & d);
	}
	if (s === 2) {
		return (b & c) | (b & d) | (c & d);
	}
	return b ^ c ^ d;
}

Sha1.prototype._update = function (M) {
	var w = this._w;

	var a = this._a | 0;
	var b = this._b | 0;
	var c = this._c | 0;
	var d = this._d | 0;
	var e = this._e | 0;

	for (var i = 0; i < 16; ++i) {
		w[i] = M.readInt32BE(i * 4);
	}
	for (; i < 80; ++i) {
		w[i] = rotl1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
	}

	for (var j = 0; j < 80; ++j) {
		var s = ~~(j / 20);
		var t = (rotl5(a) + ft(s, b, c, d) + e + w[j] + K[s]) | 0;

		e = d;
		d = c;
		c = rotl30(b);
		b = a;
		a = t;
	}

	this._a = (a + this._a) | 0;
	this._b = (b + this._b) | 0;
	this._c = (c + this._c) | 0;
	this._d = (d + this._d) | 0;
	this._e = (e + this._e) | 0;
};

Sha1.prototype._hash = function () {
	var H = Buffer.allocUnsafe(20);

	H.writeInt32BE(this._a | 0, 0);
	H.writeInt32BE(this._b | 0, 4);
	H.writeInt32BE(this._c | 0, 8);
	H.writeInt32BE(this._d | 0, 12);
	H.writeInt32BE(this._e | 0, 16);

	return H;
};

module.exports = Sha1;

},{"./hash":489,"inherits":369,"safe-buffer":485}],493:[function(require,module,exports){
'use strict';

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits');
var Sha256 = require('./sha256');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var W = new Array(64);

function Sha224() {
	this.init();

	this._w = W; // new Array(64)

	Hash.call(this, 64, 56);
}

inherits(Sha224, Sha256);

Sha224.prototype.init = function () {
	this._a = 0xc1059ed8;
	this._b = 0x367cd507;
	this._c = 0x3070dd17;
	this._d = 0xf70e5939;
	this._e = 0xffc00b31;
	this._f = 0x68581511;
	this._g = 0x64f98fa7;
	this._h = 0xbefa4fa4;

	return this;
};

Sha224.prototype._hash = function () {
	var H = Buffer.allocUnsafe(28);

	H.writeInt32BE(this._a, 0);
	H.writeInt32BE(this._b, 4);
	H.writeInt32BE(this._c, 8);
	H.writeInt32BE(this._d, 12);
	H.writeInt32BE(this._e, 16);
	H.writeInt32BE(this._f, 20);
	H.writeInt32BE(this._g, 24);

	return H;
};

module.exports = Sha224;

},{"./hash":489,"./sha256":494,"inherits":369,"safe-buffer":485}],494:[function(require,module,exports){
'use strict';

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var K = [
	0x428A2F98,
	0x71374491,
	0xB5C0FBCF,
	0xE9B5DBA5,
	0x3956C25B,
	0x59F111F1,
	0x923F82A4,
	0xAB1C5ED5,
	0xD807AA98,
	0x12835B01,
	0x243185BE,
	0x550C7DC3,
	0x72BE5D74,
	0x80DEB1FE,
	0x9BDC06A7,
	0xC19BF174,
	0xE49B69C1,
	0xEFBE4786,
	0x0FC19DC6,
	0x240CA1CC,
	0x2DE92C6F,
	0x4A7484AA,
	0x5CB0A9DC,
	0x76F988DA,
	0x983E5152,
	0xA831C66D,
	0xB00327C8,
	0xBF597FC7,
	0xC6E00BF3,
	0xD5A79147,
	0x06CA6351,
	0x14292967,
	0x27B70A85,
	0x2E1B2138,
	0x4D2C6DFC,
	0x53380D13,
	0x650A7354,
	0x766A0ABB,
	0x81C2C92E,
	0x92722C85,
	0xA2BFE8A1,
	0xA81A664B,
	0xC24B8B70,
	0xC76C51A3,
	0xD192E819,
	0xD6990624,
	0xF40E3585,
	0x106AA070,
	0x19A4C116,
	0x1E376C08,
	0x2748774C,
	0x34B0BCB5,
	0x391C0CB3,
	0x4ED8AA4A,
	0x5B9CCA4F,
	0x682E6FF3,
	0x748F82EE,
	0x78A5636F,
	0x84C87814,
	0x8CC70208,
	0x90BEFFFA,
	0xA4506CEB,
	0xBEF9A3F7,
	0xC67178F2
];

var W = new Array(64);

function Sha256() {
	this.init();

	this._w = W; // new Array(64)

	Hash.call(this, 64, 56);
}

inherits(Sha256, Hash);

Sha256.prototype.init = function () {
	this._a = 0x6a09e667;
	this._b = 0xbb67ae85;
	this._c = 0x3c6ef372;
	this._d = 0xa54ff53a;
	this._e = 0x510e527f;
	this._f = 0x9b05688c;
	this._g = 0x1f83d9ab;
	this._h = 0x5be0cd19;

	return this;
};

function ch(x, y, z) {
	return z ^ (x & (y ^ z));
}

function maj(x, y, z) {
	return (x & y) | (z & (x | y));
}

function sigma0(x) {
	return ((x >>> 2) | (x << 30)) ^ ((x >>> 13) | (x << 19)) ^ ((x >>> 22) | (x << 10));
}

function sigma1(x) {
	return ((x >>> 6) | (x << 26)) ^ ((x >>> 11) | (x << 21)) ^ ((x >>> 25) | (x << 7));
}

function gamma0(x) {
	return ((x >>> 7) | (x << 25)) ^ ((x >>> 18) | (x << 14)) ^ (x >>> 3);
}

function gamma1(x) {
	return ((x >>> 17) | (x << 15)) ^ ((x >>> 19) | (x << 13)) ^ (x >>> 10);
}

Sha256.prototype._update = function (M) {
	var w = this._w;

	var a = this._a | 0;
	var b = this._b | 0;
	var c = this._c | 0;
	var d = this._d | 0;
	var e = this._e | 0;
	var f = this._f | 0;
	var g = this._g | 0;
	var h = this._h | 0;

	for (var i = 0; i < 16; ++i) {
		w[i] = M.readInt32BE(i * 4);
	}
	for (; i < 64; ++i) {
		w[i] = (gamma1(w[i - 2]) + w[i - 7] + gamma0(w[i - 15]) + w[i - 16]) | 0;
	}

	for (var j = 0; j < 64; ++j) {
		var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + w[j]) | 0;
		var T2 = (sigma0(a) + maj(a, b, c)) | 0;

		h = g;
		g = f;
		f = e;
		e = (d + T1) | 0;
		d = c;
		c = b;
		b = a;
		a = (T1 + T2) | 0;
	}

	this._a = (a + this._a) | 0;
	this._b = (b + this._b) | 0;
	this._c = (c + this._c) | 0;
	this._d = (d + this._d) | 0;
	this._e = (e + this._e) | 0;
	this._f = (f + this._f) | 0;
	this._g = (g + this._g) | 0;
	this._h = (h + this._h) | 0;
};

Sha256.prototype._hash = function () {
	var H = Buffer.allocUnsafe(32);

	H.writeInt32BE(this._a, 0);
	H.writeInt32BE(this._b, 4);
	H.writeInt32BE(this._c, 8);
	H.writeInt32BE(this._d, 12);
	H.writeInt32BE(this._e, 16);
	H.writeInt32BE(this._f, 20);
	H.writeInt32BE(this._g, 24);
	H.writeInt32BE(this._h, 28);

	return H;
};

module.exports = Sha256;

},{"./hash":489,"inherits":369,"safe-buffer":485}],495:[function(require,module,exports){
'use strict';

var inherits = require('inherits');
var SHA512 = require('./sha512');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var W = new Array(160);

function Sha384() {
	this.init();
	this._w = W;

	Hash.call(this, 128, 112);
}

inherits(Sha384, SHA512);

Sha384.prototype.init = function () {
	this._ah = 0xcbbb9d5d;
	this._bh = 0x629a292a;
	this._ch = 0x9159015a;
	this._dh = 0x152fecd8;
	this._eh = 0x67332667;
	this._fh = 0x8eb44a87;
	this._gh = 0xdb0c2e0d;
	this._hh = 0x47b5481d;

	this._al = 0xc1059ed8;
	this._bl = 0x367cd507;
	this._cl = 0x3070dd17;
	this._dl = 0xf70e5939;
	this._el = 0xffc00b31;
	this._fl = 0x68581511;
	this._gl = 0x64f98fa7;
	this._hl = 0xbefa4fa4;

	return this;
};

Sha384.prototype._hash = function () {
	var H = Buffer.allocUnsafe(48);

	function writeInt64BE(h, l, offset) {
		H.writeInt32BE(h, offset);
		H.writeInt32BE(l, offset + 4);
	}

	writeInt64BE(this._ah, this._al, 0);
	writeInt64BE(this._bh, this._bl, 8);
	writeInt64BE(this._ch, this._cl, 16);
	writeInt64BE(this._dh, this._dl, 24);
	writeInt64BE(this._eh, this._el, 32);
	writeInt64BE(this._fh, this._fl, 40);

	return H;
};

module.exports = Sha384;

},{"./hash":489,"./sha512":496,"inherits":369,"safe-buffer":485}],496:[function(require,module,exports){
'use strict';

var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var K = [
	0x428a2f98,
	0xd728ae22,
	0x71374491,
	0x23ef65cd,
	0xb5c0fbcf,
	0xec4d3b2f,
	0xe9b5dba5,
	0x8189dbbc,
	0x3956c25b,
	0xf348b538,
	0x59f111f1,
	0xb605d019,
	0x923f82a4,
	0xaf194f9b,
	0xab1c5ed5,
	0xda6d8118,
	0xd807aa98,
	0xa3030242,
	0x12835b01,
	0x45706fbe,
	0x243185be,
	0x4ee4b28c,
	0x550c7dc3,
	0xd5ffb4e2,
	0x72be5d74,
	0xf27b896f,
	0x80deb1fe,
	0x3b1696b1,
	0x9bdc06a7,
	0x25c71235,
	0xc19bf174,
	0xcf692694,
	0xe49b69c1,
	0x9ef14ad2,
	0xefbe4786,
	0x384f25e3,
	0x0fc19dc6,
	0x8b8cd5b5,
	0x240ca1cc,
	0x77ac9c65,
	0x2de92c6f,
	0x592b0275,
	0x4a7484aa,
	0x6ea6e483,
	0x5cb0a9dc,
	0xbd41fbd4,
	0x76f988da,
	0x831153b5,
	0x983e5152,
	0xee66dfab,
	0xa831c66d,
	0x2db43210,
	0xb00327c8,
	0x98fb213f,
	0xbf597fc7,
	0xbeef0ee4,
	0xc6e00bf3,
	0x3da88fc2,
	0xd5a79147,
	0x930aa725,
	0x06ca6351,
	0xe003826f,
	0x14292967,
	0x0a0e6e70,
	0x27b70a85,
	0x46d22ffc,
	0x2e1b2138,
	0x5c26c926,
	0x4d2c6dfc,
	0x5ac42aed,
	0x53380d13,
	0x9d95b3df,
	0x650a7354,
	0x8baf63de,
	0x766a0abb,
	0x3c77b2a8,
	0x81c2c92e,
	0x47edaee6,
	0x92722c85,
	0x1482353b,
	0xa2bfe8a1,
	0x4cf10364,
	0xa81a664b,
	0xbc423001,
	0xc24b8b70,
	0xd0f89791,
	0xc76c51a3,
	0x0654be30,
	0xd192e819,
	0xd6ef5218,
	0xd6990624,
	0x5565a910,
	0xf40e3585,
	0x5771202a,
	0x106aa070,
	0x32bbd1b8,
	0x19a4c116,
	0xb8d2d0c8,
	0x1e376c08,
	0x5141ab53,
	0x2748774c,
	0xdf8eeb99,
	0x34b0bcb5,
	0xe19b48a8,
	0x391c0cb3,
	0xc5c95a63,
	0x4ed8aa4a,
	0xe3418acb,
	0x5b9cca4f,
	0x7763e373,
	0x682e6ff3,
	0xd6b2b8a3,
	0x748f82ee,
	0x5defb2fc,
	0x78a5636f,
	0x43172f60,
	0x84c87814,
	0xa1f0ab72,
	0x8cc70208,
	0x1a6439ec,
	0x90befffa,
	0x23631e28,
	0xa4506ceb,
	0xde82bde9,
	0xbef9a3f7,
	0xb2c67915,
	0xc67178f2,
	0xe372532b,
	0xca273ece,
	0xea26619c,
	0xd186b8c7,
	0x21c0c207,
	0xeada7dd6,
	0xcde0eb1e,
	0xf57d4f7f,
	0xee6ed178,
	0x06f067aa,
	0x72176fba,
	0x0a637dc5,
	0xa2c898a6,
	0x113f9804,
	0xbef90dae,
	0x1b710b35,
	0x131c471b,
	0x28db77f5,
	0x23047d84,
	0x32caab7b,
	0x40c72493,
	0x3c9ebe0a,
	0x15c9bebc,
	0x431d67c4,
	0x9c100d4c,
	0x4cc5d4be,
	0xcb3e42b6,
	0x597f299c,
	0xfc657e2a,
	0x5fcb6fab,
	0x3ad6faec,
	0x6c44198c,
	0x4a475817
];

var W = new Array(160);

function Sha512() {
	this.init();
	this._w = W;

	Hash.call(this, 128, 112);
}

inherits(Sha512, Hash);

Sha512.prototype.init = function () {
	this._ah = 0x6a09e667;
	this._bh = 0xbb67ae85;
	this._ch = 0x3c6ef372;
	this._dh = 0xa54ff53a;
	this._eh = 0x510e527f;
	this._fh = 0x9b05688c;
	this._gh = 0x1f83d9ab;
	this._hh = 0x5be0cd19;

	this._al = 0xf3bcc908;
	this._bl = 0x84caa73b;
	this._cl = 0xfe94f82b;
	this._dl = 0x5f1d36f1;
	this._el = 0xade682d1;
	this._fl = 0x2b3e6c1f;
	this._gl = 0xfb41bd6b;
	this._hl = 0x137e2179;

	return this;
};

function Ch(x, y, z) {
	return z ^ (x & (y ^ z));
}

function maj(x, y, z) {
	return (x & y) | (z & (x | y));
}

function sigma0(x, xl) {
	return ((x >>> 28) | (xl << 4)) ^ ((xl >>> 2) | (x << 30)) ^ ((xl >>> 7) | (x << 25));
}

function sigma1(x, xl) {
	return ((x >>> 14) | (xl << 18)) ^ ((x >>> 18) | (xl << 14)) ^ ((xl >>> 9) | (x << 23));
}

function Gamma0(x, xl) {
	return ((x >>> 1) | (xl << 31)) ^ ((x >>> 8) | (xl << 24)) ^ (x >>> 7);
}

function Gamma0l(x, xl) {
	return ((x >>> 1) | (xl << 31)) ^ ((x >>> 8) | (xl << 24)) ^ ((x >>> 7) | (xl << 25));
}

function Gamma1(x, xl) {
	return ((x >>> 19) | (xl << 13)) ^ ((xl >>> 29) | (x << 3)) ^ (x >>> 6);
}

function Gamma1l(x, xl) {
	return ((x >>> 19) | (xl << 13)) ^ ((xl >>> 29) | (x << 3)) ^ ((x >>> 6) | (xl << 26));
}

function getCarry(a, b) {
	return (a >>> 0) < (b >>> 0) ? 1 : 0;
}

Sha512.prototype._update = function (M) {
	var w = this._w;

	var ah = this._ah | 0;
	var bh = this._bh | 0;
	var ch = this._ch | 0;
	var dh = this._dh | 0;
	var eh = this._eh | 0;
	var fh = this._fh | 0;
	var gh = this._gh | 0;
	var hh = this._hh | 0;

	var al = this._al | 0;
	var bl = this._bl | 0;
	var cl = this._cl | 0;
	var dl = this._dl | 0;
	var el = this._el | 0;
	var fl = this._fl | 0;
	var gl = this._gl | 0;
	var hl = this._hl | 0;

	for (var i = 0; i < 32; i += 2) {
		w[i] = M.readInt32BE(i * 4);
		w[i + 1] = M.readInt32BE((i * 4) + 4);
	}
	for (; i < 160; i += 2) {
		var xh = w[i - (15 * 2)];
		var xl = w[i - (15 * 2) + 1];
		var gamma0 = Gamma0(xh, xl);
		var gamma0l = Gamma0l(xl, xh);

		xh = w[i - (2 * 2)];
		xl = w[i - (2 * 2) + 1];
		var gamma1 = Gamma1(xh, xl);
		var gamma1l = Gamma1l(xl, xh);

		// w[i] = gamma0 + w[i - 7] + gamma1 + w[i - 16]
		var Wi7h = w[i - (7 * 2)];
		var Wi7l = w[i - (7 * 2) + 1];

		var Wi16h = w[i - (16 * 2)];
		var Wi16l = w[i - (16 * 2) + 1];

		var Wil = (gamma0l + Wi7l) | 0;
		var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
		Wil = (Wil + gamma1l) | 0;
		Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
		Wil = (Wil + Wi16l) | 0;
		Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;

		w[i] = Wih;
		w[i + 1] = Wil;
	}

	for (var j = 0; j < 160; j += 2) {
		Wih = w[j];
		Wil = w[j + 1];

		var majh = maj(ah, bh, ch);
		var majl = maj(al, bl, cl);

		var sigma0h = sigma0(ah, al);
		var sigma0l = sigma0(al, ah);
		var sigma1h = sigma1(eh, el);
		var sigma1l = sigma1(el, eh);

		// t1 = h + sigma1 + ch + K[j] + w[j]
		var Kih = K[j];
		var Kil = K[j + 1];

		var chh = Ch(eh, fh, gh);
		var chl = Ch(el, fl, gl);

		var t1l = (hl + sigma1l) | 0;
		var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
		t1l = (t1l + chl) | 0;
		t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
		t1l = (t1l + Kil) | 0;
		t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
		t1l = (t1l + Wil) | 0;
		t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;

		// t2 = sigma0 + maj
		var t2l = (sigma0l + majl) | 0;
		var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;

		hh = gh;
		hl = gl;
		gh = fh;
		gl = fl;
		fh = eh;
		fl = el;
		el = (dl + t1l) | 0;
		eh = (dh + t1h + getCarry(el, dl)) | 0;
		dh = ch;
		dl = cl;
		ch = bh;
		cl = bl;
		bh = ah;
		bl = al;
		al = (t1l + t2l) | 0;
		ah = (t1h + t2h + getCarry(al, t1l)) | 0;
	}

	this._al = (this._al + al) | 0;
	this._bl = (this._bl + bl) | 0;
	this._cl = (this._cl + cl) | 0;
	this._dl = (this._dl + dl) | 0;
	this._el = (this._el + el) | 0;
	this._fl = (this._fl + fl) | 0;
	this._gl = (this._gl + gl) | 0;
	this._hl = (this._hl + hl) | 0;

	this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
	this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
	this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
	this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
	this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
	this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
	this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
	this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
};

Sha512.prototype._hash = function () {
	var H = Buffer.allocUnsafe(64);

	function writeInt64BE(h, l, offset) {
		H.writeInt32BE(h, offset);
		H.writeInt32BE(l, offset + 4);
	}

	writeInt64BE(this._ah, this._al, 0);
	writeInt64BE(this._bh, this._bl, 8);
	writeInt64BE(this._ch, this._cl, 16);
	writeInt64BE(this._dh, this._dl, 24);
	writeInt64BE(this._eh, this._el, 32);
	writeInt64BE(this._fh, this._fl, 40);
	writeInt64BE(this._gh, this._gl, 48);
	writeInt64BE(this._hh, this._hl, 56);

	return H;
};

module.exports = Sha512;

},{"./hash":489,"inherits":369,"safe-buffer":485}],497:[function(require,module,exports){
const js = require('./sha256.js')
const wasm = require('sha256-wasm')

var Proto = js

module.exports = function () {
  return new Proto()
}

module.exports.ready = function (cb) {
  wasm.ready(function () { // ignore errors
    cb()
  })
}

module.exports.WASM_SUPPORTED = wasm.WASM_SUPPORTED
module.exports.WASM_LOADED = false

var SHA256_BYTES = module.exports.SHA256_BYTES = 32

wasm.ready(function (err) {
  if (!err) {
    module.exports.WASM_LOADED = true
    module.exports = Proto = wasm
  }
})

},{"./sha256.js":498,"sha256-wasm":499}],498:[function(require,module,exports){
const assert = require('nanoassert')
const b4a = require('b4a')

module.exports = Sha256
const SHA256_BYTES = module.exports.SHA256_BYTES = 32
const BLOCKSIZE = 64

const K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]

function expand (a, b, c, d) {
  var b_ = (((a >>> 17) | (a << 15)) ^ ((a >>> 19) | (a << 13)) ^ (a >>> 10)) + b
  var d_ = (((c >>> 7) | (c << 25)) ^ ((c >>> 18) | (c << 14)) ^ (c >>> 3)) + d

  return (b_ + d_) << 0
}

function compress (state, words) {
  // initialise registers
  var ch, maj, s0, s1, T1, T2
  var [a, b, c, d, e, f, g, h] = state

  // expand message schedule
  const w = new Uint32Array(64)
  for (let i = 0; i < 16; i++) w[i] = bswap(words[i])
  for (let i = 16; i < 64; i++) w[i] = expand(w[i - 2], w[i - 7], w[i - 15], w[i - 16])
  for (let i = 0; i < 64; i += 4) round(i)

  state[0] = state[0] + a
  state[1] = state[1] + b
  state[2] = state[2] + c
  state[3] = state[3] + d
  state[4] = state[4] + e
  state[5] = state[5] + f
  state[6] = state[6] + g
  state[7] = state[7] + h

  function round (n) {
    ch = (e & f) ^ (~e & g)
    maj = (a & b) ^ (a & c) ^ (b & c)
    s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10))
    s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7))
    T1 = h + ch + s1 + w[n] + K[n]
    T2 = s0 + maj
    h = d + T1
    d = T1 + T2

    ch = (h & e) ^ (~h & f)
    maj = (d & a) ^ (d & b) ^ (a & b)
    s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10))
    s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7))
    T1 = g + ch + s1 + w[n + 1] + K[n + 1]
    T2 = s0 + maj
    g = c + T1
    c = T1 + T2

    ch = (g & h) ^ (~g & e)
    maj = (c & d) ^ (c & a) ^ (d & a)
    s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10))
    s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7))
    T1 = f + ch + s1 + w[n + 2] + K[n + 2]
    T2 = s0 + maj
    f = b + T1
    b = T1 + T2

    ch = (f & g) ^ (~f & h)
    maj = (b & c) ^ (b & d) ^ (c & d)
    s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10))
    s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7))
    T1 = e + ch + s1 + w[n + 3] + K[n + 3]
    T2 = s0 + maj
    e = a + T1
    a = T1 + T2
  }
}

function Sha256 () {
  if (!(this instanceof Sha256)) return new Sha256()

  this.buffer = new ArrayBuffer(64)
  this.bytesRead = 0
  this.pos = 0
  this.digestLength = SHA256_BYTES
  this.finalised = false

  this.load = new Uint8Array(this.buffer)
  this.words = new Uint32Array(this.buffer)

  this.state = new Uint32Array([
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
  ])

  return this
}

Sha256.prototype.update = function (input, enc) {
  assert(this.finalised === false, 'Hash instance finalised')

  var [inputBuf, len] = formatInput(input, enc)
  var i = 0
  this.bytesRead += len

  while (len > 0) {
    this.load.set(inputBuf.subarray(i, i + BLOCKSIZE - this.pos), this.pos)
    i += BLOCKSIZE - this.pos
    len -= BLOCKSIZE - this.pos

    if (len < 0) break

    this.pos = 0
    compress(this.state, this.words)
  }

  this.pos = this.bytesRead & 0x3f
  this.load.fill(0, this.pos)

  return this
}

Sha256.prototype.digest = function (enc, offset = 0) {
  assert(this.finalised === false, 'Hash instance finalised')
  this.finalised = true

  this.load.fill(0, this.pos)
  this.load[this.pos] = 0x80

  if (this.pos > 55) {
    compress(this.state, this.words)

    this.words.fill(0)
    this.pos = 0
  }

  const view = new DataView(this.buffer)
  view.setUint32(56, this.bytesRead / 2 ** 29)
  view.setUint32(60, this.bytesRead << 3)

  compress(this.state, this.words)

  const resultBuf = new Uint8Array(this.state.map(bswap).buffer)

  if (!enc) {
    return new Uint8Array(resultBuf)
  }

  if (typeof enc === 'string') {
    return b4a.toString(resultBuf, enc)
  }

  assert(enc instanceof Uint8Array, 'input must be Uint8Array or Buffer')
  assert(enc.byteLength >= this.digestLength + offset, 'input not large enough for digest')

  for (let i = 0; i < this.digestLength; i++) {
    enc[i + offset] = resultBuf[i]
  }

  return enc
}

function HMAC (key) {
  if (!(this instanceof HMAC)) return new HMAC(key)

  this.pad = b4a.alloc(64)
  this.inner = Sha256()
  this.outer = Sha256()

  const keyhash = b4a.alloc(32)
  if (key.byteLength > 64) {
    Sha256().update(key).digest(keyhash)
    key = keyhash
  }

  this.pad.fill(0x36)
  for (let i = 0; i < key.byteLength; i++) {
    this.pad[i] ^= key[i]
  }
  this.inner.update(this.pad)

  this.pad.fill(0x5c)
  for (let i = 0; i < key.byteLength; i++) {
    this.pad[i] ^= key[i]
  }
  this.outer.update(this.pad)

  this.pad.fill(0)
  keyhash.fill(0)
}

HMAC.prototype.update = function (input, enc) {
  this.inner.update(input, enc)
  return this
}

HMAC.prototype.digest = function (enc, offset = 0) {
  this.outer.update(this.inner.digest())
  return this.outer.digest(enc, offset)
}

Sha256.HMAC = HMAC

function formatInput (input, enc) {
  var result = b4a.from(input, enc)

  return [result, result.byteLength]
}

function bswap (a) {
  var r = ((a & 0x00ff00ff) >>> 8) | ((a & 0x00ff00ff) << 24)
  var l = ((a & 0xff00ff00) << 8) | ((a & 0xff00ff00) >>> 24)

  return r | l
}

},{"b4a":102,"nanoassert":390}],499:[function(require,module,exports){
const assert = require('nanoassert')
const b4a = require('b4a')

const wasm = typeof WebAssembly !== 'undefined' && require('./sha256.js')({
  imports: {
    debug: {
      log (...args) {
        console.log(...args.map(int => (int >>> 0).toString(16).padStart(8, '0')))
      },
      log_tee (arg) {
        console.log((arg >>> 0).toString(16).padStart(8, '0'))
        return arg
      }
    }
  }
})

let head = 0
const freeList = []

module.exports = Sha256
const SHA256_BYTES = module.exports.SHA256_BYTES = 32
const INPUT_OFFSET = 40
const STATEBYTES = 108
const BLOCKSIZE = 64

function Sha256 () {
  if (!(this instanceof Sha256)) return new Sha256()
  if (!(wasm)) throw new Error('WASM not loaded. Wait for Sha256.ready(cb)')

  if (!freeList.length) {
    freeList.push(head)
    head += STATEBYTES // need 100 bytes for internal state
  }

  this.finalized = false
  this.digestLength = SHA256_BYTES
  this.pointer = freeList.pop()
  this.pos = 0

  this._memory = new Uint8Array(wasm.memory.buffer)
  this._memory.fill(0, this.pointer, this.pointer + STATEBYTES)

  if (this.pointer + this.digestLength > this._memory.length) this._realloc(this.pointer + STATEBYTES)
}

Sha256.prototype._realloc = function (size) {
  wasm.memory.grow(Math.max(0, Math.ceil(Math.abs(size - this._memory.length) / 65536)))
  this._memory = new Uint8Array(wasm.memory.buffer)
}

Sha256.prototype.update = function (input, enc) {
  assert(this.finalized === false, 'Hash instance finalized')

  if (head % 4 !== 0) head += 4 - head % 4
  assert(head % 4 === 0, 'input shoud be aligned for int32')

  const [inputBuf, length] = formatInput(input, enc)

  assert(inputBuf instanceof Uint8Array, 'input must be Uint8Array or Buffer')

  if (head + length > this._memory.length) this._realloc(head + input.length)

  this._memory.fill(0, head, head + roundUp(length, BLOCKSIZE) - BLOCKSIZE)
  this._memory.set(inputBuf.subarray(0, BLOCKSIZE - this.pos), this.pointer + INPUT_OFFSET + this.pos)
  this._memory.set(inputBuf.subarray(BLOCKSIZE - this.pos), head)

  this.pos = (this.pos + length) & 0x3f
  wasm.sha256(this.pointer, head, length, 0)

  return this
}

Sha256.prototype.digest = function (enc, offset = 0) {
  assert(this.finalized === false, 'Hash instance finalized')

  this.finalized = true
  freeList.push(this.pointer)

  const paddingStart = this.pointer + INPUT_OFFSET + this.pos
  this._memory.fill(0, paddingStart, this.pointer + INPUT_OFFSET + BLOCKSIZE)
  wasm.sha256(this.pointer, head, 0, 1)

  const resultBuf = this._memory.subarray(this.pointer, this.pointer + this.digestLength)

  if (!enc) {
    return resultBuf
  }

  if (typeof enc === 'string') {
    return b4a.toString(resultBuf, enc)
  }

  assert(enc instanceof Uint8Array, 'output must be Uint8Array or Buffer')
  assert(enc.byteLength >= this.digestLength + offset,
    "output must have at least 'SHA256_BYTES' bytes remaining")

  for (let i = 0; i < this.digestLength; i++) {
    enc[i + offset] = resultBuf[i]
  }

  return enc
}

Sha256.WASM = wasm
Sha256.WASM_SUPPORTED = typeof WebAssembly !== 'undefined'

Sha256.ready = function (cb) {
  if (!cb) cb = noop
  if (!wasm) return cb(new Error('WebAssembly not supported'))
  cb()
  return Promise.resolve()
}

Sha256.prototype.ready = Sha256.ready

function HMAC (key) {
  if (!(this instanceof HMAC)) return new HMAC(key)

  this.pad = b4a.alloc(64)
  this.inner = Sha256()
  this.outer = Sha256()

  const keyhash = b4a.alloc(32)
  if (key.byteLength > 64) {
    Sha256().update(key).digest(keyhash)
    key = keyhash
  }

  this.pad.fill(0x36)
  for (let i = 0; i < key.byteLength; i++) {
    this.pad[i] ^= key[i]
  }
  this.inner.update(this.pad)

  this.pad.fill(0x5c)
  for (let i = 0; i < key.byteLength; i++) {
    this.pad[i] ^= key[i]
  }
  this.outer.update(this.pad)

  this.pad.fill(0)
  keyhash.fill(0)
}

HMAC.prototype.update = function (input, enc) {
  this.inner.update(input, enc)
  return this
}

HMAC.prototype.digest = function (enc, offset = 0) {
  this.outer.update(this.inner.digest())
  return this.outer.digest(enc, offset)
}

Sha256.HMAC = HMAC

function noop () {}

function formatInput (input, enc) {
  var result = b4a.from(input, enc)

  return [result, result.byteLength]
}

// only works for base that is power of 2
function roundUp (n, base) {
  return (n + base - 1) & -base
}

},{"./sha256.js":500,"b4a":102,"nanoassert":390}],500:[function(require,module,exports){
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __toBinary = /* @__PURE__ */ (() => {
  var table = new Uint8Array(128);
  for (var i = 0; i < 64; i++)
    table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    var n = base64.length, bytes2 = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
    for (var i2 = 0, j = 0; i2 < n; ) {
      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes2[j++] = c0 << 2 | c1 >> 4;
      bytes2[j++] = c1 << 4 | c2 >> 2;
      bytes2[j++] = c2 << 6 | c3;
    }
    return bytes2;
  };
})();

// wasm-binary:./sha256.wat
var require_sha256 = __commonJS({
  "wasm-binary:./sha256.wat"(exports2, module2) {
    module2.exports = __toBinary("AGFzbQEAAAABNAVgAX8Bf2AIf39/f39/f38AYAR/f39/AX9gEX9/f39/f39/f39/f39/f39/AGAEf39/fwADBgUAAQIDBAUDAQABBikIfwFBAAt/AUEAC38BQQALfwFBAAt/AUEAC38BQQALfwFBAAt/AUEACwcTAgZtZW1vcnkCAAZzaGEyNTYABAreFwUZACAAQf+B/AdxQQh4IABBgP6DeHFBCHdyC7wDAQZ/IwQjBXEjBEF/cyMGcXMhCiMAIwFxIwAjAnFzIwEjAnFzIQsjAEECeCMAQQ14cyMAQRZ4cyEMIwRBBngjBEELeHMjBEEZeHMhDSMHIApqIA1qIABqIARqIQggDCALaiEJIwMgCGokByAIIAlqJAMjByMEcSMHQX9zIwVxcyEKIwMjAHEjAyMBcXMjACMBcXMhCyMDQQJ4IwNBDXhzIwNBFnhzIQwjB0EGeCMHQQt4cyMHQRl4cyENIwYgCmogDWogAWogBWohCCAMIAtqIQkjAiAIaiQGIAggCWokAiMGIwdxIwZBf3MjBHFzIQojAiMDcSMCIwBxcyMDIwBxcyELIwJBAngjAkENeHMjAkEWeHMhDCMGQQZ4IwZBC3hzIwZBGXhzIQ0jBSAKaiANaiACaiAGaiEIIAwgC2ohCSMBIAhqJAUgCCAJaiQBIwUjBnEjBUF/cyMHcXMhCiMBIwJxIwEjA3FzIwIjA3FzIQsjAUECeCMBQQ14cyMBQRZ4cyEMIwVBBngjBUELeHMjBUEZeHMhDSMEIApqIA1qIANqIAdqIQggDCALaiEJIwAgCGokBCAIIAlqJAALKwAgAEEReCAAQRN4cyAAQQp2cyABaiACQQd4IAJBEnhzIAJBA3ZzIANqagvLCwEwfyAAKAJoRQRAIABB58yn0AY2AgAgAEGF3Z7bezYCBCAAQfLmu+MDNgIIIABBuuq/qno2AgwgAEH/pLmIBTYCECAAQYzRldh5NgIUIABBq7OP/AE2AhggAEGZmoPfBTYCHCAAQQE2AmgLIAAoAgAkACAAKAIEJAEgACgCCCQCIAAoAgwkAyAAKAIQJAQgACgCFCQFIAAoAhgkBiAAKAIcJAcgARAAIQEgAhAAIQIgAxAAIQMgBBAAIQQgBRAAIQUgBhAAIQYgBxAAIQcgCBAAIQggCRAAIQkgChAAIQogCxAAIQsgDBAAIQwgDRAAIQ0gDhAAIQ4gDxAAIQ8gEBAAIRAgASACIAMgBEGY36iUBEGRid2JB0HP94Oue0Glt9fNfhABIAUgBiAHIAhB24TbygNB8aPEzwVBpIX+kXlB1b3x2HoQASAJIAogCyAMQZjVnsB9QYG2jZQBQb6LxqECQcP7sagFEAEgDSAOIA8gEEH0uvmVB0H+4/qGeEGnjfDeeUH04u+MfBABIA8gCiACIAEQAiEBIBAgCyADIAIQAiECIAEgDCAEIAMQAiEDIAIgDSAFIAQQAiEEIAMgDiAGIAUQAiEFIAQgDyAHIAYQAiEGIAUgECAIIAcQAiEHIAYgASAJIAgQAiEIIAcgAiAKIAkQAiEJIAggAyALIAoQAiEKIAkgBCAMIAsQAiELIAogBSANIAwQAiEMIAsgBiAOIA0QAiENIAwgByAPIA4QAiEOIA0gCCAQIA8QAiEPIA4gCSABIBAQAiEQIAEgAiADIARBwdPtpH5Bho/5/X5BxruG/gBBzMOyoAIQASAFIAYgByAIQe/YpO8CQaqJ0tMEQdzTwuUFQdqR5rcHEAEgCSAKIAsgDEHSovnBeUHtjMfBekHIz4yAe0HH/+X6exABIA0gDiAPIBBB85eAt3xBx6KerX1B0capNkHn0qShARABIA8gCiACIAEQAiEBIBAgCyADIAIQAiECIAEgDCAEIAMQAiEDIAIgDSAFIAQQAiEEIAMgDiAGIAUQAiEFIAQgDyAHIAYQAiEGIAUgECAIIAcQAiEHIAYgASAJIAgQAiEIIAcgAiAKIAkQAiEJIAggAyALIAoQAiEKIAkgBCAMIAsQAiELIAogBSANIAwQAiEMIAsgBiAOIA0QAiENIAwgByAPIA4QAiEOIA0gCCAQIA8QAiEPIA4gCSABIBAQAiEQIAEgAiADIARBhZXcvQJBuMLs8AJB/Nux6QRBk5rgmQUQASAFIAYgByAIQdTmqagGQbuVqLMHQa6Si454QYXZyJN5EAEgCSAKIAsgDEGh0f+VekHLzOnAekHwlq6SfEGjo7G7fBABIA0gDiAPIBBBmdDLjH1BpIzktH1Bheu4oH9B8MCqgwEQASAPIAogAiABEAIhASAQIAsgAyACEAIhAiABIAwgBCADEAIhAyACIA0gBSAEEAIhBCADIA4gBiAFEAIhBSAEIA8gByAGEAIhBiAFIBAgCCAHEAIhByAGIAEgCSAIEAIhCCAHIAIgCiAJEAIhCSAIIAMgCyAKEAIhCiAJIAQgDCALEAIhCyAKIAUgDSAMEAIhDCALIAYgDiANEAIhDSAMIAcgDyAOEAIhDiANIAggECAPEAIhDyAOIAkgASAQEAIhECABIAIgAyAEQZaCk80BQYjY3fEBQczuoboCQbX5wqUDEAEgBSAGIAcgCEGzmfDIA0HK1OL2BEHPlPPcBUHz37nBBhABIAkgCiALIAxB7oW+pAdB78aVxQdBlPChpnhBiISc5ngQASANIA4gDyAQQfr/+4V5QevZwaJ6QffH5vd7QfLxxbN8EAEgACAAKAIAIwBqNgIAIAAgACgCBCMBajYCBCAAIAAoAggjAmo2AgggACAAKAIMIwNqNgIMIAAgACgCECMEajYCECAAIAAoAhQjBWo2AhQgACAAKAIYIwZqNgIYIAAgACgCHCMHajYCHAuKCAIBfhJ/IAApAyAhBCAEp0E/cSACaiEGIAQgAq18IQQgACAENwMgAkAgACgCKCEHIAAoAiwhCCAAKAIwIQkgACgCNCEKIAAoAjghCyAAKAI8IQwgACgCQCENIAAoAkQhDiAAKAJIIQ8gACgCTCEQIAAoAlAhESAAKAJUIRIgACgCWCETIAAoAlwhFCAAKAJgIRUgACgCZCEWIAZBwABrIgZBAEgNACAAIAcgCCAJIAogCyAMIA0gDiAPIBAgESASIBMgFCAVIBYQAwNAIAEoAgAhByABKAIEIQggASgCCCEJIAEoAgwhCiABKAIQIQsgASgCFCEMIAEoAhghDSABKAIcIQ4gASgCICEPIAEoAiQhECABKAIoIREgASgCLCESIAEoAjAhEyABKAI0IRQgASgCOCEVIAEoAjwhFiABQcAAaiEBIAZBwABrIgZBAEgEQCAAIAc2AiggACAINgIsIAAgCTYCMCAAIAo2AjQgACALNgI4IAAgDDYCPCAAIA02AkAgACAONgJEIAAgDzYCSCAAIBA2AkwgACARNgJQIAAgEjYCVCAAIBM2AlggACAUNgJcIAAgFTYCYCAAIBY2AmQMAgsgACAHIAggCSAKIAsgDCANIA4gDyAQIBEgEiATIBQgFSAWEAMMAAsLIANBAUYEQCAEp0E/cSEGQYABIAZBA3FBA3R0IQUCQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgBkECdg4PAwQFBgcICQoLDA0ODxABAgsLIAUgFXIhFUEAIQULIAUgFnIhFkEAIQUgACAHIAggCSAKIAsgDCANIA4gDyAQIBEgEiATIBQgFSAWEAMgACAENwMgQQAhB0EAIQhBACEJQQAhCkEAIQtBACEMQQAhDUEAIQ5BACEPQQAhEEEAIRFBACESQQAhE0EAIRRBACEVQQAhFgsgBSAHciEHQQAhBQsgBSAIciEIQQAhBQsgBSAJciEJQQAhBQsgBSAKciEKQQAhBQsgBSALciELQQAhBQsgBSAMciEMQQAhBQsgBSANciENQQAhBQsgBSAOciEOQQAhBQsgBSAPciEPQQAhBQsgBSAQciEQQQAhBQsgBSARciERQQAhBQsgBSASciESQQAhBQsgBSATciETQQAhBQsgBSAUciEUQQAhBQsgBEIdiKcQACEVIARCA4anEAAhFiAAIAcgCCAJIAogCyAMIA0gDiAPIBAgESASIBMgFCAVIBYQAyAAIAAoAgAQADYCACAAIAAoAgQQADYCBCAAIAAoAggQADYCCCAAIAAoAgwQADYCDCAAIAAoAhAQADYCECAAIAAoAhQQADYCFCAAIAAoAhgQADYCGCAAIAAoAhwQADYCHAsL");
  }
});

// wasm-module:./sha256.wat
var bytes = require_sha256();
var compiled = new WebAssembly.Module(bytes);
module.exports = (imports) => {
  const instance = new WebAssembly.Instance(compiled, imports);
  return instance.exports;
};

},{}],501:[function(require,module,exports){
const js = require('./sha512.js')
const wasm = require('sha512-wasm')

var Proto = js

module.exports = function () {
  return new Proto()
}

module.exports.ready = function (cb) {
  wasm.ready(function () { // ignore errors
    cb()
  })
}

module.exports.WASM_SUPPORTED = wasm.SUPPORTED
module.exports.WASM_LOADED = false

var SHA512_BYTES = module.exports.SHA512_BYTES = 64

wasm.ready(function (err) {
  if (!err) {
    module.exports.WASM_LOADED = true
    module.exports = Proto = wasm
  }
})

},{"./sha512.js":502,"sha512-wasm":503}],502:[function(require,module,exports){
const assert = require('nanoassert')
const b4a = require('b4a')

module.exports = Sha512

const BLOCKSIZE = 128

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

function Sha512 () {
  if (!(this instanceof Sha512)) return new Sha512()

  this.hh = new Int32Array(8)
  this.hl = new Int32Array(8)
  this.buffer = new Uint8Array(128)
  this.finalised = false
  this.bytesRead = 0
  this.pos = 0

  this.hh[0] = 0x6a09e667
  this.hh[1] = 0xbb67ae85
  this.hh[2] = 0x3c6ef372
  this.hh[3] = 0xa54ff53a
  this.hh[4] = 0x510e527f
  this.hh[5] = 0x9b05688c
  this.hh[6] = 0x1f83d9ab
  this.hh[7] = 0x5be0cd19

  this.hl[0] = 0xf3bcc908
  this.hl[1] = 0x84caa73b
  this.hl[2] = 0xfe94f82b
  this.hl[3] = 0x5f1d36f1
  this.hl[4] = 0xade682d1
  this.hl[5] = 0x2b3e6c1f
  this.hl[6] = 0xfb41bd6b
  this.hl[7] = 0x137e2179

  return this
}

Sha512.prototype.update = function (input, enc) {
  assert(this.finalised === false, 'Hash instance finalised')

  var [inputBuf, len] = formatInput(input, enc)
  this.bytesRead += len

  const full = (len + this.pos) & -128

  this.buffer.set(inputBuf.subarray(0, BLOCKSIZE - this.pos), this.pos)
  const pos = this.pos
  len -= BLOCKSIZE - this.pos

  if (len >= 0) {
    compress(this.hh, this.hl, this.buffer, 128)
    this.pos = 0
  }

  if (len > 127) {
    compress(this.hh, this.hl, inputBuf.subarray(BLOCKSIZE - pos, full - pos), full - BLOCKSIZE)
    len %= 128
  }

  this.buffer.set(inputBuf.subarray(inputBuf.byteLength - len))
  this.pos = this.bytesRead & 0x7f
  this.buffer.fill(0, this.pos)

  return this
}

Sha512.prototype.digest = function (enc, offset = 0) {
  assert(this.finalised === false, 'Hash instance finalised')
  this.finalised = true

  this.buffer.fill(0, this.pos)
  this.buffer[this.pos] = 128

  if (this.pos > 111) {
    compress(this.hh, this.hl, this.buffer, 128)

    this.buffer.fill(0)
    this.pos = 0
  }

  ts64(this.buffer, 120, (this.bytesRead / 0x20000000) | 0, this.bytesRead << 3)
  compress(this.hh, this.hl, this.buffer, 128)

  if (enc instanceof Uint8Array && enc.byteLength > 63) {
    for (let i = 0; i < 8; i++) ts64(enc, 8 * i + offset, this.hh[i], this.hl[i])
    return enc
  }

  const resultBuf = new Uint8Array(64)
  for (let i = 0; i < 8; i++) ts64(resultBuf, 8 * i, this.hh[i], this.hl[i])

  if (typeof enc === 'string') {
    return b4a.toString(resultBuf, enc)
  }

  return resultBuf
}

function ts64 (x, i, h, l) {
  x[i] = (h >> 24) & 0xff
  x[i + 1] = (h >> 16) & 0xff
  x[i + 2] = (h >> 8) & 0xff
  x[i + 3] = h & 0xff
  x[i + 4] = (l >> 24) & 0xff
  x[i + 5] = (l >> 16) & 0xff
  x[i + 6] = (l >> 8) & 0xff
  x[i + 7] = l & 0xff
}

function formatInput (input, enc) {
  var result = b4a.from(input, enc)

  return [result, result.byteLength]
}

function compress(hh, hl, m, n) {
  var wh = new Int32Array(16), wl = new Int32Array(16),
      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
      th, tl, i, j, h, l, a, b, c, d;

  var ah0 = hh[0],
      ah1 = hh[1],
      ah2 = hh[2],
      ah3 = hh[3],
      ah4 = hh[4],
      ah5 = hh[5],
      ah6 = hh[6],
      ah7 = hh[7],

      al0 = hl[0],
      al1 = hl[1],
      al2 = hl[2],
      al3 = hl[3],
      al4 = hl[4],
      al5 = hl[5],
      al6 = hl[6],
      al7 = hl[7];

  var pos = 0;
  while (n >= 128) {
    for (i = 0; i < 16; i++) {
      j = 8 * i + pos;
      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
    }
    for (i = 0; i < 80; i++) {
      bh0 = ah0;
      bh1 = ah1;
      bh2 = ah2;
      bh3 = ah3;
      bh4 = ah4;
      bh5 = ah5;
      bh6 = ah6;
      bh7 = ah7;

      bl0 = al0;
      bl1 = al1;
      bl2 = al2;
      bl3 = al3;
      bl4 = al4;
      bl5 = al5;
      bl6 = al6;
      bl7 = al7;

      // add
      h = ah7;
      l = al7;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      // Sigma1
      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // Ch
      h = (ah4 & ah5) ^ (~ah4 & ah6);
      l = (al4 & al5) ^ (~al4 & al6);

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // K
      h = K[i*2];
      l = K[i*2+1];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // w
      h = wh[i%16];
      l = wl[i%16];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      th = c & 0xffff | d << 16;
      tl = a & 0xffff | b << 16;

      // add
      h = th;
      l = tl;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      // Sigma0
      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // Maj
      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      bh7 = (c & 0xffff) | (d << 16);
      bl7 = (a & 0xffff) | (b << 16);

      // add
      h = bh3;
      l = bl3;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = th;
      l = tl;

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      bh3 = (c & 0xffff) | (d << 16);
      bl3 = (a & 0xffff) | (b << 16);

      ah1 = bh0;
      ah2 = bh1;
      ah3 = bh2;
      ah4 = bh3;
      ah5 = bh4;
      ah6 = bh5;
      ah7 = bh6;
      ah0 = bh7;

      al1 = bl0;
      al2 = bl1;
      al3 = bl2;
      al4 = bl3;
      al5 = bl4;
      al6 = bl5;
      al7 = bl6;
      al0 = bl7;

      if (i%16 === 15) {
        for (j = 0; j < 16; j++) {
          // add
          h = wh[j];
          l = wl[j];

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = wh[(j+9)%16];
          l = wl[(j+9)%16];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // sigma0
          th = wh[(j+1)%16];
          tl = wl[(j+1)%16];
          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // sigma1
          th = wh[(j+14)%16];
          tl = wl[(j+14)%16];
          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          wh[j] = (c & 0xffff) | (d << 16);
          wl[j] = (a & 0xffff) | (b << 16);
        }
      }
    }

    // add
    h = ah0;
    l = al0;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[0];
    l = hl[0];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[0] = ah0 = (c & 0xffff) | (d << 16);
    hl[0] = al0 = (a & 0xffff) | (b << 16);

    h = ah1;
    l = al1;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[1];
    l = hl[1];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[1] = ah1 = (c & 0xffff) | (d << 16);
    hl[1] = al1 = (a & 0xffff) | (b << 16);

    h = ah2;
    l = al2;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[2];
    l = hl[2];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[2] = ah2 = (c & 0xffff) | (d << 16);
    hl[2] = al2 = (a & 0xffff) | (b << 16);

    h = ah3;
    l = al3;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[3];
    l = hl[3];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[3] = ah3 = (c & 0xffff) | (d << 16);
    hl[3] = al3 = (a & 0xffff) | (b << 16);

    h = ah4;
    l = al4;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[4];
    l = hl[4];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[4] = ah4 = (c & 0xffff) | (d << 16);
    hl[4] = al4 = (a & 0xffff) | (b << 16);

    h = ah5;
    l = al5;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[5];
    l = hl[5];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[5] = ah5 = (c & 0xffff) | (d << 16);
    hl[5] = al5 = (a & 0xffff) | (b << 16);

    h = ah6;
    l = al6;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[6];
    l = hl[6];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[6] = ah6 = (c & 0xffff) | (d << 16);
    hl[6] = al6 = (a & 0xffff) | (b << 16);

    h = ah7;
    l = al7;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[7];
    l = hl[7];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[7] = ah7 = (c & 0xffff) | (d << 16);
    hl[7] = al7 = (a & 0xffff) | (b << 16);

    pos += 128;
    n -= 128;
  }
}

function HMAC (key) {
  if (!(this instanceof HMAC)) return new HMAC(key)

  this.pad = b4a.alloc(128)
  this.inner = Sha512()
  this.outer = Sha512()

  const keyhash = b4a.alloc(64)
  if (key.byteLength > 128) {
    Sha512().update(key).digest(keyhash)
    key = keyhash
  }

  this.pad.fill(0x36)
  for (let i = 0; i < key.byteLength; i++) {
    this.pad[i] ^= key[i]
  }
  this.inner.update(this.pad)

  this.pad.fill(0x5c)
  for (let i = 0; i < key.byteLength; i++) {
    this.pad[i] ^= key[i]
  }
  this.outer.update(this.pad)

  this.pad.fill(0)
  keyhash.fill(0)
}

HMAC.prototype.update = function (input, enc) {
  this.inner.update(input, enc)
  return this
}

HMAC.prototype.digest = function (enc, offset = 0) {
  this.outer.update(this.inner.digest())
  return this.outer.digest(enc, offset)
}

Sha512.HMAC = HMAC

},{"b4a":102,"nanoassert":390}],503:[function(require,module,exports){
const assert = require('nanoassert')
const b4a = require('b4a')

const wasm = typeof WebAssembly !== 'undefined' && require('./sha512.js')({
  imports: {
    debug: {
      log (...args) {
        console.log(...args.map(int => (int >>> 0).toString(16).padStart(8, '0')))
      },
      log_tee (arg) {
        console.log((arg >>> 0).toString(16).padStart(8, '0'))
        return arg
      }
    }
  }
})

let head = 0
// assetrt head % 8 === 0 to guarantee alignment
const freeList = []

module.exports = Sha512
const SHA512_BYTES = module.exports.SHA512_BYTES = 64
const INPUT_OFFSET = 80
const STATEBYTES = 216
const BLOCKSIZE = 128

function Sha512 () {
  if (!(this instanceof Sha512)) return new Sha512()
  if (!(wasm)) throw new Error('WASM not loaded. Wait for Sha512.ready(cb)')

  if (!freeList.length) {
    freeList.push(head)
    head += STATEBYTES
  }

  this.finalized = false
  this.digestLength = SHA512_BYTES
  this.pointer = freeList.pop()
  this.pos = 0
  this.wasm = wasm

  this._memory = new Uint8Array(wasm.memory.buffer)
  this._memory.fill(0, this.pointer, this.pointer + STATEBYTES)

  if (this.pointer + this.digestLength > this._memory.length) this._realloc(this.pointer + STATEBYTES)
}

Sha512.prototype._realloc = function (size) {
  wasm.memory.grow(Math.max(0, Math.ceil(Math.abs(size - this._memory.length) / 65536)))
  this._memory = new Uint8Array(wasm.memory.buffer)
}

Sha512.prototype.update = function (input, enc) {
  assert(this.finalized === false, 'Hash instance finalized')

  if (head % 8 !== 0) head += 8 - head % 8
  assert(head % 8 === 0, 'input should be aligned for int64')

  const [inputBuf, length] = formatInput(input, enc)

  assert(inputBuf instanceof Uint8Array, 'input must be Uint8Array or Buffer')

  if (head + input.length > this._memory.length) this._realloc(head + input.length)

  this._memory.fill(0, head, head + roundUp(length, BLOCKSIZE) - BLOCKSIZE)
  this._memory.set(inputBuf.subarray(0, BLOCKSIZE - this.pos), this.pointer + INPUT_OFFSET + this.pos)
  this._memory.set(inputBuf.subarray(BLOCKSIZE - this.pos), head)

  this.pos = (this.pos + length) & 0x7f
  wasm.sha512(this.pointer, head, length, 0)

  return this
}

Sha512.prototype.digest = function (enc, offset = 0) {
  assert(this.finalized === false, 'Hash instance finalized')

  this.finalized = true
  freeList.push(this.pointer)

  const paddingStart = this.pointer + INPUT_OFFSET + this.pos
  this._memory.fill(0, paddingStart, this.pointer + INPUT_OFFSET + BLOCKSIZE)
  wasm.sha512(this.pointer, head, 0, 1)

  const resultBuf = this._memory.subarray(this.pointer, this.pointer + this.digestLength)

  if (!enc) {
    return resultBuf
  }

  if (typeof enc === 'string') {
    return b4a.toString(resultBuf, enc)
  }

  assert(enc instanceof Uint8Array, 'output must be Uint8Array or Buffer')
  assert(enc.byteLength >= this.digestLength + offset,
    "output must have at least 'SHA512_BYTES' bytes remaining")

  for (let i = 0; i < this.digestLength; i++) {
    enc[i + offset] = resultBuf[i]
  }

  return enc
}

Sha512.WASM = wasm
Sha512.WASM_SUPPORTED = typeof WebAssembly !== 'undefined'

Sha512.ready = function (cb) {
  if (!cb) cb = noop
  if (!wasm) return cb(new Error('WebAssembly not supported'))
  cb()
  return Promise.resolve()
}

Sha512.prototype.ready = Sha512.ready

function HMAC (key) {
  if (!(this instanceof HMAC)) return new HMAC(key)

  this.pad = b4a.alloc(128)
  this.inner = Sha512()
  this.outer = Sha512()

  const keyhash = b4a.alloc(64)
  if (key.byteLength > 128) {
    Sha512().update(key).digest(keyhash)
    key = keyhash
  }

  this.pad.fill(0x36)
  for (let i = 0; i < key.byteLength; i++) {
    this.pad[i] ^= key[i]
  }
  this.inner.update(this.pad)

  this.pad.fill(0x5c)
  for (let i = 0; i < key.byteLength; i++) {
    this.pad[i] ^= key[i]
  }
  this.outer.update(this.pad)

  this.pad.fill(0)
  keyhash.fill(0)
}

HMAC.prototype.update = function (input, enc) {
  this.inner.update(input, enc)
  return this
}

HMAC.prototype.digest = function (enc, offset = 0) {
  this.outer.update(this.inner.digest())
  return this.outer.digest(enc, offset)
}

Sha512.HMAC = HMAC

function noop () {}

function formatInput (input, enc) {
  var result = b4a.from(input, enc)

  return [result, result.byteLength]
}

// only works for base that is power of 2
function roundUp (n, base) {
  return (n + base - 1) & -base
}

},{"./sha512.js":504,"b4a":102,"nanoassert":390}],504:[function(require,module,exports){
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __toBinary = /* @__PURE__ */ (() => {
  var table = new Uint8Array(128);
  for (var i = 0; i < 64; i++)
    table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    var n = base64.length, bytes2 = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
    for (var i2 = 0, j = 0; i2 < n; ) {
      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes2[j++] = c0 << 2 | c1 >> 4;
      bytes2[j++] = c1 << 4 | c2 >> 2;
      bytes2[j++] = c2 << 6 | c3;
    }
    return bytes2;
  };
})();

// wasm-binary:./sha512.wat
var require_sha512 = __commonJS({
  "wasm-binary:./sha512.wat"(exports2, module2) {
    module2.exports = __toBinary("AGFzbQEAAAABNAVgAX4BfmAIfn5+fn5+fn4AYAR+fn5+AX5gEX9+fn5+fn5+fn5+fn5+fn5+AGAEf39/fwADBgUAAQIDBAUDAQABBikIfgFCAAt+AUIAC34BQgALfgFCAAt+AUIAC34BQgALfgFCAAt+AUIACwcTAgZtZW1vcnkCAAZzaGE1MTIABAqZHgVCACAAQoCA/P+PgECDQhCJIABC//+DgPD/P4NCEIqEIQAgAEL/gfyH8J/A/wCDQgiJIABCgP6D+I/gv4B/g0IIioQLvAMBBn4jBCMFgyMEQn+FIwaDhSEKIwAjAYMjACMCg4UjASMCg4UhCyMAQhyKIwBCIoqFIwBCJ4qFIQwjBEIOiiMEQhKKhSMEQimKhSENIwcgCnwgDXwgAHwgBHwhCCAMIAt8IQkjAyAIfCQHIAggCXwkAyMHIwSDIwdCf4UjBYOFIQojAyMAgyMDIwGDhSMAIwGDhSELIwNCHIojA0IiioUjA0InioUhDCMHQg6KIwdCEoqFIwdCKYqFIQ0jBiAKfCANfCABfCAFfCEIIAwgC3whCSMCIAh8JAYgCCAJfCQCIwYjB4MjBkJ/hSMEg4UhCiMCIwODIwIjAIOFIwMjAIOFIQsjAkIciiMCQiKKhSMCQieKhSEMIwZCDoojBkISioUjBkIpioUhDSMFIAp8IA18IAJ8IAZ8IQggDCALfCEJIwEgCHwkBSAIIAl8JAEjBSMGgyMFQn+FIweDhSEKIwEjAoMjASMDg4UjAyMCg4UhCyMBQhyKIwFCIoqFIwFCJ4qFIQwjBUIOiiMFQhKKhSMFQimKhSENIwQgCnwgDXwgA3wgB3whCCAMIAt8IQkjACAIfCQEIAggCXwkAAsrACAAQhOKIABCPYqFIABCBoiFIAF8IAJCAYogAkIIioUgAkIHiIUgA3x8C6QRACAAKQPQAUIAUQRAIABCiJLznf/M+YTqADcDACAAQrvOqqbY0Ouzu383AwggAEKr8NP0r+68tzw3AxAgAELx7fT4paf9p6V/NwMYIABC0YWa7/rPlIfRADcDICAAQp/Y+dnCkdqCm383AyggAELr+obav7X2wR83AzAgAEL5wvibkaOz8NsANwM4IABCATcD0AELIAApAwAkACAAKQMIJAEgACkDECQCIAApAxgkAyAAKQMgJAQgACkDKCQFIAApAzAkBiAAKQM4JAcgARAAIQEgAhAAIQIgAxAAIQMgBBAAIQQgBRAAIQUgBhAAIQYgBxAAIQcgCBAAIQggCRAAIQkgChAAIQogCxAAIQsgDBAAIQwgDRAAIQ0gDhAAIQ4gDxAAIQ8gEBAAIRAgASACIAMgBEKi3KK5jfOLxcIAQs3LvZ+SktGb8QBCr/a04v75vuC1f0K8t6eM2PT22mkQASAFIAYgByAIQrjqopq/y7CrOUKZoJewm77E+NkAQpuf5fjK1OCfkn9CmIK2093al46rfxABIAkgCiALIAxCwoSMmIrT6oNYQr7fwauU4NbBEkKM5ZL35LfhmCRC4un+r724n4bVABABIA0gDiAPIBBC75Luk8+ul9/yAEKxrdrY47+s74B/QrWknK7y1IHum39ClM2k+8yu/M1BEAEgDyAKIAIgARACIQEgECALIAMgAhACIQIgASAMIAQgAxACIQMgAiANIAUgBBACIQQgAyAOIAYgBRACIQUgBCAPIAcgBhACIQYgBSAQIAggBxACIQcgBiABIAkgCBACIQggByACIAogCRACIQkgCCADIAsgChACIQogCSAEIAwgCxACIQsgCiAFIA0gDBACIQwgCyAGIA4gDRACIQ0gDCAHIA8gDhACIQ4gDSAIIBAgDxACIQ8gDiAJIAEgEBACIRAgASACIAMgBELSlcX3mbjazWRC48u8wuPwkd9vQrWrs9zouOfgD0LluLK9x7mohiQQASAFIAYgByAIQvWErMn1jcv0LUKDyZv1ppWhusoAQtT3h+rLu6rY3ABCtafFmKib4vz2ABABIAkgCiALIAxCq7+b866qlJ+Yf0KQ5NDt0s3xmKh/Qr/C7MeJ+cmBsH9C5J289/v436y/fxABIA0gDiAPIBBCwp+i7bP+gvBGQqXOqpj5qOTTVULvhI6AnuqY5QZC8Ny50PCsypQUEAEgDyAKIAIgARACIQEgECALIAMgAhACIQIgASAMIAQgAxACIQMgAiANIAUgBBACIQQgAyAOIAYgBRACIQUgBCAPIAcgBhACIQYgBSAQIAggBxACIQcgBiABIAkgCBACIQggByACIAogCRACIQkgCCADIAsgChACIQogCSAEIAwgCxACIQsgCiAFIA0gDBACIQwgCyAGIA4gDRACIQ0gDCAHIA8gDhACIQ4gDSAIIBAgDxACIQ8gDiAJIAEgEBACIRAgASACIAMgBEL838i21NDC2ydCppKb4YWnyI0uQu3VkNbFv5uWzQBC3+fW7Lmig5zTABABIAUgBiAHIAhC3se93cjqnIXlAEKo5d7js9eCtfYAQubdtr/kpbLhgX9Cu+qIpNGQi7mSfxABIAkgCiALIAxC5IbE55SU+t+if0KB4Ijiu8mZjah/QpGv4oeN7uKlQkKw/NKysLSUtkcQASANIA4gDyAQQpikvbedg7rJUUKQ0parxcTBzFZCqsDEu9WwjYd0Qrij75WDjqi1EBABIA8gCiACIAEQAiEBIBAgCyADIAIQAiECIAEgDCAEIAMQAiEDIAIgDSAFIAQQAiEEIAMgDiAGIAUQAiEFIAQgDyAHIAYQAiEGIAUgECAIIAcQAiEHIAYgASAJIAgQAiEIIAcgAiAKIAkQAiEJIAggAyALIAoQAiEKIAkgBCAMIAsQAiELIAogBSANIAwQAiEMIAsgBiAOIA0QAiENIAwgByAPIA4QAiEOIA0gCCAQIA8QAiEPIA4gCSABIBAQAiEQIAEgAiADIARCyKHLxuuisNIZQtPWhoqFgdubHkKZ17v8zemdpCdCqJHtjN6Wr9g0EAEgBSAGIAcgCELjtKWuvJaDjjlCy5WGmq7JquzOAELzxo+798myztsAQqPxyrW9/puX6AAQASAJIAogCyAMQvzlvu/l3eDH9ABC4N7cmPTt2NL4AELy1sKPyoKe5IR/QuzzkNOBwcDjjH8QASANIA4gDyAQQqi8jJui/7/fkH9C6fuK9L2dm6ikf0KV8pmW+/7o/L5/QqumyZuunt64RhABIA8gCiACIAEQAiEBIBAgCyADIAIQAiECIAEgDCAEIAMQAiEDIAIgDSAFIAQQAiEEIAMgDiAGIAUQAiEFIAQgDyAHIAYQAiEGIAUgECAIIAcQAiEHIAYgASAJIAgQAiEIIAcgAiAKIAkQAiEJIAggAyALIAoQAiEKIAkgBCAMIAsQAiELIAogBSANIAwQAiEMIAsgBiAOIA0QAiENIAwgByAPIA4QAiEOIA0gCCAQIA8QAiEPIA4gCSABIBAQAiEQIAEgAiADIARCnMOZ0e7Zz5NKQoeEg47ymK7DUUKe1oPv7Lqf7WpC+KK78/7v0751EAEgBSAGIAcgCEK6392Qp/WZ+AZCprGiltq437EKQq6b5PfLgOafEUKbjvGY0ebCuBsQASAJIAogCyAMQoT7kZjS/t3tKEKTyZyGtO+q5TJCvP2mrqHBr888QsyawODJ+NmOwwAQASANIA4gDyAQQraF+dnsl/XizABCqvyV48+zyr/ZAELs9dvWs/Xb5d8AQpewndLEsYai7AAQASAAIAApAwAjAHw3AwAgACAAKQMIIwF8NwMIIAAgACkDECMCfDcDECAAIAApAxgjA3w3AxggACAAKQMgIwR8NwMgIAAgACkDKCMFfDcDKCAAIAApAzAjBnw3AzAgACAAKQM4Iwd8NwM4C8MIARV+IAApA0AhBCAAKQNIIQUgBEL/AIMgAq18IQggBCEGIAQgAq18IQQgACAENwNAIAQgBlQEQCAFQgF8IQUgACAFNwNICwJAIAApA1AhCSAAKQNYIQogACkDYCELIAApA2ghDCAAKQNwIQ0gACkDeCEOIAApA4ABIQ8gACkDiAEhECAAKQOQASERIAApA5gBIRIgACkDoAEhEyAAKQOoASEUIAApA7ABIRUgACkDuAEhFiAAKQPAASEXIAApA8gBIRggCEKAAX0iCEIAUw0AIAAgCSAKIAsgDCANIA4gDyAQIBEgEiATIBQgFSAWIBcgGBADA0AgASkDACEJIAEpAwghCiABKQMQIQsgASkDGCEMIAEpAyAhDSABKQMoIQ4gASkDMCEPIAEpAzghECABKQNAIREgASkDSCESIAEpA1AhEyABKQNYIRQgASkDYCEVIAEpA2ghFiABKQNwIRcgASkDeCEYIAFBgAFqIQEgCEKAAX0iCEIAUwRAIAAgCTcDUCAAIAo3A1ggACALNwNgIAAgDDcDaCAAIA03A3AgACAONwN4IAAgDzcDgAEgACAQNwOIASAAIBE3A5ABIAAgEjcDmAEgACATNwOgASAAIBQ3A6gBIAAgFTcDsAEgACAWNwO4ASAAIBc3A8ABIAAgGDcDyAEMAgsgACAJIAogCyAMIA0gDiAPIBAgESASIBMgFCAVIBYgFyAYEAMMAAsLIANBAUYEQCAEQv8AgyEIQoABIAhCB4NCA4aGIQcCQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgCKdBA3YODwMEBQYHCAkKCwwNDg8QAQILCyAHIBeEIRdCACEHCyAHIBiEIRhCACEHIAAgCSAKIAsgDCANIA4gDyAQIBEgEiATIBQgFSAWIBcgGBADIAAgBDcDQEIAIQlCACEKQgAhC0IAIQxCACENQgAhDkIAIQ9CACEQQgAhEUIAIRJCACETQgAhFEIAIRVCACEWQgAhF0IAIRgLIAcgCYQhCUIAIQcLIAcgCoQhCkIAIQcLIAcgC4QhC0IAIQcLIAcgDIQhDEIAIQcLIAcgDYQhDUIAIQcLIAcgDoQhDkIAIQcLIAcgD4QhD0IAIQcLIAcgEIQhEEIAIQcLIAcgEYQhEUIAIQcLIAcgEoQhEkIAIQcLIAcgE4QhE0IAIQcLIAcgFIQhFEIAIQcLIAcgFYQhFUIAIQcLIAcgFoQhFkIAIQcLIARCPYggBUIDiHwQACEXIARCCH4QACEYIAAgCSAKIAsgDCANIA4gDyAQIBEgEiATIBQgFSAWIBcgGBADIAAgACkDABAANwMAIAAgACkDCBAANwMIIAAgACkDEBAANwMQIAAgACkDGBAANwMYIAAgACkDIBAANwMgIAAgACkDKBAANwMoIAAgACkDMBAANwMwIAAgACkDOBAANwM4Cws=");
  }
});

// wasm-module:./sha512.wat
var bytes = require_sha512();
var compiled = new WebAssembly.Module(bytes);
module.exports = (imports) => {
  const instance = new WebAssembly.Instance(compiled, imports);
  return instance.exports;
};

},{}],505:[function(require,module,exports){
const set = require('unordered-set')

module.exports = opts => new ShuffledPriorityQueue(opts)

class ShuffledPriorityQueue {
  constructor (opts) {
    this.priorities = []
    this.equals = (opts && opts.equals) || null
  }

  get length () {
    return this.priorities.reduce(add, 0)
  }

  [Symbol.iterator] () {
    return new Iterator(this)
  }

  head () {
    for (let i = this.priorities.length - 1; i >= 0; i--) {
      const q = this.priorities[i]
      if (q.length) return shuffle(q, 0)
    }
    return null
  }

  tail () {
    for (let i = 0; i < this.priorities.length; i++) {
      const q = this.priorities[i]
      if (q.length) return shuffle(q, 0)
    }
    return null
  }

  prev (prev) {
    if (!prev) return this.tail()
    return next(this.priorities, prev, 1)
  }

  next (prev) {
    if (!prev) return this.head()
    return next(this.priorities, prev, -1)
  }

  shift () {
    return this.remove(this.head())
  }

  pop () {
    return this.remove(this.tail())
  }

  add (val) {
    const prio = val.priority || 0
    while (prio >= this.priorities.length) this.priorities.push([])
    set.add(this.priorities[prio], val)
    return val
  }

  remove (val) {
    if (!val) return null

    if (val._index === undefined) {
      val = this.find(val)
      if (!val) return null
    }

    return set.remove(this.priorities[val.priority || 0], val)
  }

  has (val) {
    if (val._index === undefined) return this.find(val)
    const priority = val.priority || 0
    if (priority >= this.priorities.length) return false
    return set.has(this.priorities[priority], val)
  }

  find (val) {
    if (val._index !== undefined) return val

    const prio = val.priority || 0
    const qs = this.priorities
    if (prio >= qs.length) return null

    const q = qs[prio]

    for (let i = 0; i < q.length; i++) {
      if (this.equals(q[i], val)) return q[i]
    }

    return null
  }
}

class Iterator {
  constructor (queue) {
    this.prev = null
    this.queue = queue
  }

  next () {
    const next = this.queue.next(this.prev)
    this.prev = next
    return { done: !next, value: next }
  }
}

function shuffle (q, i) {
  const ran = i + Math.floor(Math.random() * (q.length - i))
  set.swap(q, q[ran], q[i])
  return q[i]
}

function next (queues, prev, inc) {
  let i = prev.priority || 0
  let j = (prev._index || 0) + 1

  while (true) {
    if (i < 0 || i >= queues.length) return null
    const q = queues[i]

    if (j >= q.length) {
      i += inc
      j = 0
      continue
    }

    return shuffle(q, j)
  }
}

function add (len, b) {
  return len + b.length
}

},{"unordered-set":589}],506:[function(require,module,exports){
module.exports = class Signal {
  constructor () {
    this._resolve = null
    this._reject = null
    this._promise = null
    this._bind = bind.bind(this)
    this._onerror = clear.bind(this)
    this._onsuccess = clear.bind(this, null)
    this._timers = new Set()
  }

  wait (max) {
    if (!this._promise) {
      this._promise = new Promise(this._bind)
      this._promise.then(this._onsuccess).catch(this._onerror)
    }
    if (max) return this._sleep(max)
    return this._promise
  }

  _sleep (max) {
    const s = new Promise((resolve, reject) => {
      const done = () => {
        this._timers.delete(state)
        resolve(true)
      }
      const id = setTimeout(done, max)
      const state = { id, resolve, reject }
      this._timers.add(state)
    })

    return s
  }

  notify (err) {
    if (!this._promise) return
    const resolve = this._resolve
    const reject = this._reject
    this._promise = null
    if (err) reject(err)
    else resolve(true)
  }
}

function clear (err) {
  for (const { id, resolve, reject } of this._timers) {
    clearTimeout(id)
    if (err) reject(err)
    else resolve(true)
  }
  this._timers.clear()
}

function bind (resolve, reject) {
  this._resolve = resolve
  this._reject = reject
}

},{}],507:[function(require,module,exports){
var varint = require('varint')
exports.encode = function encode (v, b, o) {
  v = v >= 0 ? v*2 : v*-2 - 1
  var r = varint.encode(v, b, o)
  encode.bytes = varint.encode.bytes
  return r
}
exports.decode = function decode (b, o) {
  var v = varint.decode(b, o)
  decode.bytes = varint.decode.bytes
  return v & 1 ? (v+1) / -2 : v / 2
}

exports.encodingLength = function (v) {
  return varint.encodingLength(v >= 0 ? v*2 : v*-2 - 1)
}

},{"varint":594}],508:[function(require,module,exports){
const b4a = require('b4a')
const scalar = require('./scalar')

function view (buf, n) {
  if (n === buf.BYTES_PER_ELEMENT) return buf

  let TypedArray

  if (n === 1) TypedArray = Uint8Array
  else if (n === 2) TypedArray = Uint16Array
  else TypedArray = Uint32Array

  return new TypedArray(buf.buffer, buf.byteOffset, buf.byteLength / n)
}

function unary (u8, u16 = u8, u32 = u16) {
  return function unary (buf, result = b4a.allocUnsafe(buf.byteLength)) {
    if (buf.byteLength % 16 !== 0) {
      throw new Error('Buffer length must be a multiple of 16')
    }

    if (buf.byteLength !== result.byteLength) {
      throw new Error('Length of result buffer is insufficient')
    }

    const n = buf.BYTES_PER_ELEMENT

    if (n === 1) u8(buf, view(result, n))
    else if (n === 2) u16(buf, view(result, n))
    else u32(buf, view(result, n))

    return result
  }
}

function binary (u8, u16 = u8, u32 = u16) {
  return function binary (a, b, result = b4a.allocUnsafe(a.byteLength)) {
    if (a.byteLength % 16 !== 0) {
      throw new Error('Buffer length must be a multiple of 16')
    }

    if (a.byteLength !== b.byteLength || a.byteLength !== result.byteLength) {
      throw new Error('Buffers must be the same length')
    }

    const n = a.BYTES_PER_ELEMENT

    if (n === 1) u8(a, b, view(result, n))
    else if (n === 2) u16(a, b, view(result, n))
    else u32(a, b, view(result, n))

    return result
  }
}

function reduce (u8, u16 = u8, u32 = u16) {
  return function reduce (buf) {
    if (buf.byteLength % 16 !== 0) {
      throw new Error('Buffer length must be a multiple of 16')
    }

    const n = buf.BYTES_PER_ELEMENT

    if (n === 1) return u8(buf)
    if (n === 2) return u16(buf)
    return u32(buf)
  }
}

exports.allo = function allo (buf) {
  if (buf.byteLength % 16 !== 0) {
    throw new Error('Buffer length must be a multiple of 16')
  }

  const m = 2 ** (buf.BYTES_PER_ELEMENT * 8) - 1

  for (let i = 0, n = buf.length; i < n; i++) {
    if (buf[i] !== m) return false
  }

  return true
}

exports.allz = function allz (buf) {
  if (buf.byteLength % 16 !== 0) {
    throw new Error('Buffer length must be a multiple of 16')
  }

  for (let i = 0, n = buf.length; i < n; i++) {
    if (buf[i] !== 0) return false
  }

  return true
}

exports.and = binary(
  (a, b, result) => {
    for (let i = 0, n = result.length; i < n; i++) {
      result[i] = a[i] & b[i]
    }
  }
)

exports.clear = binary(
  (a, b, result) => {
    for (let i = 0, n = result.length; i < n; i++) {
      result[i] = a[i] & ~b[i]
    }
  }
)

exports.clo = unary(
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = 24 - scalar.clo(buf[i])
    }
  },
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = 16 - scalar.clo(buf[i])
    }
  },
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = scalar.clo(buf[i])
    }
  }
)

exports.clz = unary(
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = 24 - scalar.clz(buf[i])
    }
  },
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = 16 - scalar.clz(buf[i])
    }
  },
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = scalar.clz(buf[i])
    }
  }
)

exports.cnt = unary(
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = scalar.cnt(buf[i]) & 0xff
    }
  },
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = scalar.cnt(buf[i]) & 0xffff
    }
  },
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = scalar.cnt(buf[i])
    }
  }
)

exports.cto = unary(
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = Math.min(scalar.cto(buf[i]), 8)
    }
  },
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = Math.min(scalar.cto(buf[i]), 16)
    }
  },
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = scalar.cto(buf[i])
    }
  }
)

exports.ctz = unary(
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = Math.min(scalar.ctz(buf[i]), 8)
    }
  },
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = Math.min(scalar.ctz(buf[i]), 16)
    }
  },
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = scalar.ctz(buf[i])
    }
  }
)

exports.not = unary(
  (buf, result) => {
    for (let i = 0, n = buf.length; i < n; i++) {
      result[i] = ~buf[i]
    }
  }
)

exports.or = binary(
  (a, b, result) => {
    for (let i = 0, n = result.length; i < n; i++) {
      result[i] = a[i] | b[i]
    }
  }
)

exports.sum = reduce(
  (buf) => {
    let result = 0n

    for (let i = 0, n = buf.length; i < n; i++) {
      result += BigInt(buf[i])
    }

    return result
  }
)

exports.xor = binary(
  (a, b, result) => {
    for (let i = 0, n = result.length; i < n; i++) {
      result[i] = a[i] ^ b[i]
    }
  }
)

},{"./scalar":509,"b4a":102}],509:[function(require,module,exports){
const clz = exports.clz = function clz (n) {
  return Math.clz32(n)
}

exports.clo = function clo (n) {
  return clz(~n)
}

const ctz = exports.ctz = function ctz (n) {
  return 32 - (n === 0 ? 0 : (clz(n & -n) + 1))
}

exports.cto = function cto (n) {
  return ctz(~n)
}

exports.cnt = function cnt (n) {
  n = n - ((n >>> 1) & 0x55555555)
  n = (n & 0x33333333) + ((n >>> 2) & 0x33333333)
  n = (n + (n >>> 4)) & 0x0f0f0f0f
  n = (n * 0x01010101) >>> 24
  return n
}

},{}],510:[function(require,module,exports){
module.exports = fallback

function _add (a, b) {
  var rl = a.l + b.l
  var a2 = {
    h: a.h + b.h + (rl / 2 >>> 31) >>> 0,
    l: rl >>> 0
  }
  a.h = a2.h
  a.l = a2.l
}

function _xor (a, b) {
  a.h ^= b.h
  a.h >>>= 0
  a.l ^= b.l
  a.l >>>= 0
}

function _rotl (a, n) {
  var a2 = {
    h: a.h << n | a.l >>> (32 - n),
    l: a.l << n | a.h >>> (32 - n)
  }
  a.h = a2.h
  a.l = a2.l
}

function _rotl32 (a) {
  var al = a.l
  a.l = a.h
  a.h = al
}

function _compress (v0, v1, v2, v3) {
  _add(v0, v1)
  _add(v2, v3)
  _rotl(v1, 13)
  _rotl(v3, 16)
  _xor(v1, v0)
  _xor(v3, v2)
  _rotl32(v0)
  _add(v2, v1)
  _add(v0, v3)
  _rotl(v1, 17)
  _rotl(v3, 21)
  _xor(v1, v2)
  _xor(v3, v0)
  _rotl32(v2)
}

function _get_int (a, offset) {
  return (a[offset + 3] << 24) | (a[offset + 2] << 16) | (a[offset + 1] << 8) | a[offset]
}

function fallback (out, m, key) { // modified from https://github.com/jedisct1/siphash-js to use uint8arrays
  var k0 = {h: _get_int(key, 4), l: _get_int(key, 0)}
  var k1 = {h: _get_int(key, 12), l: _get_int(key, 8)}
  var v0 = {h: k0.h, l: k0.l}
  var v2 = k0
  var v1 = {h: k1.h, l: k1.l}
  var v3 = k1
  var mi
  var mp = 0
  var ml = m.length
  var ml7 = ml - 7
  var buf = new Uint8Array(new ArrayBuffer(8))

  _xor(v0, {h: 0x736f6d65, l: 0x70736575})
  _xor(v1, {h: 0x646f7261, l: 0x6e646f6d})
  _xor(v2, {h: 0x6c796765, l: 0x6e657261})
  _xor(v3, {h: 0x74656462, l: 0x79746573})

  while (mp < ml7) {
    mi = {h: _get_int(m, mp + 4), l: _get_int(m, mp)}
    _xor(v3, mi)
    _compress(v0, v1, v2, v3)
    _compress(v0, v1, v2, v3)
    _xor(v0, mi)
    mp += 8
  }

  buf[7] = ml
  var ic = 0
  while (mp < ml) {
    buf[ic++] = m[mp++]
  }
  while (ic < 7) {
    buf[ic++] = 0
  }

  mi = {
    h: buf[7] << 24 | buf[6] << 16 | buf[5] << 8 | buf[4],
    l: buf[3] << 24 | buf[2] << 16 | buf[1] << 8 | buf[0]
  }

  _xor(v3, mi)
  _compress(v0, v1, v2, v3)
  _compress(v0, v1, v2, v3)
  _xor(v0, mi)
  _xor(v2, { h: 0, l: 0xff })
  _compress(v0, v1, v2, v3)
  _compress(v0, v1, v2, v3)
  _compress(v0, v1, v2, v3)
  _compress(v0, v1, v2, v3)

  var h = v0
  _xor(h, v1)
  _xor(h, v2)
  _xor(h, v3)

  out[0] = h.l & 0xff
  out[1] = (h.l >> 8) & 0xff
  out[2] = (h.l >> 16) & 0xff
  out[3] = (h.l >> 24) & 0xff
  out[4] = h.h & 0xff
  out[5] = (h.h >> 8) & 0xff
  out[6] = (h.h >> 16) & 0xff
  out[7] = (h.h >> 24) & 0xff
}

},{}],511:[function(require,module,exports){
var assert = require('nanoassert')
var wasm = typeof WebAssembly !== 'undefined' && require('./siphash24')()
var fallback = require('./fallback')

module.exports = siphash24

var BYTES = siphash24.BYTES = 8
var KEYBYTES = siphash24.KEYBYTES = 16

siphash24.WASM_SUPPORTED = !!wasm
siphash24.WASM_LOADED = !!wasm

var memory = new Uint8Array(wasm ? wasm.memory.buffer : 0)

function siphash24 (data, key, out, noAssert) {
  if (!out) out = new Uint8Array(8)

  if (noAssert !== true) {
    assert(out.length >= BYTES, 'output must be at least ' + BYTES)
    assert(key.length >= KEYBYTES, 'key must be at least ' + KEYBYTES)
  }

  if (wasm) {
    if (data.length + 24 > memory.length) realloc(data.length + 24)
    memory.set(key, 8)
    memory.set(data, 24)
    wasm.siphash(24, data.length)
    out.set(memory.subarray(0, 8))
  } else {
    fallback(out, data, key)
  }

  return out
}

function realloc (size) {
  wasm.memory.grow(Math.max(0, Math.ceil(Math.abs(size - memory.length) / 65536)))
  memory = new Uint8Array(wasm.memory.buffer)
}

},{"./fallback":510,"./siphash24":512,"nanoassert":390}],512:[function(require,module,exports){
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __toBinary = /* @__PURE__ */ (() => {
  var table = new Uint8Array(128);
  for (var i = 0; i < 64; i++)
    table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    var n = base64.length, bytes2 = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
    for (var i2 = 0, j = 0; i2 < n; ) {
      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes2[j++] = c0 << 2 | c1 >> 4;
      bytes2[j++] = c1 << 4 | c2 >> 2;
      bytes2[j++] = c2 << 6 | c3;
    }
    return bytes2;
  };
})();

// wasm-binary:./siphash24.wat
var require_siphash24 = __commonJS({
  "wasm-binary:./siphash24.wat"(exports2, module2) {
    module2.exports = __toBinary("AGFzbQEAAAABBgFgAn9/AAMCAQAFBQEBCpBOBxQCBm1lbW9yeQIAB3NpcGhhc2gAAArdCAHaCAIIfgJ/QvXKzYPXrNu38wAhAkLt3pHzlszct+QAIQNC4eSV89bs2bzsACEEQvPK0cunjNmy9AAhBUEIKQMAIQdBECkDACEIIAGtQjiGIQYgAUEHcSELIAAgAWogC2shCiAFIAiFIQUgBCAHhSEEIAMgCIUhAyACIAeFIQICQANAIAAgCkYNASAAKQMAIQkgBSAJhSEFIAIgA3whAiADQg2JIQMgAyAChSEDIAJCIIkhAiAEIAV8IQQgBUIQiSEFIAUgBIUhBSACIAV8IQIgBUIViSEFIAUgAoUhBSAEIAN8IQQgA0IRiSEDIAMgBIUhAyAEQiCJIQQgAiADfCECIANCDYkhAyADIAKFIQMgAkIgiSECIAQgBXwhBCAFQhCJIQUgBSAEhSEFIAIgBXwhAiAFQhWJIQUgBSAChSEFIAQgA3whBCADQhGJIQMgAyAEhSEDIARCIIkhBCACIAmFIQIgAEEIaiEADAALCwJAAkACQAJAAkACQAJAAkAgCw4HBwYFBAMCAQALIAYgADEABkIwhoQhBgsgBiAAMQAFQiiGhCEGCyAGIAAxAARCIIaEIQYLIAYgADEAA0IYhoQhBgsgBiAAMQACQhCGhCEGCyAGIAAxAAFCCIaEIQYLIAYgADEAAIQhBgsgBSAGhSEFIAIgA3whAiADQg2JIQMgAyAChSEDIAJCIIkhAiAEIAV8IQQgBUIQiSEFIAUgBIUhBSACIAV8IQIgBUIViSEFIAUgAoUhBSAEIAN8IQQgA0IRiSEDIAMgBIUhAyAEQiCJIQQgAiADfCECIANCDYkhAyADIAKFIQMgAkIgiSECIAQgBXwhBCAFQhCJIQUgBSAEhSEFIAIgBXwhAiAFQhWJIQUgBSAChSEFIAQgA3whBCADQhGJIQMgAyAEhSEDIARCIIkhBCACIAaFIQIgBEL/AYUhBCACIAN8IQIgA0INiSEDIAMgAoUhAyACQiCJIQIgBCAFfCEEIAVCEIkhBSAFIASFIQUgAiAFfCECIAVCFYkhBSAFIAKFIQUgBCADfCEEIANCEYkhAyADIASFIQMgBEIgiSEEIAIgA3whAiADQg2JIQMgAyAChSEDIAJCIIkhAiAEIAV8IQQgBUIQiSEFIAUgBIUhBSACIAV8IQIgBUIViSEFIAUgAoUhBSAEIAN8IQQgA0IRiSEDIAMgBIUhAyAEQiCJIQQgAiADfCECIANCDYkhAyADIAKFIQMgAkIgiSECIAQgBXwhBCAFQhCJIQUgBSAEhSEFIAIgBXwhAiAFQhWJIQUgBSAChSEFIAQgA3whBCADQhGJIQMgAyAEhSEDIARCIIkhBCACIAN8IQIgA0INiSEDIAMgAoUhAyACQiCJIQIgBCAFfCEEIAVCEIkhBSAFIASFIQUgAiAFfCECIAVCFYkhBSAFIAKFIQUgBCADfCEEIANCEYkhAyADIASFIQMgBEIgiSEEQQAgAiADIAQgBYWFhTcDAAs=");
  }
});

// wasm-module:./siphash24.wat
var bytes = require_siphash24();
var compiled = new WebAssembly.Module(bytes);
module.exports = (imports) => {
  const instance = new WebAssembly.Instance(compiled, imports);
  return instance.exports;
};

},{}],513:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"./crypto_stream_chacha20":528,"./crypto_verify":529,"./internal/poly1305":534,"dup":35,"nanoassert":390}],514:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"./crypto_verify":529,"dup":36,"nanoassert":390,"sha512-universal":501}],515:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./crypto_generichash":516,"./crypto_hash":517,"./crypto_scalarmult":522,"./crypto_secretbox":523,"./crypto_stream":527,"./randombytes":536,"dup":37,"nanoassert":390,"xsalsa20":600}],516:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"blake2b":125,"dup":38}],517:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39,"nanoassert":390,"sha512-universal":501}],518:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"dup":40,"nanoassert":390,"sha256-universal":497}],519:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"./randombytes":536,"blake2b":125,"dup":41,"nanoassert":390}],520:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"./crypto_generichash":516,"./crypto_scalarmult":522,"./randombytes":536,"dup":42,"nanoassert":390}],521:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"./crypto_verify":529,"./internal/poly1305":534,"dup":43,"nanoassert":390}],522:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"./internal/ed25519":532,"dup":44}],523:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"./crypto_onetimeauth":521,"./crypto_stream":527,"dup":45,"nanoassert":390}],524:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"./crypto_stream_chacha20":528,"./helpers":530,"./internal/hchacha20":533,"./internal/poly1305":534,"./randombytes":536,"dup":46,"nanoassert":390}],525:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"dup":47,"siphash24":511}],526:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"./crypto_hash":517,"./crypto_hash.js":517,"./crypto_scalarmult.js":522,"./crypto_verify":529,"./internal/ed25519":532,"./randombytes":536,"dup":48,"nanoassert":390}],527:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49,"xsalsa20":600}],528:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"chacha20-universal":173,"dup":50,"nanoassert":390}],529:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],530:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./crypto_verify":529,"dup":52,"nanoassert":390}],531:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./crypto_aead":513,"./crypto_auth":514,"./crypto_box":515,"./crypto_generichash":516,"./crypto_hash":517,"./crypto_hash_sha256":518,"./crypto_kdf":519,"./crypto_kx":520,"./crypto_onetimeauth":521,"./crypto_scalarmult":522,"./crypto_secretbox":523,"./crypto_secretstream":524,"./crypto_shorthash":525,"./crypto_sign":526,"./crypto_stream":527,"./crypto_stream_chacha20":528,"./crypto_verify":529,"./helpers":530,"./memory":535,"./randombytes":536,"dup":53}],532:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}],533:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"../memory":535,"dup":55,"nanoassert":390}],534:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"dup":56}],535:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"dup":57}],536:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58,"nanoassert":390}],537:[function(require,module,exports){
const sodium = require('sodium-universal')
const b4a = require('b4a')

const ABYTES = sodium.crypto_secretstream_xchacha20poly1305_ABYTES
const TAG_MESSAGE = sodium.crypto_secretstream_xchacha20poly1305_TAG_MESSAGE
const TAG_FINAL = sodium.crypto_secretstream_xchacha20poly1305_TAG_FINAL
const STATEBYTES = sodium.crypto_secretstream_xchacha20poly1305_STATEBYTES
const HEADERBYTES = sodium.crypto_secretstream_xchacha20poly1305_HEADERBYTES
const KEYBYTES = sodium.crypto_secretstream_xchacha20poly1305_KEYBYTES
const TAG_FINAL_BYTE = b4a.isBuffer(TAG_FINAL) ? TAG_FINAL[0] : TAG_FINAL

const EMPTY = b4a.alloc(0)
const TAG = b4a.alloc(1)

class Push {
  constructor (key, state = b4a.allocUnsafeSlow(STATEBYTES), header = b4a.allocUnsafeSlow(HEADERBYTES)) {
    if (!TAG_FINAL) throw new Error('JavaScript sodium version needs to support crypto_secretstream_xchacha20poly')

    this.key = key
    this.state = state
    this.header = header

    sodium.crypto_secretstream_xchacha20poly1305_init_push(this.state, this.header, this.key)
  }

  next (message, cipher = b4a.allocUnsafe(message.byteLength + ABYTES)) {
    sodium.crypto_secretstream_xchacha20poly1305_push(this.state, cipher, message, null, TAG_MESSAGE)
    return cipher
  }

  final (message = EMPTY, cipher = b4a.allocUnsafe(ABYTES)) {
    sodium.crypto_secretstream_xchacha20poly1305_push(this.state, cipher, message, null, TAG_FINAL)
    return cipher
  }
}

class Pull {
  constructor (key, state = b4a.allocUnsafeSlow(STATEBYTES)) {
    if (!TAG_FINAL) throw new Error('JavaScript sodium version needs to support crypto_secretstream_xchacha20poly')

    this.key = key
    this.state = state
    this.final = false
  }

  init (header) {
    sodium.crypto_secretstream_xchacha20poly1305_init_pull(this.state, header, this.key)
  }

  next (cipher, message = b4a.allocUnsafe(cipher.byteLength - ABYTES)) {
    sodium.crypto_secretstream_xchacha20poly1305_pull(this.state, message, TAG, cipher, null)
    this.final = TAG[0] === TAG_FINAL_BYTE
    return message
  }
}

function keygen (buf = b4a.alloc(KEYBYTES)) {
  sodium.crypto_secretstream_xchacha20poly1305_keygen(buf)
  return buf
}

module.exports = {
  keygen,
  KEYBYTES,
  ABYTES,
  STATEBYTES,
  HEADERBYTES,
  Push,
  Pull
}

},{"b4a":102,"sodium-universal":556}],538:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"./crypto_stream_chacha20":553,"./crypto_verify":554,"./internal/poly1305":559,"dup":35,"nanoassert":390}],539:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"./crypto_verify":554,"dup":36,"nanoassert":390,"sha512-universal":501}],540:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./crypto_generichash":541,"./crypto_hash":542,"./crypto_scalarmult":547,"./crypto_secretbox":548,"./crypto_stream":552,"./randombytes":561,"dup":37,"nanoassert":390,"xsalsa20":600}],541:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"blake2b":125,"dup":38}],542:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39,"nanoassert":390,"sha512-universal":501}],543:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"dup":40,"nanoassert":390,"sha256-universal":497}],544:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"./randombytes":561,"blake2b":125,"dup":41,"nanoassert":390}],545:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"./crypto_generichash":541,"./crypto_scalarmult":547,"./randombytes":561,"dup":42,"nanoassert":390}],546:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"./crypto_verify":554,"./internal/poly1305":559,"dup":43,"nanoassert":390}],547:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"./internal/ed25519":557,"dup":44}],548:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"./crypto_onetimeauth":546,"./crypto_stream":552,"dup":45,"nanoassert":390}],549:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"./crypto_stream_chacha20":553,"./helpers":555,"./internal/hchacha20":558,"./internal/poly1305":559,"./randombytes":561,"dup":46,"nanoassert":390}],550:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"dup":47,"siphash24":511}],551:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"./crypto_hash":542,"./crypto_hash.js":542,"./crypto_scalarmult.js":547,"./crypto_verify":554,"./internal/ed25519":557,"./randombytes":561,"dup":48,"nanoassert":390}],552:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49,"xsalsa20":600}],553:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"chacha20-universal":173,"dup":50,"nanoassert":390}],554:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],555:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./crypto_verify":554,"dup":52,"nanoassert":390}],556:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./crypto_aead":538,"./crypto_auth":539,"./crypto_box":540,"./crypto_generichash":541,"./crypto_hash":542,"./crypto_hash_sha256":543,"./crypto_kdf":544,"./crypto_kx":545,"./crypto_onetimeauth":546,"./crypto_scalarmult":547,"./crypto_secretbox":548,"./crypto_secretstream":549,"./crypto_shorthash":550,"./crypto_sign":551,"./crypto_stream":552,"./crypto_stream_chacha20":553,"./crypto_verify":554,"./helpers":555,"./memory":560,"./randombytes":561,"dup":53}],557:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}],558:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"../memory":560,"dup":55,"nanoassert":390}],559:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"dup":56}],560:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"dup":57}],561:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58,"nanoassert":390}],562:[function(require,module,exports){
var tick = 1
var maxTick = 65535
var resolution = 4
var timer
var inc = function () {
  tick = (tick + 1) & maxTick
}


module.exports = function (seconds) {
  if (!timer) {
    timer = setInterval(inc, (1000 / resolution) | 0)
    if (timer.unref) timer.unref()
  }

  var size = resolution * (seconds || 5)
  var buffer = [0]
  var pointer = 1
  var last = (tick - 1) & maxTick

  return function (delta) {
    var dist = (tick - last) & maxTick
    if (dist > size) dist = size
    last = tick

    while (dist--) {
      if (pointer === size) pointer = 0
      buffer[pointer] = buffer[pointer === 0 ? size - 1 : pointer - 1]
      pointer++
    }

    if (delta) buffer[pointer - 1] += delta

    var top = buffer[pointer - 1]
    var btm = buffer.length < size ? 0 : buffer[pointer === size ? 0 : pointer]

    return buffer.length < resolution ? top : (top - btm) * resolution / buffer.length
  }
}

},{}],563:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":258,"inherits":369,"readable-stream/lib/_stream_duplex.js":565,"readable-stream/lib/_stream_passthrough.js":566,"readable-stream/lib/_stream_readable.js":567,"readable-stream/lib/_stream_transform.js":568,"readable-stream/lib/_stream_writable.js":569,"readable-stream/lib/internal/streams/end-of-stream.js":573,"readable-stream/lib/internal/streams/pipeline.js":575}],564:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],565:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
};
/*</replacement>*/

module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;
  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;
    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

// the no-half-open enforcer
function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":567,"./_stream_writable":569,"_process":437,"inherits":369}],566:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":568,"inherits":369}],567:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

module.exports = Readable;

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}
function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'end' (and potentially 'finish')
  this.autoDestroy = !!options.autoDestroy;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options);

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex);

  // legacy
  this.readable = true;
  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }
  Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;
  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }
  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  }

  // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.
  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }
  return er;
}
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder;
  // If setEncoding(null), decoder.encoding equals utf8
  this._readableState.encoding = this._readableState.decoder.encoding;

  // Iterate over current buffer to convert already stored Buffers:
  var p = this._readableState.buffer.head;
  var content = '';
  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }
  this._readableState.buffer.clear();
  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
};

// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;
    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}
function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);
  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  }

  // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.
  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);
    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
      hasUnpiped: false
    });
    return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;
  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0;

    // Try start flowing on next tick if stream isn't explicitly paused
    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);
      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);
  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;
  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;

    // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()
    state.flowing = !state.readableListening;
    resume(this, state);
  }
  state.paused = false;
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  debug('resume', state.reading);
  if (!state.reading) {
    stream.read(0);
  }
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  this._readableState.paused = true;
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null);
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;
  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }
    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return this;
};
if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }
    return createReadableStreamAsyncIterator(this);
  };
}
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
});

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);
  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length);

  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;
      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}
if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }
    return from(Readable, iterable, opts);
  };
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":564,"./_stream_duplex":565,"./internal/streams/async_iterator":570,"./internal/streams/buffer_list":571,"./internal/streams/destroy":572,"./internal/streams/from":574,"./internal/streams/state":576,"./internal/streams/stream":577,"_process":437,"buffer":164,"events":258,"inherits":369,"string_decoder/":579,"util":132}],568:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;
var _require$codes = require('../errors').codes,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":564,"./_stream_duplex":565,"inherits":369}],569:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'finish' (and potentially 'end')
  this.autoDestroy = !!options.autoDestroy;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END();
  // TODO: defer error events consistently everywhere, not just the cb
  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var er;
  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }
  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }
  return true;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  this._writableState.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
  return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      errorOrDestroy(stream, err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;
        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":564,"./_stream_duplex":565,"./internal/streams/destroy":572,"./internal/streams/state":576,"./internal/streams/stream":577,"_process":437,"buffer":164,"inherits":369,"util-deprecate":591}],570:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}
function readAndResolve(iter) {
  var resolve = iter[kLastResolve];
  if (resolve !== null) {
    var data = iter[kStream].read();
    // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'
    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}
function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },
  next: function next() {
    var _this = this;
    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];
    if (error !== null) {
      return Promise.reject(error);
    }
    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }
    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    }

    // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time
    var lastPromise = this[kLastPromise];
    var promise;
    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();
      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }
      promise = new Promise(this[kHandlePromise]);
    }
    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;
  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }
      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;
  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();
      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject];
      // reject if we are waiting for data in the Promise
      // returned by next() and store the error
      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }
      iterator[kError] = err;
      return;
    }
    var resolve = iterator[kLastResolve];
    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }
    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};
module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":573,"_process":437}],571:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _require = require('buffer'),
  Buffer = _require.Buffer;
var _require2 = require('util'),
  inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) ret += s + p.data;
      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    }

    // Consumes a specified amount of bytes or characters from the buffered data.
  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;
      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    }

    // Consumes a specified amount of characters from the buffered data.
  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Consumes a specified amount of bytes from the buffered data.
  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Make sure the linked list only shows the minimal necessary information.
  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);
  return BufferList;
}();
},{"buffer":164,"util":132}],572:[function(require,module,exports){
(function (process){(function (){
'use strict';

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.

  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":437}],573:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop() {}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
module.exports = eos;
},{"../../../errors":564}],574:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],575:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = require('../../../errors').codes,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
module.exports = pipeline;
},{"../../../errors":564,"./end-of-stream":573}],576:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":564}],577:[function(require,module,exports){
arguments[4][475][0].apply(exports,arguments)
},{"dup":475,"events":258}],578:[function(require,module,exports){
(function (global){(function (){
const { EventEmitter } = require('events-universal')
const STREAM_DESTROYED = new Error('Stream was destroyed')
const PREMATURE_CLOSE = new Error('Premature close')

const FIFO = require('fast-fifo')
const TextDecoder = require('text-decoder')

// if we do a future major, expect queue microtask to be there always, for now a bit defensive
const qmt = typeof queueMicrotask === 'undefined' ? fn => global.process.nextTick(fn) : queueMicrotask

/* eslint-disable no-multi-spaces */

// 29 bits used total (4 from shared, 14 from read, and 11 from write)
const MAX = ((1 << 29) - 1)

// Shared state
const OPENING       = 0b0001
const PREDESTROYING = 0b0010
const DESTROYING    = 0b0100
const DESTROYED     = 0b1000

const NOT_OPENING = MAX ^ OPENING
const NOT_PREDESTROYING = MAX ^ PREDESTROYING

// Read state (4 bit offset from shared state)
const READ_ACTIVE           = 0b00000000000001 << 4
const READ_UPDATING         = 0b00000000000010 << 4
const READ_PRIMARY          = 0b00000000000100 << 4
const READ_QUEUED           = 0b00000000001000 << 4
const READ_RESUMED          = 0b00000000010000 << 4
const READ_PIPE_DRAINED     = 0b00000000100000 << 4
const READ_ENDING           = 0b00000001000000 << 4
const READ_EMIT_DATA        = 0b00000010000000 << 4
const READ_EMIT_READABLE    = 0b00000100000000 << 4
const READ_EMITTED_READABLE = 0b00001000000000 << 4
const READ_DONE             = 0b00010000000000 << 4
const READ_NEXT_TICK        = 0b00100000000000 << 4
const READ_NEEDS_PUSH       = 0b01000000000000 << 4
const READ_READ_AHEAD       = 0b10000000000000 << 4

// Combined read state
const READ_FLOWING = READ_RESUMED | READ_PIPE_DRAINED
const READ_ACTIVE_AND_NEEDS_PUSH = READ_ACTIVE | READ_NEEDS_PUSH
const READ_PRIMARY_AND_ACTIVE = READ_PRIMARY | READ_ACTIVE
const READ_EMIT_READABLE_AND_QUEUED = READ_EMIT_READABLE | READ_QUEUED
const READ_RESUMED_READ_AHEAD = READ_RESUMED | READ_READ_AHEAD

const READ_NOT_ACTIVE             = MAX ^ READ_ACTIVE
const READ_NON_PRIMARY            = MAX ^ READ_PRIMARY
const READ_NON_PRIMARY_AND_PUSHED = MAX ^ (READ_PRIMARY | READ_NEEDS_PUSH)
const READ_PUSHED                 = MAX ^ READ_NEEDS_PUSH
const READ_PAUSED                 = MAX ^ READ_RESUMED
const READ_NOT_QUEUED             = MAX ^ (READ_QUEUED | READ_EMITTED_READABLE)
const READ_NOT_ENDING             = MAX ^ READ_ENDING
const READ_PIPE_NOT_DRAINED       = MAX ^ READ_FLOWING
const READ_NOT_NEXT_TICK          = MAX ^ READ_NEXT_TICK
const READ_NOT_UPDATING           = MAX ^ READ_UPDATING
const READ_NO_READ_AHEAD          = MAX ^ READ_READ_AHEAD
const READ_PAUSED_NO_READ_AHEAD   = MAX ^ READ_RESUMED_READ_AHEAD

// Write state (18 bit offset, 4 bit offset from shared state and 14 from read state)
const WRITE_ACTIVE     = 0b00000000001 << 18
const WRITE_UPDATING   = 0b00000000010 << 18
const WRITE_PRIMARY    = 0b00000000100 << 18
const WRITE_QUEUED     = 0b00000001000 << 18
const WRITE_UNDRAINED  = 0b00000010000 << 18
const WRITE_DONE       = 0b00000100000 << 18
const WRITE_EMIT_DRAIN = 0b00001000000 << 18
const WRITE_NEXT_TICK  = 0b00010000000 << 18
const WRITE_WRITING    = 0b00100000000 << 18
const WRITE_FINISHING  = 0b01000000000 << 18
const WRITE_CORKED     = 0b10000000000 << 18

const WRITE_NOT_ACTIVE    = MAX ^ (WRITE_ACTIVE | WRITE_WRITING)
const WRITE_NON_PRIMARY   = MAX ^ WRITE_PRIMARY
const WRITE_NOT_FINISHING = MAX ^ (WRITE_ACTIVE | WRITE_FINISHING)
const WRITE_DRAINED       = MAX ^ WRITE_UNDRAINED
const WRITE_NOT_QUEUED    = MAX ^ WRITE_QUEUED
const WRITE_NOT_NEXT_TICK = MAX ^ WRITE_NEXT_TICK
const WRITE_NOT_UPDATING  = MAX ^ WRITE_UPDATING
const WRITE_NOT_CORKED    = MAX ^ WRITE_CORKED

// Combined shared state
const ACTIVE = READ_ACTIVE | WRITE_ACTIVE
const NOT_ACTIVE = MAX ^ ACTIVE
const DONE = READ_DONE | WRITE_DONE
const DESTROY_STATUS = DESTROYING | DESTROYED | PREDESTROYING
const OPEN_STATUS = DESTROY_STATUS | OPENING
const AUTO_DESTROY = DESTROY_STATUS | DONE
const NON_PRIMARY = WRITE_NON_PRIMARY & READ_NON_PRIMARY
const ACTIVE_OR_TICKING = WRITE_NEXT_TICK | READ_NEXT_TICK
const TICKING = ACTIVE_OR_TICKING & NOT_ACTIVE
const IS_OPENING = OPEN_STATUS | TICKING

// Combined shared state and read state
const READ_PRIMARY_STATUS = OPEN_STATUS | READ_ENDING | READ_DONE
const READ_STATUS = OPEN_STATUS | READ_DONE | READ_QUEUED
const READ_ENDING_STATUS = OPEN_STATUS | READ_ENDING | READ_QUEUED
const READ_READABLE_STATUS = OPEN_STATUS | READ_EMIT_READABLE | READ_QUEUED | READ_EMITTED_READABLE
const SHOULD_NOT_READ = OPEN_STATUS | READ_ACTIVE | READ_ENDING | READ_DONE | READ_NEEDS_PUSH | READ_READ_AHEAD
const READ_BACKPRESSURE_STATUS = DESTROY_STATUS | READ_ENDING | READ_DONE
const READ_UPDATE_SYNC_STATUS = READ_UPDATING | OPEN_STATUS | READ_NEXT_TICK | READ_PRIMARY
const READ_NEXT_TICK_OR_OPENING = READ_NEXT_TICK | OPENING

// Combined write state
const WRITE_PRIMARY_STATUS = OPEN_STATUS | WRITE_FINISHING | WRITE_DONE
const WRITE_QUEUED_AND_UNDRAINED = WRITE_QUEUED | WRITE_UNDRAINED
const WRITE_QUEUED_AND_ACTIVE = WRITE_QUEUED | WRITE_ACTIVE
const WRITE_DRAIN_STATUS = WRITE_QUEUED | WRITE_UNDRAINED | OPEN_STATUS | WRITE_ACTIVE
const WRITE_STATUS = OPEN_STATUS | WRITE_ACTIVE | WRITE_QUEUED | WRITE_CORKED
const WRITE_PRIMARY_AND_ACTIVE = WRITE_PRIMARY | WRITE_ACTIVE
const WRITE_ACTIVE_AND_WRITING = WRITE_ACTIVE | WRITE_WRITING
const WRITE_FINISHING_STATUS = OPEN_STATUS | WRITE_FINISHING | WRITE_QUEUED_AND_ACTIVE | WRITE_DONE
const WRITE_BACKPRESSURE_STATUS = WRITE_UNDRAINED | DESTROY_STATUS | WRITE_FINISHING | WRITE_DONE
const WRITE_UPDATE_SYNC_STATUS = WRITE_UPDATING | OPEN_STATUS | WRITE_NEXT_TICK | WRITE_PRIMARY
const WRITE_DROP_DATA = WRITE_FINISHING | WRITE_DONE | DESTROY_STATUS

const asyncIterator = Symbol.asyncIterator || Symbol('asyncIterator')

class WritableState {
  constructor (stream, { highWaterMark = 16384, map = null, mapWritable, byteLength, byteLengthWritable } = {}) {
    this.stream = stream
    this.queue = new FIFO()
    this.highWaterMark = highWaterMark
    this.buffered = 0
    this.error = null
    this.pipeline = null
    this.drains = null // if we add more seldomly used helpers we might them into a subobject so its a single ptr
    this.byteLength = byteLengthWritable || byteLength || defaultByteLength
    this.map = mapWritable || map
    this.afterWrite = afterWrite.bind(this)
    this.afterUpdateNextTick = updateWriteNT.bind(this)
  }

  get ended () {
    return (this.stream._duplexState & WRITE_DONE) !== 0
  }

  push (data) {
    if ((this.stream._duplexState & WRITE_DROP_DATA) !== 0) return false
    if (this.map !== null) data = this.map(data)

    this.buffered += this.byteLength(data)
    this.queue.push(data)

    if (this.buffered < this.highWaterMark) {
      this.stream._duplexState |= WRITE_QUEUED
      return true
    }

    this.stream._duplexState |= WRITE_QUEUED_AND_UNDRAINED
    return false
  }

  shift () {
    const data = this.queue.shift()

    this.buffered -= this.byteLength(data)
    if (this.buffered === 0) this.stream._duplexState &= WRITE_NOT_QUEUED

    return data
  }

  end (data) {
    if (typeof data === 'function') this.stream.once('finish', data)
    else if (data !== undefined && data !== null) this.push(data)
    this.stream._duplexState = (this.stream._duplexState | WRITE_FINISHING) & WRITE_NON_PRIMARY
  }

  autoBatch (data, cb) {
    const buffer = []
    const stream = this.stream

    buffer.push(data)
    while ((stream._duplexState & WRITE_STATUS) === WRITE_QUEUED_AND_ACTIVE) {
      buffer.push(stream._writableState.shift())
    }

    if ((stream._duplexState & OPEN_STATUS) !== 0) return cb(null)
    stream._writev(buffer, cb)
  }

  update () {
    const stream = this.stream

    stream._duplexState |= WRITE_UPDATING

    do {
      while ((stream._duplexState & WRITE_STATUS) === WRITE_QUEUED) {
        const data = this.shift()
        stream._duplexState |= WRITE_ACTIVE_AND_WRITING
        stream._write(data, this.afterWrite)
      }

      if ((stream._duplexState & WRITE_PRIMARY_AND_ACTIVE) === 0) this.updateNonPrimary()
    } while (this.continueUpdate() === true)

    stream._duplexState &= WRITE_NOT_UPDATING
  }

  updateNonPrimary () {
    const stream = this.stream

    if ((stream._duplexState & WRITE_FINISHING_STATUS) === WRITE_FINISHING) {
      stream._duplexState = stream._duplexState | WRITE_ACTIVE
      stream._final(afterFinal.bind(this))
      return
    }

    if ((stream._duplexState & DESTROY_STATUS) === DESTROYING) {
      if ((stream._duplexState & ACTIVE_OR_TICKING) === 0) {
        stream._duplexState |= ACTIVE
        stream._destroy(afterDestroy.bind(this))
      }
      return
    }

    if ((stream._duplexState & IS_OPENING) === OPENING) {
      stream._duplexState = (stream._duplexState | ACTIVE) & NOT_OPENING
      stream._open(afterOpen.bind(this))
    }
  }

  continueUpdate () {
    if ((this.stream._duplexState & WRITE_NEXT_TICK) === 0) return false
    this.stream._duplexState &= WRITE_NOT_NEXT_TICK
    return true
  }

  updateCallback () {
    if ((this.stream._duplexState & WRITE_UPDATE_SYNC_STATUS) === WRITE_PRIMARY) this.update()
    else this.updateNextTick()
  }

  updateNextTick () {
    if ((this.stream._duplexState & WRITE_NEXT_TICK) !== 0) return
    this.stream._duplexState |= WRITE_NEXT_TICK
    if ((this.stream._duplexState & WRITE_UPDATING) === 0) qmt(this.afterUpdateNextTick)
  }
}

class ReadableState {
  constructor (stream, { highWaterMark = 16384, map = null, mapReadable, byteLength, byteLengthReadable } = {}) {
    this.stream = stream
    this.queue = new FIFO()
    this.highWaterMark = highWaterMark === 0 ? 1 : highWaterMark
    this.buffered = 0
    this.readAhead = highWaterMark > 0
    this.error = null
    this.pipeline = null
    this.byteLength = byteLengthReadable || byteLength || defaultByteLength
    this.map = mapReadable || map
    this.pipeTo = null
    this.afterRead = afterRead.bind(this)
    this.afterUpdateNextTick = updateReadNT.bind(this)
  }

  get ended () {
    return (this.stream._duplexState & READ_DONE) !== 0
  }

  pipe (pipeTo, cb) {
    if (this.pipeTo !== null) throw new Error('Can only pipe to one destination')
    if (typeof cb !== 'function') cb = null

    this.stream._duplexState |= READ_PIPE_DRAINED
    this.pipeTo = pipeTo
    this.pipeline = new Pipeline(this.stream, pipeTo, cb)

    if (cb) this.stream.on('error', noop) // We already error handle this so supress crashes

    if (isStreamx(pipeTo)) {
      pipeTo._writableState.pipeline = this.pipeline
      if (cb) pipeTo.on('error', noop) // We already error handle this so supress crashes
      pipeTo.on('finish', this.pipeline.finished.bind(this.pipeline)) // TODO: just call finished from pipeTo itself
    } else {
      const onerror = this.pipeline.done.bind(this.pipeline, pipeTo)
      const onclose = this.pipeline.done.bind(this.pipeline, pipeTo, null) // onclose has a weird bool arg
      pipeTo.on('error', onerror)
      pipeTo.on('close', onclose)
      pipeTo.on('finish', this.pipeline.finished.bind(this.pipeline))
    }

    pipeTo.on('drain', afterDrain.bind(this))
    this.stream.emit('piping', pipeTo)
    pipeTo.emit('pipe', this.stream)
  }

  push (data) {
    const stream = this.stream

    if (data === null) {
      this.highWaterMark = 0
      stream._duplexState = (stream._duplexState | READ_ENDING) & READ_NON_PRIMARY_AND_PUSHED
      return false
    }

    if (this.map !== null) {
      data = this.map(data)
      if (data === null) {
        stream._duplexState &= READ_PUSHED
        return this.buffered < this.highWaterMark
      }
    }

    this.buffered += this.byteLength(data)
    this.queue.push(data)

    stream._duplexState = (stream._duplexState | READ_QUEUED) & READ_PUSHED

    return this.buffered < this.highWaterMark
  }

  shift () {
    const data = this.queue.shift()

    this.buffered -= this.byteLength(data)
    if (this.buffered === 0) this.stream._duplexState &= READ_NOT_QUEUED
    return data
  }

  unshift (data) {
    const pending = [this.map !== null ? this.map(data) : data]
    while (this.buffered > 0) pending.push(this.shift())

    for (let i = 0; i < pending.length - 1; i++) {
      const data = pending[i]
      this.buffered += this.byteLength(data)
      this.queue.push(data)
    }

    this.push(pending[pending.length - 1])
  }

  read () {
    const stream = this.stream

    if ((stream._duplexState & READ_STATUS) === READ_QUEUED) {
      const data = this.shift()
      if (this.pipeTo !== null && this.pipeTo.write(data) === false) stream._duplexState &= READ_PIPE_NOT_DRAINED
      if ((stream._duplexState & READ_EMIT_DATA) !== 0) stream.emit('data', data)
      return data
    }

    if (this.readAhead === false) {
      stream._duplexState |= READ_READ_AHEAD
      this.updateNextTick()
    }

    return null
  }

  drain () {
    const stream = this.stream

    while ((stream._duplexState & READ_STATUS) === READ_QUEUED && (stream._duplexState & READ_FLOWING) !== 0) {
      const data = this.shift()
      if (this.pipeTo !== null && this.pipeTo.write(data) === false) stream._duplexState &= READ_PIPE_NOT_DRAINED
      if ((stream._duplexState & READ_EMIT_DATA) !== 0) stream.emit('data', data)
    }
  }

  update () {
    const stream = this.stream

    stream._duplexState |= READ_UPDATING

    do {
      this.drain()

      while (this.buffered < this.highWaterMark && (stream._duplexState & SHOULD_NOT_READ) === READ_READ_AHEAD) {
        stream._duplexState |= READ_ACTIVE_AND_NEEDS_PUSH
        stream._read(this.afterRead)
        this.drain()
      }

      if ((stream._duplexState & READ_READABLE_STATUS) === READ_EMIT_READABLE_AND_QUEUED) {
        stream._duplexState |= READ_EMITTED_READABLE
        stream.emit('readable')
      }

      if ((stream._duplexState & READ_PRIMARY_AND_ACTIVE) === 0) this.updateNonPrimary()
    } while (this.continueUpdate() === true)

    stream._duplexState &= READ_NOT_UPDATING
  }

  updateNonPrimary () {
    const stream = this.stream

    if ((stream._duplexState & READ_ENDING_STATUS) === READ_ENDING) {
      stream._duplexState = (stream._duplexState | READ_DONE) & READ_NOT_ENDING
      stream.emit('end')
      if ((stream._duplexState & AUTO_DESTROY) === DONE) stream._duplexState |= DESTROYING
      if (this.pipeTo !== null) this.pipeTo.end()
    }

    if ((stream._duplexState & DESTROY_STATUS) === DESTROYING) {
      if ((stream._duplexState & ACTIVE_OR_TICKING) === 0) {
        stream._duplexState |= ACTIVE
        stream._destroy(afterDestroy.bind(this))
      }
      return
    }

    if ((stream._duplexState & IS_OPENING) === OPENING) {
      stream._duplexState = (stream._duplexState | ACTIVE) & NOT_OPENING
      stream._open(afterOpen.bind(this))
    }
  }

  continueUpdate () {
    if ((this.stream._duplexState & READ_NEXT_TICK) === 0) return false
    this.stream._duplexState &= READ_NOT_NEXT_TICK
    return true
  }

  updateCallback () {
    if ((this.stream._duplexState & READ_UPDATE_SYNC_STATUS) === READ_PRIMARY) this.update()
    else this.updateNextTick()
  }

  updateNextTickIfOpen () {
    if ((this.stream._duplexState & READ_NEXT_TICK_OR_OPENING) !== 0) return
    this.stream._duplexState |= READ_NEXT_TICK
    if ((this.stream._duplexState & READ_UPDATING) === 0) qmt(this.afterUpdateNextTick)
  }

  updateNextTick () {
    if ((this.stream._duplexState & READ_NEXT_TICK) !== 0) return
    this.stream._duplexState |= READ_NEXT_TICK
    if ((this.stream._duplexState & READ_UPDATING) === 0) qmt(this.afterUpdateNextTick)
  }
}

class TransformState {
  constructor (stream) {
    this.data = null
    this.afterTransform = afterTransform.bind(stream)
    this.afterFinal = null
  }
}

class Pipeline {
  constructor (src, dst, cb) {
    this.from = src
    this.to = dst
    this.afterPipe = cb
    this.error = null
    this.pipeToFinished = false
  }

  finished () {
    this.pipeToFinished = true
  }

  done (stream, err) {
    if (err) this.error = err

    if (stream === this.to) {
      this.to = null

      if (this.from !== null) {
        if ((this.from._duplexState & READ_DONE) === 0 || !this.pipeToFinished) {
          this.from.destroy(this.error || new Error('Writable stream closed prematurely'))
        }
        return
      }
    }

    if (stream === this.from) {
      this.from = null

      if (this.to !== null) {
        if ((stream._duplexState & READ_DONE) === 0) {
          this.to.destroy(this.error || new Error('Readable stream closed before ending'))
        }
        return
      }
    }

    if (this.afterPipe !== null) this.afterPipe(this.error)
    this.to = this.from = this.afterPipe = null
  }
}

function afterDrain () {
  this.stream._duplexState |= READ_PIPE_DRAINED
  this.updateCallback()
}

function afterFinal (err) {
  const stream = this.stream
  if (err) stream.destroy(err)
  if ((stream._duplexState & DESTROY_STATUS) === 0) {
    stream._duplexState |= WRITE_DONE
    stream.emit('finish')
  }
  if ((stream._duplexState & AUTO_DESTROY) === DONE) {
    stream._duplexState |= DESTROYING
  }

  stream._duplexState &= WRITE_NOT_FINISHING

  // no need to wait the extra tick here, so we short circuit that
  if ((stream._duplexState & WRITE_UPDATING) === 0) this.update()
  else this.updateNextTick()
}

function afterDestroy (err) {
  const stream = this.stream

  if (!err && this.error !== STREAM_DESTROYED) err = this.error
  if (err) stream.emit('error', err)
  stream._duplexState |= DESTROYED
  stream.emit('close')

  const rs = stream._readableState
  const ws = stream._writableState

  if (rs !== null && rs.pipeline !== null) rs.pipeline.done(stream, err)

  if (ws !== null) {
    while (ws.drains !== null && ws.drains.length > 0) ws.drains.shift().resolve(false)
    if (ws.pipeline !== null) ws.pipeline.done(stream, err)
  }
}

function afterWrite (err) {
  const stream = this.stream

  if (err) stream.destroy(err)
  stream._duplexState &= WRITE_NOT_ACTIVE

  if (this.drains !== null) tickDrains(this.drains)

  if ((stream._duplexState & WRITE_DRAIN_STATUS) === WRITE_UNDRAINED) {
    stream._duplexState &= WRITE_DRAINED
    if ((stream._duplexState & WRITE_EMIT_DRAIN) === WRITE_EMIT_DRAIN) {
      stream.emit('drain')
    }
  }

  this.updateCallback()
}

function afterRead (err) {
  if (err) this.stream.destroy(err)
  this.stream._duplexState &= READ_NOT_ACTIVE
  if (this.readAhead === false && (this.stream._duplexState & READ_RESUMED) === 0) this.stream._duplexState &= READ_NO_READ_AHEAD
  this.updateCallback()
}

function updateReadNT () {
  if ((this.stream._duplexState & READ_UPDATING) === 0) {
    this.stream._duplexState &= READ_NOT_NEXT_TICK
    this.update()
  }
}

function updateWriteNT () {
  if ((this.stream._duplexState & WRITE_UPDATING) === 0) {
    this.stream._duplexState &= WRITE_NOT_NEXT_TICK
    this.update()
  }
}

function tickDrains (drains) {
  for (let i = 0; i < drains.length; i++) {
    // drains.writes are monotonic, so if one is 0 its always the first one
    if (--drains[i].writes === 0) {
      drains.shift().resolve(true)
      i--
    }
  }
}

function afterOpen (err) {
  const stream = this.stream

  if (err) stream.destroy(err)

  if ((stream._duplexState & DESTROYING) === 0) {
    if ((stream._duplexState & READ_PRIMARY_STATUS) === 0) stream._duplexState |= READ_PRIMARY
    if ((stream._duplexState & WRITE_PRIMARY_STATUS) === 0) stream._duplexState |= WRITE_PRIMARY
    stream.emit('open')
  }

  stream._duplexState &= NOT_ACTIVE

  if (stream._writableState !== null) {
    stream._writableState.updateCallback()
  }

  if (stream._readableState !== null) {
    stream._readableState.updateCallback()
  }
}

function afterTransform (err, data) {
  if (data !== undefined && data !== null) this.push(data)
  this._writableState.afterWrite(err)
}

function newListener (name) {
  if (this._readableState !== null) {
    if (name === 'data') {
      this._duplexState |= (READ_EMIT_DATA | READ_RESUMED_READ_AHEAD)
      this._readableState.updateNextTick()
    }
    if (name === 'readable') {
      this._duplexState |= READ_EMIT_READABLE
      this._readableState.updateNextTick()
    }
  }

  if (this._writableState !== null) {
    if (name === 'drain') {
      this._duplexState |= WRITE_EMIT_DRAIN
      this._writableState.updateNextTick()
    }
  }
}

class Stream extends EventEmitter {
  constructor (opts) {
    super()

    this._duplexState = 0
    this._readableState = null
    this._writableState = null

    if (opts) {
      if (opts.open) this._open = opts.open
      if (opts.destroy) this._destroy = opts.destroy
      if (opts.predestroy) this._predestroy = opts.predestroy
      if (opts.signal) {
        opts.signal.addEventListener('abort', abort.bind(this))
      }
    }

    this.on('newListener', newListener)
  }

  _open (cb) {
    cb(null)
  }

  _destroy (cb) {
    cb(null)
  }

  _predestroy () {
    // does nothing
  }

  get readable () {
    return this._readableState !== null ? true : undefined
  }

  get writable () {
    return this._writableState !== null ? true : undefined
  }

  get destroyed () {
    return (this._duplexState & DESTROYED) !== 0
  }

  get destroying () {
    return (this._duplexState & DESTROY_STATUS) !== 0
  }

  destroy (err) {
    if ((this._duplexState & DESTROY_STATUS) === 0) {
      if (!err) err = STREAM_DESTROYED
      this._duplexState = (this._duplexState | DESTROYING) & NON_PRIMARY

      if (this._readableState !== null) {
        this._readableState.highWaterMark = 0
        this._readableState.error = err
      }
      if (this._writableState !== null) {
        this._writableState.highWaterMark = 0
        this._writableState.error = err
      }

      this._duplexState |= PREDESTROYING
      this._predestroy()
      this._duplexState &= NOT_PREDESTROYING

      if (this._readableState !== null) this._readableState.updateNextTick()
      if (this._writableState !== null) this._writableState.updateNextTick()
    }
  }
}

class Readable extends Stream {
  constructor (opts) {
    super(opts)

    this._duplexState |= OPENING | WRITE_DONE | READ_READ_AHEAD
    this._readableState = new ReadableState(this, opts)

    if (opts) {
      if (this._readableState.readAhead === false) this._duplexState &= READ_NO_READ_AHEAD
      if (opts.read) this._read = opts.read
      if (opts.eagerOpen) this._readableState.updateNextTick()
      if (opts.encoding) this.setEncoding(opts.encoding)
    }
  }

  setEncoding (encoding) {
    const dec = new TextDecoder(encoding)
    const map = this._readableState.map || echo
    this._readableState.map = mapOrSkip
    return this

    function mapOrSkip (data) {
      const next = dec.push(data)
      return next === '' && (data.byteLength !== 0 || dec.remaining > 0) ? null : map(next)
    }
  }

  _read (cb) {
    cb(null)
  }

  pipe (dest, cb) {
    this._readableState.updateNextTick()
    this._readableState.pipe(dest, cb)
    return dest
  }

  read () {
    this._readableState.updateNextTick()
    return this._readableState.read()
  }

  push (data) {
    this._readableState.updateNextTickIfOpen()
    return this._readableState.push(data)
  }

  unshift (data) {
    this._readableState.updateNextTickIfOpen()
    return this._readableState.unshift(data)
  }

  resume () {
    this._duplexState |= READ_RESUMED_READ_AHEAD
    this._readableState.updateNextTick()
    return this
  }

  pause () {
    this._duplexState &= (this._readableState.readAhead === false ? READ_PAUSED_NO_READ_AHEAD : READ_PAUSED)
    return this
  }

  static _fromAsyncIterator (ite, opts) {
    let destroy

    const rs = new Readable({
      ...opts,
      read (cb) {
        ite.next().then(push).then(cb.bind(null, null)).catch(cb)
      },
      predestroy () {
        destroy = ite.return()
      },
      destroy (cb) {
        if (!destroy) return cb(null)
        destroy.then(cb.bind(null, null)).catch(cb)
      }
    })

    return rs

    function push (data) {
      if (data.done) rs.push(null)
      else rs.push(data.value)
    }
  }

  static from (data, opts) {
    if (isReadStreamx(data)) return data
    if (data[asyncIterator]) return this._fromAsyncIterator(data[asyncIterator](), opts)
    if (!Array.isArray(data)) data = data === undefined ? [] : [data]

    let i = 0
    return new Readable({
      ...opts,
      read (cb) {
        this.push(i === data.length ? null : data[i++])
        cb(null)
      }
    })
  }

  static isBackpressured (rs) {
    return (rs._duplexState & READ_BACKPRESSURE_STATUS) !== 0 || rs._readableState.buffered >= rs._readableState.highWaterMark
  }

  static isPaused (rs) {
    return (rs._duplexState & READ_RESUMED) === 0
  }

  [asyncIterator] () {
    const stream = this

    let error = null
    let promiseResolve = null
    let promiseReject = null

    this.on('error', (err) => { error = err })
    this.on('readable', onreadable)
    this.on('close', onclose)

    return {
      [asyncIterator] () {
        return this
      },
      next () {
        return new Promise(function (resolve, reject) {
          promiseResolve = resolve
          promiseReject = reject
          const data = stream.read()
          if (data !== null) ondata(data)
          else if ((stream._duplexState & DESTROYED) !== 0) ondata(null)
        })
      },
      return () {
        return destroy(null)
      },
      throw (err) {
        return destroy(err)
      }
    }

    function onreadable () {
      if (promiseResolve !== null) ondata(stream.read())
    }

    function onclose () {
      if (promiseResolve !== null) ondata(null)
    }

    function ondata (data) {
      if (promiseReject === null) return
      if (error) promiseReject(error)
      else if (data === null && (stream._duplexState & READ_DONE) === 0) promiseReject(STREAM_DESTROYED)
      else promiseResolve({ value: data, done: data === null })
      promiseReject = promiseResolve = null
    }

    function destroy (err) {
      stream.destroy(err)
      return new Promise((resolve, reject) => {
        if (stream._duplexState & DESTROYED) return resolve({ value: undefined, done: true })
        stream.once('close', function () {
          if (err) reject(err)
          else resolve({ value: undefined, done: true })
        })
      })
    }
  }
}

class Writable extends Stream {
  constructor (opts) {
    super(opts)

    this._duplexState |= OPENING | READ_DONE
    this._writableState = new WritableState(this, opts)

    if (opts) {
      if (opts.writev) this._writev = opts.writev
      if (opts.write) this._write = opts.write
      if (opts.final) this._final = opts.final
      if (opts.eagerOpen) this._writableState.updateNextTick()
    }
  }

  cork () {
    this._duplexState |= WRITE_CORKED
  }

  uncork () {
    this._duplexState &= WRITE_NOT_CORKED
    this._writableState.updateNextTick()
  }

  _writev (batch, cb) {
    cb(null)
  }

  _write (data, cb) {
    this._writableState.autoBatch(data, cb)
  }

  _final (cb) {
    cb(null)
  }

  static isBackpressured (ws) {
    return (ws._duplexState & WRITE_BACKPRESSURE_STATUS) !== 0
  }

  static drained (ws) {
    if (ws.destroyed) return Promise.resolve(false)
    const state = ws._writableState
    const pending = (isWritev(ws) ? Math.min(1, state.queue.length) : state.queue.length)
    const writes = pending + ((ws._duplexState & WRITE_WRITING) ? 1 : 0)
    if (writes === 0) return Promise.resolve(true)
    if (state.drains === null) state.drains = []
    return new Promise((resolve) => {
      state.drains.push({ writes, resolve })
    })
  }

  write (data) {
    this._writableState.updateNextTick()
    return this._writableState.push(data)
  }

  end (data) {
    this._writableState.updateNextTick()
    this._writableState.end(data)
    return this
  }
}

class Duplex extends Readable { // and Writable
  constructor (opts) {
    super(opts)

    this._duplexState = OPENING | (this._duplexState & READ_READ_AHEAD)
    this._writableState = new WritableState(this, opts)

    if (opts) {
      if (opts.writev) this._writev = opts.writev
      if (opts.write) this._write = opts.write
      if (opts.final) this._final = opts.final
    }
  }

  cork () {
    this._duplexState |= WRITE_CORKED
  }

  uncork () {
    this._duplexState &= WRITE_NOT_CORKED
    this._writableState.updateNextTick()
  }

  _writev (batch, cb) {
    cb(null)
  }

  _write (data, cb) {
    this._writableState.autoBatch(data, cb)
  }

  _final (cb) {
    cb(null)
  }

  write (data) {
    this._writableState.updateNextTick()
    return this._writableState.push(data)
  }

  end (data) {
    this._writableState.updateNextTick()
    this._writableState.end(data)
    return this
  }
}

class Transform extends Duplex {
  constructor (opts) {
    super(opts)
    this._transformState = new TransformState(this)

    if (opts) {
      if (opts.transform) this._transform = opts.transform
      if (opts.flush) this._flush = opts.flush
    }
  }

  _write (data, cb) {
    if (this._readableState.buffered >= this._readableState.highWaterMark) {
      this._transformState.data = data
    } else {
      this._transform(data, this._transformState.afterTransform)
    }
  }

  _read (cb) {
    if (this._transformState.data !== null) {
      const data = this._transformState.data
      this._transformState.data = null
      cb(null)
      this._transform(data, this._transformState.afterTransform)
    } else {
      cb(null)
    }
  }

  destroy (err) {
    super.destroy(err)
    if (this._transformState.data !== null) {
      this._transformState.data = null
      this._transformState.afterTransform()
    }
  }

  _transform (data, cb) {
    cb(null, data)
  }

  _flush (cb) {
    cb(null)
  }

  _final (cb) {
    this._transformState.afterFinal = cb
    this._flush(transformAfterFlush.bind(this))
  }
}

class PassThrough extends Transform {}

function transformAfterFlush (err, data) {
  const cb = this._transformState.afterFinal
  if (err) return cb(err)
  if (data !== null && data !== undefined) this.push(data)
  this.push(null)
  cb(null)
}

function pipelinePromise (...streams) {
  return new Promise((resolve, reject) => {
    return pipeline(...streams, (err) => {
      if (err) return reject(err)
      resolve()
    })
  })
}

function pipeline (stream, ...streams) {
  const all = Array.isArray(stream) ? [...stream, ...streams] : [stream, ...streams]
  const done = (all.length && typeof all[all.length - 1] === 'function') ? all.pop() : null

  if (all.length < 2) throw new Error('Pipeline requires at least 2 streams')

  let src = all[0]
  let dest = null
  let error = null

  for (let i = 1; i < all.length; i++) {
    dest = all[i]

    if (isStreamx(src)) {
      src.pipe(dest, onerror)
    } else {
      errorHandle(src, true, i > 1, onerror)
      src.pipe(dest)
    }

    src = dest
  }

  if (done) {
    let fin = false

    const autoDestroy = isStreamx(dest) || !!(dest._writableState && dest._writableState.autoDestroy)

    dest.on('error', (err) => {
      if (error === null) error = err
    })

    dest.on('finish', () => {
      fin = true
      if (!autoDestroy) done(error)
    })

    if (autoDestroy) {
      dest.on('close', () => done(error || (fin ? null : PREMATURE_CLOSE)))
    }
  }

  return dest

  function errorHandle (s, rd, wr, onerror) {
    s.on('error', onerror)
    s.on('close', onclose)

    function onclose () {
      if (rd && s._readableState && !s._readableState.ended) return onerror(PREMATURE_CLOSE)
      if (wr && s._writableState && !s._writableState.ended) return onerror(PREMATURE_CLOSE)
    }
  }

  function onerror (err) {
    if (!err || error) return
    error = err

    for (const s of all) {
      s.destroy(err)
    }
  }
}

function echo (s) {
  return s
}

function isStream (stream) {
  return !!stream._readableState || !!stream._writableState
}

function isStreamx (stream) {
  return typeof stream._duplexState === 'number' && isStream(stream)
}

function isEnded (stream) {
  return !!stream._readableState && stream._readableState.ended
}

function isFinished (stream) {
  return !!stream._writableState && stream._writableState.ended
}

function getStreamError (stream, opts = {}) {
  const err = (stream._readableState && stream._readableState.error) || (stream._writableState && stream._writableState.error)

  // avoid implicit errors by default
  return (!opts.all && err === STREAM_DESTROYED) ? null : err
}

function isReadStreamx (stream) {
  return isStreamx(stream) && stream.readable
}

function isDisturbed (stream) {
  return (stream._duplexState & OPENING) !== OPENING || (stream._duplexState & ACTIVE_OR_TICKING) !== 0
}

function isTypedArray (data) {
  return typeof data === 'object' && data !== null && typeof data.byteLength === 'number'
}

function defaultByteLength (data) {
  return isTypedArray(data) ? data.byteLength : 1024
}

function noop () {}

function abort () {
  this.destroy(new Error('Stream aborted.'))
}

function isWritev (s) {
  return s._writev !== Writable.prototype._writev && s._writev !== Duplex.prototype._writev
}

module.exports = {
  pipeline,
  pipelinePromise,
  isStream,
  isStreamx,
  isEnded,
  isFinished,
  isDisturbed,
  getStreamError,
  Stream,
  Writable,
  Readable,
  Duplex,
  Transform,
  // Export PassThrough for compatibility with Node.js core's stream module
  PassThrough
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"events-universal":257,"fast-fifo":261,"text-decoder":581}],579:[function(require,module,exports){
arguments[4][478][0].apply(exports,arguments)
},{"dup":478,"safe-buffer":485}],580:[function(require,module,exports){
const codecs = require('codecs')
const b = require('b4a')

const SEP = b.alloc(1)
const SEP_BUMPED = b.from([0x1])
const EMPTY = b.alloc(0)

module.exports = class SubEncoder {
  constructor (prefix, encoding, parent = null) {
    this.userEncoding = codecs(encoding)
    this.prefix = prefix != null ? createPrefix(prefix, parent) : null
    this.lt = this.prefix && b.concat([this.prefix.subarray(0, this.prefix.byteLength - 1), SEP_BUMPED])
  }

  _encodeRangeUser (r) {
    if (this.userEncoding.encodeRange) return this.userEncoding.encodeRange(r)

    const res = {}
    if (r.gt != null) res.gt = this.userEncoding.encode(r.gt)
    if (r.gte != null) res.gte = this.userEncoding.encode(r.gte)
    if (r.lte != null) res.lte = this.userEncoding.encode(r.lte)
    if (r.lt != null) res.lt = this.userEncoding.encode(r.lt)

    return res
  }

  _addPrefix (key) {
    return this.prefix ? b.concat([this.prefix, key]) : key
  }

  encode (key) {
    return this._addPrefix(this.userEncoding.encode(key))
  }

  encodeRange (range) {
    const r = this._encodeRangeUser(range)

    if (r.gt) r.gt = this._addPrefix(r.gt)
    else if (r.gte) r.gte = this._addPrefix(r.gte)
    else if (this.prefix) r.gte = this.prefix

    if (r.lt) r.lt = this._addPrefix(r.lt)
    else if (r.lte) r.lte = this._addPrefix(r.lte)
    else if (this.prefix) r.lt = this.lt

    return r
  }

  decode (key) {
    return this.userEncoding.decode(this.prefix ? key.subarray(this.prefix.byteLength) : key)
  }

  sub (prefix, encoding) {
    return new SubEncoder(prefix || EMPTY, compat(encoding), this.prefix)
  }
}

function createPrefix (prefix, parent) {
  prefix = typeof prefix === 'string' ? b.from(prefix) : prefix

  if (prefix && parent) return b.concat([parent, prefix, SEP])
  if (prefix) return b.concat([prefix, SEP])
  if (parent) return b.concat([parent, SEP])
  return SEP
}

function compat (enc) {
  if (enc && enc.keyEncoding) return enc.keyEncoding
  return enc
}

},{"b4a":102,"codecs":175}],581:[function(require,module,exports){
const PassThroughDecoder = require('./lib/pass-through-decoder')
const UTF8Decoder = require('./lib/utf8-decoder')

module.exports = class TextDecoder {
  constructor (encoding = 'utf8') {
    this.encoding = normalizeEncoding(encoding)

    switch (this.encoding) {
      case 'utf8':
        this.decoder = new UTF8Decoder()
        break
      case 'utf16le':
      case 'base64':
        throw new Error('Unsupported encoding: ' + this.encoding)
      default:
        this.decoder = new PassThroughDecoder(this.encoding)
    }
  }

  get remaining () {
    return this.decoder.remaining
  }

  push (data) {
    if (typeof data === 'string') return data
    return this.decoder.decode(data)
  }

  // For Node.js compatibility
  write (data) {
    return this.push(data)
  }

  end (data) {
    let result = ''
    if (data) result = this.push(data)
    result += this.decoder.flush()
    return result
  }
}

function normalizeEncoding (encoding) {
  encoding = encoding.toLowerCase()

  switch (encoding) {
    case 'utf8':
    case 'utf-8':
      return 'utf8'
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return 'utf16le'
    case 'latin1':
    case 'binary':
      return 'latin1'
    case 'base64':
    case 'ascii':
    case 'hex':
      return encoding
    default:
      throw new Error('Unknown encoding: ' + encoding)
  }
};

},{"./lib/pass-through-decoder":582,"./lib/utf8-decoder":582}],582:[function(require,module,exports){
module.exports = class BrowserDecoder {
  constructor (encoding) {
    this.decoder = new TextDecoder(encoding === 'utf16le' ? 'utf16-le' : encoding)
  }

  get remaining () {
    return -1
  }

  decode (data) {
    return this.decoder.decode(data, { stream: true })
  }

  flush () {
    return this.decoder.decode(new Uint8Array(0))
  }
}

},{}],583:[function(require,module,exports){
module.exports = class TimerBrowser {
  constructor (ms, fn, ctx = null, interval = false) {
    this.ms = ms
    this.ontimeout = fn
    this.context = ctx || null
    this.interval = interval
    this.done = false

    this._timer = interval
      ? setInterval(callInterval, ms, this)
      : setTimeout(callTimeout, ms, this)
  }

  unref () {}

  ref () {}

  refresh () {
    if (this.done) return

    if (this.interval) {
      clearInterval(this._timer)
      this._timer = setInterval(callInterval, this.ms, this)
    } else {
      clearTimeout(this._timer)
      this._timer = setTimeout(callTimeout, this.ms, this)
    }
  }

  destroy () {
    this.done = true
    this.ontimeout = null

    if (this.interval) clearInterval(this._timer)
    else clearTimeout(this._timer)
  }

  static once (ms, fn, ctx) {
    return new this(ms, fn, ctx, false)
  }

  static on (ms, fn, ctx) {
    return new this(ms, fn, ctx, true)
  }
}

function callTimeout (self) {
  self.done = true
  self.ontimeout.call(self.context)
}

function callInterval (self) {
  self.ontimeout.call(self.context)
}

},{}],584:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":437,"timers":584}],585:[function(require,module,exports){
const b4a = require('b4a')

module.exports = class BufferMap {
  constructor (other) {
    this.m = other ? new Map([...other.m]) : new Map()
  }

  get size () {
    return this.m.size
  }

  get (key) {
    if (b4a.isBuffer(key)) key = b4a.toString(key, 'hex')
    return this.m.get(key)
  }

  set (key, value) {
    if (b4a.isBuffer(key)) key = b4a.toString(key, 'hex')
    return this.m.set(key, value)
  }

  delete (key) {
    if (b4a.isBuffer(key)) key = b4a.toString(key, 'hex')
    return this.m.delete(key)
  }

  has (key) {
    if (b4a.isBuffer(key)) key = b4a.toString(key, 'hex')
    return this.m.has(key)
  }

  * [Symbol.iterator] () {
    for (const [key, value] of this.m) {
      yield [b4a.from(key, 'hex'), value]
    }
  }

  * keys () {
    for (const key of this.m.keys()) {
      yield b4a.from(key, 'hex')
    }
  }

  values () {
    return this.m.values()
  }

  clear () {
    return this.m.clear()
  }
}

},{"b4a":102}],586:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var isArray = require('isarray');
var typedArrayBuffer = require('typed-array-buffer');

var isView = ArrayBuffer.isView || function isView(obj) {
	try {
		typedArrayBuffer(obj);
		return true;
	} catch (e) {
		return false;
	}
};

var useUint8Array = typeof Uint8Array !== 'undefined';
var useArrayBuffer = typeof ArrayBuffer !== 'undefined'
	&& typeof Uint8Array !== 'undefined';
var useFromArrayBuffer = useArrayBuffer && (Buffer.prototype instanceof Uint8Array || Buffer.TYPED_ARRAY_SUPPORT);

module.exports = function toBuffer(data, encoding) {
	/*
	 * No need to do anything for exact instance
	 * This is only valid when safe-buffer.Buffer === buffer.Buffer, i.e. when Buffer.from/Buffer.alloc existed
	 */
	if (data instanceof Buffer) {
		return data;
	}

	if (typeof data === 'string') {
		return Buffer.from(data, encoding);
	}

	/*
	 * Wrap any TypedArray instances and DataViews
	 * Makes sense only on engines with full TypedArray support -- let Buffer detect that
	 */
	if (useArrayBuffer && isView(data)) {
		// Bug in Node.js <6.3.1, which treats this as out-of-bounds
		if (data.byteLength === 0) {
			return Buffer.alloc(0);
		}

		// When Buffer is based on Uint8Array, we can just construct it from ArrayBuffer
		if (useFromArrayBuffer) {
			var res = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
			/*
			 * Recheck result size, as offset/length doesn't work on Node.js <5.10
			 * We just go to Uint8Array case if this fails
			 */
			if (res.byteLength === data.byteLength) {
				return res;
			}
		}

		// Convert to Uint8Array bytes and then to Buffer
		var uint8 = data instanceof Uint8Array ? data : new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
		var result = Buffer.from(uint8);

		/*
		 * Let's recheck that conversion succeeded
		 * We have .length but not .byteLength when useFromArrayBuffer is false
		 */
		if (result.length === data.byteLength) {
			return result;
		}
	}

	/*
	 * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over
	 * Doesn't make sense with other TypedArray instances
	 */
	if (useUint8Array && data instanceof Uint8Array) {
		return Buffer.from(data);
	}

	var isArr = isArray(data);
	if (isArr) {
		for (var i = 0; i < data.length; i += 1) {
			var x = data[i];
			if (
				typeof x !== 'number'
				|| x < 0
				|| x > 255
				|| ~~x !== x // NaN and integer check
			) {
				throw new RangeError('Array items must be numbers in the range 0-255.');
			}
		}
	}

	/*
	 * Old Buffer polyfill on an engine that doesn't have TypedArray support
	 * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed
	 * Convert to our current Buffer implementation
	 */
	if (
		isArr || (
			Buffer.isBuffer(data)
				&& data.constructor
				&& typeof data.constructor.isBuffer === 'function'
				&& data.constructor.isBuffer(data)
		)
	) {
		return Buffer.from(data);
	}

	throw new TypeError('The "data" argument must be a string, an Array, a Buffer, a Uint8Array, or a DataView.');
};

},{"isarray":373,"safe-buffer":485,"typed-array-buffer":587}],587:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var callBound = require('call-bound');

/** @type {undefined | ((thisArg: import('.').TypedArray) => Buffer<ArrayBufferLike>)} */
var $typedArrayBuffer = callBound('TypedArray.prototype.buffer', true);

var isTypedArray = require('is-typed-array');

/** @type {import('.')} */
// node <= 0.10, < 0.11.4 has a nonconfigurable own property instead of a prototype getter
module.exports = $typedArrayBuffer || function typedArrayBuffer(x) {
	if (!isTypedArray(x)) {
		throw new $TypeError('Not a Typed Array');
	}
	return x.buffer;
};

},{"call-bound":172,"es-errors/type":254,"is-typed-array":372}],588:[function(require,module,exports){
module.exports = resolve

function parse (addr) {
  const names = addr.split(/[/\\]/)

  const r = {
    isAbsolute: false,
    names
  }

  // don't think this ever happens, but whatevs
  if (names.length === 0) return r

  if (names.length > 1 && names[0].endsWith(':')) {
    r.isAbsolute = true

    if (names[0].length === 2) { // windows
      r.names = names.slice(1)
      return r
    }

    if (names[0] === 'file:') {
      r.names = names.slice(1)
      return r
    }

    r.names = names.slice(3)
    return r
  }

  r.isAbsolute = addr.startsWith('/') || addr.startsWith('\\')

  return r
}

function resolve (a, b = '') {
  const ap = parse(a)
  const bp = parse(b)

  if (bp.isAbsolute) {
    return resolveNames([], bp.names)
  }

  if (!ap.isAbsolute) {
    throw new Error('One of the two paths must be absolute')
  }

  return resolveNames(ap.names, bp.names)
}

function toString (p, names) {
  for (let i = 0; i < names.length; i++) {
    if (names[i] === '') continue
    if (names[i] === '.') continue
    if (names[i] === '..') {
      if (p.length === 1) throw new Error('Path cannot be resolved, too many \'..\'')
      p = p.slice(0, p.lastIndexOf('/')) || '/'
      continue
    }
    p += (p.length === 1 ? names[i] : '/' + names[i])
  }

  return p
}

function resolveNames (a, b) {
  return toString(toString('/', a), b)
}

},{}],589:[function(require,module,exports){
exports.add = add
exports.has = has
exports.remove = remove
exports.swap = swap

function add (list, item) {
  if (has(list, item)) return item
  item._index = list.length
  list.push(item)
  return item
}

function has (list, item) {
  return item._index < list.length && list[item._index] === item
}

function remove (list, item) {
  if (!has(list, item)) return null

  var last = list.pop()
  if (last !== item) {
    list[item._index] = last
    last._index = item._index
  }

  return item
}

function swap (list, a, b) {
  if (!has(list, a) || !has(list, b)) return
  var tmp = a._index
  a._index = b._index
  list[a._index] = a
  b._index = tmp
  list[b._index] = b
}

},{}],590:[function(require,module,exports){
const b4a = require('b4a')

unslab.all = all
unslab.is = is

module.exports = unslab

function unslab (buf) {
  if (buf === null || buf.buffer.byteLength === buf.byteLength) return buf
  const copy = b4a.allocUnsafeSlow(buf.byteLength)
  copy.set(buf, 0)
  return copy
}

function is (buf) {
  return buf.buffer.byteLength !== buf.byteLength
}

function all (list) {
  let size = 0
  for (let i = 0; i < list.length; i++) {
    const buf = list[i]
    size += buf === null || buf.buffer.byteLength === buf.byteLength ? 0 : buf.byteLength
  }

  const copy = b4a.allocUnsafeSlow(size)
  const result = new Array(list.length)

  let offset = 0
  for (let i = 0; i < list.length; i++) {
    let buf = list[i]

    if (buf !== null && buf.buffer.byteLength !== buf.byteLength) {
      copy.set(buf, offset)
      buf = copy.subarray(offset, offset += buf.byteLength)
    }

    result[i] = buf
  }

  return result
}

},{"b4a":102}],591:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],592:[function(require,module,exports){
module.exports = read

var MSB = 0x80
  , REST = 0x7F

function read(buf, offset) {
  var res    = 0
    , offset = offset || 0
    , shift  = 0
    , counter = offset
    , b
    , l = buf.length

  do {
    if (counter >= l) {
      read.bytes = 0
      throw new RangeError('Could not decode varint')
    }
    b = buf[counter++]
    res += shift < 28
      ? (b & REST) << shift
      : (b & REST) * Math.pow(2, shift)
    shift += 7
  } while (b >= MSB)

  read.bytes = counter - offset

  return res
}

},{}],593:[function(require,module,exports){
module.exports = encode

var MSB = 0x80
  , REST = 0x7F
  , MSBALL = ~REST
  , INT = Math.pow(2, 31)

function encode(num, out, offset) {
  out = out || []
  offset = offset || 0
  var oldOffset = offset

  while(num >= INT) {
    out[offset++] = (num & 0xFF) | MSB
    num /= 128
  }
  while(num & MSBALL) {
    out[offset++] = (num & 0xFF) | MSB
    num >>>= 7
  }
  out[offset] = num | 0
  
  encode.bytes = offset - oldOffset + 1
  
  return out
}

},{}],594:[function(require,module,exports){
module.exports = {
    encode: require('./encode.js')
  , decode: require('./decode.js')
  , encodingLength: require('./length.js')
}

},{"./decode.js":592,"./encode.js":593,"./length.js":595}],595:[function(require,module,exports){

var N1 = Math.pow(2,  7)
var N2 = Math.pow(2, 14)
var N3 = Math.pow(2, 21)
var N4 = Math.pow(2, 28)
var N5 = Math.pow(2, 35)
var N6 = Math.pow(2, 42)
var N7 = Math.pow(2, 49)
var N8 = Math.pow(2, 56)
var N9 = Math.pow(2, 63)

module.exports = function (value) {
  return (
    value < N1 ? 1
  : value < N2 ? 2
  : value < N3 ? 3
  : value < N4 ? 4
  : value < N5 ? 5
  : value < N6 ? 6
  : value < N7 ? 7
  : value < N8 ? 8
  : value < N9 ? 9
  :              10
  )
}

},{}],596:[function(require,module,exports){
var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.isContext = function (context) {
    return context instanceof Context;
};

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{}],597:[function(require,module,exports){
(function (global){(function (){
'use strict';

var forEach = require('for-each');
var availableTypedArrays = require('available-typed-arrays');
var callBind = require('call-bind');
var callBound = require('call-bound');
var gOPD = require('gopd');
var getProto = require('get-proto');

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require('has-tostringtag/shams')();

var g = typeof globalThis === 'undefined' ? global : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');

/** @type {<T = unknown>(array: readonly T[], value: unknown) => number} */
var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};

/** @typedef {import('./types').Getter} Getter */
/** @type {import('./types').Cache} */
var cache = { __proto__: null };
if (hasToStringTag && gOPD && getProto) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr && getProto) {
			var proto = getProto(arr);
			// @ts-expect-error TS won't narrow inside a closure
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor && proto) {
				var superProto = getProto(proto);
				// @ts-expect-error TS won't narrow inside a closure
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			// @ts-expect-error TODO: fix
			cache['$' + typedArray] = callBind(descriptor.get);
		}
	});
} else {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		var fn = arr.slice || arr.set;
		if (fn) {
			cache[
				/** @type {`$${import('.').TypedArrayName}`} */ ('$' + typedArray)
			] = /** @type {import('./types').BoundSlice | import('./types').BoundSet} */ (
				// @ts-expect-error TODO FIXME
				callBind(fn)
			);
		}
	});
}

/** @type {(value: object) => false | import('.').TypedArrayName} */
var tryTypedArrays = function tryAllTypedArrays(value) {
	/** @type {ReturnType<typeof tryAllTypedArrays>} */ var found = false;
	forEach(
		/** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */ (cache),
		/** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
		function (getter, typedArray) {
			if (!found) {
				try {
					// @ts-expect-error a throw is fine here
					if ('$' + getter(value) === typedArray) {
						found = /** @type {import('.').TypedArrayName} */ ($slice(typedArray, 1));
					}
				} catch (e) { /**/ }
			}
		}
	);
	return found;
};

/** @type {(value: object) => false | import('.').TypedArrayName} */
var trySlices = function tryAllSlices(value) {
	/** @type {ReturnType<typeof tryAllSlices>} */ var found = false;
	forEach(
		/** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */(cache),
		/** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */ function (getter, name) {
			if (!found) {
				try {
					// @ts-expect-error a throw is fine here
					getter(value);
					found = /** @type {import('.').TypedArrayName} */ ($slice(name, 1));
				} catch (e) { /**/ }
			}
		}
	);
	return found;
};

/** @type {import('.')} */
module.exports = function whichTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag) {
		/** @type {string} */
		var tag = $slice($toString(value), 8, -1);
		if ($indexOf(typedArrays, tag) > -1) {
			return tag;
		}
		if (tag !== 'Object') {
			return false;
		}
		// node < 0.6 hits here on real Typed Arrays
		return trySlices(value);
	}
	if (!gOPD) { return null; } // unknown engine
	return tryTypedArrays(value);
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"available-typed-arrays":101,"call-bind":171,"call-bound":172,"for-each":263,"get-proto":269,"gopd":272,"has-tostringtag/shams":276}],598:[function(require,module,exports){
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}

},{}],599:[function(require,module,exports){
module.exports = class MaxCache {
  constructor ({ maxSize, maxAge, createMap, ongc }) {
    this.maxSize = maxSize
    this.maxAge = maxAge
    this.ongc = ongc || null

    this._createMap = createMap || defaultCreateMap
    this._latest = this._createMap()
    this._oldest = this._createMap()
    this._retained = this._createMap()
    this._gced = false
    this._interval = null

    if (this.maxAge > 0 && this.maxAge < Infinity) {
      const tick = Math.ceil(2 / 3 * this.maxAge)
      this._interval = setInterval(this._gcAuto.bind(this), tick)
      if (this._interval.unref) this._interval.unref()
    }
  }

  * [Symbol.iterator] () {
    for (const it of [this._latest, this._oldest, this._retained]) {
      yield * it
    }
  }

  * keys () {
    for (const it of [this._latest, this._oldest, this._retained]) {
      yield * it.keys()
    }
  }

  * values () {
    for (const it of [this._latest, this._oldest, this._retained]) {
      yield * it.values()
    }
  }

  destroy () {
    this.clear()
    clearInterval(this._interval)
    this._interval = null
  }

  clear () {
    this._gced = true
    this._latest.clear()
    this._oldest.clear()
    this._retained.clear()
  }

  set (k, v) {
    if (this._retained.has(k)) return this
    this._latest.set(k, v)
    this._oldest.delete(k) || this._retained.delete(k)
    if (this._latest.size >= this.maxSize) this._gc()
    return this
  }

  retain (k, v) {
    this._retained.set(k, v)
    this._latest.delete(k) || this._oldest.delete(k)
    return this
  }

  delete (k) {
    return this._latest.delete(k) || this._oldest.delete(k) || this._retained.delete(k)
  }

  has (k) {
    return this._latest.has(k) || this._oldest.has(k) || this._retained.has(k)
  }

  get (k) {
    if (this._latest.has(k)) {
      return this._latest.get(k)
    }

    if (this._oldest.has(k)) {
      const v = this._oldest.get(k)
      this._latest.set(k, v)
      this._oldest.delete(k)
      return v
    }

    if (this._retained.has(k)) {
      return this._retained.get(k)
    }

    return null
  }

  _gcAuto () {
    if (!this._gced) this._gc()
    this._gced = false
  }

  _gc () {
    this._gced = true
    if (this.ongc !== null && this._oldest.size > 0) this.ongc(this._oldest)
    this._oldest = this._latest
    this._latest = this._createMap()
  }
}

function defaultCreateMap () {
  return new Map()
}

},{}],600:[function(require,module,exports){
var xsalsa20 = typeof WebAssembly !== "undefined" && require('./xsalsa20')()

var SIGMA = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107])
var head = 144
var top = head
var free = []

module.exports = XSalsa20

XSalsa20.NONCEBYTES = 24
XSalsa20.KEYBYTES = 32

XSalsa20.core_hsalsa20 = core_hsalsa20
XSalsa20.SIGMA = SIGMA

function XSalsa20 (nonce, key) {
  if (!(this instanceof XSalsa20)) return new XSalsa20(nonce, key)
  if (!nonce || nonce.length < 24) throw new Error('nonce must be at least 24 bytes')
  if (!key || key.length < 32) throw new Error('key must be at least 32 bytes')
  this._xor = xsalsa20 ? new WASM(nonce, key) : new Fallback(nonce, key)
}

XSalsa20.prototype.update = function (input, output) {
  if (!input) throw new Error('input must be Uint8Array or Buffer')
  if (!output) output = new Uint8Array(input.length)
  if (input.length) this._xor.update(input, output)
  return output
}

XSalsa20.prototype.final =
XSalsa20.prototype.finalize = function () {
  this._xor.finalize()
  this._xor = null
}

function WASM (nonce, key) {
  if (!free.length) {
    free.push(head)
    head += 64
  }

  this._pointer = free.pop()
  this._nonce = this._pointer + 8
  this._key = this._nonce + 24
  this._overflow = 0
  this._memory = new Uint8Array(xsalsa20.memory.buffer)

  this._memory.fill(0, this._pointer, this._pointer + 8)
  this._memory.set(nonce, this._nonce)
  this._memory.set(key, this._key)
}

WASM.prototype.realloc = function (size) {
  xsalsa20.memory.grow(Math.ceil(Math.abs(size - this._memory.length) / 65536))
  this._memory = new Uint8Array(xsalsa20.memory.buffer)
}

WASM.prototype.update = function (input, output) {
  var len = this._overflow + input.length
  var start = head + this._overflow

  top = head + len
  if (top >= this._memory.length) this.realloc(top)

  this._memory.set(input, start)
  xsalsa20.xsalsa20_xor(this._pointer, head, head, len, this._nonce, this._key)
  output.set(this._memory.subarray(start, head + len))

  this._overflow = len & 63
}

WASM.prototype.finalize = function () {
  this._memory.fill(0, this._pointer, this._key + 32)
  if (top > head) {
    this._memory.fill(0, head, top)
    top = 0
  }
  free.push(this._pointer)
}

function Fallback (nonce, key) {
  this._s = new Uint8Array(32)
  this._z = new Uint8Array(16)
  this._overflow = 0
  core_hsalsa20(this._s, nonce, key, SIGMA)
  for (var i = 0; i < 8; i++) this._z[i] = nonce[i + 16]
}

Fallback.prototype.update = function (input, output) {
  var x = new Uint8Array(64)
  var u = 0
  var i = this._overflow
  var b = input.length + this._overflow
  var z = this._z
  var mpos = -this._overflow
  var cpos = -this._overflow

  while (b >= 64) {
    core_salsa20(x, z, this._s, SIGMA)
    for (; i < 64; i++) output[cpos + i] = input[mpos + i] ^ x[i]
    u = 1
    for (i = 8; i < 16; i++) {
      u += (z[i] & 0xff) | 0
      z[i] = u & 0xff
      u >>>= 8
    }
    b -= 64
    cpos += 64
    mpos += 64
    i = 0
  }
  if (b > 0) {
    core_salsa20(x, z, this._s, SIGMA)
    for (; i < b; i++) output[cpos + i] = input[mpos + i] ^ x[i]
  }

  this._overflow = b & 63
}

Fallback.prototype.finalize = function () {
  this._s.fill(0)
  this._z.fill(0)
}

// below methods are ported from tweet nacl

function core_salsa20(o, p, k, c) {
  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff) << 8 | (c[ 2] & 0xff) << 16 | (c[ 3] & 0xff) << 24,
      j1  = k[ 0] & 0xff | (k[ 1] & 0xff) << 8 | (k[ 2] & 0xff) << 16 | (k[ 3] & 0xff) << 24,
      j2  = k[ 4] & 0xff | (k[ 5] & 0xff) << 8 | (k[ 6] & 0xff) << 16 | (k[ 7] & 0xff) << 24,
      j3  = k[ 8] & 0xff | (k[ 9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
      j4  = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
      j5  = c[ 4] & 0xff | (c[ 5] & 0xff) << 8 | (c[ 6] & 0xff) << 16 | (c[ 7] & 0xff) << 24,
      j6  = p[ 0] & 0xff | (p[ 1] & 0xff) << 8 | (p[ 2] & 0xff) << 16 | (p[ 3] & 0xff) << 24,
      j7  = p[ 4] & 0xff | (p[ 5] & 0xff) << 8 | (p[ 6] & 0xff) << 16 | (p[ 7] & 0xff) << 24,
      j8  = p[ 8] & 0xff | (p[ 9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
      j9  = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
      j10 = c[ 8] & 0xff | (c[ 9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
      j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
      j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
      j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
      j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
      j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24

  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
      x15 = j15, u

  for (var i = 0; i < 20; i += 2) {
    u = x0 + x12 | 0
    x4 ^= u << 7 | u >>> 25
    u = x4 + x0 | 0
    x8 ^= u << 9 | u >>> 23
    u = x8 + x4 | 0
    x12 ^= u << 13 | u >>> 19
    u = x12 + x8 | 0
    x0 ^= u << 18 | u >>> 14

    u = x5 + x1 | 0
    x9 ^= u << 7 | u >>> 25
    u = x9 + x5 | 0
    x13 ^= u << 9 | u >>> 23
    u = x13 + x9 | 0
    x1 ^= u << 13 | u >>> 19
    u = x1 + x13 | 0
    x5 ^= u << 18 | u >>> 14

    u = x10 + x6 | 0
    x14 ^= u << 7 | u >>> 25
    u = x14 + x10 | 0
    x2 ^= u << 9 | u >>> 23
    u = x2 + x14 | 0
    x6 ^= u << 13 | u >>> 19
    u = x6 + x2 | 0
    x10 ^= u << 18 | u >>> 14

    u = x15 + x11 | 0
    x3 ^= u << 7 | u >>> 25
    u = x3 + x15 | 0
    x7 ^= u << 9 | u >>> 23
    u = x7 + x3 | 0
    x11 ^= u << 13 | u >>> 19
    u = x11 + x7 | 0
    x15 ^= u << 18 | u >>> 14

    u = x0 + x3 | 0
    x1 ^= u << 7 | u >>> 25
    u = x1 + x0 | 0
    x2 ^= u << 9 | u >>> 23
    u = x2 + x1 | 0
    x3 ^= u << 13 | u >>> 19
    u = x3 + x2 | 0
    x0 ^= u << 18 | u >>> 14

    u = x5 + x4 | 0
    x6 ^= u << 7 | u >>> 25
    u = x6 + x5 | 0
    x7 ^= u << 9 | u >>> 23
    u = x7 + x6 | 0
    x4 ^= u << 13 | u >>> 19
    u = x4 + x7 | 0
    x5 ^= u << 18 | u >>> 14

    u = x10 + x9 | 0
    x11 ^= u << 7 | u >>> 25
    u = x11 + x10 | 0
    x8 ^= u << 9 | u >>> 23
    u = x8 + x11 | 0
    x9 ^= u << 13 | u >>> 19
    u = x9 + x8 | 0
    x10 ^= u << 18 | u >>> 14

    u = x15 + x14 | 0
    x12 ^= u << 7 | u >>> 25
    u = x12 + x15 | 0
    x13 ^= u << 9 | u >>> 23
    u = x13 + x12 | 0
    x14 ^= u << 13 | u >>> 19
    u = x14 + x13 | 0
    x15 ^= u << 18 | u >>> 14
  }
   x0 =  x0 +  j0 | 0
   x1 =  x1 +  j1 | 0
   x2 =  x2 +  j2 | 0
   x3 =  x3 +  j3 | 0
   x4 =  x4 +  j4 | 0
   x5 =  x5 +  j5 | 0
   x6 =  x6 +  j6 | 0
   x7 =  x7 +  j7 | 0
   x8 =  x8 +  j8 | 0
   x9 =  x9 +  j9 | 0
  x10 = x10 + j10 | 0
  x11 = x11 + j11 | 0
  x12 = x12 + j12 | 0
  x13 = x13 + j13 | 0
  x14 = x14 + j14 | 0
  x15 = x15 + j15 | 0

  o[ 0] = x0 >>>  0 & 0xff
  o[ 1] = x0 >>>  8 & 0xff
  o[ 2] = x0 >>> 16 & 0xff
  o[ 3] = x0 >>> 24 & 0xff

  o[ 4] = x1 >>>  0 & 0xff
  o[ 5] = x1 >>>  8 & 0xff
  o[ 6] = x1 >>> 16 & 0xff
  o[ 7] = x1 >>> 24 & 0xff

  o[ 8] = x2 >>>  0 & 0xff
  o[ 9] = x2 >>>  8 & 0xff
  o[10] = x2 >>> 16 & 0xff
  o[11] = x2 >>> 24 & 0xff

  o[12] = x3 >>>  0 & 0xff
  o[13] = x3 >>>  8 & 0xff
  o[14] = x3 >>> 16 & 0xff
  o[15] = x3 >>> 24 & 0xff

  o[16] = x4 >>>  0 & 0xff
  o[17] = x4 >>>  8 & 0xff
  o[18] = x4 >>> 16 & 0xff
  o[19] = x4 >>> 24 & 0xff

  o[20] = x5 >>>  0 & 0xff
  o[21] = x5 >>>  8 & 0xff
  o[22] = x5 >>> 16 & 0xff
  o[23] = x5 >>> 24 & 0xff

  o[24] = x6 >>>  0 & 0xff
  o[25] = x6 >>>  8 & 0xff
  o[26] = x6 >>> 16 & 0xff
  o[27] = x6 >>> 24 & 0xff

  o[28] = x7 >>>  0 & 0xff
  o[29] = x7 >>>  8 & 0xff
  o[30] = x7 >>> 16 & 0xff
  o[31] = x7 >>> 24 & 0xff

  o[32] = x8 >>>  0 & 0xff
  o[33] = x8 >>>  8 & 0xff
  o[34] = x8 >>> 16 & 0xff
  o[35] = x8 >>> 24 & 0xff

  o[36] = x9 >>>  0 & 0xff
  o[37] = x9 >>>  8 & 0xff
  o[38] = x9 >>> 16 & 0xff
  o[39] = x9 >>> 24 & 0xff

  o[40] = x10 >>>  0 & 0xff
  o[41] = x10 >>>  8 & 0xff
  o[42] = x10 >>> 16 & 0xff
  o[43] = x10 >>> 24 & 0xff

  o[44] = x11 >>>  0 & 0xff
  o[45] = x11 >>>  8 & 0xff
  o[46] = x11 >>> 16 & 0xff
  o[47] = x11 >>> 24 & 0xff

  o[48] = x12 >>>  0 & 0xff
  o[49] = x12 >>>  8 & 0xff
  o[50] = x12 >>> 16 & 0xff
  o[51] = x12 >>> 24 & 0xff

  o[52] = x13 >>>  0 & 0xff
  o[53] = x13 >>>  8 & 0xff
  o[54] = x13 >>> 16 & 0xff
  o[55] = x13 >>> 24 & 0xff

  o[56] = x14 >>>  0 & 0xff
  o[57] = x14 >>>  8 & 0xff
  o[58] = x14 >>> 16 & 0xff
  o[59] = x14 >>> 24 & 0xff

  o[60] = x15 >>>  0 & 0xff
  o[61] = x15 >>>  8 & 0xff
  o[62] = x15 >>> 16 & 0xff
  o[63] = x15 >>> 24 & 0xff
}

function core_hsalsa20(o,p,k,c) {
  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff) << 8 | (c[ 2] & 0xff) << 16 | (c[ 3] & 0xff) << 24,
      j1  = k[ 0] & 0xff | (k[ 1] & 0xff) << 8 | (k[ 2] & 0xff) << 16 | (k[ 3] & 0xff) << 24,
      j2  = k[ 4] & 0xff | (k[ 5] & 0xff) << 8 | (k[ 6] & 0xff) << 16 | (k[ 7] & 0xff) << 24,
      j3  = k[ 8] & 0xff | (k[ 9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
      j4  = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
      j5  = c[ 4] & 0xff | (c[ 5] & 0xff) << 8 | (c[ 6] & 0xff) << 16 | (c[ 7] & 0xff) << 24,
      j6  = p[ 0] & 0xff | (p[ 1] & 0xff) << 8 | (p[ 2] & 0xff) << 16 | (p[ 3] & 0xff) << 24,
      j7  = p[ 4] & 0xff | (p[ 5] & 0xff) << 8 | (p[ 6] & 0xff) << 16 | (p[ 7] & 0xff) << 24,
      j8  = p[ 8] & 0xff | (p[ 9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
      j9  = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
      j10 = c[ 8] & 0xff | (c[ 9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
      j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
      j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
      j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
      j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
      j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24

  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
      x15 = j15, u

  for (var i = 0; i < 20; i += 2) {
    u = x0 + x12 | 0
    x4 ^= u << 7 | u >>> 25
    u = x4 + x0 | 0
    x8 ^= u << 9 | u >>> 23
    u = x8 + x4 | 0
    x12 ^= u << 13 | u >>> 19
    u = x12 + x8 | 0
    x0 ^= u << 18 | u >>> 14

    u = x5 + x1 | 0
    x9 ^= u << 7 | u >>> 25
    u = x9 + x5 | 0
    x13 ^= u << 9 | u >>> 23
    u = x13 + x9 | 0
    x1 ^= u << 13 | u >>> 19
    u = x1 + x13 | 0
    x5 ^= u << 18 | u >>> 14

    u = x10 + x6 | 0
    x14 ^= u << 7 | u >>> 25
    u = x14 + x10 | 0
    x2 ^= u << 9 | u >>> 23
    u = x2 + x14 | 0
    x6 ^= u << 13 | u >>> 19
    u = x6 + x2 | 0
    x10 ^= u << 18 | u >>> 14

    u = x15 + x11 | 0
    x3 ^= u << 7 | u >>> 25
    u = x3 + x15 | 0
    x7 ^= u << 9 | u >>> 23
    u = x7 + x3 | 0
    x11 ^= u << 13 | u >>> 19
    u = x11 + x7 | 0
    x15 ^= u << 18 | u >>> 14

    u = x0 + x3 | 0
    x1 ^= u << 7 | u >>> 25
    u = x1 + x0 | 0
    x2 ^= u << 9 | u >>> 23
    u = x2 + x1 | 0
    x3 ^= u << 13 | u >>> 19
    u = x3 + x2 | 0
    x0 ^= u << 18 | u >>> 14

    u = x5 + x4 | 0
    x6 ^= u << 7 | u >>> 25
    u = x6 + x5 | 0
    x7 ^= u << 9 | u >>> 23
    u = x7 + x6 | 0
    x4 ^= u << 13 | u >>> 19
    u = x4 + x7 | 0
    x5 ^= u << 18 | u >>> 14

    u = x10 + x9 | 0
    x11 ^= u << 7 | u >>> 25
    u = x11 + x10 | 0
    x8 ^= u << 9 | u >>> 23
    u = x8 + x11 | 0
    x9 ^= u << 13 | u >>> 19
    u = x9 + x8 | 0
    x10 ^= u << 18 | u >>> 14

    u = x15 + x14 | 0
    x12 ^= u << 7 | u >>> 25
    u = x12 + x15 | 0
    x13 ^= u << 9 | u >>> 23
    u = x13 + x12 | 0
    x14 ^= u << 13 | u >>> 19
    u = x14 + x13 | 0
    x15 ^= u << 18 | u >>> 14
  }

  o[ 0] = x0 >>>  0 & 0xff
  o[ 1] = x0 >>>  8 & 0xff
  o[ 2] = x0 >>> 16 & 0xff
  o[ 3] = x0 >>> 24 & 0xff

  o[ 4] = x5 >>>  0 & 0xff
  o[ 5] = x5 >>>  8 & 0xff
  o[ 6] = x5 >>> 16 & 0xff
  o[ 7] = x5 >>> 24 & 0xff

  o[ 8] = x10 >>>  0 & 0xff
  o[ 9] = x10 >>>  8 & 0xff
  o[10] = x10 >>> 16 & 0xff
  o[11] = x10 >>> 24 & 0xff

  o[12] = x15 >>>  0 & 0xff
  o[13] = x15 >>>  8 & 0xff
  o[14] = x15 >>> 16 & 0xff
  o[15] = x15 >>> 24 & 0xff

  o[16] = x6 >>>  0 & 0xff
  o[17] = x6 >>>  8 & 0xff
  o[18] = x6 >>> 16 & 0xff
  o[19] = x6 >>> 24 & 0xff

  o[20] = x7 >>>  0 & 0xff
  o[21] = x7 >>>  8 & 0xff
  o[22] = x7 >>> 16 & 0xff
  o[23] = x7 >>> 24 & 0xff

  o[24] = x8 >>>  0 & 0xff
  o[25] = x8 >>>  8 & 0xff
  o[26] = x8 >>> 16 & 0xff
  o[27] = x8 >>> 24 & 0xff

  o[28] = x9 >>>  0 & 0xff
  o[29] = x9 >>>  8 & 0xff
  o[30] = x9 >>> 16 & 0xff
  o[31] = x9 >>> 24 & 0xff
}

},{"./xsalsa20":601}],601:[function(require,module,exports){
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __toBinary = /* @__PURE__ */ (() => {
  var table = new Uint8Array(128);
  for (var i = 0; i < 64; i++)
    table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    var n = base64.length, bytes2 = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
    for (var i2 = 0, j = 0; i2 < n; ) {
      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes2[j++] = c0 << 2 | c1 >> 4;
      bytes2[j++] = c1 << 4 | c2 >> 2;
      bytes2[j++] = c2 << 6 | c3;
    }
    return bytes2;
  };
})();

// wasm-binary:./xsalsa20.wat
var require_xsalsa20 = __commonJS({
  "wasm-binary:./xsalsa20.wat"(exports2, module2) {
    module2.exports = __toBinary("AGFzbQEAAAABGgNgBn9/f39/fwBgBn9/f39+fwF+YAN/f38AAwcGAAEBAgICBQUBAQroBwcoAwZtZW1vcnkCAAx4c2Fsc2EyMF94b3IAAAxjb3JlX3NhbHNhMjAABArqEQYYACAAIAEgAiADIAQgACkDACAFEAE3AwALPQBB8AAgAyAFEAMgACABIAIgA0EQaiAEQfAAEAJB8ABCADcDAEH4AEIANwMAQYABQgA3AwBBiAFCADcDAAuHBQEBfyACQQBGBEBCAA8LQdAAIAUpAwA3AwBB2AAgBUEIaikDADcDAEHgACAFQRBqKQMANwMAQegAIAVBGGopAwA3AwBBACADKQMANwMAQQggBDcDAAJAA0AgAkHAAEkNAUEQQQBB0AAQBSAAIAEpAwBBECkDAIU3AwAgAEEIaiABQQhqKQMAQRgpAwCFNwMAIABBEGogAUEQaikDAEEgKQMAhTcDACAAQRhqIAFBGGopAwBBKCkDAIU3AwAgAEEgaiABQSBqKQMAQTApAwCFNwMAIABBKGogAUEoaikDAEE4KQMAhTcDACAAQTBqIAFBMGopAwBBwAApAwCFNwMAIABBOGogAUE4aikDAEHIACkDAIU3AwBBCEEIKQMAQgF8NwMAIABBwABqIQAgAUHAAGohASACQcAAayECDAALC0EIKQMAIQQgAkEASwRAQRBBAEHQABAFAkACQAJAAkACQAJAAkACQCACQQhuDgcHBgUEAwIBAAsgAEE4aiABQThqKQMAQcgAKQMAhTcDAAsgAEEwaiABQTBqKQMAQcAAKQMAhTcDAAsgAEEoaiABQShqKQMAQTgpAwCFNwMACyAAQSBqIAFBIGopAwBBMCkDAIU3AwALIABBGGogAUEYaikDAEEoKQMAhTcDAAsgAEEQaiABQRBqKQMAQSApAwCFNwMACyAAQQhqIAFBCGopAwBBGCkDAIU3AwALIAAgASkDAEEQKQMAhTcDAAtBEEIANwMAQRhCADcDAEEgQgA3AwBBKEIANwMAQTBCADcDAEE4QgA3AwBBwABCADcDAEHIAEIANwMAQdAAQgA3AwBB2ABCADcDAEHgAEIANwMAQegAQgA3AwAgBA8LnQUBEX9B5fDBiwYhA0HuyIGZAyEIQbLaiMsHIQ1B9MqB2QYhEiACKAIAIQQgAkEEaigCACEFIAJBCGooAgAhBiACQQxqKAIAIQcgAkEQaigCACEOIAJBFGooAgAhDyACQRhqKAIAIRAgAkEcaigCACERIAEoAgAhCSABQQRqKAIAIQogAUEIaigCACELIAFBDGooAgAhDEEUIRMCQANAIBNBAEYNASAHIAMgD2pBB3dzIQcgCyAHIANqQQl3cyELIA8gCyAHakENd3MhDyADIA8gC2pBEndzIQMgDCAIIARqQQd3cyEMIBAgDCAIakEJd3MhECAEIBAgDGpBDXdzIQQgCCAEIBBqQRJ3cyEIIBEgDSAJakEHd3MhESAFIBEgDWpBCXdzIQUgCSAFIBFqQQ13cyEJIA0gCSAFakESd3MhDSAGIBIgDmpBB3dzIQYgCiAGIBJqQQl3cyEKIA4gCiAGakENd3MhDiASIA4gCmpBEndzIRIgBCADIAZqQQd3cyEEIAUgBCADakEJd3MhBSAGIAUgBGpBDXdzIQYgAyAGIAVqQRJ3cyEDIAkgCCAHakEHd3MhCSAKIAkgCGpBCXdzIQogByAKIAlqQQ13cyEHIAggByAKakESd3MhCCAOIA0gDGpBB3dzIQ4gCyAOIA1qQQl3cyELIAwgCyAOakENd3MhDCANIAwgC2pBEndzIQ0gDyASIBFqQQd3cyEPIBAgDyASakEJd3MhECARIBAgD2pBDXdzIREgEiARIBBqQRJ3cyESIBNBAmshEwwACwsgACADNgIAIABBBGogCDYCACAAQQhqIA02AgAgAEEMaiASNgIAIABBEGogCTYCACAAQRRqIAo2AgAgAEEYaiALNgIAIABBHGogDDYCAAsKACAAIAEgAhAFC90GASF/QeXwwYsGIQNB7siBmQMhCEGy2ojLByENQfTKgdkGIRIgAigCACEEIAJBBGooAgAhBSACQQhqKAIAIQYgAkEMaigCACEHIAJBEGooAgAhDiACQRRqKAIAIQ8gAkEYaigCACEQIAJBHGooAgAhESABKAIAIQkgAUEEaigCACEKIAFBCGooAgAhCyABQQxqKAIAIQwgAyETIAQhFCAFIRUgBiEWIAchFyAIIRggCSEZIAohGiALIRsgDCEcIA0hHSAOIR4gDyEfIBAhICARISEgEiEiQRQhIwJAA0AgI0EARg0BIAcgAyAPakEHd3MhByALIAcgA2pBCXdzIQsgDyALIAdqQQ13cyEPIAMgDyALakESd3MhAyAMIAggBGpBB3dzIQwgECAMIAhqQQl3cyEQIAQgECAMakENd3MhBCAIIAQgEGpBEndzIQggESANIAlqQQd3cyERIAUgESANakEJd3MhBSAJIAUgEWpBDXdzIQkgDSAJIAVqQRJ3cyENIAYgEiAOakEHd3MhBiAKIAYgEmpBCXdzIQogDiAKIAZqQQ13cyEOIBIgDiAKakESd3MhEiAEIAMgBmpBB3dzIQQgBSAEIANqQQl3cyEFIAYgBSAEakENd3MhBiADIAYgBWpBEndzIQMgCSAIIAdqQQd3cyEJIAogCSAIakEJd3MhCiAHIAogCWpBDXdzIQcgCCAHIApqQRJ3cyEIIA4gDSAMakEHd3MhDiALIA4gDWpBCXdzIQsgDCALIA5qQQ13cyEMIA0gDCALakESd3MhDSAPIBIgEWpBB3dzIQ8gECAPIBJqQQl3cyEQIBEgECAPakENd3MhESASIBEgEGpBEndzIRIgI0ECayEjDAALCyAAIAMgE2o2AgAgAEEEaiAEIBRqNgIAIABBCGogBSAVajYCACAAQQxqIAYgFmo2AgAgAEEQaiAHIBdqNgIAIABBFGogCCAYajYCACAAQRhqIAkgGWo2AgAgAEEcaiAKIBpqNgIAIABBIGogCyAbajYCACAAQSRqIAwgHGo2AgAgAEEoaiANIB1qNgIAIABBLGogDiAeajYCACAAQTBqIA8gH2o2AgAgAEE0aiAQICBqNgIAIABBOGogESAhajYCACAAQTxqIBIgImo2AgAL");
  }
});

// wasm-module:./xsalsa20.wat
var bytes = require_xsalsa20();
var compiled = new WebAssembly.Module(bytes);
module.exports = (imports) => {
  const instance = new WebAssembly.Instance(compiled, imports);
  return instance.exports;
};

},{}],602:[function(require,module,exports){
const b4a = require('b4a')

const ALPHABET = 'ybndrfg8ejkmcpqxot1uwisza345h769'
const MIN = 0x31 // 1
const MAX = 0x7a // z
const REVERSE = new Int8Array(1 + MAX - MIN)

REVERSE.fill(-1)

for (let i = 0; i < ALPHABET.length; i++) {
  const v = ALPHABET.charCodeAt(i) - MIN
  REVERSE[v] = i
}

exports.encode = encode
exports.decode = decode
exports.ALPHABET = ALPHABET

function decode (s, out) {
  let pb = 0
  let ps = 0

  const r = s.length & 7
  const q = (s.length - r) / 8

  if (!out) out = b4a.allocUnsafe(Math.ceil(s.length * 5 / 8))

  // 0 5 2 7 4 1 6 3 (+5 mod 8)
  for (let i = 0; i < q; i++) {
    const a = quintet(s, ps++)
    const b = quintet(s, ps++)
    const c = quintet(s, ps++)
    const d = quintet(s, ps++)
    const e = quintet(s, ps++)
    const f = quintet(s, ps++)
    const g = quintet(s, ps++)
    const h = quintet(s, ps++)

    out[pb++] = (a << 3) | (b >>> 2)
    out[pb++] = ((b & 0b11) << 6) | (c << 1) | (d >>> 4)
    out[pb++] = ((d & 0b1111) << 4) | (e >>> 1)
    out[pb++] = ((e & 0b1) << 7) | (f << 2) | (g >>> 3)
    out[pb++] = ((g & 0b111) << 5) | h
  }

  if (r === 0) return out.subarray(0, pb)

  const a = quintet(s, ps++)
  const b = quintet(s, ps++)

  out[pb++] = (a << 3) | (b >>> 2)

  if (r <= 2) return out.subarray(0, pb)

  const c = quintet(s, ps++)
  const d = quintet(s, ps++)

  out[pb++] = ((b & 0b11) << 6) | (c << 1) | (d >>> 4)

  if (r <= 4) return out.subarray(0, pb)

  const e = quintet(s, ps++)

  out[pb++] = ((d & 0b1111) << 4) | (e >>> 1)

  if (r <= 5) return out.subarray(0, pb)

  const f = quintet(s, ps++)
  const g = quintet(s, ps++)

  out[pb++] = ((e & 0b1) << 7) | (f << 2) | (g >>> 3)

  if (r <= 7) return out.subarray(0, pb)

  const h = quintet(s, ps++)

  out[pb++] = ((g & 0b111) << 5) | h

  return out.subarray(0, pb)
}

function encode (buf) {
  if (typeof buf === 'string') buf = b4a.from(buf)

  const max = buf.byteLength * 8

  let s = ''

  for (let p = 0; p < max; p += 5) {
    const i = p >>> 3
    const j = p & 7

    if (j <= 3) {
      s += ALPHABET[(buf[i] >>> (3 - j)) & 0b11111]
      continue
    }

    const of = j - 3
    const h = (buf[i] << of) & 0b11111
    const l = (i >= buf.byteLength ? 0 : buf[i + 1]) >>> (8 - of)

    s += ALPHABET[h | l]
  }

  return s
}

function quintet (s, i) {
  if (i > s.length) {
    return 0
  }

  const v = s.charCodeAt(i)

  if (v < MIN || v > MAX) {
    throw Error('Invalid character in base32 input: "' + s[i] + '" at position ' + i)
  }

  const bits = REVERSE[v - MIN]

  if (bits === -1) {
    throw Error('Invalid character in base32 input: "' + s[i] + '" at position ' + i)
  }

  return bits
}

},{"b4a":102}],603:[function(require,module,exports){
const Autobase = require('autobase')
const Hyperdrive = require('hyperdrive')
const b4a = require('b4a')
const { EventEmitter } = require('events')

function create_autodrive (options) {
  const { store, bootstrap, opts = {} } = options
  const emitter = new EventEmitter()
  const state = {
    store,
    drive: null,
    bootstrap,
    readers: new Set(),
    writers: new Set(),
    opts,
    base: null
  }

  // Autobase handlers
  function handle_autobase_open (store) {
    const drive_store = store.base.store.namespace('autodrive-' + store.base.version)
    const drive = new Hyperdrive(drive_store)
    return { drive }
  }

  async function handle_autobase_apply (nodes, view, base) {
    await view.drive.ready()
    const batch = view.drive.batch()
    for (const node of nodes) {
      const { type, data = {} } = node.value || {}
      if (!type) continue

      if (type === 'put') {
        const buffer = b4a.from(data.content, 'base64')
        await batch.put(data.path, buffer)
        emitter.emit('content-added', { path: data.path, content: buffer })
      } else if (type === 'del') {
        await batch.del(data.path)
      } else if (type === 'add_writer') {
        const key = b4a.from(data.key, 'hex')
        await base.addWriter(key, { indexer: data.is_indexer }) // Grant write access
        state.writers.add(data.key)
        emitter.emit('writer-added', { key: data.key, is_indexer: data.is_indexer })
      } else if (type === 'add_reader') {
        state.readers.add(data.key)
        emitter.emit('reader-added', { key: data.key })
      } else if (type === 'remove_writer') {
        const key = b4a.from(data.key, 'hex')
        await base.removeWriter(key)
        state.writers.delete(data.key)
        emitter.emit('writer-removed', { key: data.key })
      } else if (type === 'remove_reader') {
        state.readers.delete(data.key)
        emitter.emit('reader-removed', { key: data.key })
      }
    }
    await batch.flush()
  }

  async function handle_autobase_close (view) {
    await view.drive.close()
  }

  state.base = new Autobase(store, bootstrap, {
    inputs: [store.get({ name: 'writer' })],
    valueEncoding: 'json',
    open: handle_autobase_open,
    apply: handle_autobase_apply,
    close: handle_autobase_close,
    ackInterval: opts.ack_interval || 5000
  })

  const api = {
    on: (event, listener) => emitter.on(event, listener),
    off: (event, listener) => emitter.off(event, listener),
    emit: (event, ...args) => emitter.emit(event, ...args),
    get base () { return state.base },
    async ready () {
      await state.base.ready()
      state.drive = state.base.view.drive
    },
    async init () {
      if (!state.bootstrap) return
    },
    async close () {
      await state.base.close()
    },
    async put (path, content) {
      await api.ready()
      await state.base.append({ type: 'put', data: { path, content: b4a.toString(content, 'base64') } })
    },
    async del (path) {
      await api.ready()
      await state.base.append({ type: 'del', data: { path } })
      await state.base.update()
    },
    async get (path, opts) {
      await api.ready()
      return state.drive.get(path, opts)
    },

    async list (folder = '/', opts = {}) {
      await api.ready()
      // List only immediate children (files and directories)
      const entries = []
      async function collect_entry_keys () {
        for await (const entry of await state.drive.list(folder, { ...opts, recursive: false })) {
          entries.push(entry.key)
        }
      }
      await collect_entry_keys()
      return entries
    },
    replicate (isInitiator, options) {
      return state.base.replicate(isInitiator, options)
    },
    async download (folder = '/', opts) {
      if (typeof folder === 'object') return api.download(undefined, folder)
      const dls = []
      const entry = (!folder || folder.endsWith('/')) ? null : await state.drive.entry(folder)
      if (entry) {
        const b = entry.value.blob
        if (!b) return
        const blobs = await state.drive.getBlobs()
        await blobs.core.download({ start: b.blockOffset, length: b.blockLength }).downloaded() // Download single file
        return
      }
      async function iterate_drive_list () {
        for await (const _ of state.drive.list(folder, opts)) {}
      }

      async function collect_download_promises () {
        for await (const entry of state.drive.list(folder, opts)) {
          const b = entry.value.blob
          if (!b) continue
          const blobs = await state.drive.getBlobs()
          dls.push(blobs.core.download({ start: b.block_offset, length: b.block_length }))
        }
      }

      await iterate_drive_list()
      await collect_download_promises()
      const proms = []
      function collect_download_promise (r) {
        proms.push(r.downloaded())
      }
      dls.forEach(collect_download_promise)
      await Promise.allSettled(proms)
    },
    async add_writer (key, opts = {}) {
      const key_str = typeof key === 'string' ? key : key.toString('hex')
      const is_indexer = opts.is_indexer === undefined ? true : !!opts.is_indexer
      await state.base.append({ type: 'add_writer', data: { key: key_str, is_indexer } })
      await state.base.update()
    },
    async add_reader (key) {
      const key_str = typeof key === 'string' ? key : key.toString('hex')
      await state.base.append({ type: 'add_reader', data: { key: key_str } })
      await state.base.update()
    },
    async remove_reader (key) {
      const key_str = typeof key === 'string' ? key : key.toString('hex')
      await state.base.append({ type: 'remove_reader', data: { key: key_str } })
      await state.base.update()
    },
    async remove_writer (key) {
      const key_str = typeof key === 'string' ? key : key.toString('hex')
      await state.base.append({ type: 'remove_writer', data: { key: key_str } })
      await state.base.update()
    },
    get_readers () { return Array.from(state.readers) },
    get_writers () { return Array.from(state.writers) },
    is_reader (key) {
      const key_str = typeof key === 'string' ? key : key.toString('hex')
      return state.readers.has(key_str)
    },
    is_writer (key) {
      const key_str = typeof key === 'string' ? key : key.toString('hex')
      // Check local state, autobase writers, or if it's the base key
      return !!state.writers.has(key_str) || (state.base.writers && state.base.writers.some(w => w.key.toString('hex') === key_str)) || key_str === state.base.key.toString('hex')
    },
    async exists (path) {
      try {
        return !!(await state.drive.get(path))
      } catch {
        return false
      }
    },
    replicate (stream_or_initiator, opts = {}) {
      if (typeof stream_or_initiator === 'boolean') return state.store.replicate(stream_or_initiator, opts)
      const stream = stream_or_initiator
      return state.store.replicate(stream, opts)
    }
  }
  return api
}

// Static function to get local core (copied from Autobase to avoid full import) // i just copied it from easybase to send writer key before pairing.
function getLocalCore (options) {
  const { store, handlers, encryptionKey } = options
  const messages = require('autobase/lib/messages')
  const opts = { ...handlers, compat: false, active: false, exclusive: true, valueEncoding: messages.OplogMessage, encryptionKey }
  return opts.keyPair ? store.get(opts) : store.get({ ...opts, name: 'local' })
}

module.exports = { create_autodrive, getLocalCore }

},{"autobase":84,"autobase/lib/messages":92,"b4a":102,"events":258,"hyperdrive":360}],604:[function(require,module,exports){
// Simple P2P blog helper
const Autobase = require('autobase')
const b4a = require('b4a')
const { create_autodrive } = require('../../autodrive')

// emitter
function make_emitter (state = {}) {
  return { on, off, emit }
  function on (type, callback) { (state[type] = state[type] || []).push(callback) }
  function off (type, callback) { (state[type] = state[type] || [])[state[type].indexOf(callback)] = undefined }
  function emit (type, data) {
    function handle_callback (f) {
      return f && f(data)
    }
    return (state[type] = state[type] || []).map(handle_callback)
  }
}

// Global state
let store, blog_autobase, drive, profile_drive, metadata_store, drive_store, profile_store
const discovered_blogs = new Map() // Blogs available in explore tab
const autobase_cache = new Map()
const drive_cache = new Map()
const profile_cache = new Map()
const emitter = make_emitter()

// Validation functions
function validate_blog_init (entry) {
  const { type, data = {} } = entry || {}
  return type === 'blog-init' &&
         typeof data.username === 'string' &&
         typeof data.title === 'string' &&
         typeof data.drive_key === 'string'
}

function validate_blog_post (entry) {
  const { type, data = {} } = entry || {}
  return type === 'blog-post' &&
         typeof data.filepath === 'string' &&
         typeof data.created === 'number'
}

function validate_profile_init (entry) {
  const { type, data = {} } = entry || {}
  return type === 'profile-init' &&
         typeof data.name === 'string' &&
         typeof data.profile_drive_key === 'string'
}

// Local storage helpers
const get_subscribed_peers = () => {
  try { return JSON.parse(localStorage.getItem('subscribed_peers') || '[]') } catch { return [] }
}
const add_subscribed_peer = key => {
  const peers = get_subscribed_peers()
  if (!peers.includes(key)) {
    peers.push(key)
    localStorage.setItem('subscribed_peers', JSON.stringify(peers))
  }
}
const remove_subscribed_peer = key => {
  function filter_peer (k) {
    return k !== key
  }
  localStorage.setItem('subscribed_peers', JSON.stringify(get_subscribed_peers().filter(filter_peer)))
}

// Create autobase (new or paired)
function create_blog_autobase (metadata_store, key = null) {
  return new Autobase(metadata_store, key, {
    valueEncoding: 'json',
    open: (store) => store.get({ name: 'blog-view' }),
    apply: async (batch, view, base) => {
      for (const entry of batch) {
        const { type, data = {} } = entry.value || {}
        if (type === 'addWriter') {
          const writer_key = b4a.from(data.key, 'hex')
          await base.addWriter(writer_key, { isIndexer: true })
        } else if (type) {
          await view.append(JSON.stringify(entry.value))
        }
      }
    }
  })
}

// Setup peer autobase
async function setup_peer_autobase (key, key_buffer) {
  const peer_metadata_store = store.namespace(`peer-metadata-${key.slice(0, 16)}`)
  const peer_autobase = create_blog_autobase(peer_metadata_store, key_buffer)
  await peer_autobase.ready()

  // Wait for init blog to replicate if needed (peer might not have data yet)
  if (peer_autobase.view.length === 0) {
    function handle_update_resolve (resolve) {
      return () => resolve()
    }
    await new Promise(resolve => peer_autobase.once('update', handle_update_resolve(resolve)))
  }

  async function handle_peer_autobase_update () {
    if (peer_autobase.view.length > 0) {
      try {
        // Always check entry[0] for blog-init metadata
        const init_raw_data = await peer_autobase.view.get(0)
        const init_entry = JSON.parse(b4a.toString(init_raw_data))

        if (validate_blog_init(init_entry) && !get_subscribed_peers().includes(key)) {
          const { data } = init_entry
          discovered_blogs.set(key, { ...data, key }) // Add to explore tab
          autobase_cache.set(key, peer_autobase)
          
          // Setup peer profile drive if profile_drive_key exists
          if (data.profile_drive_key) {
            const peer_profile_store = store.namespace(`peer-profile-${data.profile_drive_key.slice(0, 16)}`)
            const peer_profile_drive = create_autodrive({ store: peer_profile_store, bootstrap: b4a.from(data.profile_drive_key, 'hex') })
            profile_cache.set(key, peer_profile_drive)
          }
          
          emitter.emit('update')
        }

        // Check if latest entry is a new post (for notifications)
        if (peer_autobase.view.length > 1) {
          const latest_index = peer_autobase.view.length - 1
          const latest_raw_data = await peer_autobase.view.get(latest_index)
          const latest_entry = JSON.parse(b4a.toString(latest_raw_data))

          if (validate_blog_post(latest_entry)) {
            store.emit('feed', peer_autobase) // Notify about new posts
          }
        }
      } catch (err) {
        console.error('Error processing update:', err)
      }
    }
  }

  peer_autobase.on('update', handle_peer_autobase_update)

  return peer_autobase
}

// Restore subscribed peers on startup
async function restore_subscribed_peers () {
  for (const key of get_subscribed_peers()) {
    try {
      const peer_autobase = await setup_peer_autobase(key, b4a.from(key, 'hex'))
      if (peer_autobase.view.length > 0) {
        autobase_cache.set(key, peer_autobase)
        const init_block = JSON.parse(b4a.toString(await peer_autobase.view.get(0)))
        const { data } = init_block
        const peer_drive_store = store.namespace(`peer-drive-${data.drive_key.slice(0, 16)}`)
        drive_cache.set(key, create_autodrive({ store: peer_drive_store, bootstrap: b4a.from(data.drive_key, 'hex') }))
        
        // Setup peer profile drive if profile_drive_key exists
        if (data.profile_drive_key) {
          const peer_profile_store = store.namespace(`peer-profile-${data.profile_drive_key.slice(0, 16)}`)
          const peer_profile_drive = create_autodrive({ store: peer_profile_store, bootstrap: b4a.from(data.profile_drive_key, 'hex') })
          profile_cache.set(key, peer_profile_drive)
        }
      }
    } catch (err) {
      console.error('Error restoring peer:', key.slice(0, 16) + '...', err)
    }
  }
}

// Initialize blog - join or create
async function init_blog (options) {
  const {
    store_instance,
    username,
    drive_key = null,
    autobase_key = null
  } = options

  store = store_instance

  // Create namespaced stores (deterministic - same namespace always returns same store)
  metadata_store = store.namespace('blog-metadata')
  drive_store = store.namespace('blog-files')
  profile_store = store.namespace('blog-profile')

  // Create autobase and drive based on whether keys are provided
  blog_autobase = create_blog_autobase(metadata_store, autobase_key)
  drive = create_autodrive({ store: drive_store, bootstrap: drive_key })
  
  // For joined blogs, we need to get profile_drive_key from init data
  let profile_drive_key = null
  if (autobase_key) {
    await blog_autobase.ready()
    await blog_autobase.update()
    if (blog_autobase.view.length > 0) {
      try {
        const init_raw_data = await blog_autobase.view.get(0)
        const init_entry = JSON.parse(b4a.toString(init_raw_data))
        if (validate_blog_init(init_entry)) {
          profile_drive_key = init_entry.data.profile_drive_key
        }
      } catch (err) {
        console.warn('Could not read profile drive key from init data:', err)
      }
    }
  }
  
  profile_drive = create_autodrive({ store: profile_store, bootstrap: profile_drive_key ? b4a.from(profile_drive_key, 'hex') : null })

  await Promise.all([blog_autobase.ready(), drive.ready(), profile_drive.ready()])

  if (!autobase_key && blog_autobase.view.length === 0) {
    // Create init blog for new identity (not joining existing blog)
    const init_data = {
      type: 'blog-init',
      data: {
        drive_key: b4a.toString(drive.base.key, 'hex'),
        profile_drive_key: b4a.toString(profile_drive.base.key, 'hex'),
        title: `${username}'s Blog`,
        username
      }
    }
    await blog_autobase.append(init_data)
    await blog_autobase.update()
    
    // Create default profile
    await create_default_profile(username)
  }

  // Setup replication for new blogs (not needed for joined blogs)
  if (!autobase_key && store.swarm) {
    function handle_replication (conn) {
      metadata_store.replicate(conn)
      drive_store.replicate(conn)
      profile_store.replicate(conn)
    }
    store.swarm.on('connection', handle_replication)
    store.swarm.connections.forEach(handle_replication)
  }

  setup_event_handlers()
  await restore_subscribed_peers()
  emitter.emit('update')
}

// Setup common event handlers
function setup_event_handlers () {
  function handle_emit_update () {
    emitter.emit('update')
  }

  blog_autobase.on('append', handle_emit_update)
  blog_autobase.on('update', handle_emit_update)
  store.on('feed', handle_emit_update)

  async function handle_peer_autobase_key ({ key, key_buffer }) {
    if (key === b4a.toString(blog_autobase.key, 'hex')) return // Skip own blog
    if (autobase_cache.has(key)) {
      console.log('Peer already discovered, skipping:', key.slice(0, 16) + '...')
      return
    }

    try {
      const peer_autobase = await setup_peer_autobase(key, key_buffer)

      if (peer_autobase.view.length > 0) {
        try {
          // Always check entry[0] for blog-init metadata
          const init_block = JSON.parse(b4a.toString(await peer_autobase.view.get(0)))
          if (validate_blog_init(init_block) && !get_subscribed_peers().includes(key)) {
            const { data } = init_block
            discovered_blogs.set(key, { ...data, key }) // Store init metadata
            autobase_cache.set(key, peer_autobase)
            
            // Setup peer profile drive if profile_drive_key exists
            if (data.profile_drive_key) {
              const peer_profile_store = store.namespace(`peer-profile-${data.profile_drive_key.slice(0, 16)}`)
              const peer_profile_drive = create_autodrive({ store: peer_profile_store, bootstrap: b4a.from(data.profile_drive_key, 'hex') })
              profile_cache.set(key, peer_profile_drive)
            }
            
            emitter.emit('update')
          }
        } catch (parseErr) {
          console.warn('Failed to parse peer init block:', parseErr.message)
        }
      } else {
        autobase_cache.set(key, peer_autobase)
      }
    } catch (err) {
      console.error('Error in peer-autobase-key handler:', err)
    }
  }

  store.on('peer-autobase-key', handle_peer_autobase_key)
}

// Create a post
async function create_post (title, content) {
  if (!blog_autobase.writable) {
    throw new Error('Blog is not writable. You may not have write access to this blog.')
  }

  const slug = title.toLowerCase().split(' ').join('_').replace(/[^a-z0-9_]/g, '')
  const filepath = `/posts/${slug}/index.md`
  await drive.put(filepath, b4a.from(`${title}\n\n${content}`))
  await blog_autobase.append({ type: 'blog-post', data: { filepath, created: Date.now() } })
  await blog_autobase.update()
  emitter.emit('update')
}

// Subscribe to peer
async function subscribe (key) {
  if (get_subscribed_peers().includes(key)) return true

  try {
    const peer_autobase = autobase_cache.get(key)
    if (!peer_autobase) return false

    const init_block = JSON.parse(b4a.toString(await peer_autobase.view.get(0)))
    const { data } = init_block
    const peer_drive_store = store.namespace(`peer-drive-${data.drive_key.slice(0, 16)}`)
    const peer_drive = create_autodrive({ store: peer_drive_store, bootstrap: b4a.from(data.drive_key, 'hex') })

    // Setup replication for peer drive store
    if (store.swarm) {
      function handle_peer_drive_replication (conn) {
        peer_drive_store.replicate(conn)
      }
      store.swarm.connections.forEach(handle_peer_drive_replication)
    }
    
    // Setup peer profile drive if profile_drive_key exists
    if (data.profile_drive_key) {
      const peer_profile_store = store.namespace(`peer-profile-${data.profile_drive_key.slice(0, 16)}`)
      const peer_profile_drive = create_autodrive({ store: peer_profile_store, bootstrap: b4a.from(data.profile_drive_key, 'hex') })
      profile_cache.set(key, peer_profile_drive)
      
      if (store.swarm) {
        function handle_peer_profile_replication (conn) {
          peer_profile_store.replicate(conn)
        }
        store.swarm.connections.forEach(handle_peer_profile_replication)
      }
    }

    drive_cache.set(key, peer_drive)
    add_subscribed_peer(key)
    discovered_blogs.delete(key) // Remove from explore tab when subscribed
    emitter.emit('update')
    return true
  } catch (err) {
    console.error('Subscription failed:', err)
    return false
  }
}

// Get username from blog init data
async function get_blog_username () {
  if (!blog_autobase) return null
  try {
    await blog_autobase.update()
    if (blog_autobase.view.length === 0) return null
    const raw_data = await blog_autobase.view.get(0)
    if (!raw_data) return null
    const entry = JSON.parse(b4a.toString(raw_data))
    return entry.data?.username || null
  } catch (err) {
    return null
  }
}

// Get posts for any blog by key (unified function)
async function get_posts (key = null) {
  // Use own blog if no key provided
  const autobase = key ? autobase_cache.get(key) : blog_autobase
  const drive_instance = key ? drive_cache.get(key) : drive

  if (!autobase || !drive_instance) return []

  await autobase.update()
  const posts = []

  for (let i = 1; i < autobase.view.length; i++) { // Skip index 0 (blog-init)
    try {
      const raw_data = await autobase.view.get(i)
      if (!raw_data) continue
      const entry = JSON.parse(b4a.toString(raw_data))

      if (validate_blog_post(entry)) {
        const { data } = entry
        const content = await drive_instance.get(data.filepath)

        if (content) {
          const lines = b4a.toString(content).split('\n')
          const title = lines[0] || 'Untitled'
          const postContent = lines.length > 2 ? lines.slice(2).join('\n') : ''
          posts.push({ ...data, title, content: postContent })
        } else {
          posts.push({ ...data, title: 'Untitled', content: '' })
        }
      }
    } catch (err) {
      console.error(`Error reading entry ${i}:`, err.message)
    }
  }

  return posts.reverse()
}

// Get your posts
async function get_my_posts () {
  return get_posts() // No key = own blog
}

// Get peer blogs
async function get_peer_blogs () {
  const blogs = new Map()

  for (const key of get_subscribed_peers()) {
    try {
      const peer_autobase = autobase_cache.get(key)
      if (!peer_autobase || peer_autobase.view.length === 0) continue

      const init_block = JSON.parse(b4a.toString(await peer_autobase.view.get(0)))
      if (!validate_blog_init(init_block)) continue

      const { data } = init_block
      let peer_drive = drive_cache.get(key)
      if (!peer_drive) {
        const peer_files_store = store.namespace(`peer-files-${data.drive_key.slice(0, 16)}`)
        peer_drive = create_autodrive({ store: peer_files_store, bootstrap: b4a.from(data.drive_key, 'hex') })
        drive_cache.set(key, peer_drive)
      }

      await peer_drive.ready()
      blogs.set(key, {
        key,
        posts: await get_posts(key), // Use unified function
        username: data.username,
        title: data.title
      })
    } catch (err) {
      // Silent error handling - peer might not be available
    }
  }
  return blogs
}

// Create default profile
async function create_default_profile (username) {
  const default_avatar = `<svg><text x="50%" y="50%" font-size="120" text-anchor="middle" dominant-baseline="middle">👤</text></svg>`
  
  await profile_drive.put('/avatar.svg', b4a.from(default_avatar))
  await profile_drive.put('/profile.json', b4a.from(JSON.stringify({
    name: username,
    avatar: '/avatar.svg'
  })))
}

// Get profile data
async function get_profile (key = null) {
  const profile_instance = key ? profile_cache.get(key) : profile_drive
  if (!profile_instance) return null
  
  try {
    const profile_data = await profile_instance.get('/profile.json')
    if (!profile_data) return null
    return JSON.parse(b4a.toString(profile_data))
  } catch (err) {
    return null
  }
}

// Create invite for pairing
async function create_invite (swarm) {
  const pairing_helper = require('../pairing-helper')
  const { invite_code, invite } = await pairing_helper.create_invite(
    drive.base.key,
    blog_autobase.key
  )

  await pairing_helper.setup_member({ drive, blog_autobase, profile_drive, swarm, invite })

  return invite_code
}

module.exports = {
  init_blog,
  create_post,
  create_invite,
  subscribe,
  get_posts,
  get_my_posts,
  get_peer_blogs,
  get_blog_username,
  get_profile,
  get_discovered_blogs: () => discovered_blogs, // Blogs in explore tab
  get_my_core_key: () => blog_autobase?.key,
  get_drive: () => drive,
  get_profile_drive: () => profile_drive,
  get_autobase_key: () => blog_autobase ? b4a.toString(blog_autobase.key, 'hex') : null,
  get_autobase: () => blog_autobase,
  get_metadata_store: () => metadata_store,
  get_drive_store: () => drive_store,
  get_profile_store: () => profile_store,
  on_update: handle_update_callback,
  unsubscribe: handle_unsubscribe
}

function handle_update_callback (cb) {
  return emitter.on('update', cb)
}

function handle_unsubscribe (key) {
  remove_subscribed_peer(key)
  drive_cache.delete(key)
  autobase_cache.delete(key)
  emitter.emit('update')
}

},{"../../autodrive":603,"../pairing-helper":606,"autobase":84,"b4a":102}],605:[function(require,module,exports){
const b4a = require('b4a')
const sodium = require('sodium')
const bip39 = require('bip39-mnemonic')

const isBrowser = (typeof window !== 'undefined')

// Save/load functions for seedphrase
async function save (seedphrase, name = 'default') {
  if (isBrowser) {
    localStorage[`${name}-seedphrase`] = seedphrase
  } else {
    // Use dynamic require to avoid browserify trying to bundle bare-fs
    const fs = eval('require')('bare-fs')
    await fs.promises.writeFile(`.${name}-seedphrase`, seedphrase, 'utf8')
  }
}

async function load (name = 'default') {
  if (isBrowser) {
    return localStorage[`${name}-seedphrase`] || null
  } else {
    // Use dynamic require to avoid browserify trying to bundle bare-fs
    const fs = eval('require')('bare-fs')
    try {
      return await fs.promises.readFile(`.${name}-seedphrase`, 'utf8')
    } catch (err) {
      return null
    }
  }
}

// Normalize mnemonicToSeed to always be async and return Buffer
async function mnemonicToSeed (mnemonic) {
  return await bip39.mnemonicToSeed(mnemonic)
}

// Create a keypair from a mnemonic (or generate one if not provided)
async function create_mnemonic_keypair (options = {}) {
  const mnemonic = options.mnemonic || bip39.generateMnemonic(128)
  const seed64 = await mnemonicToSeed(mnemonic)
  const seed32 = seed64.slice(0, 32)
  const publicKey = b4a.alloc(32)
  const secretKey = b4a.alloc(64)
  sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed32)
  return {
    mnemonic,
    seed: seed32,
    keypair: { publicKey, secretKey }
  }
}

module.exports = {
  create_mnemonic_keypair,
  save,
  load
}

},{"b4a":102,"bip39-mnemonic":108,"sodium":608}],606:[function(require,module,exports){
const b4a = require('b4a')
const BlindPairing = require('blind-pairing')
const extend = require('@geut/sodium-javascript-plus/extend')
const sodium = extend(require('sodium-universal'))

let current_member = null
let current_candidate = null

// Create invite for sharing drive access
async function create_invite (drive_key, autobase_key) {
  console.log('Creating invite code...')
  const invite = BlindPairing.createInvite(drive_key)
  const invite_code = b4a.toString(invite.invite, 'base64')
  console.log('Invite code created successfully')
  return { invite_code, invite, autobase_key }
}

// Setup member to handle join requests
async function setup_member (options) {
  const { drive, blog_autobase, profile_drive, swarm, invite } = options
  const blind_pairing = new BlindPairing(swarm)
  await blind_pairing.ready()

  async function handle_pairing_request (request) {
    try {
      console.log('Pairing request received')
      await request.open(invite.publicKey)
      console.log('Pairing request opened')

      const user_data = request.userData

      // Split the concatenated keys (96 bytes total: 32 + 32 + 32)
      const metadata_writer_key = user_data.slice(0, 32)
      const drive_writer_key = user_data.slice(32, 64)
      const profile_writer_key = user_data.slice(64, 96)

      const metadata_writer_hex = b4a.toString(metadata_writer_key, 'hex')
      await blog_autobase.append({ type: 'addWriter', data: { key: metadata_writer_hex } })
      await blog_autobase.update()

      const drive_writer_hex = b4a.toString(drive_writer_key, 'hex')
      await drive.add_writer(drive_writer_hex)
      
      const profile_writer_hex = b4a.toString(profile_writer_key, 'hex')
      await profile_drive.add_writer(profile_writer_hex)

      console.log('Added as writer in the autobase, autodrive, and profile autodrive')

      request.confirm({
        key: drive.base.key,
        encryptionKey: blog_autobase.key
      })

      console.log('Device paired successfully')
    } catch (error) {
      console.error('Pairing error:', error.message)
    }
  }

  current_member = blind_pairing.addMember({
    discoveryKey: drive.base.discoveryKey,
    onadd: handle_pairing_request
  })

  await current_member.ready()
  current_member.announce()
  return current_member
}

// Join existing drive using invite
async function join_with_invite (options) {
  const { invite_code, swarm, store } = options
  const blind_pairing = new BlindPairing(swarm)
  await blind_pairing.ready()

  const invite_buffer = b4a.from(invite_code, 'base64')

  const metadata_store = store.namespace('blog-metadata')
  const drive_store = store.namespace('blog-files')

  const { getLocalCore } = require('../../autodrive')

  // Generate writer keys for metadata, drive, and profile
  const profile_store = store.namespace('blog-profile')
  const metadata_core = getLocalCore({ store: metadata_store })
  const drive_core = getLocalCore({ store: drive_store })
  const profile_core = getLocalCore({ store: profile_store })

  await Promise.all([metadata_core.ready(), drive_core.ready(), profile_core.ready()])

  const metadata_writer_key = metadata_core.key
  const drive_writer_key = drive_core.key
  const profile_writer_key = profile_core.key

  await Promise.all([metadata_core.close(), drive_core.close(), profile_core.close()])

  const user_data = b4a.concat([metadata_writer_key, drive_writer_key, profile_writer_key]) // Send all three keys

  console.log('Joining pairing network...')

  return new Promise((resolve, reject) => {
    async function handle_candidate_add (result) {
      try {
        console.log('Successfully joined network')
        resolve({
          drive_key: result.key,
          autobase_key: result.encryptionKey
        })
      } catch (error) {
        console.error('Join error:', error.message)
        reject(error)
      }
    }

    function handle_candidate_ready_error (error) {
      reject(error)
    }

    current_candidate = blind_pairing.addCandidate({
      invite: invite_buffer,
      userData: user_data,
      onadd: handle_candidate_add
    })

    current_candidate.ready().catch(handle_candidate_ready_error)
  })
}

module.exports = {
  create_invite,
  setup_member,
  join_with_invite
}

},{"../../autodrive":603,"@geut/sodium-javascript-plus/extend":9,"b4a":102,"blind-pairing":129,"sodium-universal":556}],607:[function(require,module,exports){
const c = require('compact-encoding')
const b4a = require('b4a')

function identity_exchange_protocol (handlers, init_fn, options = {}) {
  const { peer_mode = 'unknown', label = '[peer]', identity_info, peer_info } = options

  return function (mux) {
    let has_received_key = false

    const channel = mux.createChannel({
      protocol: 'identity-exchange',
      onopen: () => {
        console.log(label, 'Identity channel opened')

        const message = channel.addMessage({
          encoding: c.json,
          onmessage: async (msg) => {
            try {
              // Handle protocol message
              if (msg.type === 'protocol') {
                if (handlers.on_protocol) {
                  await handlers.on_protocol(msg, m => message.send(m), peer_mode)
                }
              }

              // Handle feedkey message
              if (msg.type === 'feedkey' && !has_received_key) {
                has_received_key = true
                const key_buffer = b4a.from(msg.data, 'hex')

                if (!key_buffer || key_buffer.length !== 32) {
                  console.error('Invalid feed key:', msg.data)

                  return
                }

                if (handlers.on_feedkey) {
                  await handlers.on_feedkey({
                    key_buffer,
                    hex_key: key_buffer.toString('hex'),
                    message: msg
                  }, m => message.send(m))
                }
              }

              // Handle autobase key request
              if (msg.type === 'autobase_key_request') {
                if (handlers.on_autobase_key_request) {
                  await handlers.on_autobase_key_request(msg.data, m => message.send(m))
                }
              }

              // Handle autobase key response
              if (msg.type === 'autobase_key_response') {
                if (handlers.on_autobase_key_response) {
                  await handlers.on_autobase_key_response(msg.data, m => message.send(m))
                }
              }

              // Handle writer request
              if (msg.type === 'writer_request') {
                if (handlers.on_writer_request) {
                  await handlers.on_writer_request(msg.data, m => message.send(m))
                }
              }

              // Handle writer added confirmation
              if (msg.type === 'writer_added') {
                if (handlers.on_writer_added) {
                  await handlers.on_writer_added(msg.data, m => message.send(m))
                }
              }
            } catch (err) {
              console.error(label, 'Error handling message:', err)
            }
          }
        })

        if (init_fn) init_fn(m => message.send(m))
      }
    })

    return channel
  }
}

module.exports = { identity_exchange_protocol }

},{"b4a":102,"compact-encoding":178}],608:[function(require,module,exports){
const extend = require('./extension_pbkdf2_sha512_async.js')
const sodium = require('sodium-javascript')
Object.assign(sodium, extend)
module.exports = sodium

},{"./extension_pbkdf2_sha512_async.js":609,"sodium-javascript":531}],609:[function(require,module,exports){
const b4a = require('b4a')

async function extension_pbkdf2_sha512_async (out, password, salt, iterations, keylen) {
  if (out.length < keylen) throw new Error('Output buffer too small')

  // Use Web Crypto API if available (preferred for browsers)
  if (typeof crypto !== 'undefined' && crypto.subtle) {
    try {
      const key = await crypto.subtle.importKey(
        'raw',
        password,
        { name: 'PBKDF2' },
        false,
        ['deriveBits']
      )

      const derivedBits = await crypto.subtle.deriveBits(
        {
          name: 'PBKDF2',
          salt: salt,
          iterations: iterations,
          hash: 'SHA-512'
        },
        key,
        keylen * 8
      )

      const result = new Uint8Array(derivedBits)
      out.set(result.subarray(0, keylen))
      return out
    } catch (error) {
      console.warn('Web Crypto API failed, using fallback:', error.message)
      // Fall through to fallback
    }
  }

  // Fallback implementation with proper SHA-512
  const hashLen = 64 // SHA-512 output length
  const blocks = Math.ceil(keylen / hashLen)

  for (let i = 1; i <= blocks; i++) {
    // Create block salt with proper big-endian encoding
    const blockSalt = b4a.alloc(salt.length + 4)
    blockSalt.set(salt)
    blockSalt[salt.length] = (i >>> 24) & 0xff
    blockSalt[salt.length + 1] = (i >>> 16) & 0xff
    blockSalt[salt.length + 2] = (i >>> 8) & 0xff
    blockSalt[salt.length + 3] = i & 0xff

    // First iteration
    let u = await hmac_sha512(password, blockSalt)
    const result = b4a.from(u)

    // Remaining iterations
    for (let j = 1; j < iterations; j++) {
      u = await hmac_sha512(password, u)
      for (let k = 0; k < hashLen; k++) {
        result[k] ^= u[k]
      }
    }

    // Copy result to output buffer
    const offset = (i - 1) * hashLen
    const size = Math.min(hashLen, keylen - offset)
    out.set(result.subarray(0, size), offset)
  }

  return out
}

async function hmac_sha512 (key, data) {
  if (!key || !data) {
    throw new Error('HMAC key and data are required')
  }

  // Try Web Crypto API first for consistency
  if (typeof crypto !== 'undefined' && crypto.subtle) {
    try {
      const cryptoKey = await crypto.subtle.importKey(
        'raw',
        key,
        { name: 'HMAC', hash: 'SHA-512' },
        false,
        ['sign']
      )

      const signature = await crypto.subtle.sign('HMAC', cryptoKey, data)
      return new Uint8Array(signature)
    } catch (error) {
      // Fall through to manual implementation
    }
  }

  // Manual HMAC-SHA512 implementation
  const blockSize = 128 // SHA-512 block size
  const hashSize = 64 // SHA-512 output size

  // Process key
  let processedKey = key
  if (key.length > blockSize) {
    processedKey = await sha512(key)
  } else if (key.length < blockSize) {
    // Pad key to block size
    const paddedKey = b4a.alloc(blockSize)
    paddedKey.set(key)
    processedKey = paddedKey
  }

  // Create pads
  const ipad = b4a.alloc(blockSize)
  const opad = b4a.alloc(blockSize)

  // XOR key with pads
  for (let i = 0; i < blockSize; i++) {
    ipad[i] = processedKey[i] ^ 0x36
    opad[i] = processedKey[i] ^ 0x5c
  }

  // Inner hash: H(K XOR ipad, text)
  const innerData = b4a.concat([ipad, data])
  const innerHash = await sha512(innerData)

  // Outer hash: H(K XOR opad, inner_hash)
  const outerData = b4a.concat([opad, innerHash])
  const result = await sha512(outerData)

  return result
}

async function sha512 (data) {
  // Try Web Crypto API first
  if (typeof crypto !== 'undefined' && crypto.subtle) {
    try {
      const hash = await crypto.subtle.digest('SHA-512', data)
      return new Uint8Array(hash)
    } catch (error) {
      // Fall through to manual implementation
    }
  }

  // Try Node.js crypto module
  if (typeof require !== 'undefined') {
    try {
      const crypto = require('crypto')
      const hash = crypto.createHash('sha512')
      hash.update(data)
      return b4a.from(hash.digest())
    } catch (error) {
      // Fall through to sodium implementation
    }
  }

  // Try sodium implementation as last resort
  try {
    const sodium = require('sodium-javascript')
    if (sodium.crypto_hash_sha512) {
      const result = b4a.alloc(64)
      sodium.crypto_hash_sha512(result, data)
      return result
    }
  } catch (error) {
    // Sodium doesn't have SHA-512, use generichash as absolute fallback
  }

  // Absolute fallback - use sodium's generichash (BLAKE2b)
  // This should not happen in normal operation
  console.warn('Using BLAKE2b as SHA-512 fallback - results may not match!')
  const sodium = require('sodium-javascript')
  const result = b4a.alloc(64)
  sodium.crypto_generichash(result, data)
  return result
}

module.exports = {
  extension_pbkdf2_sha512_async
}

},{"b4a":102,"crypto":216,"sodium-javascript":531}],610:[function(require,module,exports){
const b4a = require('b4a')
const Hyperswarm = require('hyperswarm')
const DHT = require('@hyperswarm/dht-relay')
const Stream = require('@hyperswarm/dht-relay/ws')
const HyperWebRTC = require('hyper-webrtc')
const Protomux = require('protomux')
const Corestore = require('corestore')
const RAW = require('random-access-web')
const { create_mnemonic_keypair, save, load } = require('helpers/crypto-helpers')
const { identity_exchange_protocol } = require('helpers/protocol-helpers')
const pairing_helper = require('../helpers/pairing-helper')
const blog_helper = require('../helpers/blog-helpers')

const topic = b4a.from('ffb09601562034ee8394ab609322173b641ded168059d256f6a3d959b2dc6021', 'hex')
const PEERS_STORAGE_KEY = 'discovered_peers'

async function start_browser_peer (options = {}) {
  const name = options.name || 'browser-peer'
  const invite_code = options.invite_code // For joining existing networks
  const is_dev = location.hostname === 'localhost' || location.hostname.startsWith('192.') || location.hostname.startsWith('10.')
  const relay_url = options.relay || (is_dev ? 'ws://localhost:8080' : 'wss://relay-production-9c0e.up.railway.app')
  const get_blog_key = options.get_blog_key
  const get_blog_autobase = options.get_blog_autobase
  const get_metadata_store = options.get_metadata_store
  const get_drive_store = options.get_drive_store
  const get_profile_store = options.get_profile_store

  const store = new Corestore(RAW(`blogs-${name}`))

  // load saved peer
  let saved_peers = {}
  try {
    const saved = localStorage.getItem(PEERS_STORAGE_KEY)
    if (saved) saved_peers = JSON.parse(saved)
  } catch (err) {
    console.error('Error loading saved peers:', err)
  }

  await store.ready()
  const core = store.get({ name: 'test-core' })
  await core.ready()
  if (core.length === 0) await core.append('This is some data')

  return new Promise((resolve, reject) => {
    const socket = new WebSocket(relay_url)

    function handle_socket_error (err) {
      // If invalid URL, reject. If valid URL but down, go offline mode
      const errorMessage = err.message || err.toString() || ''
      if (errorMessage.includes('Invalid URL') || errorMessage.includes('URL scheme') || errorMessage.includes('ERR_INVALID_URL')) {
        reject(new Error(`Invalid relay URL: ${relay_url}`))
      } else {
        function handle_cleanup () {
          // cleanup function
        }
        resolve({ store, core, swarm: null, dht: null, cleanup: handle_cleanup })
      }
    }

    function handle_socket_close () {
      console.log('WebSocket closed')
    }

    socket.addEventListener('error', handle_socket_error)
    socket.addEventListener('close', handle_socket_close)

    async function handle_socket_open () {
      try {
        // Verify socket is ready
        if (socket.readyState !== WebSocket.OPEN) {
          console.error('Socket not ready:', socket.readyState)
          return
        }

        // key management
        const seedphrase = await load(name)
        const mnemonic_data = seedphrase
          ? await create_mnemonic_keypair({ namespace: 'noisekeys', name: 'noise', mnemonic: seedphrase })
          : await create_mnemonic_keypair({ namespace: 'noisekeys', name: 'noise' })

        if (!seedphrase) await save(mnemonic_data.mnemonic, name)
        console.log('Peer key:', b4a.toString(mnemonic_data.keypair.publicKey, 'hex'))

        // Create DHT stream with error handling
        // Create DHT stream
        const stream = new Stream(true, socket)
        console.log('Initializing DHT...')
        const dht = new DHT(stream)
        const swarm = new Hyperswarm({ dht, key_pair: mnemonic_data.keypair })

        // Set up connection handler BEFORE joining
        function handle_swarm_connection (relay, details) {
          console.log('New connection established')
          if (!relay.userData) relay.userData = null
          const mux = new Protomux(relay)

          // protocol handlers
          async function handle_protocol_message (message, send, current_peer_mode) {
          // Store discovered relay for potential future connections
            if (message.data.relay_url) {
              if (!window.discovered_relays) window.discovered_relays = new Set()
              window.discovered_relays.add(message.data.relay_url)
            }

            if (message.data.mode === 'browser' && current_peer_mode === 'browser') {
              const stream = HyperWebRTC.from(relay, { initiator: relay.isInitiator }) // Upgrade to WebRTC

              function handle_webrtc_open () {
                console.log('WebRTC connection established')
                const blog_key = get_blog_key ? get_blog_key() : null
                if (blog_key) send({ type: 'feedkey', data: blog_key }) // Share our blog key

                // Setup corestore replication for WebRTC connections
                const metadata_store = get_metadata_store ? get_metadata_store() : null
                const drive_store = get_drive_store ? get_drive_store() : null
                const profile_store = get_profile_store ? get_profile_store() : null

                if (metadata_store && drive_store && profile_store) {
                  metadata_store.replicate(stream)
                  drive_store.replicate(stream)
                  profile_store.replicate(stream)
                }
              }

              function handle_webrtc_close () {
                console.log('WebRTC connection closed')
              }

              function handle_webrtc_error (err) {
                if (!err.message?.includes('Abort') && !err.message?.includes('closed')) {
                  console.warn('WebRTC error:', err.message)
                }
              }

              stream.on('open', handle_webrtc_open)
              stream.on('close', handle_webrtc_close)
              stream.on('error', handle_webrtc_error)
            } else if (message.data.mode === 'native') {
              const blog_key = get_blog_key ? get_blog_key() : null
              if (blog_key) send({ type: 'feedkey', data: blog_key }) // Share our blog key

              // Setup corestore replication for native peer connections
              const metadata_store = get_metadata_store ? get_metadata_store() : null
              const drive_store = get_drive_store ? get_drive_store() : null
              const profile_store = get_profile_store ? get_profile_store() : null

              if (metadata_store && drive_store && profile_store) {
                metadata_store.replicate(relay) // Use relay stream directly
                drive_store.replicate(relay)
                profile_store.replicate(relay)
              }
            }
          }

          async function handle_feedkey_message ({ key_buffer }) {
            const hex_key = b4a.toString(key_buffer, 'hex')
            store.emit('peer-autobase-key', { key: hex_key, key_buffer })
          }

          const handlers = {
            on_protocol: handle_protocol_message,

            on_feedkey: handle_feedkey_message
          }

          // protocol setup
          function handle_protocol_init (send) {
            send({
              type: 'protocol',
              data: {
                name,
                mode: 'browser',
                device_public_key: b4a.toString(mnemonic_data.keypair.publicKey, 'hex'),
                relay_url: relay_url
              }
            })
          }

          const setup_protocol = identity_exchange_protocol(handlers, handle_protocol_init, {
            peer_mode: 'browser',
            label: '[browser-peer]'
          })

          const identity_channel = setup_protocol(mux)
          identity_channel.open()

          function handle_peer_add (peer) {
            store.emit('peer-autobase-key', {
              key: b4a.toString(get_blog_autobase().key, 'hex'),
              key_buffer: get_blog_autobase().key
            })
          }

          store.on('peer-add', handle_peer_add)

          function handle_relay_close () {
            console.log('Peer disconnected')
          }

          function handle_relay_error (err) {
            if (!err.message?.includes('Duplicate connection')) {
              console.warn('Relay error:', err.message)
            }
          }

          relay.on('close', handle_relay_close)
          relay.on('error', handle_relay_error)
        }

        swarm.on('connection', handle_swarm_connection)

        // Now join the swarm AFTER setting up the connection handler
        console.log('Joining swarm')
        const discovery = swarm.join(topic, { server: true, client: true })

        function handle_periodic_join () {
          function handle_join_warning (err) {
            console.warn('Join warning:', err.message)
          }

          swarm.join(topic, { server: true, client: true })
            .flushed()
            .catch(handle_join_warning)
        }

        const join_interval = setInterval(handle_periodic_join, 5000)

        // Attach swarm to store for easy access in blog-helpers
        store.swarm = swarm

        // Handle pairing if invite_code is provided (joining existing blog)
        if (invite_code) {
          handle_join_with_invite({ invite_code, swarm, store, username: name })
        }

        function handle_cleanup () {
          clearInterval(join_interval)
        }

        resolve({ store, core, swarm, dht, cleanup: handle_cleanup })

        // Flush in background, don't block UI
        function handle_flush_warning (err) {
          console.warn('Flush warning:', err.message)
        }

        function handle_flush_success () {
          console.log('Swarm joined')
        }

        discovery.flushed().catch(handle_flush_warning).then(handle_flush_success)
      } catch (error) {
        console.error('Error in socket open handler:', error)
        reject(error)
      }
    }

    socket.addEventListener('open', handle_socket_open)
  })
}

// Handle joining with invite code
async function handle_join_with_invite (options) {
  const { invite_code, swarm, store, username } = options
  try {
    const result = await pairing_helper.join_with_invite({ invite_code, swarm, store })

    // Initialize blog with shared access first
    await blog_helper.init_blog({
      store_instance: store,
      username,
      drive_key: result.drive_key,
      autobase_key: result.autobase_key
    })

    // Setup corestore replication using blog helper stores
    function handle_pairing_connection (conn) {
      blog_helper.get_metadata_store().replicate(conn)
      blog_helper.get_drive_store().replicate(conn)
      blog_helper.get_profile_store().replicate(conn)
    }

    swarm.on('connection', handle_pairing_connection)

    for (const conn of swarm.connections) {
      blog_helper.get_metadata_store().replicate(conn)
      blog_helper.get_drive_store().replicate(conn)
      blog_helper.get_profile_store().replicate(conn)
    }
  } catch (err) {
    console.error('Pairing error:', err)
  }
}

module.exports = { start: start_browser_peer }

},{"../helpers/blog-helpers":604,"../helpers/pairing-helper":606,"@hyperswarm/dht-relay":15,"@hyperswarm/dht-relay/ws":59,"b4a":102,"corestore":183,"helpers/crypto-helpers":605,"helpers/protocol-helpers":607,"hyper-webrtc":292,"hyperswarm":362,"protomux":439,"random-access-web":460}],611:[function(require,module,exports){
const { start: start_browser_peer } = require('../src/node_modules/web-peer')
const blog_helper = require('../src/node_modules/helpers/blog-helpers')

let store
let username = localStorage.getItem('username') || ''
let current_view
let is_ready = false
let is_joining = false
let swarm = null

// Basic HTML structure
document.body.innerHTML = `
  <div class="app">
    <div class="login" style="display: ${username ? 'none' : 'block'}">
      <h3>P2P News App</h3>
      
      <!-- Make form - only shows username -->
      <div class="make-form" style="display: none; margin-top: 10px;">
        <button class="back-btn" style="margin-bottom: 5px;">← Back</button><br>
        <input class="username-input" value="${username}" placeholder="Your Name">
        <button class="make-network-btn">Create Blog</button>
      </div>
      
      <!-- Join form - only shows invite code -->
      <div class="join-form" style="display: none; margin-top: 10px;">
        <button class="back-btn" style="margin-bottom: 5px;">← Back</button><br>
        <input class="invite-code-input" placeholder="Paste invite code here" style="width: 300px;">
        <button class="join-with-invite-btn">Join with Invite</button>
      </div>
      
      <!-- Load form - only shows mnemonic -->
      <div class="load-form" style="display: none; margin-top: 10px;">
        <button class="back-btn" style="margin-bottom: 5px;">← Back</button><br>
        <input class="mnemonic-input" placeholder="Enter mnemonic phrase" style="width: 300px;">
        <button class="load-mnemonic-btn">Load from Mnemonic</button>
      </div>
      
      <!-- Initial buttons -->
      <div class="initial-buttons">
        <button class="make-btn">Seed</button>
        <button class="join-btn">Pair</button>
        <button class="load-btn">Load</button>
      </div>
    </div>
    <div class="main" style="display: ${username ? 'block' : 'none'}">
      <div>Status: <span class="connection-status">Disconnected</span></div>
      <nav>
        <button data-view="news">News</button>
        <button data-view="blog">My Blog</button>
        <button data-view="explore">Explore</button>
        <button data-view="post">New Post</button>
        <button data-view="config">Config</button>
      </nav>
      <style>
        nav button.active { background-color: #007bff; color: white; }
      </style>
      <div class="view"></div>
    </div>
  </div>
`

// Utility functions
const format_date = timestamp => new Date(timestamp).toLocaleString()
function escape_html (str) {
  if (!str) return ''
  function get_html_entity (tag) {
    const entities = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }
    return entities[tag]
  }
  return str.replace(/[&<>"']/g, get_html_entity)
}

// Setup connection status UI
function setup_connection_status (swarm) {
  const status_el = document.querySelector('.connection-status')
  if (swarm) {
    status_el.textContent = '🟡 Please wait, joining the swarm...'

    function handle_swarm_connection () {
      is_joining = false
      status_el.textContent = `🟢 Connected as ${username} (${swarm.connections.size} peers)`
      if (current_view) render_view(current_view)
    }

    function handle_swarm_disconnection () {
      status_el.textContent = `🟢 Connected as ${username} (${swarm.connections.size} peers)`
    }

    swarm.on('connection', handle_swarm_connection)
    swarm.on('disconnection', handle_swarm_disconnection)

    function handle_connection_timeout () {
      is_joining = false
      if (swarm.connections.size > 0) {
        status_el.textContent = `🟢 Connected as ${username} (${swarm.connections.size} peers)`
      } else {
        status_el.textContent = `🟢 Joined swarm as ${username} (waiting for peers...)`
      }
      if (current_view) render_view(current_view)
    }

    setTimeout(handle_connection_timeout, 2000)
  } else {
    is_joining = false
    status_el.textContent = '🟠 Offline mode (relay not available)'
  }
}

// Core functionality
async function make_network () {
  const user = document.querySelector('.username-input').value.trim() || username
  if (!user) return alert('Please enter your name to make.')

  localStorage.setItem('username', user)
  username = user

  document.querySelector('.login').style.display = 'none'
  document.querySelector('.main').style.display = 'block'

  try {
    document.querySelector('.connection-status').textContent = 'Connecting to relay...'
    is_joining = true

    const { store: _store, swarm: _swarm } = await start_browser_peer({
      name: username,
      get_blog_key: () => blog_helper.get_autobase_key(),
      get_blog_autobase: () => blog_helper.get_autobase(),
      get_metadata_store: () => blog_helper.get_metadata_store(),
      get_drive_store: () => blog_helper.get_drive_store(),
      get_profile_store: () => blog_helper.get_profile_store()
    })
    store = _store
    swarm = _swarm

    function handle_blog_update () {
      if (current_view) render_view(current_view)
    }

    blog_helper.on_update(handle_blog_update)

    setup_connection_status(swarm)

    await blog_helper.init_blog({ store_instance: store, username })
    drive = blog_helper.get_drive()

    // Set ready immediately after blog init, don't wait for first update
    is_ready = true
    is_joining = false

    show_view('news')
  } catch (err) {
    document.querySelector('.connection-status').textContent = `🔴 Error: ${err.message}`
  }
}

// Wait for blog username to be available using events
async function wait_for_blog_username () {
  console.log('Waiting for blog username...')

  // First check if username is already available
  const existing_username = await blog_helper.get_blog_username()
  if (existing_username) {
    console.log('Username already available:', existing_username)
    return existing_username
  }

  // Wait for update event that indicates blog data is available
  return new Promise((resolve) => {
    const handler = async () => {
      const username = await blog_helper.get_blog_username()
      if (username) {
        resolve(username)
      }
    }

    blog_helper.on_update(handler)
  })
}

// Join existing network with invite
async function join_network () {
  const invite_code = document.querySelector('.invite-code-input').value.trim()
  if (!invite_code) return alert('Please enter an invite code.')

  document.querySelector('.login').style.display = 'none'
  document.querySelector('.main').style.display = 'block'

  try {
    document.querySelector('.connection-status').textContent = 'Connecting...'
    is_joining = true

    const { store: _store, swarm: _swarm } = await start_browser_peer({
      name: 'joining-user',
      invite_code: invite_code,
      get_blog_key: () => blog_helper.get_autobase_key(),
      get_blog_autobase: () => blog_helper.get_autobase(),
      get_metadata_store: () => blog_helper.get_metadata_store(),
      get_drive_store: () => blog_helper.get_drive_store(),
      get_profile_store: () => blog_helper.get_profile_store()
    })
    store = _store
    swarm = _swarm

    blog_helper.on_update(() => { if (current_view) render_view(current_view) })
    setup_connection_status(swarm)

    // Wait for blog to be initialized and get username from paired device
    const paired_username = await wait_for_blog_username()
    if (paired_username) {
      username = paired_username
      localStorage.setItem('username', username)
      console.log('Username updated to:', username)
      // Update the connection status to show the correct username
      setup_connection_status(swarm)
    }

    is_ready = true
    is_joining = false
    show_view('news')
  } catch (err) {
    document.querySelector('.connection-status').textContent = `🔴 Error: ${err.message}`
    console.error('Join error:', err)
  }
}

// Load from mnemonic
function load_from_mnemonic () {
  const mnemonic = document.querySelector('.mnemonic-input').value.trim()
  if (!mnemonic) return alert('Please enter a mnemonic phrase.')

  console.log('This still needs implementation')
  console.log('Mnemonic entered:', mnemonic)
}

// View system
function show_view (name) {
  current_view = name
  function handle_nav_button_toggle (btn) {
    btn.classList.toggle('active', btn.dataset.view === name)
  }
  document.querySelectorAll('nav button').forEach(handle_nav_button_toggle)
  render_view(name)
}

// Render function
async function render_view (view, ...args) {
  const view_el = document.querySelector('.view')

  if (is_joining) {
    view_el.innerHTML = '<p>Joining, please wait...</p>'
    return
  }

  if (!is_ready && view !== 'explore') return // Explore works without blog init
  view_el.innerHTML = 'Loading...'

  const renderers = {
    news: async () => {
      const peer_blogs = await blog_helper.get_peer_blogs()

      if (peer_blogs.size === 0) {
        view_el.innerHTML = '<p>No posts from subscribed peers yet. Go to the explore tab to find peers.</p>'
        return
      }

      let html = ''
      for (const [key, blog] of peer_blogs) {
        const profile = await blog_helper.get_profile(key)
        const display_name = profile ? profile.name : blog.username
        
        html += `<h2>${escape_html(display_name)}'s Blog (${escape_html(blog.title)})</h2>`
        if (blog.posts.length === 0) {
          html += '<p>No posts from this peer yet.</p>'
        } else {
          for (const post of blog.posts) {
            html += `
              <div class="post">
                <h3>${escape_html(post.title)}</h3>
                <p>${escape_html(post.content)}</p>
                <span>Posted by ${escape_html(display_name)} on: ${new Date(post.created).toLocaleString()}</span>
              </div>
            `
          }
        }
      }
      view_el.innerHTML = html
    },

    blog: async () => {
      const profile = await blog_helper.get_profile()
      const display_name = profile ? profile.name : username
      
      view_el.innerHTML = `<h3>${escape_html(display_name)}'s Blog</h3>`
      const posts = await blog_helper.get_my_posts()
      if (posts.length === 0) return view_el.innerHTML += '<p>You have not written any posts yet. Go to New Post to create one.</p>'
      for (const post of posts) {
        view_el.innerHTML += `
          <div class="post">
            <h4>${escape_html(post.title)}</h4>
            <p>${escape_html(post.content)}</p>
            <small>Posted on: ${format_date(post.created)}</small>
          </div>
        `
      }
    },

    explore: async () => {
      view_el.innerHTML = '<h3>Explore Peers</h3>'
      const discovered = blog_helper.get_discovered_blogs()
      const subscribed_blogs = await blog_helper.get_peer_blogs()
      const subscribed_keys = Array.from(subscribed_blogs.keys())
      const my_key = blog_helper.get_autobase_key()

      // Show discovered peers (not yet subscribed)
      if (discovered.size > 0) {
        view_el.innerHTML += '<h4>Discovered Peers</h4>'
        for (const [key, peer] of discovered) {
          if (key === my_key) continue // Skip own blog
          const profile = await blog_helper.get_profile(key)
          const display_name = profile ? profile.name : peer.username
          
          view_el.innerHTML += `
            <div>
              <h5>${escape_html(display_name)}'s Blog (${escape_html(peer.title)})</h5>
              <p><code>${key}</code></p>
              <button class="subscribe-btn" data-key="${key}">Subscribe</button>
            </div>
            <hr>
          `
        }
      }

      // Show subscribed peers
      if (subscribed_blogs.size > 0) {
        view_el.innerHTML += '<h4>Subscribed Peers</h4>'
        for (const [key, blog] of subscribed_blogs) {
          if (key === my_key) continue // Skip own blog
          const profile = await blog_helper.get_profile(key)
          const display_name = profile ? profile.name : blog.username
          
          view_el.innerHTML += `
            <div>
              <h5>${escape_html(display_name)}'s Blog (${escape_html(blog.title)})</h5>
              <p><code>${key}</code></p>
              <button class="unsubscribe-btn" data-key="${key}">Unsubscribe</button>
            </div>
            <hr>
          `
        }
      }

      // Show message if no peers at all
      if (discovered.size === 0 && subscribed_blogs.size === 0) {
        view_el.innerHTML += '<p>No peers found yet. Wait for peers to be discovered.</p>'
      }
    },

    post: () => {
      view_el.innerHTML = `
        <h3>Create New Post</h3>
        <input class="post-title" placeholder="Title">
        <textarea class="post-content" placeholder="Content"></textarea>
        <button class="publish-btn">Publish</button>
      `
      const publish_btn = view_el.querySelector('.publish-btn')
      publish_btn.addEventListener('click', handle_publish)
    },

    config: () => {
      const my_key = blog_helper.get_autobase_key()
      view_el.innerHTML = `
        <h3>Configuration</h3>
        <div>
          <h4>My Blog Address</h4>
          <p>Share this address with others so they can subscribe to your blog.</p>
          <input class="blog-address-input" readonly value="${my_key}" size="70">
          <button class="copy-address-btn">Copy</button>
        </div>
        <hr>
        <div>
          <h4>Create Invite</h4>
          <p>Create an invite to share write access to your blog.</p>
          <button class="create-invite-btn">Create Invite</button>
          <div class="invite-result" style="margin-top: 10px;"></div>
        </div>
        <hr>
        <div>
          <h4>Manual Subscribe</h4>
          <p>Subscribe to a blog by its address.</p>
          <input class="manual-key-input" placeholder="Blog Address" size="70">
          <button class="manual-subscribe-btn">Subscribe</button>
        </div>
        <hr>
        <div>
          <h4>Reset</h4>
          <button class="reset-data-btn">Delete All My Data</button>
        </div>
      `
    }
  }

  if (renderers[view]) await renderers[view]()
  else view_el.innerHTML = `View '${view}' not found.`
}

// Action handlers
async function handle_publish () {
  const title = document.querySelector('.post-title').value
  const content = document.querySelector('.post-content').value
  if (!title || !content) return alert('Title and content are required.')

  try {
    await blog_helper.create_post(title, content)
    show_view('blog')
  } catch (err) {
    alert('Publish error: ' + err.message)
  }
}

async function handle_subscribe (key) {
  await blog_helper.subscribe(key)
  show_view('explore')
}

async function handle_unsubscribe (key) {
  await blog_helper.unsubscribe(key)
  show_view('explore')
}

async function handle_create_invite () {
  try {
    const invite_code = await blog_helper.create_invite(swarm)
    const invite_result = document.querySelector('.invite-result')

    invite_result.innerHTML = `
      <p>Invite created! Share this code:</p>
      <input class="invite-code-display" readonly value="${invite_code}" style="width: 400px;">
      <button class="copy-invite-btn">Copy</button>
      <p><small>Keep this page open while others join.</small></p>
    `

    // Add event listener for the copy button
    const copy_btn = invite_result.querySelector('.copy-invite-btn')
    copy_btn.addEventListener('click', () => {
      navigator.clipboard.writeText(invite_code)
    })
  } catch (err) {
    alert('Error creating invite: ' + err.message)
  }
}

async function handle_manual_subscribe () {
  const key = document.querySelector('.manual-key-input').value.trim()
  if (!key) return alert('Please enter a blog address.')

  const my_key = blog_helper.get_autobase_key()
  if (key === my_key) return alert("You can't subscribe to yourself.") // Prevent self-subscription

  const success = await blog_helper.subscribe(key)
  if (success) {
    alert('Successfully subscribed!')
    show_view('news')
  } else {
    alert('Failed to subscribe. The key may be invalid or the peer is offline.')
  }
}

// Reset all data function
async function handle_reset_all_data () {
  if (!confirm('Delete all data?')) return

  try {
    localStorage.clear()

    const databases = await window.indexedDB.databases()
    for (const db of databases) {
      if (db.name && (db.name.includes('blogs-') || db.name.includes('random-access-web'))) {
        window.indexedDB.deleteDatabase(db.name) // Clear app storage
      }
    }

    if (window.requestFileSystem || window.webkitRequestFileSystem) {
      const requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem
      function handle_file_system_cleanup (resolve, reject) {
        function handle_file_system_success (fs) {
          function handle_entries_read (entries) {
            if (!entries.length) return resolve()
            let completed = 0

            function handle_entry_removal () {
              completed++
              if (completed === entries.length) resolve()
            }

            function handle_entry_cleanup (entry) {
              entry.isFile ? entry.remove(handle_entry_removal, handle_entry_removal) : entry.removeRecursively(handle_entry_removal, handle_entry_removal)
            }

            entries.forEach(handle_entry_cleanup)
          }

          fs.root.createReader().readEntries(handle_entries_read, reject)
        }

        requestFileSystem(window.PERSISTENT, 1024 * 1024, handle_file_system_success, reject)
      }

      await new Promise(handle_file_system_cleanup)
    }

    if (store) {
      try { await store.close() } catch (err) {}
    }

    function handle_page_reload () {
      window.location.reload()
    }

    setTimeout(handle_page_reload, 1000)
  } catch (err) {
    alert('Reset error: ' + err.message)
  }
}

// Event listeners
function handle_make_form_display () {
  document.querySelector('.initial-buttons').style.display = 'none'
  document.querySelector('.make-form').style.display = 'block'
}

function handle_join_form_display () {
  document.querySelector('.initial-buttons').style.display = 'none'
  document.querySelector('.join-form').style.display = 'block'
}

function handle_load_form_display () {
  document.querySelector('.initial-buttons').style.display = 'none'
  document.querySelector('.load-form').style.display = 'block'
}

function handle_nav_button_click (btn) {
  return () => show_view(btn.dataset.view)
}

function setup_nav_button_listeners (btn) {
  btn.addEventListener('click', handle_nav_button_click(btn))
}

// Event delegation for dynamic content
function handle_document_click (event) {
  const target = event.target

  // Handle subscribe buttons
  if (target.classList.contains('subscribe-btn')) {
    const key = target.dataset.key
    handle_subscribe(key)
  }

  // Handle unsubscribe buttons
  if (target.classList.contains('unsubscribe-btn')) {
    const key = target.dataset.key
    handle_unsubscribe(key)
  }

  // Handle back buttons
  if (target.classList.contains('back-btn')) {
    document.querySelectorAll('.make-form, .join-form, .load-form').forEach(form => form.style.display = 'none')
    document.querySelector('.initial-buttons').style.display = 'block'
  }

  // Handle config buttons
  if (target.classList.contains('copy-address-btn')) {
    const address_input = document.querySelector('.blog-address-input')
    navigator.clipboard.writeText(address_input.value)
  }

  if (target.classList.contains('create-invite-btn')) {
    handle_create_invite()
  }

  if (target.classList.contains('manual-subscribe-btn')) {
    handle_manual_subscribe()
  }

  if (target.classList.contains('reset-data-btn')) {
    handle_reset_all_data()
  }
}

// Setup event listeners
document.querySelector('.make-btn').addEventListener('click', handle_make_form_display)
document.querySelector('.join-btn').addEventListener('click', handle_join_form_display)
document.querySelector('.load-btn').addEventListener('click', handle_load_form_display)
document.querySelector('.make-network-btn').addEventListener('click', make_network)
document.querySelector('.join-with-invite-btn').addEventListener('click', join_network)
document.querySelector('.load-mnemonic-btn').addEventListener('click', load_from_mnemonic)
document.querySelectorAll('nav button').forEach(setup_nav_button_listeners)
document.addEventListener('click', handle_document_click)

// auto-join if we have a username
if (username) make_network()

},{"../src/node_modules/helpers/blog-helpers":604,"../src/node_modules/web-peer":610}]},{},[611]);
